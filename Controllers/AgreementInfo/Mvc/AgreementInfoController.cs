using RMS.DBProcess;
using RMS.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Web.Helpers;
using System.Web.Mvc;
using System.Web.UI.WebControls;
using static RMS.DBProcess.ViewPath;

namespace RMS.Controllers.AgreementInfo.Mvc
{
    public class AgreementInfoController : Controller
    {
        private readonly RMSDBContext db = new RMSDBContext();
        private readonly HomePath HomePath = new HomePath();
        private readonly UriLocations UriLocations = new UriLocations();
        private static string AlertMsg = null;

        [HttpGet]
        public ActionResult PremiseTypeIndex()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string UserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == UserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/PremiseTypeIndex";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 92 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==
                    List<RMS.Models.PremiseTypeInfoDTO> lst = new List<RMS.Models.PremiseTypeInfoDTO>();
                    var query = from PT in db.PremiseTypeInfos
                                join U in db.UserInfos on PT.UserSLNo equals U.UserSLNo
                                join S in db.StatusInfos on PT.Status equals S.StatusValue
                                where PT.IsDeleted == false
                                orderby PT.PremiseTypeSLNo descending
                                select new
                                {
                                    PT.PremiseTypeSLNo,
                                    PT.PremiseTypeCode,
                                    PT.PremiseType,
                                    PT.EditBy,
                                    PT.EditDate,
                                    PT.UserSLNo,
                                    U.UserID,
                                    PT.EntryDate,
                                    PT.Status,
                                    S.StatusName,
                                };
                    lst = query.AsEnumerable().Select(x => new RMS.Models.PremiseTypeInfoDTO
                    {
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseTypeCode = x.PremiseTypeCode,
                        PremiseType = x.PremiseType,
                        EditBy = x.EditBy,
                        EditDate = x.EditDate,
                        UserSLNo = x.UserSLNo,
                        UserID = x.UserID,
                        EntryDate = x.EntryDate,
                        Status = x.Status,
                        StatusName = x.StatusName,
                    }).ToList();
                    ViewBag.AlertMsg = AlertMsg;
                    AlertMsg = null;
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.PremiseTypeIndex, lst);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult LookupIndex()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string UserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == UserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/LookupIndex";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 93 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==
                    List<RMS.Models.LookupDTO> lst = new List<RMS.Models.LookupDTO>();
                    var query = from L in db.Lookups
                                join U in db.UserInfos on L.UserSLNo equals U.UserSLNo
                                join S in db.StatusInfos on L.Status equals S.StatusValue
                                where L.IsDeleted == false
                                orderby L.LookupSLNo descending
                                select new
                                {
                                    L.LookupSLNo,
                                    L.GroupName,
                                    L.Code,
                                    L.Description,
                                    L.ParentCode,
                                    L.EditBy,
                                    L.EditDate,
                                    L.UserSLNo,
                                    U.UserID,
                                    L.EntryDate,
                                    L.Status,
                                    S.StatusName,
                                };
                    lst = query.AsEnumerable().Select(x => new RMS.Models.LookupDTO
                    {
                        LookupSLNo = x.LookupSLNo,
                        GroupName = x.GroupName,
                        Code = x.Code,
                        Description = x.Description,
                        ParentCode = x.ParentCode,
                        EditBy = x.EditBy,
                        EditDate = x.EditDate,
                        UserSLNo = x.UserSLNo,
                        UserID = x.UserID,
                        EntryDate = x.EntryDate,
                        Status = x.Status,
                        StatusName = x.StatusName,
                    }).ToList();
                    ViewBag.AlertMsg = AlertMsg;
                    AlertMsg = null;
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.LookupIndex, lst);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult PremiseTypeCreate()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.URLPath = "AgreementInfo/PremiseTypeIndex";
                    RMS.Models.PremiseTypeInfoDTO DTO = new RMS.Models.PremiseTypeInfoDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.PremiseTypeCreate, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult LookupCreate()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.URLPath = "AgreementInfo/LookupIndex";
                    //==Lookup
                    IList<SelectListItem> LookupList = new List<SelectListItem>();
                    LookupList.Add(new SelectListItem { Text = "Cost Center", Value = "Cost Center" });
                    LookupList.Add(new SelectListItem { Text = "SOL", Value = "SOL" });
                    LookupList.Add(new SelectListItem { Text = "Bank", Value = "Bank" });
                    LookupList.Add(new SelectListItem { Text = "Regional Office", Value = "Regional Office" });
                    LookupList.Add(new SelectListItem { Text = "Division", Value = "Division" });
                    LookupList.Add(new SelectListItem { Text = "District", Value = "District" });
                    LookupList.Add(new SelectListItem { Text = "Upazila", Value = "Upazila" });
                    LookupList.Add(new SelectListItem { Text = "Thana", Value = "Thana" });
                    LookupList.Add(new SelectListItem { Text = "Premises Type for Accounts", Value = "Premises Type for Accounts" });
                    LookupList.Add(new SelectListItem { Text = "Sub Premises Type", Value = "Sub Premises Type" });
                    LookupList.Add(new SelectListItem { Text = "Payment Method", Value = "Payment Method" });
                    SelectList Lookup = new SelectList(LookupList, "Text", "Value");
                    ViewBag.LookupList = Lookup;
                    RMS.Models.LookupDTO DTO = new RMS.Models.LookupDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.LookupCreate, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult CheckPremiseTypeExist(string CheckFor, int OldPremiseTypeCode, int NewPremiseTypeCode, string OldPremiseType, string NewPremiseType)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    if (CheckFor == "Create")
                    {
                        if (db.PremiseTypeInfos.Any(x => x.PremiseTypeCode == NewPremiseTypeCode) == true)
                        {
                            return Json(new { PremiseTypeCodeExist = true, CheckType = "Exist" }, JsonRequestBehavior.AllowGet);
                        }
                        else if (db.PremiseTypeInfos.Any(x => x.PremiseType == NewPremiseType) == true)
                        {
                            return Json(new { PremiseTypeExist = true, CheckType = "Exist" }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        if (OldPremiseTypeCode != NewPremiseTypeCode)
                        {
                            if (db.PremiseTypeInfos.Any(x => x.PremiseTypeCode == NewPremiseTypeCode) == true)
                            {
                                return Json(new { PremiseTypeCodeExist = true, CheckType = "Exist" }, JsonRequestBehavior.AllowGet);
                            }
                        }
                        else if (OldPremiseType != NewPremiseType)
                        {
                            if (db.PremiseTypeInfos.Any(x => x.PremiseType == NewPremiseType) == true)
                            {
                                return Json(new { PremiseTypeExist = true, CheckType = "Exist" }, JsonRequestBehavior.AllowGet);
                            }
                        }
                    }
                    return Json(new { PremiseTypeExist = false, CheckType = "NotExist" }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    return Json(new { PremiseTypeExist = true, CheckType = "Error", CheckInfo = Ex.Message }, JsonRequestBehavior.AllowGet);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult PremiseTypeCreate(RMS.Models.PremiseTypeInfoDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    RMS.Models.PremiseTypeInfo PT = new RMS.Models.PremiseTypeInfo();
                    DTOBasic dtoBasic = new DTOBasic();
                    //==Save to Premise Type table
                    PT.PremiseTypeCode = DTO.PremiseTypeCode;
                    PT.PremiseType = DTO.PremiseType;
                    PT.Status = dtoBasic.active;
                    PT.UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    PT.EntryDate = DateTime.Now;
                    PT.IsDeleted = false;
                    db.PremiseTypeInfos.Add(PT);
                    db.SaveChanges();
                    AlertMsg = "The premise type " + PT.PremiseType + " has been created.";
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult LookupCreate(RMS.Models.LookupDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    RMS.Models.Lookup L = new RMS.Models.Lookup();
                    DTOBasic dtoBasic = new DTOBasic();
                    //==Save to Lookup table
                    L.GroupName = DTO.GroupName;
                    L.Code = DTO.Code;
                    L.Description = DTO.Description;
                    L.ParentCode = DTO.ParentCode;
                    L.Status = dtoBasic.active;
                    L.UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    L.EntryDate = DateTime.Now;
                    L.IsDeleted = false;
                    db.Lookups.Add(L);
                    db.SaveChanges();
                    AlertMsg = "Lookup " + L.Description + " has been created.";
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult GetModifiedAdvance(int xAgreementSLNo, string ModAgreementStartDate)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    db.Configuration.ProxyCreationEnabled = false;
                    DateTime ModStartDate = DateTime.ParseExact(ModAgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    var CodeInfo = db.AgreementInfos.Where(x => x.AgreementSLNo == xAgreementSLNo).Select(x => new { x.AgreementStartDate, x.AdvanceAmount }).SingleOrDefault();
                    int GappingMonths = (ModStartDate.Year - CodeInfo.AgreementStartDate.Year) * 12 + ModStartDate.Month - CodeInfo.AgreementStartDate.Month;
                    double TotalAdvanceAdjustmentAmount = db.ContractSchedules.Where(x => x.AgreementSLNo == xAgreementSLNo && x.IsPJPosted == true && x.MonthNo <= GappingMonths).Sum(x => (double?)x.AdvanceAdjustmentAmount) ?? 0;
                    double ModAdvanceAmount = CodeInfo.AdvanceAmount - TotalAdvanceAdjustmentAmount;
                    return Json(ModAdvanceAmount, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult ListOfJournals()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/ListOfJournals";
                    IList<RMS.Models.RentAPJournalInfoDTO> lstjs = new List<RMS.Models.RentAPJournalInfoDTO>();
                    var query = from ji in db.RentAPJournalInfos
                                join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                orderby ji.PostingID ascending
                                select new
                                {
                                    ji.PostingID,
                                    ji.PostingDate,
                                    AI.AgreementCode,
                                    AI.AgreementName,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    ji.Year,
                                    ji.Month,
                                    U.UserID,
                                };
                    lstjs = query.AsEnumerable().Select(x => new RMS.Models.RentAPJournalInfoDTO
                    {
                        PostingID = x.PostingID,
                        PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                        AgreementCode = x.AgreementCode,
                        AgreementName = x.AgreementName,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        Year = x.Year,
                        Month = x.Month,
                        UserID = x.UserID,
                    }).ToList();
                    lstjs = lstjs.GroupBy(x => x.PostingID).Select(x => x.First()).Distinct().ToList();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentAPJournalReport, lstjs);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RentAPPostLog()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentAPPostLog";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 54 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    IList<RMS.Models.RentAPExecuteLogDTO> lstLog = new List<RMS.Models.RentAPExecuteLogDTO>();
                    var query = from RPL in db.RentAPExecuteLogs
                                where RPL.LogStatus == "Created"
                                orderby RPL.LogID ascending
                                select new
                                {
                                    RPL.LogID,
                                    RPL.LogName,
                                    RPL.LogDate,
                                    RPL.Year,
                                    RPL.Month,
                                    RPL.EntryBy,
                                    RPL.EntryDate,
                                    RPL.LogYear,
                                    RPL.LogMonth,
                                };
                    lstLog = query.AsEnumerable().Select(x => new RMS.Models.RentAPExecuteLogDTO
                    {
                        LogID = x.LogID,
                        LogName = x.LogName,
                        LogDate = x.LogDate.ToString("dd/MM/yyyy"),
                        Year = x.Year,
                        Month = x.Month,
                        EntryBy = x.EntryBy,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        LogYear = x.LogYear,
                        LogMonth = x.LogMonth,
                    }).ToList();
                    lstLog = lstLog.GroupBy(x => x.LogID).Select(x => x.First()).Distinct().ToList();
                    int row = 0;
                    foreach (RMS.Models.RentAPExecuteLogDTO item in lstLog)
                    {
                        item.RowNumber = row++;
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentAPPostLog, lstLog);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult RentAPPostLog(List<int> LogIDCheckList)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    int UserSLNo = db.UserInfos.Where(x => x.UserID == LoginUserID).Select(x => x.UserSLNo).SingleOrDefault();
                    DebitCredit DebitCredit = new DebitCredit();
                    DTOBasic dtoBasic = new DTOBasic();
                    List<RMS.Models.CostCenterSchedule> lstCCSchedule = new List<RMS.Models.CostCenterSchedule>();
                    List<RMS.Models.LandlordSchedule> lstLandlordSchedule = new List<RMS.Models.LandlordSchedule>();
                    RMS.Models.RentAPJournalInfo ji = new RMS.Models.RentAPJournalInfo();
                    //==All Log Loop - separate posting id for each log
                    string PostingID;
                    double Max;
                    foreach (int LogID in LogIDCheckList)
                    {
                        //==Delete PreviewRentAPJournalInfo
                        db.PreviewRentAPJournalInfos.RemoveRange(db.PreviewRentAPJournalInfos.Where(x => x.PostingID == LogID.ToString()));
                        db.SaveChanges();
                        //==Log wise Journal Posting ID
                        Max = Convert.ToDouble(db.RentAPJournalInfos.Max(x => x.PostingID));
                        if (Max == 0)
                        {
                            PostingID = "30001";
                        }
                        else
                        {
                            PostingID = (Max + 1).ToString();
                        }
                        //==Update RentAPExecuteLog table LogID wise LogStatus Created to Posted
                        var lstRPLLog = db.RentAPExecuteLogs.Where(x => x.LogID == LogID).ToList();
                        lstRPLLog.ForEach(x => { x.LogStatus = "Posted"; x.ExecuteDate = DateTime.Now; x.ExecuteBy = LoginUserID; });
                        db.SaveChanges();
                        //==Each log details
                        foreach (var item in lstRPLLog)
                        {
                            #region "Update Post status"
                            //==Update IsLog to Posted ContractSchedule table AgreementSLNo wise
                            var ContractSchedule = db.ContractSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo &&
                                                    x.Year == item.Year && x.Month == item.Month && x.IsLog == true).SingleOrDefault();
                            ContractSchedule.IsPosted = true;
                            ContractSchedule.PostingID = PostingID;
                            ContractSchedule.PostingDate = DateTime.Now;
                            ContractSchedule.PostingUserSLNo = UserSLNo;
                            db.Entry(ContractSchedule).State = EntityState.Modified;
                            db.SaveChanges();
                            //==Update IsLog to Posted LandlordSchedule table AgreementSLNo wise
                            List<RMS.Models.LandlordSchedule> lstLSchedule = db.LandlordSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo &&
                                                    x.Year == item.Year && x.Month == item.Month).ToList();
                            lstLSchedule.ForEach(x =>
                            {
                                x.IsPosted = true;
                                x.PostingID = PostingID;
                                x.PostingDate = DateTime.Now;
                                x.PostingUserSLNo = UserSLNo;
                            });
                            db.SaveChanges();
                            //==Update IsLog to Posted CCSchedule table AgreementSLNo wise
                            List<RMS.Models.CostCenterSchedule> lstCSchedule = db.CostCenterSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo &&
                                                    x.Year == item.Year && x.Month == item.Month).ToList();
                            lstCSchedule.ForEach(x =>
                            {
                                x.IsPosted = true;
                                x.PostingID = PostingID;
                                x.PostingDate = DateTime.Now;
                                x.PostingUserSLNo = UserSLNo;
                            });
                            db.SaveChanges();
                            #endregion
                            //==RentAPJournalInfo for Cost Center
                            var AgreementControlData = db.AgreementInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo).Select(x => new { x.RentGLCode, x.TaxGLCode, x.VATGLCode, x.AdvanceAdjustmentGLCode, x.CalculationMethod }).SingleOrDefault();
                            lstCCSchedule = db.CostCenterSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == item.Year && x.Month == item.Month).ToList();
                            foreach (RMS.Models.CostCenterSchedule CCS in lstCCSchedule.OrderBy(x => x.AgreementSLNo))
                            {
                                //==RentAPJournalInfo Debit  Starts
                                var CCInfo = db.CostCenterInfos.Where(x => x.CCSLNo == CCS.CCSLNo).Select(x => new { x.CCCode, x.CCName, x.CCShareAllotment }).SingleOrDefault();
                                //==Debit Journal Cost Center Rent
                                ji = new RMS.Models.RentAPJournalInfo();
                                ji.PostingID = PostingID;
                                ji.PostingDate = DateTime.Now;
                                ji.AgreementSLNo = CCS.AgreementSLNo;
                                ji.Year = item.Year;
                                ji.Month = item.Month;
                                ji.GLCode = AgreementControlData.RentGLCode;
                                ji.GLName = "Rent GL";
                                ji.DrCrID = DebitCredit.Debit;
                                ji.Amount = (CCS.TotalRentAmount * CCInfo.CCShareAllotment) / 100;
                                ji.CCSLNo = CCS.CCSLNo;
                                ji.LandlordSLNo = 0;
                                ji.Remarks = "Rent " + item.Month + ", " + item.Year;
                                ji.UserSLNo = UserSLNo;
                                ji.LogYear = item.LogYear;
                                ji.LogMonth = item.LogMonth;
                                db.RentAPJournalInfos.Add(ji);
                                db.SaveChanges();
                            }
                            //==RentAPJournalInfo for Landlord
                            lstLandlordSchedule = db.LandlordSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == item.Year && x.Month == item.Month).ToList();
                            foreach (RMS.Models.LandlordSchedule LS in lstLandlordSchedule)
                            {
                                var LandlordInfo = db.LandlordInfos.Where(x => x.LandlordSLNo == LS.LandlordSLNo).Select(x => new { x.VendorCode, x.LandlordName }).SingleOrDefault();
                                //==Credit Journal - Tax
                                if (LS.TaxAmount > 0)
                                {
                                    ji = new RMS.Models.RentAPJournalInfo();
                                    ji.PostingID = PostingID;
                                    ji.PostingDate = DateTime.Now;
                                    ji.AgreementSLNo = LS.AgreementSLNo;
                                    ji.Year = item.Year;
                                    ji.Month = item.Month;
                                    if (db.AgreementInfos.Any(x => x.AgreementSLNo == LS.AgreementSLNo && x.IsHoldBlockPayment == true) == true)
                                    {
                                        ji.GLCode = db.AgreementInfos.Where(x => x.AgreementSLNo == LS.AgreementSLNo).Select(x => x.ProvisionGLTax).SingleOrDefault();
                                        ji.GLName = "Provision Tax GL";
                                        ji.Remarks = "Tax Provision " + item.Month + ", " + item.Year;
                                    }
                                    else
                                    {
                                        ji.GLCode = AgreementControlData.TaxGLCode;
                                        ji.GLName = "Tax GL";
                                        ji.Remarks = "Tax " + item.Month + ", " + item.Year;
                                    }
                                    ji.DrCrID = DebitCredit.Credit;
                                    ji.Amount = LS.TaxAmount;
                                    ji.CCSLNo = 0;
                                    ji.LandlordSLNo = LS.LandlordSLNo;
                                    ji.UserSLNo = UserSLNo;
                                    ji.LogYear = item.LogYear;
                                    ji.LogMonth = item.LogMonth;
                                    db.RentAPJournalInfos.Add(ji);
                                    db.SaveChanges();
                                }
                                //==Credit Journal - VAT
                                if (LS.VATAmount > 0)
                                {
                                    ji = new RMS.Models.RentAPJournalInfo();
                                    ji.PostingID = PostingID;
                                    ji.PostingDate = DateTime.Now;
                                    ji.AgreementSLNo = LS.AgreementSLNo;
                                    ji.Year = item.Year;
                                    ji.Month = item.Month;
                                    ji.GLCode = AgreementControlData.VATGLCode;
                                    ji.GLName = "VAT GL";
                                    ji.DrCrID = DebitCredit.Credit;
                                    ji.Amount = LS.VATAmount;
                                    ji.CCSLNo = 0;
                                    ji.LandlordSLNo = LS.LandlordSLNo;
                                    ji.Remarks = "VAT " + item.Month + ", " + item.Year;
                                    ji.UserSLNo = UserSLNo;
                                    ji.LogYear = item.LogYear;
                                    ji.LogMonth = item.LogMonth;
                                    db.RentAPJournalInfos.Add(ji);
                                    db.SaveChanges();
                                }
                                //==Credit Journal - Landlord Wise
                                ji = new RMS.Models.RentAPJournalInfo();
                                ji.PostingID = PostingID;
                                ji.PostingDate = DateTime.Now;
                                ji.AgreementSLNo = LS.AgreementSLNo;
                                ji.Year = item.Year;
                                ji.Month = item.Month;
                                if (db.AgreementInfos.Any(x => x.AgreementSLNo == LS.AgreementSLNo && x.IsHoldBlockPayment == true) == true)
                                {
                                    ji.GLCode = db.AgreementInfos.Where(x => x.AgreementSLNo == LS.AgreementSLNo).Select(x => x.ProvisionGLAP).SingleOrDefault();
                                    ji.GLName = "Provision AP GL";
                                    ji.Remarks = "AP Provision " + item.Month + ", " + item.Year;
                                }
                                else
                                {
                                    ji.GLCode = LandlordInfo.VendorCode;
                                    ji.GLName = LandlordInfo.LandlordName;
                                    ji.Remarks = "AP " + item.Month + ", " + item.Year;
                                }
                                ji.DrCrID = DebitCredit.Credit;
                                ji.Amount = (LS.NetRentAmount + LS.AdvanceAdjustmentAmount) - (LS.TaxAmount + LS.VATAmount);
                                ji.CCSLNo = 0;
                                ji.LandlordSLNo = LS.LandlordSLNo;
                                ji.UserSLNo = UserSLNo;
                                ji.LogYear = item.LogYear;
                                ji.LogMonth = item.LogMonth;
                                db.RentAPJournalInfos.Add(ji);
                                db.SaveChanges();
                            }
                            //==xxx
                        }
                    }
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult CheckRentVendorAPPostLog(string PremiseTypeCheckList, string AgreementCheckList, string VendorCheckList, int Year, string Month)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    db.Configuration.ProxyCreationEnabled = false;
                    IList<RMS.Models.RentAPExecuteLogDTO> lstRentExecuteLog = new List<RMS.Models.RentAPExecuteLogDTO>();
                    DTOBasic dtoBasic = new DTOBasic();
                    List<int> PremiseTypeSLNoList;
                    List<int> AgreementSLNoList;
                    if (!string.IsNullOrEmpty(AgreementCheckList))
                    {
                        //AgreementSLNo Wise
                        AgreementSLNoList = new List<int>(Array.ConvertAll(AgreementCheckList.Split(','), Convert.ToInt32));
                        var queryCM = from RL in db.RentAPExecuteLogs
                                      where AgreementSLNoList.Contains(RL.AgreementSLNo) && RL.LogStatus == "Posted" &&
                                                                  RL.LogYear == Year && RL.LogMonth == Month
                                      orderby RL.LogSLNo ascending
                                      select new
                                      {
                                          RL.LogSLNo,
                                      };
                        lstRentExecuteLog = queryCM.AsEnumerable().Select(x => new RMS.Models.RentAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else if (!string.IsNullOrEmpty(PremiseTypeCheckList))
                    {
                        //PremiseTypeSLNo Wise
                        PremiseTypeSLNoList = new List<int>(Array.ConvertAll(PremiseTypeCheckList.Split(','), Convert.ToInt32));
                        var queryCM = from RL in db.RentAPExecuteLogs
                                      where PremiseTypeSLNoList.Contains(RL.PremiseTypeSLNo) && RL.LogStatus == "Posted" &&
                                                                  RL.LogYear == Year && RL.LogMonth == Month
                                      orderby RL.LogSLNo ascending
                                      select new
                                      {
                                          RL.LogSLNo,
                                      };
                        lstRentExecuteLog = queryCM.AsEnumerable().Select(x => new RMS.Models.RentAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else
                    {
                        //All Records
                        var queryCM = from RL in db.RentAPExecuteLogs
                                      where RL.LogStatus == "Posted" && RL.LogYear == Year && RL.LogMonth == Month
                                      orderby RL.LogSLNo ascending
                                      select new
                                      {
                                          RL.LogSLNo,
                                      };
                        lstRentExecuteLog = queryCM.AsEnumerable().Select(x => new RMS.Models.RentAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    bool PostCheck = false;
                    if (lstRentExecuteLog.Count == 0)
                    {
                        PostCheck = true;
                    }
                    return Json(new { CheckStatus = PostCheck }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult CheckRentVendorPJExecuteLog(string PremiseTypeCheckList, string AgreementCheckList, int Year, string Month)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    db.Configuration.ProxyCreationEnabled = false;
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    IList<RMS.Models.RentVendorPJExecuteLogDTO> lstRentPJExecuteLog = new List<RMS.Models.RentVendorPJExecuteLogDTO>();
                    DTOBasic dtoBasic = new DTOBasic();
                    List<int> AgreementSLNoList;
                    List<int> PremiseTypeSLNoList;
                    if (!string.IsNullOrEmpty(AgreementCheckList))
                    {
                        //AgreementSLNo Wise
                        AgreementSLNoList = new List<int>(Array.ConvertAll(AgreementCheckList.Split(','), Convert.ToInt32));
                        var queryCM = from RL in db.RentVendorPJExecuteLogs
                                      where AgreementSLNoList.Contains(RL.AgreementSLNo) && RL.LogStatus == "Created" &&
                                                                  RL.LogYear == Year && RL.LogMonth == Month
                                      orderby RL.LogSLNo ascending
                                      select new
                                      {
                                          RL.LogSLNo,
                                      };
                        lstRentPJExecuteLog = queryCM.AsEnumerable().Select(x => new RMS.Models.RentVendorPJExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else if (!string.IsNullOrEmpty(PremiseTypeCheckList))
                    {
                        //PremiseTypeSLNo Wise
                        PremiseTypeSLNoList = new List<int>(Array.ConvertAll(PremiseTypeCheckList.Split(','), Convert.ToInt32));
                        var queryCM = from RL in db.RentVendorPJExecuteLogs
                                      where PremiseTypeSLNoList.Contains(RL.PremiseTypeSLNo) && RL.LogStatus == "Created" &&
                                                                           RL.LogYear == Year && RL.LogMonth == Month
                                      orderby RL.LogSLNo ascending
                                      select new
                                      {
                                          RL.LogSLNo,
                                      };
                        lstRentPJExecuteLog = queryCM.AsEnumerable().Select(x => new RMS.Models.RentVendorPJExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else
                    {
                        //All Records
                        var queryCM = from RL in db.RentVendorPJExecuteLogs
                                      where RL.LogStatus == "Created" && RL.LogYear == Year && RL.LogMonth == Month
                                      orderby RL.LogSLNo ascending
                                      select new
                                      {
                                          RL.LogSLNo,
                                      };
                        lstRentPJExecuteLog = queryCM.AsEnumerable().Select(x => new RMS.Models.RentVendorPJExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    bool LogCheck = false;
                    if (lstRentPJExecuteLog.Count > 0)
                    {
                        LogCheck = true;
                    }
                    return Json(new { CheckStatus = LogCheck }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RentVendorPJExecuteLog()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentVendorPJExecuteLog";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 71 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;
                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic dtoBasic = new DTOBasic();

                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == dtoBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();

                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate &&
                     x.IsRenewal == false && x.IsModified == false && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();


                    //ViewBag.LandlordList = db.LandlordInfos.Where(x => x.IsHoldBlockPayment == false)
                    //    .Select(x => new { x.LandlordSLNo, x.VendorCode, x.LandlordName })
                    //    //.GroupBy(y => y.VendorCode)
                    //    .GroupBy(y => new { y.LandlordSLNo, y.VendorCode, y.LandlordName })
                    //    .Select(y => new { VendorSLNo = y.FirstOrDefault().LandlordSLNo, VendorCode = y.FirstOrDefault().VendorCode, FullName = y.FirstOrDefault().VendorCode + " - " + y.FirstOrDefault().LandlordName }).OrderBy(x => x.FullName).ToList();


                    RMS.Models.LandlordScheduleDTO DTO = new RMS.Models.LandlordScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentVendorPJExecuteLog, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult RentVendorPJExecuteLog(RMS.Models.LandlordScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    DTOBasic dtoBasic = new DTOBasic();
                    IList<RMS.Models.LandlordScheduleDTO> lst = new List<RMS.Models.LandlordScheduleDTO>();
                    IList<RMS.Models.LandlordScheduleDTO> lstCurrentMonth = new List<RMS.Models.LandlordScheduleDTO>();
                    IList<RMS.Models.LandlordScheduleDTO> lstFollowingMonth = new List<RMS.Models.LandlordScheduleDTO>();
                    int Year = 0;
                    string Month = string.Empty;
                    int SelectedMonthNo = 0;
                    if (DTO.AgreementSLNoCheckList != null)
                    {
                        //AgreementSLNo Wise Current Month
                        var queryCM = from LS in db.LandlordSchedules
                                      join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                      join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                      join LI in db.LandlordInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                      where DTO.AgreementSLNoCheckList.Contains(LS.AgreementSLNo) &&
                                            AI.IsRenewal == false && AI.IsModified == false && LS.IsPosted == true && LS.IsBlock == false && LI.IsOld == false &&
                                            LS.Year == DTO.Year && LS.Month == DTO.Month && LS.IsHoldBlockPayment == false && AI.CalculationMethod == "Current Month"
                                      orderby LS.AgreementSLNo ascending
                                      select new
                                      {
                                          LS.LScheduleSLNo,
                                          LS.AgreementSLNo,
                                          PT.PremiseTypeSLNo,
                                          LI.LandlordSLNo,
                                      };
                        lstCurrentMonth = queryCM.AsEnumerable().Select(x => new RMS.Models.LandlordScheduleDTO
                        {
                            LScheduleSLNo = x.LScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            LandlordSLNo = x.LandlordSLNo,
                            Year = DTO.Year,
                            Month = DTO.Month,
                        }).ToList();
                        foreach (var item in lstCurrentMonth)
                        {
                            lst.Add(item);
                        }
                        //AgreementSLNo Wise Following Month
                        SelectedMonthNo = DateTime.ParseExact(DTO.Month, "MMMM", CultureInfo.InvariantCulture).Month;
                        if (SelectedMonthNo == 1)
                        {
                            Year = DTO.Year - 1;
                            Month = "December";
                        }
                        else
                        {
                            //Get the full month name 
                            Year = DTO.Year;
                            Month = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(SelectedMonthNo - 1);
                        }
                        var queryFM = from LS in db.LandlordSchedules
                                      join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                      join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                      join LI in db.LandlordInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                      where DTO.AgreementSLNoCheckList.Contains(LS.AgreementSLNo) &&
                                            AI.IsRenewal == false && AI.IsModified == false && LS.IsPosted == true && LS.IsBlock == false && LI.IsOld == false &&
                                            LS.Year == Year && LS.Month == Month && LS.IsHoldBlockPayment == false && AI.CalculationMethod == "Following Month"
                                      orderby LS.AgreementSLNo ascending
                                      select new
                                      {
                                          LS.LScheduleSLNo,
                                          LS.AgreementSLNo,
                                          PT.PremiseTypeSLNo,
                                          LI.LandlordSLNo,
                                      };
                        lstFollowingMonth = queryFM.AsEnumerable().Select(x => new RMS.Models.LandlordScheduleDTO
                        {
                            LScheduleSLNo = x.LScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            LandlordSLNo = x.LandlordSLNo,
                            Year = Year,
                            Month = Month,
                        }).ToList();
                        foreach (var item in lstFollowingMonth)
                        {
                            lst.Add(item);
                        }
                        //==xx
                    }
                    else if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        //PremiseType Wise Current Month
                        var queryPremiseTypeCM = from LS in db.LandlordSchedules
                                                 join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                                 join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                 join LI in db.LandlordInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                                 where DTO.PremiseTypeSLNoCheckList.Contains(AI.PremiseTypeSLNo) &&
                                                       AI.IsRenewal == false && AI.IsModified == false && LS.IsPosted == true && LS.IsBlock == false && LI.IsOld == false &&
                                                       LS.Year == DTO.Year && LS.Month == DTO.Month && LS.IsHoldBlockPayment == false && AI.CalculationMethod == "Current Month"
                                                 orderby LS.AgreementSLNo ascending
                                                 select new
                                                 {
                                                     LS.LScheduleSLNo,
                                                     LS.AgreementSLNo,
                                                     PT.PremiseTypeSLNo,
                                                     LI.LandlordSLNo,
                                                 };
                        lstCurrentMonth = queryPremiseTypeCM.AsEnumerable().Select(x => new RMS.Models.LandlordScheduleDTO
                        {
                            LScheduleSLNo = x.LScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            LandlordSLNo = x.LandlordSLNo,
                            Year = DTO.Year,
                            Month = DTO.Month,
                        }).ToList();
                        foreach (var item in lstCurrentMonth)
                        {
                            lst.Add(item);
                        }
                        //==Premise Type Wise Following Month
                        SelectedMonthNo = DateTime.ParseExact(DTO.Month, "MMMM", CultureInfo.InvariantCulture).Month;
                        if (SelectedMonthNo == 1)
                        {
                            Year = DTO.Year - 1;
                            Month = "December";
                        }
                        else
                        {
                            //Get the full month name 
                            Year = DTO.Year;
                            Month = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(SelectedMonthNo - 1);
                        }
                        var queryPremiseTypeFM = from LS in db.LandlordSchedules
                                                 join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                                 join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                 join LI in db.LandlordInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                                 where DTO.PremiseTypeSLNoCheckList.Contains(AI.PremiseTypeSLNo) &&
                                                       AI.IsRenewal == false && AI.IsModified == false && LS.IsPosted == true && LS.IsBlock == false && LI.IsOld == false &&
                                                       LS.Year == Year && LS.Month == Month && LS.IsHoldBlockPayment == false && AI.CalculationMethod == "Following Month"
                                                 orderby LS.AgreementSLNo ascending
                                                 select new
                                                 {
                                                     LS.LScheduleSLNo,
                                                     LS.AgreementSLNo,
                                                     PT.PremiseTypeSLNo,
                                                     LI.LandlordSLNo,
                                                 };
                        lstFollowingMonth = queryPremiseTypeFM.AsEnumerable().Select(x => new RMS.Models.LandlordScheduleDTO
                        {
                            LScheduleSLNo = x.LScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            LandlordSLNo = x.LandlordSLNo,
                            Year = Year,
                            Month = Month,
                        }).ToList();
                        foreach (var item in lstFollowingMonth)
                        {
                            lst.Add(item);
                        }
                        //==xx
                    }
                    else
                    {
                        //All Agreements Current Month
                        var queryCM = from LS in db.LandlordSchedules
                                      join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                      join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                      join LI in db.LandlordInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                      where AI.IsRenewal == false && AI.IsModified == false && LS.IsPosted == true && LS.IsBlock == false && LI.IsOld == false &&
                                      LS.Year == DTO.Year && LS.Month == DTO.Month && LS.IsHoldBlockPayment == false && AI.CalculationMethod == "Current Month"
                                      orderby LS.AgreementSLNo ascending
                                      select new
                                      {
                                          LS.LScheduleSLNo,
                                          LS.AgreementSLNo,
                                          PT.PremiseTypeSLNo,
                                          LI.LandlordSLNo,
                                      };
                        lstCurrentMonth = queryCM.AsEnumerable().Select(x => new RMS.Models.LandlordScheduleDTO
                        {
                            LScheduleSLNo = x.LScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            LandlordSLNo = x.LandlordSLNo,
                            Year = DTO.Year,
                            Month = DTO.Month,
                        }).ToList();
                        foreach (var item in lstCurrentMonth)
                        {
                            lst.Add(item);
                        }
                        //All Agreements Following Month
                        SelectedMonthNo = DateTime.ParseExact(DTO.Month, "MMMM", CultureInfo.InvariantCulture).Month;
                        if (SelectedMonthNo == 1)
                        {
                            Year = DTO.Year - 1;
                            Month = "December";
                        }
                        else
                        {
                            //Get the full month name 
                            Year = DTO.Year;
                            Month = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(SelectedMonthNo - 1);
                        }
                        var queryFM = from LS in db.LandlordSchedules
                                      join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                      join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                      join LI in db.LandlordInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                      where AI.IsRenewal == false && AI.IsModified == false && LS.IsPosted == true && LS.IsBlock == false && LI.IsOld == false &&
                                      LS.Year == Year && LS.Month == Month && LS.IsHoldBlockPayment == false && AI.CalculationMethod == "Following Month"
                                      orderby LS.AgreementSLNo ascending
                                      select new
                                      {
                                          LS.LScheduleSLNo,
                                          LS.AgreementSLNo,
                                          PT.PremiseTypeSLNo,
                                          LI.LandlordSLNo,
                                      };
                        lstFollowingMonth = queryFM.AsEnumerable().Select(x => new RMS.Models.LandlordScheduleDTO
                        {
                            LScheduleSLNo = x.LScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            LandlordSLNo = x.LandlordSLNo,
                            Year = Year,
                            Month = Month,
                        }).ToList();
                        foreach (var item in lstFollowingMonth)
                        {
                            lst.Add(item);
                        }
                        //==xx
                    }
                    if (lst.Count == 0)
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                    int Max = db.RentVendorPJExecuteLogs.Max(x => (int?)x.LogID) ?? 0;
                    if (Max == 0)
                    {
                        Max = 60001;
                    }
                    else
                    {
                        Max = Max + 1;
                    }
                    RMS.Models.RentVendorPJExecuteLog RLog = new RMS.Models.RentVendorPJExecuteLog();
                    DebitCredit DebitCredit = new DebitCredit();
                    RMS.Models.PreviewRentVendorPJInfo ji = new RMS.Models.PreviewRentVendorPJInfo();
                    RMS.Models.PreviewRentGovtPJInfo jiGovt = new RMS.Models.PreviewRentGovtPJInfo();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    foreach (RMS.Models.LandlordScheduleDTO item in lst.GroupBy(x => new { x.AgreementSLNo, x.LandlordSLNo }).Select(x => x.First()).Distinct().OrderBy(x => x.AgreementSLNo))
                    {
                        //==RentVendorPJExecuteLog - Log Register
                        RLog = new RMS.Models.RentVendorPJExecuteLog();
                        RLog.LogID = Max;
                        RLog.LogName = DTO.LogName;
                        RLog.LogDate = System.DateTime.Now;
                        RLog.PremiseTypeSLNo = item.PremiseTypeSLNo;
                        RLog.AgreementSLNo = item.AgreementSLNo;
                        RLog.LandlordSLNo = item.LandlordSLNo;
                        RLog.Year = item.Year;
                        RLog.Month = item.Month;
                        RLog.LogStatus = "Created";
                        RLog.Status = dtoBasic.active;
                        RLog.EntryBy = LoginUserID;
                        RLog.EntryDate = System.DateTime.Now;
                        RLog.ExecuteDate = null;
                        RLog.ExecuteBy = null;
                        RLog.LogYear = DTO.Year;
                        RLog.LogMonth = DTO.Month;
                        db.RentVendorPJExecuteLogs.Add(RLog);
                        db.SaveChanges();
                        #region ==Rent Vendor & Govt. Payment Journal Info
                        var AgreementControlData = db.AgreementInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo).Select(x => new { x.CashGLCode, x.BankGLCode, x.AdvanceAdjustmentGLCode, x.RentGLCode, x.TaxGLCode, x.VATGLCode, x.RTGSGL, x.EFTNGL, x.PayOrderGL, x.IBBPaymentGL, x.CityBrokerageGL, x.CityCapitalGL, x.OthersGL, x.CalculationMethod }).SingleOrDefault();
                        var LandlordInfo = db.LandlordInfos.Where(x => x.LandlordSLNo == item.LandlordSLNo && x.IsOld == false).Select(x => new { x.VendorCode, x.LandlordName, x.ModeOfPayment, x.ACNo }).SingleOrDefault();
                        var LandlordSchedule = db.LandlordSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.LandlordSLNo == item.LandlordSLNo && x.Year == item.Year && x.Month == item.Month).Select(x => new { x.NetRentAmount, x.AdvanceAdjustmentAmount, x.TaxAmount, x.VATAmount }).SingleOrDefault();
                        #region "==Rent Pay to Vendor, Journal Details"
                        //==Pay to Vendor Debit LL Rent, Landlord Wise
                        ji = new RMS.Models.PreviewRentVendorPJInfo();
                        ji.PostingID = Max.ToString();
                        ji.PostingDate = DateTime.Now;
                        ji.AgreementSLNo = item.AgreementSLNo;
                        ji.Year = item.Year;
                        ji.Month = item.Month;
                        ji.GLCode = LandlordInfo.VendorCode;
                        ji.GLName = LandlordInfo.LandlordName;
                        ji.DrCrID = DebitCredit.Debit;
                        ji.Amount = (LandlordSchedule.NetRentAmount + LandlordSchedule.AdvanceAdjustmentAmount) - (LandlordSchedule.TaxAmount + LandlordSchedule.VATAmount);
                        ji.LandlordSLNo = item.LandlordSLNo;
                        ji.Remarks = "Rent " + item.Month + ", " + item.Year;
                        ji.UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                        db.PreviewRentVendorPJInfos.Add(ji);
                        db.SaveChanges();
                        //==Pay to Vendor Credit LL Advance Adjustment, Landlord Wise 
                        if (LandlordSchedule.AdvanceAdjustmentAmount > 0)
                        {
                            ji = new RMS.Models.PreviewRentVendorPJInfo();
                            ji.PostingID = Max.ToString();
                            ji.PostingDate = DateTime.Now;
                            ji.AgreementSLNo = item.AgreementSLNo;
                            ji.Year = item.Year;
                            ji.Month = item.Month;
                            ji.GLCode = AgreementControlData.AdvanceAdjustmentGLCode;
                            ji.GLName = "Adv Adj GL";
                            ji.DrCrID = DebitCredit.Credit;
                            ji.Amount = LandlordSchedule.AdvanceAdjustmentAmount;
                            ji.LandlordSLNo = item.LandlordSLNo;
                            ji.Remarks = "Advance Adjustment " + item.Month + ", " + item.Year;
                            ji.UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                            db.PreviewRentVendorPJInfos.Add(ji);
                            db.SaveChanges();
                        }
                        //==Pay to Vendor LL Mode Of Paymet Wise, Landlord Wise
                        ji = new RMS.Models.PreviewRentVendorPJInfo();
                        ji.PostingID = Max.ToString();
                        ji.PostingDate = DateTime.Now;
                        ji.AgreementSLNo = item.AgreementSLNo;
                        ji.Year = item.Year;
                        ji.Month = item.Month;
                        //==xx
                        if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { ji.GLCode = LandlordInfo.ACNo; ji.GLName = "A/C Transfer"; }
                        else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.RTGS) { ji.GLCode = AgreementControlData.RTGSGL; ji.GLName = "RTGS GL"; }
                        else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.EFTN) { ji.GLCode = AgreementControlData.EFTNGL; ji.GLName = "EFTN GL"; }
                        else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { ji.GLCode = AgreementControlData.PayOrderGL; ji.GLName = "Pay Order GL"; }
                        else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Cash) { ji.GLCode = AgreementControlData.CashGLCode; ji.GLName = "Cash GL"; }
                        else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { ji.GLCode = AgreementControlData.IBBPaymentGL; ji.GLName = "IBB Payment GL"; }
                        else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { ji.GLCode = AgreementControlData.CityBrokerageGL; ji.GLName = "City Brokerage GL"; }
                        else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { ji.GLCode = AgreementControlData.CityCapitalGL; ji.GLName = "City Capital GL"; }
                        else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Others) { ji.GLCode = AgreementControlData.OthersGL; ji.GLName = "Others GL"; }
                        //==xx
                        ji.DrCrID = DebitCredit.Credit;
                        ji.Amount = LandlordSchedule.NetRentAmount - (LandlordSchedule.TaxAmount + LandlordSchedule.VATAmount);
                        ji.LandlordSLNo = item.LandlordSLNo;
                        ji.Remarks = "Rent " + item.Month + ", " + item.Year;
                        ji.UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                        db.PreviewRentVendorPJInfos.Add(ji);
                        db.SaveChanges();
                        #endregion
                        #region "==Rent Pay to Govt, Journal Details"
                        //==Pay to Govt Debit Tax, Landlord Wise
                        if (LandlordSchedule.TaxAmount > 0)
                        {
                            jiGovt = new RMS.Models.PreviewRentGovtPJInfo();
                            jiGovt.PostingID = Max.ToString();
                            jiGovt.PostingDate = DateTime.Now;
                            jiGovt.AgreementSLNo = item.AgreementSLNo;
                            jiGovt.Year = item.Year;
                            jiGovt.Month = item.Month;
                            jiGovt.GLCode = AgreementControlData.TaxGLCode;
                            jiGovt.GLName = "Tax GL";
                            jiGovt.DrCrID = DebitCredit.Debit;
                            jiGovt.Amount = LandlordSchedule.TaxAmount;
                            jiGovt.LandlordSLNo = item.LandlordSLNo;
                            jiGovt.Remarks = "Tax " + item.Month + ", " + item.Year;
                            jiGovt.UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                            db.PreviewRentGovtPJInfos.Add(jiGovt);
                            db.SaveChanges();
                        }
                        //==Pay to Govt Debit VAT, Landlord Wise
                        if (LandlordSchedule.VATAmount > 0)
                        {
                            jiGovt = new RMS.Models.PreviewRentGovtPJInfo();
                            jiGovt.PostingID = Max.ToString();
                            jiGovt.PostingDate = DateTime.Now;
                            jiGovt.AgreementSLNo = item.AgreementSLNo;
                            jiGovt.Year = item.Year;
                            jiGovt.Month = item.Month;
                            jiGovt.GLCode = AgreementControlData.VATGLCode;
                            jiGovt.GLName = "VAT GL";
                            jiGovt.DrCrID = DebitCredit.Debit;
                            jiGovt.Amount = LandlordSchedule.VATAmount;
                            jiGovt.LandlordSLNo = item.LandlordSLNo;
                            jiGovt.Remarks = "VAT " + item.Month + ", " + item.Year;
                            jiGovt.UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                            db.PreviewRentGovtPJInfos.Add(jiGovt);
                            db.SaveChanges();
                        }
                        //==Pay to Govt Credit Cash/Bank, Landlord Wise
                        if (LandlordSchedule.TaxAmount + LandlordSchedule.VATAmount > 0)
                        {
                            jiGovt = new RMS.Models.PreviewRentGovtPJInfo();
                            jiGovt.PostingID = Max.ToString();
                            jiGovt.PostingDate = DateTime.Now;
                            jiGovt.AgreementSLNo = item.AgreementSLNo;
                            jiGovt.Year = item.Year;
                            jiGovt.Month = item.Month;
                            //==xx
                            if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { jiGovt.GLCode = LandlordInfo.ACNo; jiGovt.GLName = "A/C Transfer"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.RTGS) { jiGovt.GLCode = AgreementControlData.RTGSGL; jiGovt.GLName = "RTGS GL"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.EFTN) { jiGovt.GLCode = AgreementControlData.EFTNGL; jiGovt.GLName = "EFTN GL"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { jiGovt.GLCode = AgreementControlData.PayOrderGL; jiGovt.GLName = "Pay Order GL"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Cash) { jiGovt.GLCode = AgreementControlData.CashGLCode; jiGovt.GLName = "Cash GL"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { jiGovt.GLCode = AgreementControlData.IBBPaymentGL; jiGovt.GLName = "IBB Payment GL"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { jiGovt.GLCode = AgreementControlData.CityBrokerageGL; jiGovt.GLName = "City Brokerage GL"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { jiGovt.GLCode = AgreementControlData.CityCapitalGL; jiGovt.GLName = "City Capital GL"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Others) { jiGovt.GLCode = AgreementControlData.OthersGL; jiGovt.GLName = "Others GL"; }
                            //==xx
                            jiGovt.DrCrID = DebitCredit.Credit;
                            jiGovt.Amount = LandlordSchedule.TaxAmount + LandlordSchedule.VATAmount;
                            jiGovt.LandlordSLNo = item.LandlordSLNo;
                            jiGovt.Remarks = item.Month + ", " + item.Year;
                            jiGovt.UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                            db.PreviewRentGovtPJInfos.Add(jiGovt);
                            db.SaveChanges();
                        }
                        #endregion
                        #endregion
                    }
                    return Json(new { CheckStatus = true, LogID = RLog.LogID }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult RentVendorPJReExecuteLog(RMS.Models.LandlordScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    DTOBasic dtoBasic = new DTOBasic();
                    IList<RMS.Models.LandlordScheduleDTO> lst = new List<RMS.Models.LandlordScheduleDTO>();
                    if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        //==Delete RentVendorPJExecuteLogs table PremiseType wise Log records
                        var DeleteRLog = db.RentVendorPJExecuteLogs.Where(x => DTO.PremiseTypeSLNoCheckList.Contains(x.PremiseTypeSLNo) && x.LogStatus == "Created" && x.Year == DTO.Year && x.Month == DTO.Month && x.Status == dtoBasic.active).ToList();
                        db.RentVendorPJExecuteLogs.RemoveRange(DeleteRLog);
                        db.SaveChanges();
                        //PremiseType Wise
                        var queryPremiseType = from LS in db.LandlordSchedules
                                               join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                               join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                               join LI in db.LandlordInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                               where DTO.PremiseTypeSLNoCheckList.Contains(AI.PremiseTypeSLNo) &&
                                                     AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                                     LS.IsPosted == true && LS.IsBlock == false && LS.Year == DTO.Year && LS.Month == DTO.Month &&
                                                     AI.IsHoldBlockPayment == false && LI.IsHoldBlockPayment == false
                                               orderby LS.AgreementSLNo ascending
                                               select new
                                               {
                                                   LS.LScheduleSLNo,
                                                   LS.AgreementSLNo,
                                                   PT.PremiseTypeSLNo,
                                                   LI.LandlordSLNo,
                                               };
                        lst = queryPremiseType.AsEnumerable().Select(x => new RMS.Models.LandlordScheduleDTO
                        {
                            LScheduleSLNo = x.LScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            LandlordSLNo = x.LandlordSLNo,
                        }).ToList();
                    }
                    else if (DTO.AgreementSLNoCheckList != null)
                    {
                        //==Delete RentVendorPJExecuteLogs table AgreementSLNo wise Log records
                        var DeleteRLog = db.RentVendorPJExecuteLogs.Where(x => DTO.AgreementSLNoCheckList.Contains(x.AgreementSLNo) && x.LogStatus == "Created" && x.Year == DTO.Year && x.Month == DTO.Month && x.Status == dtoBasic.active).ToList();
                        db.RentVendorPJExecuteLogs.RemoveRange(DeleteRLog);
                        db.SaveChanges();
                        //AgreementSLNo Wise
                        var queryAgreement = from LS in db.LandlordSchedules
                                             join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                             join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                             join LI in db.LandlordInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                             where DTO.AgreementSLNoCheckList.Contains(LS.AgreementSLNo) &&
                                                   AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                                   LS.IsPosted == true && LS.IsBlock == false && LS.Year == DTO.Year && LS.Month == DTO.Month &&
                                                   AI.IsHoldBlockPayment == false && LI.IsHoldBlockPayment == false
                                             orderby LS.AgreementSLNo ascending
                                             select new
                                             {
                                                 LS.LScheduleSLNo,
                                                 LS.AgreementSLNo,
                                                 PT.PremiseTypeSLNo,
                                                 LI.LandlordSLNo,
                                             };
                        lst = queryAgreement.AsEnumerable().Select(x => new RMS.Models.LandlordScheduleDTO
                        {
                            LScheduleSLNo = x.LScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            LandlordSLNo = x.LandlordSLNo,
                        }).ToList();
                    }
                    else if (DTO.VendorSLNoCheckList != null)
                    {
                        //==Delete RentVendorPJExecuteLogs table VendorSLNo wise Log records
                        var DeleteRLog = db.RentVendorPJExecuteLogs.Where(x => DTO.VendorSLNoCheckList.Contains(x.LandlordSLNo) && x.LogStatus == "Created" && x.Year == DTO.Year && x.Month == DTO.Month && x.Status == dtoBasic.active).ToList();
                        db.RentVendorPJExecuteLogs.RemoveRange(DeleteRLog);
                        db.SaveChanges();
                        //VendorSLNo Wise
                        var queryVendor = from LS in db.LandlordSchedules
                                          join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                          join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                          join LI in db.LandlordInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                          where DTO.VendorSLNoCheckList.Contains(LI.LandlordSLNo) &&
                                                AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                                LS.IsPosted == true && LS.IsBlock == false && LS.Year == DTO.Year && LS.Month == DTO.Month &&
                                                AI.IsHoldBlockPayment == false && LI.IsHoldBlockPayment == false
                                          orderby LS.AgreementSLNo ascending
                                          select new
                                          {
                                              LS.LScheduleSLNo,
                                              LS.AgreementSLNo,
                                              PT.PremiseTypeSLNo,
                                              LI.LandlordSLNo,
                                          };
                        lst = queryVendor.AsEnumerable().Select(x => new RMS.Models.LandlordScheduleDTO
                        {
                            LScheduleSLNo = x.LScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            LandlordSLNo = x.LandlordSLNo,
                        }).ToList();
                    }
                    else
                    {
                        //==Delete RentVendorPJExecuteLogs table all created records for the year & month
                        var DeleteRLog = db.RentVendorPJExecuteLogs.Where(x => x.LogStatus == "Created" && x.Year == DTO.Year && x.Month == DTO.Month && x.Status == dtoBasic.active).ToList();
                        db.RentVendorPJExecuteLogs.RemoveRange(DeleteRLog);
                        db.SaveChanges();
                        //All Records
                        var queryAll = from LS in db.LandlordSchedules
                                       join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                       join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                       join LI in db.LandlordInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                       where AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                             LS.IsPosted == true && LS.IsBlock == false && LS.Year == DTO.Year && LS.Month == DTO.Month &&
                                             AI.IsHoldBlockPayment == false && LI.IsHoldBlockPayment == false
                                       orderby LS.AgreementSLNo ascending
                                       select new
                                       {
                                           LS.LScheduleSLNo,
                                           LS.AgreementSLNo,
                                           PT.PremiseTypeSLNo,
                                           LI.LandlordSLNo,
                                       };
                        lst = queryAll.AsEnumerable().Select(x => new RMS.Models.LandlordScheduleDTO
                        {
                            LScheduleSLNo = x.LScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            LandlordSLNo = x.LandlordSLNo,
                        }).ToList();
                    }
                    if (lst.Count == 0)
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                    int Max = db.RentVendorPJExecuteLogs.Max(x => (int?)x.LogID) ?? 0;
                    if (Max == 0)
                    {
                        Max = 60001;
                    }
                    else
                    {
                        Max = Max + 1;
                    }
                    RMS.Models.RentVendorPJExecuteLog RLog = new RMS.Models.RentVendorPJExecuteLog();
                    foreach (RMS.Models.LandlordScheduleDTO item in lst.GroupBy(x => new { x.AgreementSLNo, x.LandlordSLNo }).Select(x => x.First()).Distinct().OrderBy(x => x.AgreementSLNo))
                    {
                        //==RentVendorPJExecuteLogs - Re Log Register
                        RLog = new RMS.Models.RentVendorPJExecuteLog();
                        RLog.LogID = Max;
                        RLog.LogName = DTO.LogName;
                        RLog.LogDate = System.DateTime.Now;
                        RLog.PremiseTypeSLNo = item.PremiseTypeSLNo;
                        RLog.AgreementSLNo = item.AgreementSLNo;
                        RLog.LandlordSLNo = item.LandlordSLNo;
                        RLog.Year = DTO.Year;
                        RLog.Month = DTO.Month;
                        RLog.LogStatus = "Created";
                        RLog.Status = dtoBasic.active;
                        RLog.EntryBy = LoginUserID;
                        RLog.EntryDate = System.DateTime.Now;
                        RLog.ExecuteDate = null;
                        RLog.ExecuteBy = null;
                        db.RentVendorPJExecuteLogs.Add(RLog);
                        db.SaveChanges();
                    }
                    return Json(new { CheckStatus = true, LogID = RLog.LogID }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult CheckRentVendorPJPostLog(string PremiseTypeCheckList, string AgreementCheckList, int Year, string Month)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    db.Configuration.ProxyCreationEnabled = false;
                    IList<RMS.Models.RentVendorPJExecuteLogDTO> lstRentPJExecuteLog = new List<RMS.Models.RentVendorPJExecuteLogDTO>();
                    DTOBasic dtoBasic = new DTOBasic();
                    List<int> PremiseTypeSLNoList;
                    List<int> AgreementSLNoList;
                    if (!string.IsNullOrEmpty(PremiseTypeCheckList))
                    {
                        //PremiseTypeSLNo Wise
                        PremiseTypeSLNoList = new List<int>(Array.ConvertAll(PremiseTypeCheckList.Split(','), Convert.ToInt32));
                        var queryPremiseType = from RL in db.RentVendorPJExecuteLogs
                                               where PremiseTypeSLNoList.Contains(RL.PremiseTypeSLNo) && RL.LogStatus == "Posted" &&
                                                            RL.LogYear == Year && RL.LogMonth == Month
                                               orderby RL.LogSLNo ascending
                                               select new
                                               {
                                                   RL.LogSLNo,
                                               };
                        lstRentPJExecuteLog = queryPremiseType.AsEnumerable().Select(x => new RMS.Models.RentVendorPJExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    if (!string.IsNullOrEmpty(AgreementCheckList))
                    {
                        //AgreementSLNo Wise
                        AgreementSLNoList = new List<int>(Array.ConvertAll(AgreementCheckList.Split(','), Convert.ToInt32));
                        var queryAgreement = from RL in db.RentVendorPJExecuteLogs
                                             where AgreementSLNoList.Contains(RL.AgreementSLNo) && RL.LogStatus == "Posted" &&
                                                                         RL.LogYear == Year && RL.LogMonth == Month
                                             orderby RL.LogSLNo ascending
                                             select new
                                             {
                                                 RL.LogSLNo,
                                             };
                        lstRentPJExecuteLog = queryAgreement.AsEnumerable().Select(x => new RMS.Models.RentVendorPJExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else
                    {
                        //All Records
                        var queryAll = from RL in db.RentVendorPJExecuteLogs
                                       where RL.LogStatus == "Posted" &&
                                                    RL.LogYear == Year && RL.LogMonth == Month
                                       orderby RL.LogSLNo ascending
                                       select new
                                       {
                                           RL.LogSLNo,
                                       };
                        lstRentPJExecuteLog = queryAll.AsEnumerable().Select(x => new RMS.Models.RentVendorPJExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    bool PostCheck = false;
                    if (lstRentPJExecuteLog.Count > 0)
                    {
                        PostCheck = true;
                    }
                    return Json(new { CheckStatus = PostCheck }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectRentAPLogDetails(int LogID)
        {
            TempData.Remove("LogID");
            TempData.Add("LogID", LogID);
            return RedirectToAction("RentAPLogDetails");
        }

        [HttpGet]
        public ActionResult RentAPLogDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strLogID = TempData["LogID"];
                    if (strLogID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int LogID = Convert.ToInt32(strLogID);
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentAPPostLog";
                    IList<RMS.Models.RentAPExecuteLogDTO> lstLog = new List<RMS.Models.RentAPExecuteLogDTO>();
                    var query = from RPL in db.RentAPExecuteLogs
                                join AI in db.AgreementInfos on RPL.AgreementSLNo equals AI.AgreementSLNo
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                where RPL.LogID == LogID
                                orderby RPL.LogID ascending, AI.AgreementName ascending, AI.CalculationMethod ascending
                                select new
                                {
                                    RPL.LogID,
                                    RPL.LogName,
                                    RPL.LogDate,
                                    RPL.Year,
                                    RPL.Month,
                                    RPL.EntryBy,
                                    RPL.EntryDate,
                                    AI.AgreementSLNo,
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.CalculationMethod,
                                    PT.PremiseTypeSLNo,
                                    PT.PremiseTypeCode,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                };
                    lstLog = query.AsEnumerable().Select(x => new RMS.Models.RentAPExecuteLogDTO
                    {
                        LogID = x.LogID,
                        LogName = x.LogName,
                        LogDate = x.LogDate.ToString("dd/MM/yyyy"),
                        Year = x.Year,
                        Month = x.Month,
                        EntryBy = x.EntryBy,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        AgreementSLNo = x.AgreementSLNo,
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        CalculationMethod = x.CalculationMethod,
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseTypeCode = x.PremiseTypeCode,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                    }).ToList();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentAPLogDetails, lstLog);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectPreviewRentAPJournalDetails(string PostingID)
        {
            TempData.Remove("PostingID");
            TempData.Add("PostingID", PostingID);
            return RedirectToAction("PreviewRentAPJournalDetails");
        }

        [HttpGet]
        public ActionResult PreviewRentAPJournalDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strPostingID = TempData["PostingID"];
                    if (strPostingID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    string PostingID = strPostingID.ToString();
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentAPPostLog";
                    IList<RMS.Models.PreviewRentAPJournalInfoDTO> lstRentAPJournalDetails = new List<RMS.Models.PreviewRentAPJournalInfoDTO>();
                    var query = from ji in db.PreviewRentAPJournalInfos
                                join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                where ji.PostingID == PostingID
                                orderby AI.CalculationMethod ascending, AI.AgreementSLNo ascending
                                select new
                                {
                                    ji.RentAPJournalSLNo,
                                    ji.PostingID,
                                    ji.PostingDate,
                                    ji.AgreementSLNo,
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.AgreementText,
                                    AI.RentDueDay,
                                    AI.CalculationMethod,
                                    ji.Year,
                                    ji.Month,
                                    ji.GLCode,
                                    ji.GLName,
                                    ji.DrCrID,
                                    ji.Amount,
                                    ji.CCSLNo,
                                    ji.LandlordSLNo,
                                    ji.Remarks,
                                    U.UserID,
                                };
                    lstRentAPJournalDetails = query.AsEnumerable().Select(x => new RMS.Models.PreviewRentAPJournalInfoDTO
                    {
                        RentAPJournalSLNo = x.RentAPJournalSLNo,
                        PostingID = x.PostingID,
                        PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                        AgreementSLNo = x.AgreementSLNo,
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        AgreementText = x.AgreementText,
                        RentDueDay = x.RentDueDay,
                        CalculationMethod = x.CalculationMethod,
                        Year = x.Year,
                        Month = x.Month,
                        GLCode = x.GLCode,
                        GLName = x.GLName,
                        DrCrID = x.DrCrID,
                        Amount = x.Amount,
                        CCSLNo = x.CCSLNo,
                        LandlordSLNo = x.LandlordSLNo,
                        Remarks = x.Remarks,
                        UserID = x.UserID,
                    }).ToList();
                    var HOCCSOlInfo = db.HOCCSOLInfos.Where(x => x.HOSLNo == 1).SingleOrDefault();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    foreach (RMS.Models.PreviewRentAPJournalInfoDTO item in lstRentAPJournalDetails)
                    {
                        var CCInfo = db.CostCenterInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.CCSLNo == item.CCSLNo).SingleOrDefault();
                        var LandlordInfo = db.LandlordInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.LandlordSLNo == item.LandlordSLNo).Select(x => new { x.VendorCode, x.LandlordName, x.ModeOfPayment, x.ACNo, x.BankName, x.BranchName }).SingleOrDefault();
                        if (CCInfo != null)
                        {
                            item.CCCode = CCInfo.CCCode;
                            item.CCName = CCInfo.CCName;
                            item.SOLCode = CCInfo.SOLCode;
                            item.SOLName = CCInfo.SOLName;
                        }
                        else
                        {
                            item.CCCode = HOCCSOlInfo.CCID;
                            item.CCName = HOCCSOlInfo.CCName;
                            item.SOLCode = HOCCSOlInfo.SOLID;
                            item.SOLName = HOCCSOlInfo.SOLName;
                        }
                        if (LandlordInfo != null)
                        {
                            item.VendorCode = LandlordInfo.VendorCode;
                            item.LandlordName = LandlordInfo.LandlordName;
                            if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { item.ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.RTGS) { item.ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.EFTN) { item.ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { item.ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Cash) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { item.ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Others) { item.ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                            item.ACNo = LandlordInfo.ACNo;
                            item.BankName = LandlordInfo.BankName;
                            item.BranchName = LandlordInfo.BranchName;
                        }
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.PreviewRentAPJournalDetails, lstRentAPJournalDetails);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectRentAPJournalDetails(string PostingID)
        {
            TempData.Remove("PostingID");
            TempData.Add("PostingID", PostingID);
            return RedirectToAction("RentAPJournalDetails");
        }

        [HttpGet]
        public ActionResult RentAPJournalDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strPostingID = TempData["PostingID"];
                    if (strPostingID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    string PostingID = strPostingID.ToString();
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentAPReport";
                    IList<RMS.Models.RentAPJournalInfoDTO> lstRentAPJournalDetails = new List<RMS.Models.RentAPJournalInfoDTO>();
                    var query = from ji in db.RentAPJournalInfos
                                join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                where ji.PostingID == PostingID
                                orderby AI.CalculationMethod ascending, AI.AgreementSLNo ascending
                                select new
                                {
                                    ji.RentAPJournalSLNo,
                                    ji.PostingID,
                                    ji.PostingDate,
                                    ji.AgreementSLNo,
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.AgreementText,
                                    AI.RentDueDay,
                                    AI.CalculationMethod,
                                    ji.Year,
                                    ji.Month,
                                    ji.GLCode,
                                    ji.GLName,
                                    ji.DrCrID,
                                    ji.Amount,
                                    ji.CCSLNo,
                                    ji.LandlordSLNo,
                                    ji.Remarks,
                                    U.UserID,
                                };
                    lstRentAPJournalDetails = query.AsEnumerable().Select(x => new RMS.Models.RentAPJournalInfoDTO
                    {
                        RentAPJournalSLNo = x.RentAPJournalSLNo,
                        PostingID = x.PostingID,
                        PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                        AgreementSLNo = x.AgreementSLNo,
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        AgreementText = x.AgreementText,
                        RentDueDay = x.RentDueDay,
                        CalculationMethod = x.CalculationMethod,
                        Year = x.Year,
                        Month = x.Month,
                        GLCode = x.GLCode,
                        GLName = x.GLName,
                        DrCrID = x.DrCrID,
                        Amount = x.Amount,
                        CCSLNo = x.CCSLNo,
                        LandlordSLNo = x.LandlordSLNo,
                        Remarks = x.Remarks,
                        UserID = x.UserID,
                    }).ToList();
                    var HOCCSOlInfo = db.HOCCSOLInfos.Where(x => x.HOSLNo == 1).SingleOrDefault();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    foreach (RMS.Models.RentAPJournalInfoDTO item in lstRentAPJournalDetails)
                    {
                        var CCInfo = db.CostCenterInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.CCSLNo == item.CCSLNo).SingleOrDefault();
                        var LandlordInfo = db.LandlordInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.LandlordSLNo == item.LandlordSLNo).Select(x => new { x.VendorCode, x.LandlordName, x.ModeOfPayment, x.ACNo, x.BankName, x.BranchName }).SingleOrDefault();
                        if (CCInfo != null)
                        {
                            item.CCCode = CCInfo.CCCode;
                            item.CCName = CCInfo.CCName;
                            item.SOLCode = CCInfo.SOLCode;
                            item.SOLName = CCInfo.SOLName;
                        }
                        else
                        {
                            item.CCCode = HOCCSOlInfo.CCID;
                            item.CCName = HOCCSOlInfo.CCName;
                            item.SOLCode = HOCCSOlInfo.SOLID;
                            item.SOLName = HOCCSOlInfo.SOLName;
                        }
                        if (LandlordInfo != null)
                        {
                            item.VendorCode = LandlordInfo.VendorCode;
                            item.LandlordName = LandlordInfo.LandlordName;
                            if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { item.ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.RTGS) { item.ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.EFTN) { item.ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { item.ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Cash) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { item.ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Others) { item.ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                            item.ACNo = LandlordInfo.ACNo;
                            item.BankName = LandlordInfo.BankName;
                            item.BranchName = LandlordInfo.BranchName;
                        }
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentAPJournalDetails, lstRentAPJournalDetails);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult CheckRentAPExecuteLog(string PremiseTypeCheckList, string AgreementCheckList, int Year, string Month)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    db.Configuration.ProxyCreationEnabled = false;
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    IList<RMS.Models.RentAPExecuteLogDTO> lstRentExecuteLog = new List<RMS.Models.RentAPExecuteLogDTO>();
                    DTOBasic dtoBasic = new DTOBasic();
                    List<int> PremiseTypeSLNoList;
                    List<int> AgreementSLNoList;
                    if (!string.IsNullOrEmpty(AgreementCheckList))
                    {
                        //AgreementSLNo Wise
                        AgreementSLNoList = new List<int>(Array.ConvertAll(AgreementCheckList.Split(','), Convert.ToInt32));
                        var queryCM = from RL in db.RentAPExecuteLogs
                                      where AgreementSLNoList.Contains(RL.AgreementSLNo) && (RL.LogStatus == "Created" || RL.LogStatus == "Posted") &&
                                                                  RL.LogYear == Year && RL.LogMonth == Month
                                      orderby RL.LogSLNo ascending
                                      select new
                                      {
                                          RL.LogSLNo,
                                      };
                        lstRentExecuteLog = queryCM.AsEnumerable().Select(x => new RMS.Models.RentAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else if (!string.IsNullOrEmpty(PremiseTypeCheckList))
                    {
                        //PremiseTypeSLNo Wise
                        PremiseTypeSLNoList = new List<int>(Array.ConvertAll(PremiseTypeCheckList.Split(','), Convert.ToInt32));
                        var queryCM = from RL in db.RentAPExecuteLogs
                                      where PremiseTypeSLNoList.Contains(RL.PremiseTypeSLNo) && (RL.LogStatus == "Created" || RL.LogStatus == "Posted") &&
                                                                  RL.LogYear == Year && RL.LogMonth == Month
                                      orderby RL.LogSLNo ascending
                                      select new
                                      {
                                          RL.LogSLNo,
                                      };
                        lstRentExecuteLog = queryCM.AsEnumerable().Select(x => new RMS.Models.RentAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else
                    {
                        //All Records
                        var queryCM = from RL in db.RentAPExecuteLogs
                                      where (RL.LogStatus == "Created" || RL.LogStatus == "Posted") && RL.LogYear == Year && RL.LogMonth == Month
                                      orderby RL.LogSLNo ascending
                                      select new
                                      {
                                          RL.LogSLNo,
                                      };
                        lstRentExecuteLog = queryCM.AsEnumerable().Select(x => new RMS.Models.RentAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    bool LogCheck = false;
                    if (lstRentExecuteLog.Count > 0)
                    {
                        LogCheck = true;
                    }
                    return Json(new { CheckStatus = LogCheck }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }


        [HttpGet]
        public ActionResult CheckRentAPPostLog(string PremiseTypeCheckList, string AgreementCheckList, int Year, string Month)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    db.Configuration.ProxyCreationEnabled = false;
                    IList<RMS.Models.RentAPExecuteLogDTO> lstRentExecuteLog = new List<RMS.Models.RentAPExecuteLogDTO>();
                    DTOBasic dtoBasic = new DTOBasic();
                    List<int> PremiseTypeSLNoList;
                    List<int> AgreementSLNoList;
                    if (!string.IsNullOrEmpty(AgreementCheckList))
                    {
                        //AgreementSLNo Wise
                        AgreementSLNoList = new List<int>(Array.ConvertAll(AgreementCheckList.Split(','), Convert.ToInt32));
                        var queryCM = from RL in db.RentAPExecuteLogs
                                      where AgreementSLNoList.Contains(RL.AgreementSLNo) && RL.LogStatus == "Posted" &&
                                                                  RL.LogYear == Year && RL.LogMonth == Month
                                      orderby RL.LogSLNo ascending
                                      select new
                                      {
                                          RL.LogSLNo,
                                      };
                        lstRentExecuteLog = queryCM.AsEnumerable().Select(x => new RMS.Models.RentAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else if (!string.IsNullOrEmpty(PremiseTypeCheckList))
                    {
                        //PremiseTypeSLNo Wise
                        PremiseTypeSLNoList = new List<int>(Array.ConvertAll(PremiseTypeCheckList.Split(','), Convert.ToInt32));
                        var queryPremiseType = from RL in db.RentAPExecuteLogs
                                               where PremiseTypeSLNoList.Contains(RL.PremiseTypeSLNo) && RL.LogStatus == "Posted" &&
                                                            RL.LogYear == Year && RL.LogMonth == Month
                                               orderby RL.LogSLNo ascending
                                               select new
                                               {
                                                   RL.LogSLNo,
                                               };
                        lstRentExecuteLog = queryPremiseType.AsEnumerable().Select(x => new RMS.Models.RentAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else
                    {
                        //All Records
                        var queryAll = from RL in db.RentAPExecuteLogs
                                       where RL.LogStatus == "Posted" && RL.LogYear == Year && RL.LogMonth == Month
                                       orderby RL.LogSLNo ascending
                                       select new
                                       {
                                           RL.LogSLNo,
                                       };
                        lstRentExecuteLog = queryAll.AsEnumerable().Select(x => new RMS.Models.RentAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    bool PostCheck = false;
                    if (lstRentExecuteLog.Count > 0)
                    {
                        PostCheck = true;
                    }
                    return Json(new { CheckStatus = PostCheck }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult CheckRentTemplatePosted(string PremiseTypeCheckList, string AgreementCheckList, int Year, string Month)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    db.Configuration.ProxyCreationEnabled = false;
                    IList<RMS.Models.RentAPExecuteLogDTO> lstRentExecuteLog = new List<RMS.Models.RentAPExecuteLogDTO>();
                    DTOBasic dtoBasic = new DTOBasic();
                    List<int> PremiseTypeSLNoList;
                    List<int> AgreementSLNoList;
                    if (!string.IsNullOrEmpty(AgreementCheckList))
                    {
                        //AgreementSLNo Wise
                        AgreementSLNoList = new List<int>(Array.ConvertAll(AgreementCheckList.Split(','), Convert.ToInt32));
                        var queryCM = from RL in db.RentVendorPJExecuteLogs
                                      where AgreementSLNoList.Contains(RL.AgreementSLNo) && RL.LogStatus == "Posted" &&
                                                                  RL.LogYear == Year && RL.LogMonth == Month
                                      orderby RL.LogSLNo ascending
                                      select new
                                      {
                                          RL.LogSLNo,
                                      };
                        lstRentExecuteLog = queryCM.AsEnumerable().Select(x => new RMS.Models.RentAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else if (!string.IsNullOrEmpty(PremiseTypeCheckList))
                    {
                        //PremiseTypeSLNo Wise
                        PremiseTypeSLNoList = new List<int>(Array.ConvertAll(PremiseTypeCheckList.Split(','), Convert.ToInt32));
                        var queryPremiseType = from RL in db.RentVendorPJExecuteLogs
                                               where PremiseTypeSLNoList.Contains(RL.PremiseTypeSLNo) && RL.LogStatus == "Posted" &&
                                                            RL.LogYear == Year && RL.LogMonth == Month
                                               orderby RL.LogSLNo ascending
                                               select new
                                               {
                                                   RL.LogSLNo,
                                               };
                        lstRentExecuteLog = queryPremiseType.AsEnumerable().Select(x => new RMS.Models.RentAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else
                    {
                        //All Records
                        var queryAll = from RL in db.RentVendorPJExecuteLogs
                                       where RL.LogStatus == "Posted" && RL.LogYear == Year && RL.LogMonth == Month
                                       orderby RL.LogSLNo ascending
                                       select new
                                       {
                                           RL.LogSLNo,
                                       };
                        lstRentExecuteLog = queryAll.AsEnumerable().Select(x => new RMS.Models.RentAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    bool PostCheck = false;
                    if (lstRentExecuteLog.Count == 0)
                    {
                        PostCheck = true;
                    }
                    return Json(new { CheckStatus = PostCheck }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult CheckUtilityAPExecuteLog(string PremiseTypeCheckList, string AgreementCheckList, int Year, string Month)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    db.Configuration.ProxyCreationEnabled = false;
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    IList<RMS.Models.UtilityAPExecuteLogDTO> lstUtilityExecutetLog = new List<RMS.Models.UtilityAPExecuteLogDTO>();
                    DTOBasic dtoBasic = new DTOBasic();
                    List<int> PremiseTypeSLNoList;
                    List<int> AgreementSLNoList;
                    if (!string.IsNullOrEmpty(PremiseTypeCheckList))
                    {
                        //PremiseTypeSLNo Wise
                        PremiseTypeSLNoList = new List<int>(Array.ConvertAll(PremiseTypeCheckList.Split(','), Convert.ToInt32));
                        var queryPremiseType = from RL in db.UtilityAPExecuteLogs
                                               join AI in db.AgreementInfos on RL.AgreementSLNo equals AI.AgreementSLNo
                                               join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                               where PremiseTypeSLNoList.Contains(PT.PremiseTypeSLNo) && RL.LogStatus == "Created" &&
                                                                           RL.Year == Year && RL.Month == Month
                                               orderby RL.LogSLNo ascending
                                               select new
                                               {
                                                   RL.LogSLNo,
                                                   PT.PremiseTypeSLNo,
                                               };
                        lstUtilityExecutetLog = queryPremiseType.AsEnumerable().Select(x => new RMS.Models.UtilityAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                        }).ToList();
                    }
                    else if (!string.IsNullOrEmpty(AgreementCheckList))
                    {
                        //AgreementSLNoList Wise
                        AgreementSLNoList = new List<int>(Array.ConvertAll(AgreementCheckList.Split(','), Convert.ToInt32));
                        var queryAgreement = from RL in db.UtilityAPExecuteLogs
                                             join AI in db.AgreementInfos on RL.AgreementSLNo equals AI.AgreementSLNo
                                             join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                             where AgreementSLNoList.Contains(RL.AgreementSLNo) && RL.LogStatus == "Created" &&
                                                                         RL.Year == Year && RL.Month == Month
                                             orderby RL.LogSLNo ascending
                                             select new
                                             {
                                                 RL.LogSLNo,
                                                 PT.PremiseTypeSLNo,
                                             };
                        lstUtilityExecutetLog = queryAgreement.AsEnumerable().Select(x => new RMS.Models.UtilityAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                        }).ToList();
                    }
                    else
                    {
                        //All Records
                        var queryAll = from RL in db.UtilityAPExecuteLogs
                                       join AI in db.AgreementInfos on RL.AgreementSLNo equals AI.AgreementSLNo
                                       join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                       where RL.LogStatus == "Created" && RL.Year == Year && RL.Month == Month
                                       orderby RL.LogSLNo ascending
                                       select new
                                       {
                                           RL.LogSLNo,
                                           PT.PremiseTypeSLNo,
                                       };
                        lstUtilityExecutetLog = queryAll.AsEnumerable().Select(x => new RMS.Models.UtilityAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                        }).ToList();
                    }
                    bool LogCheck = false;
                    if (lstUtilityExecutetLog.Count > 0)
                    {
                        LogCheck = true;
                    }
                    return Json(new { CheckStatus = LogCheck }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult CheckUtilityAPPostLog(string PremiseTypeCheckList, string AgreementCheckList, int Year, string Month)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    db.Configuration.ProxyCreationEnabled = false;
                    IList<RMS.Models.UtilityAPExecuteLogDTO> lstUtilityExecuteLog = new List<RMS.Models.UtilityAPExecuteLogDTO>();
                    DTOBasic dtoBasic = new DTOBasic();
                    List<int> PremiseTypeSLNoList;
                    List<int> AgreementSLNoList;
                    if (!string.IsNullOrEmpty(PremiseTypeCheckList))
                    {
                        //PremiseTypeSLNo Wise
                        PremiseTypeSLNoList = new List<int>(Array.ConvertAll(PremiseTypeCheckList.Split(','), Convert.ToInt32));
                        var queryPremiseType = from RL in db.UtilityAPExecuteLogs
                                               join AI in db.AgreementInfos on RL.AgreementSLNo equals AI.AgreementSLNo
                                               join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                               where PremiseTypeSLNoList.Contains(PT.PremiseTypeSLNo) && RL.LogStatus == "Posted" &&
                                                            RL.Year == Year && RL.Month == Month
                                               orderby RL.LogSLNo ascending
                                               select new
                                               {
                                                   RL.LogSLNo,
                                               };
                        lstUtilityExecuteLog = queryPremiseType.AsEnumerable().Select(x => new RMS.Models.UtilityAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else if (!string.IsNullOrEmpty(AgreementCheckList))
                    {
                        //AgreementSLNo Wise
                        AgreementSLNoList = new List<int>(Array.ConvertAll(AgreementCheckList.Split(','), Convert.ToInt32));
                        var queryAgreement = from RL in db.UtilityAPExecuteLogs
                                             join AI in db.AgreementInfos on RL.AgreementSLNo equals AI.AgreementSLNo
                                             where AgreementSLNoList.Contains(RL.AgreementSLNo) && RL.LogStatus == "Posted" &&
                                                                         RL.Year == Year && RL.Month == Month
                                             orderby RL.LogSLNo ascending
                                             select new
                                             {
                                                 RL.LogSLNo,
                                             };
                        lstUtilityExecuteLog = queryAgreement.AsEnumerable().Select(x => new RMS.Models.UtilityAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else
                    {
                        //All Records
                        var queryAll = from RL in db.UtilityAPExecuteLogs
                                       join AI in db.AgreementInfos on RL.AgreementSLNo equals AI.AgreementSLNo
                                       join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                       where RL.LogStatus == "Posted" && RL.Year == Year && RL.Month == Month
                                       orderby RL.LogSLNo ascending
                                       select new
                                       {
                                           RL.LogSLNo,
                                       };
                        lstUtilityExecuteLog = queryAll.AsEnumerable().Select(x => new RMS.Models.UtilityAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    bool PostCheck = false;
                    if (lstUtilityExecuteLog.Count > 0)
                    {
                        PostCheck = true;
                    }
                    return Json(new { CheckStatus = PostCheck }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult CalculatedSummary()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/CalculatedSummary";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 84 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;
                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate &&
                         x.IsBlock == false && x.IsRenewal == false && x.IsModified == false && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();


                    RMS.Models.IFRSScheduleDTO DTO = new RMS.Models.IFRSScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.CalculatedSummary, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CalculatedSummary(RMS.Models.IFRSScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/CalculatedSummary";
                    DTOBasic dtoBasic = new DTOBasic();
                    AgreementType AgreementType = new AgreementType();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    IList<RMS.Models.AgreementInfo> lstAgreement = new List<RMS.Models.AgreementInfo>();
                    IList<RMS.Models.IFRSSchedule> lstSchedule = new List<RMS.Models.IFRSSchedule>();
                    IList<RMS.Models.IFRSCalculatedSummaryDTO> lstReport = new List<RMS.Models.IFRSCalculatedSummaryDTO>();
                    RMS.Models.IFRSCalculatedSummaryDTO obj;
                    if (DTO.AgreementSLNoCheckList != null)
                    {
                        lstAgreement = db.AgreementInfos.Where(x => DTO.AgreementSLNoCheckList.Contains(x.AgreementSLNo) && x.IsIFRSEnable == true).ToList();
                    }
                    else
                    {
                        lstAgreement = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate && x.IsRenewal == false && x.IsModified == false && x.IsIFRSEnable == true).ToList();
                    }
                    int FromMonthNo = 0;
                    int ToMonthNo = 0;
                    DTO.FromMonth = "January";
                    int ToMonth = Convert.ToDateTime("01-" + DTO.ToMonth + "2021").Month;
                    int BlockMonthNo = 0;
                    int SLNO = 0;
                    double Sum1 = 0;
                    double Sum2 = 0;
                    double Sum3 = 0;
                    double Sum4 = 0;
                    double Sum5 = 0;
                    double Sum6 = 0;
                    double Sum7 = 0;
                    double Sum8 = 0;
                    double Sum9 = 0;
                    double Sum10 = 0;
                    double Sum11 = 0;
                    double Sum12 = 0;
                    double Sum13 = 0;
                    bool xModified = false;
                    foreach (RMS.Models.AgreementInfo item in lstAgreement)
                    {
                        int BlockMonthCount = 0;
                        int BlockMonthRange = 0;
                        if (item.AgreementType == AgreementType.Modified)
                        {
                            xModified = false;
                            lstSchedule = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.Month == DTO.FromMonth).ToList();
                            if (lstSchedule.Count == 0)
                            {
                                xModified = true;
                                lstSchedule = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.xModifiedAgreementSLNo && x.Year == DTO.Year).ToList();
                                BlockMonthCount = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.xModifiedAgreementSLNo && x.IsBlock == true).OrderBy(x => x.IFRSSLNo).Select(x => x.MonthNo).Take(1).SingleOrDefault();
                            }
                            else
                            {
                                lstSchedule = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year).ToList();
                            }
                            obj = new RMS.Models.IFRSCalculatedSummaryDTO();
                            if (lstSchedule.Count > 0)
                            {
                                FromMonthNo = lstSchedule.Where(x => x.Month == DTO.FromMonth).Select(x => x.MonthNo).SingleOrDefault();
                                ToMonthNo = lstSchedule.Where(x => x.Month == DTO.ToMonth).Select(x => x.MonthNo).SingleOrDefault();
                                if (ToMonthNo == 0) { ToMonthNo = item.AgreementPeriod; }
                                if (ToMonthNo >= BlockMonthCount)
                                {
                                    BlockMonthRange = (ToMonthNo - BlockMonthCount) + 1;
                                }
                                //==Step1
                                var Step1 = lstSchedule.Where(x => x.Month == DTO.FromMonth && x.IsBlock == false).Select(x => new { x.OBROU, x.OBLeaseLiability, x.OBAdvance }).SingleOrDefault();
                                obj.PreviousROU = (Step1 == null) ? 0 : Step1.OBROU;
                                obj.PreviousAdvance = (Step1 == null) ? 0 : Step1.OBAdvance;
                                obj.PreviousLease = (Step1 == null) ? 0 : Step1.OBLeaseLiability;
                                Sum1 = Sum1 + obj.PreviousROU;
                                Sum2 = Sum2 + obj.PreviousAdvance;
                                Sum3 = Sum3 + obj.PreviousLease;
                                //==Step2
                                obj.DuringTheYearROU = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo && x.IsBlock == false).Sum(x => (double?)x.Depreciation) ?? 0;
                                obj.DuringTheYearAdvanceROU = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo && x.IsBlock == false).Sum(x => (double?)x.AdvanceDepreciation) ?? 0;
                                obj.DuringTheYearLease = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo && x.IsBlock == false).Sum(x => (double?)x.SettlementofLeaseLiabilities) ?? 0;
                                if (xModified == true && ToMonthNo >= BlockMonthCount)
                                {
                                    var DuringTheYearROU = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= 1 && x.MonthNo <= BlockMonthRange && x.IsBlock == false).Sum(x => (double?)x.Depreciation) ?? 0;
                                    var DuringTheYearAdvanceROU = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= 1 && x.MonthNo <= BlockMonthRange && x.IsBlock == false).Sum(x => (double?)x.AdvanceDepreciation) ?? 0;
                                    var DuringTheYearLease = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= 1 && x.MonthNo <= BlockMonthRange && x.IsBlock == false).Sum(x => (double?)x.SettlementofLeaseLiabilities) ?? 0;
                                    obj.DuringTheYearROU = obj.DuringTheYearROU + DuringTheYearROU;
                                    obj.DuringTheYearAdvanceROU = obj.DuringTheYearAdvanceROU + DuringTheYearAdvanceROU;
                                    obj.DuringTheYearLease = obj.DuringTheYearLease + DuringTheYearLease;
                                }
                                Sum4 = Sum4 + obj.DuringTheYearROU;
                                Sum5 = Sum5 + obj.DuringTheYearAdvanceROU;
                                Sum6 = Sum6 + obj.DuringTheYearLease;
                                //==Step3
                                if (xModified == true)
                                {
                                    //==
                                    if (ToMonthNo >= BlockMonthCount)
                                    {
                                        var Step3 = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo == BlockMonthRange).Select(x => new { x.CBROU, x.CBAdvance, x.CBLeaseLiability }).SingleOrDefault();
                                        obj.CurrentYearROU = (Step3 == null) ? 0 : Step3.CBROU;
                                        obj.CurrentYearAdvance = (Step3 == null) ? 0 : Step3.CBAdvance;
                                        obj.CurrentYearLease = (Step3 == null) ? 0 : Step3.CBLeaseLiability;
                                    }
                                    else
                                    {
                                        var Step3 = lstSchedule.Where(x => x.MonthNo == BlockMonthCount - 1).Select(x => new { x.CBROU, x.CBAdvance, x.CBLeaseLiability }).SingleOrDefault();
                                        obj.CurrentYearROU = (Step3 == null) ? 0 : Step3.CBROU;
                                        obj.CurrentYearAdvance = (Step3 == null) ? 0 : Step3.CBAdvance;
                                        obj.CurrentYearLease = (Step3 == null) ? 0 : Step3.CBLeaseLiability;
                                    }
                                    Sum7 = Sum7 + obj.CurrentYearROU;
                                    Sum8 = Sum8 + obj.CurrentYearAdvance;
                                    Sum9 = Sum9 + obj.CurrentYearLease;
                                    //==
                                }
                                else
                                {
                                    if (db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo && x.IsBlock == true).Any() == true)
                                    {
                                        obj.CurrentYearROU = 0;
                                        obj.CurrentYearAdvance = 0;
                                        obj.CurrentYearLease = 0;
                                        Sum7 = Sum7 + obj.CurrentYearROU;
                                        Sum8 = Sum8 + obj.CurrentYearAdvance;
                                        Sum9 = Sum9 + obj.CurrentYearLease;
                                    }
                                    else
                                    {
                                        BlockMonthNo = ToMonthNo;
                                        for (int i = FromMonthNo; i <= ToMonthNo; i++)
                                        {
                                            if (lstSchedule.Where(x => x.MonthNo == i && x.IsBlock == true).Any() == true)
                                            {
                                                BlockMonthNo = i - 1;
                                                break;
                                            }
                                        }
                                        var Step3 = lstSchedule.Where(x => x.MonthNo == BlockMonthNo).Select(x => new { x.CBROU, x.CBAdvance, x.CBLeaseLiability }).SingleOrDefault();
                                        obj.CurrentYearROU = (Step3 == null) ? 0 : Step3.CBROU;
                                        obj.CurrentYearAdvance = (Step3 == null) ? 0 : Step3.CBAdvance;
                                        obj.CurrentYearLease = (Step3 == null) ? 0 : Step3.CBLeaseLiability;
                                        Sum7 = Sum7 + obj.CurrentYearROU;
                                        Sum8 = Sum8 + obj.CurrentYearAdvance;
                                        Sum9 = Sum9 + obj.CurrentYearLease;
                                    }
                                }
                                //==Step4
                                BlockMonthNo = ToMonthNo;
                                for (int i = FromMonthNo; i <= ToMonthNo; i++)
                                {
                                    if (lstSchedule.Where(x => x.MonthNo == i && x.IsBlock == true).Any() == true)
                                    {
                                        BlockMonthNo = i - 1;
                                        break;
                                    }
                                }
                                obj.DuringTheYearInterestExpense = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.InteresetExpense) ?? 0;
                                obj.DuringTheYearDepreciation = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.Depreciation) ?? 0;
                                obj.DuringTheYearAdvanceDepreciation = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.AdvanceDepreciation) ?? 0;
                                obj.RentPaid = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.LeasePayment) ?? 0;
                                if (xModified == true && ToMonthNo >= BlockMonthCount)
                                {
                                    var DuringTheYearInterestExpense = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= 1 && x.MonthNo <= BlockMonthRange && x.IsBlock == false).Sum(x => (double?)x.InteresetExpense) ?? 0;
                                    var DuringTheYearDepreciation = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= 1 && x.MonthNo <= BlockMonthRange && x.IsBlock == false).Sum(x => (double?)x.Depreciation) ?? 0;
                                    var DuringTheYearAdvanceDepreciation = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= 1 && x.MonthNo <= BlockMonthRange && x.IsBlock == false).Sum(x => (double?)x.AdvanceDepreciation) ?? 0;
                                    var RentPaid = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= 1 && x.MonthNo <= BlockMonthRange && x.IsBlock == false).Sum(x => (double?)x.LeasePayment) ?? 0;
                                    obj.DuringTheYearInterestExpense = obj.DuringTheYearInterestExpense + DuringTheYearInterestExpense;
                                    obj.DuringTheYearDepreciation = obj.DuringTheYearDepreciation + DuringTheYearDepreciation;
                                    obj.DuringTheYearAdvanceDepreciation = obj.DuringTheYearAdvanceDepreciation + DuringTheYearAdvanceDepreciation;
                                    obj.RentPaid = obj.RentPaid + RentPaid;
                                }
                                Sum10 = Sum10 + obj.DuringTheYearInterestExpense;
                                Sum11 = Sum11 + obj.DuringTheYearDepreciation;
                                Sum12 = Sum12 + obj.DuringTheYearAdvanceDepreciation;
                                Sum13 = Sum13 + obj.RentPaid;
                            }
                        }
                        else
                        {
                            lstSchedule = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year).ToList();
                            obj = new RMS.Models.IFRSCalculatedSummaryDTO();
                            if (lstSchedule.Count > 0)
                            {
                                FromMonthNo = lstSchedule.Where(x => x.Month == DTO.FromMonth).Select(x => x.MonthNo).SingleOrDefault();
                                ToMonthNo = lstSchedule.Where(x => x.Month == DTO.ToMonth).Select(x => x.MonthNo).SingleOrDefault();
                                if (ToMonthNo == 0) { ToMonthNo = item.AgreementPeriod; }
                                //==Step1
                                var Step1 = lstSchedule.Where(x => x.Month == DTO.FromMonth && x.IsBlock == false).Select(x => new { x.OBROU, x.OBLeaseLiability, x.OBAdvance }).SingleOrDefault();
                                obj.PreviousROU = (Step1 == null) ? 0 : Step1.OBROU;
                                obj.PreviousAdvance = (Step1 == null) ? 0 : Step1.OBAdvance;
                                obj.PreviousLease = (Step1 == null) ? 0 : Step1.OBLeaseLiability;
                                Sum1 = Sum1 + obj.PreviousROU;
                                Sum2 = Sum2 + obj.PreviousAdvance;
                                Sum3 = Sum3 + obj.PreviousLease;
                                //==Step2
                                obj.DuringTheYearROU = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo && x.IsBlock == false).Sum(x => (double?)x.Depreciation) ?? 0;
                                obj.DuringTheYearAdvanceROU = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo && x.IsBlock == false).Sum(x => (double?)x.AdvanceDepreciation) ?? 0;
                                obj.DuringTheYearLease = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo && x.IsBlock == false).Sum(x => (double?)x.SettlementofLeaseLiabilities) ?? 0;
                                Sum4 = Sum4 + obj.DuringTheYearROU;
                                Sum5 = Sum5 + obj.DuringTheYearAdvanceROU;
                                Sum6 = Sum6 + obj.DuringTheYearLease;
                                //==Step3
                                if (db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo && x.IsBlock == true).Any() == true)
                                {
                                    obj.CurrentYearROU = 0;
                                    obj.CurrentYearAdvance = 0;
                                    obj.CurrentYearLease = 0;
                                    Sum7 = Sum7 + obj.CurrentYearROU;
                                    Sum8 = Sum8 + obj.CurrentYearAdvance;
                                    Sum9 = Sum9 + obj.CurrentYearLease;
                                }
                                else
                                {
                                    BlockMonthNo = ToMonthNo;
                                    for (int i = FromMonthNo; i <= ToMonthNo; i++)
                                    {
                                        if (lstSchedule.Where(x => x.MonthNo == i && x.IsBlock == true).Any() == true)
                                        {
                                            BlockMonthNo = i - 1;
                                            break;
                                        }
                                    }
                                    var Step3 = lstSchedule.Where(x => x.MonthNo == BlockMonthNo).Select(x => new { x.CBROU, x.CBAdvance, x.CBLeaseLiability }).SingleOrDefault();
                                    obj.CurrentYearROU = (Step3 == null) ? 0 : Step3.CBROU;
                                    obj.CurrentYearAdvance = (Step3 == null) ? 0 : Step3.CBAdvance;
                                    obj.CurrentYearLease = (Step3 == null) ? 0 : Step3.CBLeaseLiability;
                                    Sum7 = Sum7 + obj.CurrentYearROU;
                                    Sum8 = Sum8 + obj.CurrentYearAdvance;
                                    Sum9 = Sum9 + obj.CurrentYearLease;
                                }
                                //==Step4
                                BlockMonthNo = ToMonthNo;
                                for (int i = FromMonthNo; i <= ToMonthNo; i++)
                                {
                                    if (lstSchedule.Where(x => x.MonthNo == i && x.IsBlock == true).Any() == true)
                                    {
                                        BlockMonthNo = i - 1;
                                        break;
                                    }
                                }
                                obj.DuringTheYearInterestExpense = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.InteresetExpense) ?? 0;
                                obj.DuringTheYearDepreciation = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.Depreciation) ?? 0;
                                obj.DuringTheYearAdvanceDepreciation = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.AdvanceDepreciation) ?? 0;
                                obj.RentPaid = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.LeasePayment) ?? 0;
                                Sum10 = Sum10 + obj.DuringTheYearInterestExpense;
                                Sum11 = Sum11 + obj.DuringTheYearDepreciation;
                                Sum12 = Sum12 + obj.DuringTheYearAdvanceDepreciation;
                                Sum13 = Sum13 + obj.RentPaid;
                            }
                        }
                        //==Agreement Details
                        //==Finding the Block Month No
                        var MonthInfo = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.IsBlock == true).OrderBy(x => x.IFRSSLNo).Select(x => new { x.MonthNo, x.Year, x.Month }).Take(1).SingleOrDefault();
                        if (MonthInfo != null)
                        {
                            obj.MonthNo = MonthInfo.MonthNo;
                            obj.Year = MonthInfo.Year;
                            obj.Month = MonthInfo.Month;
                        }
                        //==
                        SLNO++;
                        obj.SLNO = SLNO;
                        obj.AgreementSLNo = item.AgreementSLNo;
                        obj.AgreementCode = item.AgreementCode;
                        obj.AliasCode = item.AliasCode;
                        //if (item.AgreementType == AgreementType.Renewal)
                        //{
                        //    obj.xAliasCode = db.AgreementInfos.Where(x => x.AgreementSLNo == item.xRenewalAgreementSLNo).Select(x => x.AliasCode).SingleOrDefault();
                        //}
                        //else if (item.AgreementType == AgreementType.Modified)
                        //{
                        //    obj.xAliasCode = db.AgreementInfos.Where(x => x.AgreementSLNo == item.xModifiedAgreementSLNo).Select(x => x.AliasCode).SingleOrDefault();
                        //    if (xModified == true)
                        //    {
                        //        if (BlockMonthRange > 0)
                        //        {
                        //            obj.AliasCode = obj.AliasCode;
                        //        }
                        //        else
                        //        {
                        //            obj.AliasCode = obj.xAliasCode;
                        //        }
                        //    }
                        //}
                        //else
                        //{
                        //    obj.xAliasCode = null;
                        //}
                        obj.AgreementName = item.AgreementName;
                        obj.PremiseType = db.PremiseTypeInfos.Where(x => x.PremiseTypeSLNo == item.PremiseTypeSLNo).Select(x => x.PremiseType).SingleOrDefault();
                        obj.PremiseName = item.PremiseName;
                        obj.AgreementStartDate = item.AgreementStartDate.ToString("dd/MM/yyyy");
                        obj.AgreementEndDate = item.AgreementEndDate.ToString("dd/MM/yyyy");
                        obj.AgreementPeriod = item.AgreementPeriod;
                        obj.CostPerUnit = item.CostPerUnit;
                        obj.TotalArea = item.TotalArea;
                        obj.AdvanceAmount = item.AdvanceAmount + item.AdditionalAdvanceAmount;
                        obj.RentDueDay = item.RentDueDay;
                        obj.ClusterGroup = item.ClusterGroup;
                        if (item.IsBlock == false)
                        {
                            obj.BlockText = "Open";
                        }
                        else
                        {
                            obj.BlockText = "Terminated";
                            obj.BlockDate = item.BlockDate;
                        }
                        //==Add to list
                        lstReport.Add(obj);
                    }
                    ViewBag.DateRange = DTO.FromMonth + " -" + DTO.ToMonth + ", " + DTO.Year;
                    ViewBag.Step1 = "As at Dec " + (DTO.Year - 1);
                    ViewBag.Step2 = "Period " + DTO.Year;
                    ViewBag.Step3 = "As at " + DTO.ToMonth.Substring(0, 3) + " " + DTO.Year;
                    ViewBag.Step4 = "Period " + DTO.Year;
                    ViewBag.SLNo = SLNO + 1;
                    ViewBag.Sum1 = Sum1.ToString("N2");
                    ViewBag.Sum2 = Sum2.ToString("N2");
                    ViewBag.Sum3 = Sum3.ToString("N2");
                    ViewBag.Sum4 = Sum4.ToString("N2");
                    ViewBag.Sum5 = Sum5.ToString("N2");
                    ViewBag.Sum6 = Sum6.ToString("N2");
                    ViewBag.Sum7 = Sum7.ToString("N2");
                    ViewBag.Sum8 = Sum8.ToString("N2");
                    ViewBag.Sum9 = Sum9.ToString("N2");
                    ViewBag.Sum10 = Sum10.ToString("N2");
                    ViewBag.Sum11 = Sum11.ToString("N2");
                    ViewBag.Sum12 = Sum12.ToString("N2");
                    ViewBag.Sum13 = Sum13.ToString("N2");
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.CalculatedSummaryReport, lstReport);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RentForecast()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentForecast";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 51 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;

                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();

                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();

                    RMS.Models.CostCenterScheduleDTO DTO = new RMS.Models.CostCenterScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentForecast, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult RentForecast(RMS.Models.CostCenterScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentForecast";
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    IList<RMS.Models.ContractScheduleDTO> lstContractSchedule = new List<RMS.Models.ContractScheduleDTO>();
                    IList<RMS.Models.CostCenterScheduleDTO> lstCostCenterSchedule = new List<RMS.Models.CostCenterScheduleDTO>();
                    DateTime dtFromDate = DateTime.ParseExact(DTO.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime dtToDate = DateTime.ParseExact(DTO.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    ViewBag.DateRange = DTO.FromDate + " - " + DTO.ToDate;
                    //==
                    if (DTO.CheckboxCCWise == false)
                    {
                        if (DTO.AgreementSLNoCheckList != null)
                        {
                            //==By Agreement
                            var queryContractSchedule = from CS in db.ContractSchedules
                                                        join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                        join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                        join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                        join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                        where DTO.AgreementSLNoCheckList.Contains(CS.AgreementSLNo) &&
                                                                CS.ScheduleDate >= dtFromDate && CS.ScheduleDate <= dtToDate
                                                        orderby AI.AgreementCode ascending
                                                        select new
                                                        {
                                                            CS.ContractScheduleSLNo,
                                                            CS.ScheduleDate,
                                                            CS.AgreementSLNo,
                                                            AI.PremiseTypeSLNo,
                                                            PT.PremiseType,
                                                            AI.PremiseName,
                                                            AI.AgreementCode,
                                                            AI.AliasCode,
                                                            AI.AgreementName,
                                                            AI.AgreementStartDate,
                                                            AI.AgreementEndDate,
                                                            AI.AgreementPeriod,
                                                            AI.RenewalFrequency,
                                                            AI.RentDueDay,
                                                            AI.UOM,
                                                            CS.MonthNo,
                                                            CS.Year,
                                                            CS.Month,
                                                            CS.ReviewNo,
                                                            CS.CostPerUnit,
                                                            AI.TotalArea,
                                                            CS.TotalRentAmount,
                                                            AI.AdvanceAmount,
                                                            AI.AdditionalAdvanceAmount,
                                                            AI.AdvanceAdjustmentPeriod,
                                                            CS.AdvanceAdjustmentAmount,
                                                            AI.ReviewFrequency,
                                                            AI.ReviewPercentage,
                                                            AI.CashGLCode,
                                                            AI.BankGLCode,
                                                            AI.AdvanceGLCode,
                                                            AI.AdvanceAdjustmentGLCode,
                                                            AI.RentGLCode,
                                                            AI.ServiceChargeGLCode,
                                                            AI.TaxGLCode,
                                                            AI.VATGLCode,
                                                            AI.ServiceCharge,
                                                            AI.OnlineTower,
                                                            AI.GeneratorSpace,
                                                            AI.CarParking,
                                                            AI.TaxPercentage,
                                                            CS.TaxAmount,
                                                            AI.VATPercentage,
                                                            CS.VATAmount,
                                                            CS.NetRentAmount,
                                                            CS.UserSLNo,
                                                            U.UserID,
                                                            CS.EntryDate,
                                                            CS.IsPosted,
                                                            CS.PostingID,
                                                            CS.PostingDate,
                                                            CS.PostingUserSLNo,
                                                            S.StatusName,
                                                            CS.IsBlock,
                                                            CS.BlockDate,
                                                            CS.BlockUserSLNo,
                                                            CS.IsPJPosted,
                                                            CS.PJPostingID,
                                                            CS.PJPostingDate,
                                                            CS.PJPostingUserSLNo,
                                                            AI.TaxType,
                                                            AI.VatType,
                                                            AI.ClusterGroup,
                                                            AI.IsHoldBlockPayment,
                                                            AI.Special,
                                                            AI.CalculationMethod,
                                                        };
                            lstContractSchedule = queryContractSchedule.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                            {
                                ContractScheduleSLNo = x.ContractScheduleSLNo,
                                ScheduleDate = x.ScheduleDate,
                                AgreementSLNo = x.AgreementSLNo,
                                PremiseTypeSLNo = x.PremiseTypeSLNo,
                                PremiseType = x.PremiseType,
                                PremiseName = x.PremiseName,
                                AgreementCode = x.AgreementCode,
                                AliasCode = x.AliasCode,
                                AgreementName = x.AgreementName,
                                AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                                AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                                AgreementPeriod = x.AgreementPeriod,
                                RenewalFrequency = x.RenewalFrequency,
                                RentDueDay = x.RentDueDay,
                                UOM = x.UOM,
                                MonthNo = x.MonthNo,
                                Year = x.Year,
                                Month = x.Month,
                                ReviewNo = x.ReviewNo,
                                CostPerUnit = x.CostPerUnit,
                                TotalArea = x.TotalArea,
                                RentAmount = x.CostPerUnit * x.TotalArea,
                                TotalRentAmount = x.TotalRentAmount,
                                AdvanceAmount = x.AdvanceAmount + x.AdditionalAdvanceAmount,
                                AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                                AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                                ReviewFrequency = x.ReviewFrequency,
                                ReviewPercentage = x.ReviewPercentage,
                                CashGLCode = x.CashGLCode,
                                BankGLCode = x.BankGLCode,
                                AdvanceGLCode = x.AdvanceGLCode,
                                AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                                RentGLCode = x.RentGLCode,
                                ServiceChargeGLCode = x.ServiceChargeGLCode,
                                TaxGLCode = x.TaxGLCode,
                                VATGLCode = x.VATGLCode,
                                ServiceCharge = x.ServiceCharge,
                                OnlineTower = x.OnlineTower,
                                GeneratorSpace = x.GeneratorSpace,
                                CarParking = x.CarParking,
                                TaxPercentage = x.TaxPercentage,
                                TaxAmount = x.TaxAmount,
                                VATPercentage = x.VATPercentage,
                                VATAmount = x.VATAmount,
                                NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                                UserSLNo = x.UserSLNo,
                                UserID = x.UserID,
                                EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                                IsPosted = x.IsPosted,
                                PostingID = x.PostingID,
                                PostingDate = x.PostingDate.ToString(),
                                PostingUserSLNo = x.PostingUserSLNo,
                                StatusName = x.StatusName,
                                IsBlock = x.IsBlock,
                                BlockDate = x.BlockDate,
                                BlockUserSLNo = x.BlockUserSLNo,
                                IsPJPosted = x.IsPJPosted,
                                PJPostingID = x.PJPostingID,
                                PJPostingDate = x.PJPostingDate.ToString(),
                                PJPostingUserSLNo = x.PJPostingUserSLNo,
                                TaxType = x.TaxType,
                                VatType = x.VatType,
                                ClusterGroup = x.ClusterGroup,
                                IsHoldBlockPayment = x.IsHoldBlockPayment,
                                Special = x.Special,
                                CalculationMethod = x.CalculationMethod,
                            }).ToList();
                            int SLNOContract = 0;
                            foreach (RMS.Models.ContractScheduleDTO item in lstContractSchedule)
                            {
                                SLNOContract++;
                                item.SLNO = SLNOContract;
                                if (item.IsBlock == false)
                                {
                                    item.BlockText = "Open";
                                }
                                else
                                {
                                    item.BlockText = "Terminated";
                                }
                                //==AP Posted Checked
                                if (item.IsPosted == false)
                                {
                                    item.PostText = "Unposted";
                                }
                                else
                                {
                                    item.PostText = "Posted";
                                }
                                //==Payment Posted Checked
                                if (item.IsPJPosted == true)
                                {
                                    item.PJPostText = "Posted";
                                }
                                else
                                {
                                    //==Payment Blocked Checked
                                    if (item.IsHoldBlockPayment == true)
                                    {
                                        item.PJPostText = "Hold";
                                    }
                                    else
                                    {
                                        item.PJPostText = "Unposted";
                                    }
                                }
                            }
                            return View(AgreementInfoPath.RentForecast_AgreementRentSchedule, lstContractSchedule);
                        }
                        else if (DTO.PremiseTypeSLNoCheckList != null)
                        {
                            //==By Agreement
                            var queryContractSchedule = from CS in db.ContractSchedules
                                                        join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                        join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                        join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                        join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                        where DTO.PremiseTypeSLNoCheckList.Contains(AI.PremiseTypeSLNo) &&
                                                                CS.ScheduleDate >= dtFromDate && CS.ScheduleDate <= dtToDate
                                                        orderby AI.AgreementCode ascending
                                                        select new
                                                        {
                                                            CS.ContractScheduleSLNo,
                                                            CS.ScheduleDate,
                                                            CS.AgreementSLNo,
                                                            AI.PremiseTypeSLNo,
                                                            PT.PremiseType,
                                                            AI.PremiseName,
                                                            AI.AgreementCode,
                                                            AI.AliasCode,
                                                            AI.AgreementName,
                                                            AI.AgreementStartDate,
                                                            AI.AgreementEndDate,
                                                            AI.AgreementPeriod,
                                                            AI.RenewalFrequency,
                                                            AI.RentDueDay,
                                                            AI.UOM,
                                                            CS.MonthNo,
                                                            CS.Year,
                                                            CS.Month,
                                                            CS.ReviewNo,
                                                            CS.CostPerUnit,
                                                            AI.TotalArea,
                                                            CS.TotalRentAmount,
                                                            AI.AdvanceAmount,
                                                            AI.AdditionalAdvanceAmount,
                                                            AI.AdvanceAdjustmentPeriod,
                                                            CS.AdvanceAdjustmentAmount,
                                                            AI.ReviewFrequency,
                                                            AI.ReviewPercentage,
                                                            AI.CashGLCode,
                                                            AI.BankGLCode,
                                                            AI.AdvanceGLCode,
                                                            AI.AdvanceAdjustmentGLCode,
                                                            AI.RentGLCode,
                                                            AI.ServiceChargeGLCode,
                                                            AI.TaxGLCode,
                                                            AI.VATGLCode,
                                                            AI.ServiceCharge,
                                                            AI.OnlineTower,
                                                            AI.GeneratorSpace,
                                                            AI.CarParking,
                                                            AI.TaxPercentage,
                                                            CS.TaxAmount,
                                                            AI.VATPercentage,
                                                            CS.VATAmount,
                                                            CS.NetRentAmount,
                                                            CS.UserSLNo,
                                                            U.UserID,
                                                            CS.EntryDate,
                                                            CS.IsPosted,
                                                            CS.PostingID,
                                                            CS.PostingDate,
                                                            CS.PostingUserSLNo,
                                                            S.StatusName,
                                                            CS.IsBlock,
                                                            CS.BlockDate,
                                                            CS.BlockUserSLNo,
                                                            CS.IsPJPosted,
                                                            CS.PJPostingID,
                                                            CS.PJPostingDate,
                                                            CS.PJPostingUserSLNo,
                                                            AI.TaxType,
                                                            AI.VatType,
                                                            AI.ClusterGroup,
                                                            AI.IsHoldBlockPayment,
                                                            AI.Special,
                                                            AI.CalculationMethod,
                                                        };
                            lstContractSchedule = queryContractSchedule.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                            {
                                ContractScheduleSLNo = x.ContractScheduleSLNo,
                                ScheduleDate = x.ScheduleDate,
                                AgreementSLNo = x.AgreementSLNo,
                                PremiseTypeSLNo = x.PremiseTypeSLNo,
                                PremiseType = x.PremiseType,
                                PremiseName = x.PremiseName,
                                AgreementCode = x.AgreementCode,
                                AliasCode = x.AliasCode,
                                AgreementName = x.AgreementName,
                                AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                                AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                                AgreementPeriod = x.AgreementPeriod,
                                RenewalFrequency = x.RenewalFrequency,
                                RentDueDay = x.RentDueDay,
                                UOM = x.UOM,
                                MonthNo = x.MonthNo,
                                Year = x.Year,
                                Month = x.Month,
                                ReviewNo = x.ReviewNo,
                                CostPerUnit = x.CostPerUnit,
                                TotalArea = x.TotalArea,
                                RentAmount = x.CostPerUnit * x.TotalArea,
                                TotalRentAmount = x.TotalRentAmount,
                                AdvanceAmount = x.AdvanceAmount + x.AdditionalAdvanceAmount,
                                AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                                AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                                ReviewFrequency = x.ReviewFrequency,
                                ReviewPercentage = x.ReviewPercentage,
                                CashGLCode = x.CashGLCode,
                                BankGLCode = x.BankGLCode,
                                AdvanceGLCode = x.AdvanceGLCode,
                                AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                                RentGLCode = x.RentGLCode,
                                ServiceChargeGLCode = x.ServiceChargeGLCode,
                                TaxGLCode = x.TaxGLCode,
                                VATGLCode = x.VATGLCode,
                                ServiceCharge = x.ServiceCharge,
                                OnlineTower = x.OnlineTower,
                                GeneratorSpace = x.GeneratorSpace,
                                CarParking = x.CarParking,
                                TaxPercentage = x.TaxPercentage,
                                TaxAmount = x.TaxAmount,
                                VATPercentage = x.VATPercentage,
                                VATAmount = x.VATAmount,
                                NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                                UserSLNo = x.UserSLNo,
                                UserID = x.UserID,
                                EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                                IsPosted = x.IsPosted,
                                PostingID = x.PostingID,
                                PostingDate = x.PostingDate.ToString(),
                                PostingUserSLNo = x.PostingUserSLNo,
                                StatusName = x.StatusName,
                                IsBlock = x.IsBlock,
                                BlockDate = x.BlockDate,
                                BlockUserSLNo = x.BlockUserSLNo,
                                IsPJPosted = x.IsPJPosted,
                                PJPostingID = x.PJPostingID,
                                PJPostingDate = x.PJPostingDate.ToString(),
                                PJPostingUserSLNo = x.PJPostingUserSLNo,
                                TaxType = x.TaxType,
                                VatType = x.VatType,
                                ClusterGroup = x.ClusterGroup,
                                IsHoldBlockPayment = x.IsHoldBlockPayment,
                                Special = x.Special,
                                CalculationMethod = x.CalculationMethod,
                            }).ToList();
                            int SLNOContract = 0;
                            foreach (RMS.Models.ContractScheduleDTO item in lstContractSchedule)
                            {
                                SLNOContract++;
                                item.SLNO = SLNOContract;
                                if (item.IsBlock == false)
                                {
                                    item.BlockText = "Open";
                                }
                                else
                                {
                                    item.BlockText = "Terminated";
                                }
                                //==AP Posted Checked
                                if (item.IsPosted == false)
                                {
                                    item.PostText = "Unposted";
                                }
                                else
                                {
                                    item.PostText = "Posted";
                                }
                                //==Payment Posted Checked
                                if (item.IsPJPosted == true)
                                {
                                    item.PJPostText = "Posted";
                                }
                                else
                                {
                                    //==Payment Blocked Checked
                                    if (item.IsHoldBlockPayment == true)
                                    {
                                        item.PJPostText = "Hold";
                                    }
                                    else
                                    {
                                        item.PJPostText = "Unposted";
                                    }
                                }
                            }
                            return View(AgreementInfoPath.RentForecast_AgreementRentSchedule, lstContractSchedule);
                        }
                        else
                        {
                            //==By All Agreements
                            var queryContractSchedule = from CS in db.ContractSchedules
                                                        join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                        join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                        join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                        join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                        where CS.ScheduleDate >= dtFromDate && CS.ScheduleDate <= dtToDate
                                                        orderby AI.AgreementCode ascending
                                                        select new
                                                        {
                                                            CS.ContractScheduleSLNo,
                                                            CS.ScheduleDate,
                                                            CS.AgreementSLNo,
                                                            AI.PremiseTypeSLNo,
                                                            PT.PremiseType,
                                                            AI.PremiseName,
                                                            AI.AgreementCode,
                                                            AI.AliasCode,
                                                            AI.AgreementName,
                                                            AI.AgreementStartDate,
                                                            AI.AgreementEndDate,
                                                            AI.AgreementPeriod,
                                                            AI.RenewalFrequency,
                                                            AI.RentDueDay,
                                                            AI.UOM,
                                                            CS.MonthNo,
                                                            CS.Year,
                                                            CS.Month,
                                                            CS.ReviewNo,
                                                            CS.CostPerUnit,
                                                            AI.TotalArea,
                                                            CS.TotalRentAmount,
                                                            AI.AdvanceAmount,
                                                            AI.AdditionalAdvanceAmount,
                                                            AI.AdvanceAdjustmentPeriod,
                                                            CS.AdvanceAdjustmentAmount,
                                                            AI.ReviewFrequency,
                                                            AI.ReviewPercentage,
                                                            AI.CashGLCode,
                                                            AI.BankGLCode,
                                                            AI.AdvanceGLCode,
                                                            AI.AdvanceAdjustmentGLCode,
                                                            AI.RentGLCode,
                                                            AI.ServiceChargeGLCode,
                                                            AI.TaxGLCode,
                                                            AI.VATGLCode,
                                                            AI.ServiceCharge,
                                                            AI.OnlineTower,
                                                            AI.GeneratorSpace,
                                                            AI.CarParking,
                                                            AI.TaxPercentage,
                                                            CS.TaxAmount,
                                                            AI.VATPercentage,
                                                            CS.VATAmount,
                                                            CS.NetRentAmount,
                                                            CS.UserSLNo,
                                                            U.UserID,
                                                            CS.EntryDate,
                                                            CS.IsPosted,
                                                            CS.PostingID,
                                                            CS.PostingDate,
                                                            CS.PostingUserSLNo,
                                                            S.StatusName,
                                                            CS.IsBlock,
                                                            CS.BlockDate,
                                                            CS.BlockUserSLNo,
                                                            CS.IsPJPosted,
                                                            CS.PJPostingID,
                                                            CS.PJPostingDate,
                                                            CS.PJPostingUserSLNo,
                                                            AI.TaxType,
                                                            AI.VatType,
                                                            AI.ClusterGroup,
                                                            AI.IsHoldBlockPayment,
                                                            AI.Special,
                                                            AI.CalculationMethod,
                                                        };
                            lstContractSchedule = queryContractSchedule.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                            {
                                ContractScheduleSLNo = x.ContractScheduleSLNo,
                                ScheduleDate = x.ScheduleDate,
                                AgreementSLNo = x.AgreementSLNo,
                                PremiseTypeSLNo = x.PremiseTypeSLNo,
                                PremiseType = x.PremiseType,
                                PremiseName = x.PremiseName,
                                AgreementCode = x.AgreementCode,
                                AliasCode = x.AliasCode,
                                AgreementName = x.AgreementName,
                                AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                                AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                                AgreementPeriod = x.AgreementPeriod,
                                RenewalFrequency = x.RenewalFrequency,
                                RentDueDay = x.RentDueDay,
                                UOM = x.UOM,
                                MonthNo = x.MonthNo,
                                Year = x.Year,
                                Month = x.Month,
                                ReviewNo = x.ReviewNo,
                                CostPerUnit = x.CostPerUnit,
                                TotalArea = x.TotalArea,
                                RentAmount = x.CostPerUnit * x.TotalArea,
                                TotalRentAmount = x.TotalRentAmount,
                                AdvanceAmount = x.AdvanceAmount + x.AdditionalAdvanceAmount,
                                AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                                AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                                ReviewFrequency = x.ReviewFrequency,
                                ReviewPercentage = x.ReviewPercentage,
                                CashGLCode = x.CashGLCode,
                                BankGLCode = x.BankGLCode,
                                AdvanceGLCode = x.AdvanceGLCode,
                                AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                                RentGLCode = x.RentGLCode,
                                ServiceChargeGLCode = x.ServiceChargeGLCode,
                                TaxGLCode = x.TaxGLCode,
                                VATGLCode = x.VATGLCode,
                                ServiceCharge = x.ServiceCharge,
                                OnlineTower = x.OnlineTower,
                                GeneratorSpace = x.GeneratorSpace,
                                CarParking = x.CarParking,
                                TaxPercentage = x.TaxPercentage,
                                TaxAmount = x.TaxAmount,
                                VATPercentage = x.VATPercentage,
                                VATAmount = x.VATAmount,
                                NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                                UserSLNo = x.UserSLNo,
                                UserID = x.UserID,
                                EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                                IsPosted = x.IsPosted,
                                PostingID = x.PostingID,
                                PostingDate = x.PostingDate.ToString(),
                                PostingUserSLNo = x.PostingUserSLNo,
                                StatusName = x.StatusName,
                                IsBlock = x.IsBlock,
                                BlockDate = x.BlockDate,
                                BlockUserSLNo = x.BlockUserSLNo,
                                IsPJPosted = x.IsPJPosted,
                                PJPostingID = x.PJPostingID,
                                PJPostingDate = x.PJPostingDate.ToString(),
                                PJPostingUserSLNo = x.PJPostingUserSLNo,
                                TaxType = x.TaxType,
                                VatType = x.VatType,
                                ClusterGroup = x.ClusterGroup,
                                IsHoldBlockPayment = x.IsHoldBlockPayment,
                                Special = x.Special,
                                CalculationMethod = x.CalculationMethod,
                            }).ToList();
                            int SLNOContract = 0;
                            foreach (RMS.Models.ContractScheduleDTO item in lstContractSchedule)
                            {
                                SLNOContract++;
                                item.SLNO = SLNOContract;
                                if (item.IsBlock == false)
                                {
                                    item.BlockText = "Open";
                                }
                                else
                                {
                                    item.BlockText = "Terminated";
                                }
                                //==AP Posted Checked
                                if (item.IsPosted == false)
                                {
                                    item.PostText = "Unposted";
                                }
                                else
                                {
                                    item.PostText = "Posted";
                                }
                                //==Payment Posted Checked
                                if (item.IsPJPosted == true)
                                {
                                    item.PJPostText = "Posted";
                                }
                                else
                                {
                                    //==Payment Blocked Checked
                                    if (item.IsHoldBlockPayment == true)
                                    {
                                        item.PJPostText = "Hold";
                                    }
                                    else
                                    {
                                        item.PJPostText = "Unposted";
                                    }
                                }
                            }
                            return View(AgreementInfoPath.RentForecast_AgreementRentSchedule, lstContractSchedule);
                        }
                    }
                    else
                    {
                        if (DTO.AgreementSLNoCheckList != null)
                        {
                            //==By Agreement
                            var queryCostCenterSchedule = from CS in db.CostCenterSchedules
                                                          join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                          join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                          join CC in db.CostCenterInfos on CS.CCSLNo equals CC.CCSLNo
                                                          join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                          join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                          where DTO.AgreementSLNoCheckList.Contains(CS.AgreementSLNo) &&
                                                                CS.ScheduleDate >= dtFromDate && CS.ScheduleDate <= dtToDate
                                                          orderby AI.AgreementCode ascending
                                                          select new
                                                          {
                                                              CS.CCScheduleSLNo,
                                                              CS.ScheduleDate,
                                                              CS.AgreementSLNo,
                                                              AI.PremiseTypeSLNo,
                                                              PT.PremiseType,
                                                              AI.PremiseName,
                                                              AI.AgreementCode,
                                                              AI.AliasCode,
                                                              AI.AgreementName,
                                                              AI.AgreementStartDate,
                                                              AI.AgreementEndDate,
                                                              AI.AgreementPeriod,
                                                              AI.RenewalFrequency,
                                                              AI.RentDueDay,
                                                              AI.UOM,
                                                              CS.MonthNo,
                                                              CS.Year,
                                                              CS.Month,
                                                              CS.ReviewNo,
                                                              CS.CostPerUnit,
                                                              AI.TotalArea,
                                                              CS.TotalRentAmount,
                                                              AI.AdvanceAmount,
                                                              AI.AdvanceAdjustmentPeriod,
                                                              AiAdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount,
                                                              CS.AdvanceAdjustmentAmount,
                                                              AiTaxPercentage = AI.TaxPercentage,
                                                              AiTaxAmount = AI.TaxAmount,
                                                              CS.TaxAmount,
                                                              AiVATPercentage = AI.VATPercentage,
                                                              AiVATAmount = AI.VATAmount,
                                                              CS.VATAmount,
                                                              AiNetRentAmount = AI.NetRentAmount,
                                                              CS.NetRentAmount,
                                                              CS.UserSLNo,
                                                              U.UserID,
                                                              CS.EntryDate,
                                                              S.StatusName,
                                                              CC.CCCode,
                                                              CC.CCName,
                                                              CC.SOLCode,
                                                              CC.SOLName,
                                                              CC.CCShareAllotment,
                                                              CS.IsBlock,
                                                              CS.BlockDate,
                                                              CS.BlockUserSLNo,
                                                              CS.IsPosted,
                                                              CS.IsPJPosted,
                                                              AI.TaxType,
                                                              AI.VatType,
                                                              AI.CalculationMethod,
                                                              AI.Special,
                                                          };
                            lstCostCenterSchedule = queryCostCenterSchedule.AsEnumerable().Select(x => new RMS.Models.CostCenterScheduleDTO
                            {
                                CCScheduleSLNo = x.CCScheduleSLNo,
                                ScheduleDate = x.ScheduleDate,
                                AgreementSLNo = x.AgreementSLNo,
                                PremiseTypeSLNo = x.PremiseTypeSLNo,
                                PremiseType = x.PremiseType,
                                PremiseName = x.PremiseName,
                                AgreementCode = x.AgreementCode,
                                AliasCode = x.AliasCode,
                                AgreementName = x.AgreementName,
                                AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                                AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                                AgreementPeriod = x.AgreementPeriod,
                                RenewalFrequency = x.RenewalFrequency,
                                RentDueDay = x.RentDueDay,
                                UOM = x.UOM,
                                MonthNo = x.MonthNo,
                                Year = x.Year,
                                Month = x.Month,
                                ReviewNo = x.ReviewNo,
                                CostPerUnit = x.CostPerUnit,
                                TotalArea = x.TotalArea,
                                RentAmount = x.CostPerUnit * x.TotalArea,
                                TotalRentAmount = x.TotalRentAmount,
                                AdvanceAmount = x.AdvanceAmount,
                                AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                                AiAdvanceAdjustmentAmount = x.AiAdvanceAdjustmentAmount,
                                AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                                AiTaxPercentage = x.AiTaxPercentage,
                                AiTaxAmount = x.AiTaxAmount,
                                TaxAmount = x.TaxAmount,
                                AiVATPercentage = x.AiVATPercentage,
                                AiVATAmount = x.AiVATAmount,
                                VATAmount = x.VATAmount,
                                AiNetRentAmount = x.NetRentAmount,
                                NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                                UserSLNo = x.UserSLNo,
                                UserID = x.UserID,
                                EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                                StatusName = x.StatusName,
                                CCCode = x.CCCode,
                                CCName = x.CCName,
                                SOLCode = x.SOLCode,
                                SOLName = x.SOLName,
                                CCSharePercentage = x.CCShareAllotment,
                                IsBlock = x.IsBlock,
                                BlockDate = x.BlockDate,
                                BlockUserSLNo = x.BlockUserSLNo,
                                IsPJPosted = x.IsPJPosted,
                                IsPosted = x.IsPosted,
                                TaxType = x.TaxType,
                                VatType = x.VatType,
                                CalculationMethod = x.CalculationMethod,
                                Special = x.Special,
                            }).ToList();
                            int SLNOCostCenter = 0;
                            foreach (RMS.Models.CostCenterScheduleDTO item in lstCostCenterSchedule)
                            {
                                SLNOCostCenter++;
                                item.SLNO = SLNOCostCenter;
                                if (item.IsBlock == false)
                                {
                                    item.BlockText = "Open";
                                }
                                else
                                {
                                    item.BlockText = "Terminated";
                                }
                                //==AP Posted Checked
                                if (item.IsPosted == false)
                                {
                                    item.PostText = "Unposted";
                                }
                                else
                                {
                                    item.PostText = "Posted";
                                }
                                //==Payment Posted Checked
                                if (item.IsPJPosted == true)
                                {
                                    item.PJPostText = "Posted";
                                }
                                else
                                {
                                    //==Payment Blocked Checked
                                    if (item.IsHoldBlockPayment == true)
                                    {
                                        item.PJPostText = "Hold";
                                    }
                                    else
                                    {
                                        item.PJPostText = "Unposted";
                                    }
                                }
                            }
                            return View(AgreementInfoPath.RentForecastCCReport, lstCostCenterSchedule);
                        }
                        else if (DTO.PremiseTypeSLNoCheckList != null)
                        {
                            //==By Agreement
                            var queryCostCenterSchedule = from CS in db.CostCenterSchedules
                                                          join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                          join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                          join CC in db.CostCenterInfos on CS.CCSLNo equals CC.CCSLNo
                                                          join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                          join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                          where DTO.PremiseTypeSLNoCheckList.Contains(AI.PremiseTypeSLNo) &&
                                                                         CS.ScheduleDate >= dtFromDate && CS.ScheduleDate <= dtToDate
                                                          orderby AI.AgreementCode ascending
                                                          select new
                                                          {
                                                              CS.CCScheduleSLNo,
                                                              CS.ScheduleDate,
                                                              CS.AgreementSLNo,
                                                              AI.PremiseTypeSLNo,
                                                              PT.PremiseType,
                                                              AI.PremiseName,
                                                              AI.AgreementCode,
                                                              AI.AliasCode,
                                                              AI.AgreementName,
                                                              AI.AgreementStartDate,
                                                              AI.AgreementEndDate,
                                                              AI.AgreementPeriod,
                                                              AI.RenewalFrequency,
                                                              AI.RentDueDay,
                                                              AI.UOM,
                                                              CS.MonthNo,
                                                              CS.Year,
                                                              CS.Month,
                                                              CS.ReviewNo,
                                                              CS.CostPerUnit,
                                                              AI.TotalArea,
                                                              CS.TotalRentAmount,
                                                              AI.AdvanceAmount,
                                                              AI.AdvanceAdjustmentPeriod,
                                                              AiAdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount,
                                                              CS.AdvanceAdjustmentAmount,
                                                              AiTaxPercentage = AI.TaxPercentage,
                                                              AiTaxAmount = AI.TaxAmount,
                                                              CS.TaxAmount,
                                                              AiVATPercentage = AI.VATPercentage,
                                                              AiVATAmount = AI.VATAmount,
                                                              CS.VATAmount,
                                                              AiNetRentAmount = AI.NetRentAmount,
                                                              CS.NetRentAmount,
                                                              CS.UserSLNo,
                                                              U.UserID,
                                                              CS.EntryDate,
                                                              S.StatusName,
                                                              CC.CCCode,
                                                              CC.CCName,
                                                              CC.SOLCode,
                                                              CC.SOLName,
                                                              CC.CCShareAllotment,
                                                              CS.IsBlock,
                                                              CS.BlockDate,
                                                              CS.BlockUserSLNo,
                                                              CS.IsPosted,
                                                              CS.IsPJPosted,
                                                              AI.TaxType,
                                                              AI.VatType,
                                                              AI.CalculationMethod,
                                                              AI.Special,
                                                          };
                            lstCostCenterSchedule = queryCostCenterSchedule.AsEnumerable().Select(x => new RMS.Models.CostCenterScheduleDTO
                            {
                                CCScheduleSLNo = x.CCScheduleSLNo,
                                ScheduleDate = x.ScheduleDate,
                                AgreementSLNo = x.AgreementSLNo,
                                PremiseTypeSLNo = x.PremiseTypeSLNo,
                                PremiseType = x.PremiseType,
                                PremiseName = x.PremiseName,
                                AgreementCode = x.AgreementCode,
                                AliasCode = x.AliasCode,
                                AgreementName = x.AgreementName,
                                AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                                AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                                AgreementPeriod = x.AgreementPeriod,
                                RenewalFrequency = x.RenewalFrequency,
                                RentDueDay = x.RentDueDay,
                                UOM = x.UOM,
                                MonthNo = x.MonthNo,
                                Year = x.Year,
                                Month = x.Month,
                                ReviewNo = x.ReviewNo,
                                CostPerUnit = x.CostPerUnit,
                                TotalArea = x.TotalArea,
                                RentAmount = x.CostPerUnit * x.TotalArea,
                                TotalRentAmount = x.TotalRentAmount,
                                AdvanceAmount = x.AdvanceAmount,
                                AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                                AiAdvanceAdjustmentAmount = x.AiAdvanceAdjustmentAmount,
                                AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                                AiTaxPercentage = x.AiTaxPercentage,
                                AiTaxAmount = x.AiTaxAmount,
                                TaxAmount = x.TaxAmount,
                                AiVATPercentage = x.AiVATPercentage,
                                AiVATAmount = x.AiVATAmount,
                                VATAmount = x.VATAmount,
                                AiNetRentAmount = x.NetRentAmount,
                                NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                                UserSLNo = x.UserSLNo,
                                UserID = x.UserID,
                                EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                                StatusName = x.StatusName,
                                CCCode = x.CCCode,
                                CCName = x.CCName,
                                SOLCode = x.SOLCode,
                                SOLName = x.SOLName,
                                CCSharePercentage = x.CCShareAllotment,
                                IsBlock = x.IsBlock,
                                BlockDate = x.BlockDate,
                                BlockUserSLNo = x.BlockUserSLNo,
                                IsPJPosted = x.IsPJPosted,
                                IsPosted = x.IsPosted,
                                TaxType = x.TaxType,
                                VatType = x.VatType,
                                CalculationMethod = x.CalculationMethod,
                                Special = x.Special,
                            }).ToList();
                            int SLNOCostCenter = 0;
                            foreach (RMS.Models.CostCenterScheduleDTO item in lstCostCenterSchedule)
                            {
                                SLNOCostCenter++;
                                item.SLNO = SLNOCostCenter;
                                if (item.IsBlock == false)
                                {
                                    item.BlockText = "Open";
                                }
                                else
                                {
                                    item.BlockText = "Terminated";
                                }
                                //==AP Posted Checked
                                if (item.IsPosted == false)
                                {
                                    item.PostText = "Unposted";
                                }
                                else
                                {
                                    item.PostText = "Posted";
                                }
                                //==Payment Posted Checked
                                if (item.IsPJPosted == true)
                                {
                                    item.PJPostText = "Posted";
                                }
                                else
                                {
                                    //==Payment Blocked Checked
                                    if (item.IsHoldBlockPayment == true)
                                    {
                                        item.PJPostText = "Hold";
                                    }
                                    else
                                    {
                                        item.PJPostText = "Unposted";
                                    }
                                }
                            }
                            return View(AgreementInfoPath.RentForecastCCReport, lstCostCenterSchedule);
                        }
                        else
                        {
                            //==By All Agreements
                            var queryCostCenterSchedule = from CS in db.CostCenterSchedules
                                                          join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                          join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                          join CC in db.CostCenterInfos on CS.CCSLNo equals CC.CCSLNo
                                                          join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                          join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                          where CS.ScheduleDate >= dtFromDate && CS.ScheduleDate <= dtToDate
                                                          orderby AI.AgreementCode ascending
                                                          select new
                                                          {
                                                              CS.CCScheduleSLNo,
                                                              CS.ScheduleDate,
                                                              CS.AgreementSLNo,
                                                              AI.PremiseTypeSLNo,
                                                              PT.PremiseType,
                                                              AI.PremiseName,
                                                              AI.AgreementCode,
                                                              AI.AliasCode,
                                                              AI.AgreementName,
                                                              AI.AgreementStartDate,
                                                              AI.AgreementEndDate,
                                                              AI.AgreementPeriod,
                                                              AI.RenewalFrequency,
                                                              AI.RentDueDay,
                                                              AI.UOM,
                                                              CS.MonthNo,
                                                              CS.Year,
                                                              CS.Month,
                                                              CS.ReviewNo,
                                                              CS.CostPerUnit,
                                                              AI.TotalArea,
                                                              CS.TotalRentAmount,
                                                              AI.AdvanceAmount,
                                                              AI.AdvanceAdjustmentPeriod,
                                                              AiAdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount,
                                                              CS.AdvanceAdjustmentAmount,
                                                              AiTaxPercentage = AI.TaxPercentage,
                                                              AiTaxAmount = AI.TaxAmount,
                                                              CS.TaxAmount,
                                                              AiVATPercentage = AI.VATPercentage,
                                                              AiVATAmount = AI.VATAmount,
                                                              CS.VATAmount,
                                                              AiNetRentAmount = AI.NetRentAmount,
                                                              CS.NetRentAmount,
                                                              CS.UserSLNo,
                                                              U.UserID,
                                                              CS.EntryDate,
                                                              S.StatusName,
                                                              CC.CCCode,
                                                              CC.CCName,
                                                              CC.SOLCode,
                                                              CC.SOLName,
                                                              CC.CCShareAllotment,
                                                              CS.IsBlock,
                                                              CS.BlockDate,
                                                              CS.BlockUserSLNo,
                                                              CS.IsPosted,
                                                              CS.IsPJPosted,
                                                              AI.TaxType,
                                                              AI.VatType,
                                                              AI.CalculationMethod,
                                                              AI.Special,
                                                          };
                            lstCostCenterSchedule = queryCostCenterSchedule.AsEnumerable().Select(x => new RMS.Models.CostCenterScheduleDTO
                            {
                                CCScheduleSLNo = x.CCScheduleSLNo,
                                ScheduleDate = x.ScheduleDate,
                                AgreementSLNo = x.AgreementSLNo,
                                PremiseTypeSLNo = x.PremiseTypeSLNo,
                                PremiseType = x.PremiseType,
                                PremiseName = x.PremiseName,
                                AgreementCode = x.AgreementCode,
                                AliasCode = x.AliasCode,
                                AgreementName = x.AgreementName,
                                AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                                AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                                AgreementPeriod = x.AgreementPeriod,
                                RenewalFrequency = x.RenewalFrequency,
                                RentDueDay = x.RentDueDay,
                                UOM = x.UOM,
                                MonthNo = x.MonthNo,
                                Year = x.Year,
                                Month = x.Month,
                                ReviewNo = x.ReviewNo,
                                CostPerUnit = x.CostPerUnit,
                                TotalArea = x.TotalArea,
                                RentAmount = x.CostPerUnit * x.TotalArea,
                                TotalRentAmount = x.TotalRentAmount,
                                AdvanceAmount = x.AdvanceAmount,
                                AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                                AiAdvanceAdjustmentAmount = x.AiAdvanceAdjustmentAmount,
                                AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                                AiTaxPercentage = x.AiTaxPercentage,
                                AiTaxAmount = x.AiTaxAmount,
                                TaxAmount = x.TaxAmount,
                                AiVATPercentage = x.AiVATPercentage,
                                AiVATAmount = x.AiVATAmount,
                                VATAmount = x.VATAmount,
                                AiNetRentAmount = x.NetRentAmount,
                                NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                                UserSLNo = x.UserSLNo,
                                UserID = x.UserID,
                                EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                                StatusName = x.StatusName,
                                CCCode = x.CCCode,
                                CCName = x.CCName,
                                SOLCode = x.SOLCode,
                                SOLName = x.SOLName,
                                CCSharePercentage = x.CCShareAllotment,
                                IsBlock = x.IsBlock,
                                BlockDate = x.BlockDate,
                                BlockUserSLNo = x.BlockUserSLNo,
                                IsPJPosted = x.IsPJPosted,
                                IsPosted = x.IsPosted,
                                TaxType = x.TaxType,
                                VatType = x.VatType,
                                CalculationMethod = x.CalculationMethod,
                                Special = x.Special,
                            }).ToList();
                            int SLNOCostCenter = 0;
                            foreach (RMS.Models.CostCenterScheduleDTO item in lstCostCenterSchedule)
                            {
                                SLNOCostCenter++;
                                item.SLNO = SLNOCostCenter;
                                if (item.IsBlock == false)
                                {
                                    item.BlockText = "Open";
                                }
                                else
                                {
                                    item.BlockText = "Terminated";
                                }
                                //==AP Posted Checked
                                if (item.IsPosted == false)
                                {
                                    item.PostText = "Unposted";
                                }
                                else
                                {
                                    item.PostText = "Posted";
                                }
                                //==Payment Posted Checked
                                if (item.IsPJPosted == true)
                                {
                                    item.PJPostText = "Posted";
                                }
                                else
                                {
                                    //==Payment Blocked Checked
                                    if (item.IsHoldBlockPayment == true)
                                    {
                                        item.PJPostText = "Hold";
                                    }
                                    else
                                    {
                                        item.PJPostText = "Unposted";
                                    }
                                }
                            }
                            return View(AgreementInfoPath.RentForecastCCReport, lstCostCenterSchedule);
                        }
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RentAPReport()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentAPReport";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 56 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;

                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate &&
                    x.IsBlock == false && x.IsRenewal == false && x.IsModified == false && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();

                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();

                    //ViewBag.VendorList = db.LandlordInfos
                    //    .Select(x => new { x.LandlordSLNo, x.VendorCode, x.LandlordName })
                    //    //.GroupBy(y => y.VendorCode)
                    //    .GroupBy(y => new { y.LandlordSLNo, y.VendorCode, y.LandlordName })
                    //    .Select(y => new { LandlordSLNo = y.FirstOrDefault().LandlordSLNo, VendorCode = y.FirstOrDefault().VendorCode, FullName = y.FirstOrDefault().VendorCode + " - " + y.FirstOrDefault().LandlordName }).OrderBy(x => x.FullName).ToList(); ;

                    RMS.Models.CostCenterScheduleDTO DTO = new RMS.Models.CostCenterScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentAPReport, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult RentAPReport(RMS.Models.CostCenterScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentAPReport";
                    IList<RMS.Models.RentAPJournalInfoDTO> lstjs = new List<RMS.Models.RentAPJournalInfoDTO>();
                    if (DTO.AgreementSLNoCheckList != null)
                    {
                        //==Current Month
                        var queryCM = from ji in db.RentAPJournalInfos
                                      join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                      join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                      where DTO.AgreementSLNoCheckList.Contains(ji.AgreementSLNo) &&
                                              ji.LogYear == DTO.Year && ji.LogMonth == DTO.FromMonthName
                                      orderby ji.PostingID ascending
                                      select new
                                      {
                                          ji.PostingID,
                                          ji.PostingDate,
                                          ji.Year,
                                          ji.Month,
                                          U.UserID,
                                          ji.LogYear,
                                          ji.LogMonth,
                                      };
                        lstjs = queryCM.AsEnumerable().Select(x => new RMS.Models.RentAPJournalInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            Year = DTO.Year,
                            Month = DTO.FromMonthName,
                            UserID = x.UserID,
                            LogYear = x.LogYear,
                            LogMonth = x.LogMonth,
                        }).ToList();
                    }
                    else if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        //==Check Current Month
                        var queryPTCM = from ji in db.RentAPJournalInfos
                                        join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                        join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                        join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                        where DTO.PremiseTypeSLNoCheckList.Contains(PT.PremiseTypeSLNo) &&
                                                ji.LogYear == DTO.Year && ji.LogMonth == DTO.FromMonthName
                                        orderby ji.PostingID ascending
                                        select new
                                        {
                                            ji.PostingID,
                                            ji.PostingDate,
                                            ji.Year,
                                            ji.Month,
                                            U.UserID,
                                            ji.LogYear,
                                            ji.LogMonth,
                                        };
                        lstjs = queryPTCM.AsEnumerable().Select(x => new RMS.Models.RentAPJournalInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            Year = DTO.Year,
                            Month = DTO.FromMonthName,
                            UserID = x.UserID,
                            LogYear = x.LogYear,
                            LogMonth = x.LogMonth,
                        }).ToList();
                    }
                    else
                    {
                        //==Check Current Month
                        var queryCM = from ji in db.RentAPJournalInfos
                                      join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                      join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                      where ji.LogYear == DTO.Year && ji.LogMonth == DTO.FromMonthName
                                      orderby ji.PostingID ascending
                                      select new
                                      {
                                          ji.PostingID,
                                          ji.PostingDate,
                                          ji.Year,
                                          ji.Month,
                                          U.UserID,
                                          ji.LogYear,
                                          ji.LogMonth,
                                      };
                        lstjs = queryCM.AsEnumerable().Select(x => new RMS.Models.RentAPJournalInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            Year = DTO.Year,
                            Month = DTO.FromMonthName,
                            UserID = x.UserID,
                            LogYear = x.LogYear,
                            LogMonth = x.LogMonth,
                        }).ToList();
                    }
                    lstjs = lstjs.GroupBy(x => x.PostingID).Select(x => x.First()).Distinct().ToList();
                    ViewBag.DateRange = DTO.FromMonthName + ", " + DTO.Year;
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentAPJournalReport, lstjs);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult HoldBlockPayment()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/HoldBlockPayment";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 63 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;
                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate &&
                                x.IsRenewal == false && x.IsModified == false && x.IsClosed == false && x.IsHoldBlockPayment == false)
                                .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();


                    RMS.Models.IFRSScheduleDTO DTO = new RMS.Models.IFRSScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.HoldBlockPayment, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult HoldBlockPayment(RMS.Models.IFRSScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/HoldBlockPayment";
                    DTOBasic DTOBasic = new DTOBasic();
                    int UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    int FromMonthNo = db.ContractSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.Year == DTO.Year && x.Month == DTO.Month).Select(x => x.MonthNo).SingleOrDefault();
                    if (FromMonthNo > 0)
                    {
                        //==Agreement Info
                        RMS.Models.AgreementInfo AI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).SingleOrDefault();
                        AI.IsHoldBlockPayment = true;
                        db.Entry(AI).State = EntityState.Modified;
                        db.SaveChanges();
                        //==Contract Schedule
                        List<RMS.Models.ContractSchedule> lstCS = db.ContractSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.IsPJPosted == false).ToList();
                        lstCS.ToList().ForEach(x => { x.IsHoldBlockPayment = true; });
                        db.SaveChanges();
                        //==Landlord Schedule
                        List<RMS.Models.LandlordSchedule> lstLandlord = db.LandlordSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.IsPJPosted == false).ToList();
                        lstLandlord.ToList().ForEach(x => { x.IsHoldBlockPayment = true; });
                        db.SaveChanges();
                        //==Cost Center Schedule
                        List<RMS.Models.CostCenterSchedule> lstCC = db.CostCenterSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.IsPJPosted == false).ToList();
                        lstCC.ToList().ForEach(x => { x.IsHoldBlockPayment = true; });
                        db.SaveChanges();
                        //==IFRS Schedule
                        //List<RMS.Models.IFRSSchedule> lstIFRS = db.IFRSSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        //lstIFRS.ToList().ForEach(x => { x.IsHoldBlockPayment = true; });
                        //db.SaveChanges();
                        return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult HoldUnblockPayment()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/HoldUnblockPayment";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 64 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate &&
                            x.IsRenewal == false && x.IsModified == false && x.IsHoldBlockPayment == true)
                            .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();

                    //var LandlordVendorList = db.LandlordInfos.Where(x => x.IsHoldBlockPayment == true)
                    //       .Select(x => new { x.LandlordSLNo, x.VendorCode, x.LandlordName })
                    //       //.GroupBy(y => y.VendorCode)
                    //       .GroupBy(y => new { y.LandlordSLNo, y.VendorCode, y.LandlordName })
                    //       .Select(y => new { VendorSLNo = y.FirstOrDefault().LandlordSLNo, VendorCode = y.FirstOrDefault().VendorCode, FullName = y.FirstOrDefault().VendorCode + " - " + y.FirstOrDefault().LandlordName }).OrderBy(x => x.FullName).ToList();


                    //var UtilityVendorList = db.UtilityInfos.Where(x => x.IsHoldBlockPayment == true)
                    //                           .Select(x => new { x.UtilitySLNo, x.UtilityVendorCode, x.UtilityLandlordName })
                    //                           //.GroupBy(y => y.VendorCode)
                    //                           .GroupBy(y => new { y.UtilitySLNo, y.UtilityVendorCode, y.UtilityLandlordName })
                    //                           .Select(y => new { VendorSLNo = y.FirstOrDefault().UtilitySLNo, VendorCode = y.FirstOrDefault().UtilityVendorCode, FullName = y.FirstOrDefault().UtilityVendorCode + " - " + y.FirstOrDefault().UtilityLandlordName }).OrderBy(x => x.FullName).ToList();

                    //ViewBag.VendorList = LandlordVendorList.Concat(UtilityVendorList).ToList();

                    RMS.Models.CostCenterScheduleDTO DTO = new RMS.Models.CostCenterScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.HoldUnblockPayment, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult HoldUnblockPayment(RMS.Models.CostCenterScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/HoldUnblockPayment";
                    if (DTO.AgreementSLNoCheckList != null)
                    {
                        var UnblockAgreement = db.AgreementInfos.Where(x => DTO.AgreementSLNoCheckList.Contains(x.AgreementSLNo)).ToList();
                        UnblockAgreement.ForEach(x => x.IsHoldBlockPayment = false);
                        db.SaveChanges();
                        //==Contract Schedule
                        List<RMS.Models.ContractSchedule> lstCS = db.ContractSchedules.Where(x => DTO.AgreementSLNoCheckList.Contains(x.AgreementSLNo) && x.IsHoldBlockPayment == true).ToList();
                        lstCS.ToList().ForEach(x => { x.IsHoldBlockPayment = false; });
                        db.SaveChanges();
                        //==Landlord Schedule
                        List<RMS.Models.LandlordSchedule> lstLandlord = db.LandlordSchedules.Where(x => DTO.AgreementSLNoCheckList.Contains(x.AgreementSLNo) && x.IsHoldBlockPayment == true).ToList();
                        lstLandlord.ToList().ForEach(x => { x.IsHoldBlockPayment = false; });
                        db.SaveChanges();
                        //==Cost Center Schedule
                        List<RMS.Models.CostCenterSchedule> lstCC = db.CostCenterSchedules.Where(x => DTO.AgreementSLNoCheckList.Contains(x.AgreementSLNo) && x.IsHoldBlockPayment == true).ToList();
                        lstCC.ToList().ForEach(x => { x.IsHoldBlockPayment = false; });
                        db.SaveChanges();
                    }
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult NewSummary()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/NewSummary";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 85 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate &&
                         x.IsBlock == false && x.IsRenewal == false && x.IsModified == false && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();

                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();

                    RMS.Models.CostCenterScheduleDTO DTO = new RMS.Models.CostCenterScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.NewSummary, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult NewSummary(RMS.Models.CostCenterScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/NewSummary";
                    DateTime dtFromDate = DateTime.ParseExact(DTO.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime dtToDate = DateTime.ParseExact(DTO.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DTOBasic dtoBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    IList<RMS.Models.IFRSCalculatedSummaryDTO> lstReport = new List<RMS.Models.IFRSCalculatedSummaryDTO>();
                    RMS.Models.IFRSCalculatedSummaryDTO obj;
                    int SLNO = 0;
                    double Sum1 = 0;
                    double Sum2 = 0;
                    double Sum3 = 0;
                    IList<RMS.Models.AgreementInfo> lstAgreement = new List<RMS.Models.AgreementInfo>();
                    if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        lstAgreement = db.AgreementInfos.Where(x => DTO.PremiseTypeSLNoCheckList.Contains(x.PremiseTypeSLNo) && x.AgreementStartDate >= dtFromDate && x.AgreementStartDate <= dtToDate && x.AgreementStatus == AgreementStatus.Activate && x.IsIFRSEnable == true).ToList();
                    }
                    else if (DTO.AgreementSLNoCheckList != null)
                    {
                        lstAgreement = db.AgreementInfos.Where(x => DTO.AgreementSLNoCheckList.Contains(x.AgreementSLNo) && x.AgreementStartDate >= dtFromDate && x.AgreementStartDate <= dtToDate && x.AgreementStatus == AgreementStatus.Activate && x.IsIFRSEnable == true).ToList();
                    }
                    else
                    {
                        lstAgreement = db.AgreementInfos.Where(x => x.AgreementStartDate >= dtFromDate && x.AgreementStartDate <= dtToDate && x.AgreementStatus == AgreementStatus.Activate && x.IsIFRSEnable == true).ToList();
                    }
                    IList<RMS.Models.IFRSSchedule> lstSchedule = new List<RMS.Models.IFRSSchedule>();
                    foreach (RMS.Models.AgreementInfo item in lstAgreement)
                    {
                        lstSchedule = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.MonthNo == 1).ToList();
                        obj = new RMS.Models.IFRSCalculatedSummaryDTO();
                        if (lstSchedule.Count > 0)
                        {
                            //==Step1
                            var Step1 = lstSchedule.Select(x => new { x.OBROU, x.OBLeaseLiability, x.OBAdvance }).SingleOrDefault();
                            obj.PreviousROU = (Step1 == null) ? 0 : Step1.OBROU;
                            obj.PreviousAdvance = (Step1 == null) ? 0 : Step1.OBAdvance;
                            obj.PreviousLease = (Step1 == null) ? 0 : Step1.OBLeaseLiability;
                            Sum1 = Sum1 + obj.PreviousROU;
                            Sum2 = Sum2 + obj.PreviousAdvance;
                            Sum3 = Sum3 + obj.PreviousLease;

                        }
                        //==Agreement Details
                        //==Finding the Block Month No
                        var MonthInfo = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.IsBlock == true).OrderBy(x => x.IFRSSLNo).Select(x => new { x.MonthNo, x.Year, x.Month }).Take(1).SingleOrDefault();
                        if (MonthInfo != null)
                        {
                            obj.MonthNo = MonthInfo.MonthNo;
                            obj.Year = MonthInfo.Year;
                            obj.Month = MonthInfo.Month;
                        }
                        //==
                        SLNO++;
                        obj.SLNO = SLNO;
                        obj.AgreementSLNo = item.AgreementSLNo;
                        obj.AgreementCode = item.AgreementCode;
                        obj.AliasCode = item.AliasCode;
                        obj.AgreementName = item.AgreementName;
                        obj.PremiseType = db.PremiseTypeInfos.Where(x => x.PremiseTypeSLNo == item.PremiseTypeSLNo).Select(x => x.PremiseType).SingleOrDefault();
                        obj.PremiseName = item.PremiseName;
                        obj.AgreementStartDate = item.AgreementStartDate.ToString("dd/MM/yyyy");
                        obj.AgreementEndDate = item.AgreementEndDate.ToString("dd/MM/yyyy");
                        obj.AgreementPeriod = item.AgreementPeriod;
                        obj.CostPerUnit = item.CostPerUnit;
                        obj.TotalArea = item.TotalArea;
                        obj.AdvanceAmount = item.AdvanceAmount + item.AdditionalAdvanceAmount;
                        obj.RentDueDay = item.RentDueDay;
                        obj.ClusterGroup = item.ClusterGroup;
                        if (item.IsBlock == false)
                        {
                            obj.BlockText = "Open";
                        }
                        else
                        {
                            obj.BlockText = "Terminated";
                            obj.BlockDate = item.BlockDate;
                        }
                        //==Add to list
                        lstReport.Add(obj);
                    }
                    ViewBag.DateRange = DTO.FromDate + " - " + DTO.ToDate;
                    ViewBag.Step1 = "As at Starting Month";
                    ViewBag.SLNo = SLNO + 1;
                    ViewBag.Sum1 = Sum1.ToString("N2");
                    ViewBag.Sum2 = Sum2.ToString("N2");
                    ViewBag.Sum3 = Sum3.ToString("N2");
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.NewSummaryReport, lstReport);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult LeaseInfo()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/LeaseInfo";
                    //==Check for Permission
                    bool Check = false;
                    //Check = db.UserPermissions.Where(x => x.ChildID == 85 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    Check = true;
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate &&
                         x.IsBlock == false && x.IsRenewal == false && x.IsModified == false && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();

                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();

                    ViewBag.SubPremiseTypeList = db.Lookups.Where(x => x.GroupName == "Sub Premises Type" && x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();

                    RMS.Models.CostCenterScheduleDTO DTO = new RMS.Models.CostCenterScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.LeaseInfo, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult LeaseInfo(RMS.Models.CostCenterScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/LeaseInfo";
                    DateTime dtFromDate = DateTime.ParseExact(DTO.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime dtToDate = DateTime.ParseExact(DTO.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DTOBasic dtoBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    IList<RMS.Models.LeaseInfoDTO> lstReport = new List<RMS.Models.LeaseInfoDTO>();
                    RMS.Models.LeaseInfoDTO RI;
                    IList<RMS.Models.AgreementInfo> lstAgreement = new List<RMS.Models.AgreementInfo>();
                    IList<RMS.Models.SpaceInfo> lstSpaceInfo = new List<RMS.Models.SpaceInfo>();                    
                    if (DTO.AgreementSLNoCheckList != null)
                    {
                        lstAgreement = db.AgreementInfos.Where(x => DTO.AgreementSLNoCheckList.Contains(x.AgreementSLNo) && x.AgreementStartDate >= dtFromDate && x.AgreementStartDate <= dtToDate && x.AgreementStatus == AgreementStatus.Activate).OrderBy(x => x.AgreementCode).ToList();
                    }
                    else if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        lstAgreement = db.AgreementInfos.Where(x => DTO.PremiseTypeSLNoCheckList.Contains(x.PremiseTypeSLNo) && x.AgreementStartDate >= dtFromDate && x.AgreementStartDate <= dtToDate && x.AgreementStatus == AgreementStatus.Activate).OrderBy(x => x.AgreementCode).ToList();
                    }
                    else if (DTO.SubPremiseTypeCheckList != null)
                    {
                        var query = from AI in db.AgreementInfos
                                    join SI in db.SpaceInfos on AI.AgreementSLNo equals SI.AgreementSLNo
                                    where DTO.SubPremiseTypeCheckList.Contains(SI.SpaceType) && AI.AgreementStartDate >= dtFromDate && AI.AgreementStartDate <= dtToDate && AI.AgreementStatus == AgreementStatus.Activate
                                    orderby AI.AgreementCode ascending
                                    select new
                                    {
                                        AI.AgreementSLNo,
                                        AI.AliasCode,
                                        AI.AgreementName,
                                        AI.PremiseName,
                                        AI.PremiseTypeSLNo,
                                        AI.PremiseAddress,
                                        AI.PremiseAddressBangla,
                                        AI.AgreementStartDate,
                                        AI.AgreementEndDate,
                                        AI.PrimarySOL,
                                        AI.SecurityDepositAmount,
                                        AI.WaterBillType,
                                        AI.WaterBillAmount,
                                        AI.ServiceCharge,
                                        AI.CarParkingNo,
                                        AI.RentDueDay,
                                        AI.CalculationMethod,
                                        AI.ReviewRemarks,
                                        AI.ElectricityLoad,
                                        AI.ElectricityProvidedBy,
                                        AI.AITBourneBy,
                                        AI.ITTowerRentClause,
                                        AI.CommercialPermission,
                                        AI.TerminationClause,
                                        AI.TerminationNoticePeriod,
                                        AI.PremisesOpeningDate,
                                        AI.RegionalOffice,
                                        AI.AreaStatus,
                                        AI.AttachedControl,
                                        AI.ControllerOfficeDistance,
                                        AI.BangladeshBankApproval,
                                        AI.BangladeshBankReference,
                                        AI.Remarks,
                                        AI.AgreementRemarks,
                                        AI.AdvanceRemarks,
                                        AI.BuildingPlan,
                                        AI.PremisesSituatedFloor,
                                        AI.RoutingNumber,
                                        AI.Division,
                                        AI.District,
                                        AI.Upazila,
                                        AI.Thana,
                                        AI.ThanaCode,
                                        AI.Pourasabha,
                                        AI.PourasabhaType,
                                        AI.UnionName,
                                        AI.WardNo,
                                    };
                        lstAgreement = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfo
                        {
                            AgreementSLNo = x.AgreementSLNo,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            PremiseName = x.PremiseName,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseAddress = x.PremiseAddress,
                            PremiseAddressBangla = x.PremiseAddressBangla,
                            AgreementStartDate = x.AgreementStartDate,
                            AgreementEndDate = x.AgreementEndDate,
                            PrimarySOL = x.PrimarySOL,
                            SecurityDepositAmount = x.SecurityDepositAmount,
                            WaterBillType = x.WaterBillType,
                            WaterBillAmount = x.WaterBillAmount,
                            ServiceCharge = x.ServiceCharge,
                            CarParkingNo = x.CarParkingNo,
                            RentDueDay = x.RentDueDay,
                            CalculationMethod = x.CalculationMethod,
                            ReviewRemarks = x.ReviewRemarks,
                            ElectricityLoad = x.ElectricityLoad,
                            ElectricityProvidedBy = x.ElectricityProvidedBy,
                            AITBourneBy = x.AITBourneBy,
                            ITTowerRentClause = x.ITTowerRentClause,
                            CommercialPermission = x.CommercialPermission,
                            TerminationClause = x.TerminationClause,
                            TerminationNoticePeriod = x.TerminationNoticePeriod,
                            PremisesOpeningDate = x.PremisesOpeningDate,
                            RegionalOffice = x.RegionalOffice,
                            AreaStatus = x.AreaStatus,
                            AttachedControl = x.AttachedControl,
                            ControllerOfficeDistance = x.ControllerOfficeDistance,
                            BangladeshBankApproval = x.BangladeshBankApproval,
                            BangladeshBankReference = x.BangladeshBankReference,
                            Remarks = x.Remarks,
                            AgreementRemarks = x.AgreementRemarks,
                            AdvanceRemarks = x.AdvanceRemarks,
                            BuildingPlan = x.BuildingPlan,
                            PremisesSituatedFloor = x.PremisesSituatedFloor,
                            RoutingNumber = x.RoutingNumber,
                            Division = x.Division,
                            District = x.District,
                            Upazila = x.Upazila,
                            Thana = x.Thana,
                            ThanaCode = x.ThanaCode,
                            Pourasabha = x.Pourasabha,
                            PourasabhaType = x.PourasabhaType,
                            UnionName = x.UnionName,
                            WardNo = x.WardNo,
                        }).ToList();
                        lstAgreement = lstAgreement.GroupBy(x => x.AgreementSLNo).Select(x => x.First()).Distinct().ToList();
                    }
                    else
                    {
                        lstAgreement = db.AgreementInfos.Where(x => x.AgreementStartDate >= dtFromDate && x.AgreementStartDate <= dtToDate && x.AgreementStatus == AgreementStatus.Activate).OrderBy(x => x.AgreementCode).ToList();
                    }
                    int LLSerial = 0;
                    double WaterBillAmount = 0;
                    foreach (RMS.Models.AgreementInfo item in lstAgreement)
                    {
                        if (DTO.SubPremiseTypeCheckList != null)
                        {
                            lstSpaceInfo = db.SpaceInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo && DTO.SubPremiseTypeCheckList.Contains(x.SpaceType)).OrderBy(x => x.SpaceSLNo).ToList();
                        }
                        else
                        {
                            //==Space Info
                            lstSpaceInfo = db.SpaceInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo).OrderBy(x => x.SpaceSLNo).ToList();
                        }
                        foreach (var SpaceItem in lstSpaceInfo)
                        {
                            LLSerial = 0;
                            WaterBillAmount = 0;
                            RI = new RMS.Models.LeaseInfoDTO();
                            RI.AliasCode = item.AliasCode;
                            RI.AgreementName = item.AgreementName;
                            RI.PremiseName = item.PremiseName;
                            RI.PremiseType = db.PremiseTypeInfos.Where(x => x.PremiseTypeSLNo == item.PremiseTypeSLNo).Select(x => x.PremiseType).FirstOrDefault(); ;
                            RI.SpaceType = SpaceItem.SpaceType;
                            //==Landlord Info
                            var lstLandlord = db.LandlordInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo).Select(x => new { x.LandlordSLNo, x.LandlordName, x.LLAddress }).OrderBy(x => x.LandlordSLNo).ToList();
                            string strLLName = string.Empty;
                            foreach (var LL in lstLandlord)
                            {
                                LLSerial = LLSerial + 1;
                                strLLName = strLLName + LLSerial + ". " + LL.LandlordName + "\n";
                                if (LLSerial == 1)
                                {
                                    RI.LandlordAddress = LL.LLAddress;
                                }
                            }
                            RI.LandlordName = strLLName;
                            //==
                            RI.PremiseAddressEnglish = item.PremiseAddress;
                            RI.PremiseAddressBangla = item.PremiseAddressBangla;
                            RI.AgreementStartDate = item.AgreementStartDate.ToString("dd/MM/yyyy");
                            RI.AgreementEndDate = item.AgreementEndDate.ToString("dd/MM/yyyy");
                            RI.PrimarySOL = item.PrimarySOL;
                            RI.SecurityDeposit = item.SecurityDepositAmount;
                            RI.SpaceTotalAdvance = SpaceItem.SpaceTotalAdvance;
                            RI.SpaceRent = SpaceItem.SpaceRent;
                            RI.SpaceMonthlyAdjustment = SpaceItem.SpaceTotalAdjustment;
                            RI.SpacePayableAfterAdjustment = RI.SpaceRent - RI.SpaceMonthlyAdjustment;
                            if (item.WaterBillType == "Meter Reading") { RI.WaterBill = "Meter Reading"; }
                            else { RI.WaterBill = item.WaterBillAmount.ToString(); WaterBillAmount = item.WaterBillAmount; }
                            RI.ServiceChargeAmount = item.ServiceCharge;
                            RI.TotalCalculation = WaterBillAmount + RI.ServiceChargeAmount;
                            RI.MonthlyTotalPayable = RI.SpacePayableAfterAdjustment + RI.TotalCalculation;
                            if (string.IsNullOrEmpty(item.CarParkingNo) == true)
                            {
                                RI.SpaceArea = SpaceItem.SpaceArea;
                            }
                            else
                            {
                                RI.SpaceArea = Convert.ToInt16(item.CarParkingNo) * 150;
                            }
                            RI.RentPerSft = RI.MonthlyTotalPayable / RI.SpaceArea;
                            RI.PaymentDate = item.RentDueDay + "th day of " + item.CalculationMethod;
                            RI.EnhancementRemarks = item.ReviewRemarks;
                            //==Enhancement First/Second/...
                            //First
                            var First_EnhancementEffectiveDate = db.ContractSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.ReviewNo == 1).Select(x => new { x.ContractScheduleSLNo, x.ScheduleDate }).OrderBy(x => x.ContractScheduleSLNo).Take(1).FirstOrDefault();
                            if (First_EnhancementEffectiveDate != null)
                            {
                                RI.First_EnhancementEffectiveDate = First_EnhancementEffectiveDate.ScheduleDate.ToString("dd/MM/yyyy");
                            }
                            else { RI.First_EnhancementEffectiveDate = "N/A"; }
                            //Second
                            var Second_EnhancementEffectiveDate = db.ContractSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.ReviewNo == 2).Select(x => new { x.ContractScheduleSLNo, x.ScheduleDate }).OrderBy(x => x.ContractScheduleSLNo).Take(1).FirstOrDefault();
                            if (Second_EnhancementEffectiveDate != null)
                            {
                                RI.Second_EnhancementEffectiveDate = Second_EnhancementEffectiveDate.ScheduleDate.ToString("dd/MM/yyyy");
                            }
                            else { RI.Second_EnhancementEffectiveDate = "N/A"; }
                            //Third
                            var Third_EnhancementEffectiveDate = db.ContractSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.ReviewNo == 3).Select(x => new { x.ContractScheduleSLNo, x.ScheduleDate }).OrderBy(x => x.ContractScheduleSLNo).Take(1).FirstOrDefault();
                            if (Third_EnhancementEffectiveDate != null)
                            {
                                RI.Third_EnhancementEffectiveDate = Third_EnhancementEffectiveDate.ScheduleDate.ToString("dd/MM/yyyy");
                            }
                            else { RI.Third_EnhancementEffectiveDate = "N/A"; }
                            //Fourth
                            var Fourth_EnhancementEffectiveDate = db.ContractSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.ReviewNo == 4).Select(x => new { x.ContractScheduleSLNo, x.ScheduleDate }).OrderBy(x => x.ContractScheduleSLNo).Take(1).FirstOrDefault();
                            if (Fourth_EnhancementEffectiveDate != null)
                            {
                                RI.Fourth_EnhancementEffectiveDate = Fourth_EnhancementEffectiveDate.ScheduleDate.ToString("dd/MM/yyyy");
                            }
                            else { RI.Fourth_EnhancementEffectiveDate = "N/A"; }
                            //Fifth
                            var Fifth_EnhancementEffectiveDate = db.ContractSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.ReviewNo == 5).Select(x => new { x.ContractScheduleSLNo, x.ScheduleDate }).OrderBy(x => x.ContractScheduleSLNo).Take(1).FirstOrDefault();
                            if (Fifth_EnhancementEffectiveDate != null)
                            {
                                RI.Fifth_EnhancementEffectiveDate = Fifth_EnhancementEffectiveDate.ScheduleDate.ToString("dd/MM/yyyy");
                            }
                            else { RI.Fifth_EnhancementEffectiveDate = "N/A"; }
                            //Sixth/More
                            var MoreEnhancement = db.ContractSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.ReviewNo == 6).Select(x => new { x.ContractScheduleSLNo, x.ScheduleDate }).OrderBy(x => x.ContractScheduleSLNo).Take(1).FirstOrDefault();
                            if (MoreEnhancement != null)
                            {
                                RI.MoreEnhancement = "Yes";
                            }
                            else { RI.MoreEnhancement = "No"; }
                            //==
                            RI.ElectricityLoad = item.ElectricityLoad;
                            RI.ElectricityProvidedBy = item.ElectricityProvidedBy;
                            RI.AITBourneBy = item.AITBourneBy;
                            RI.ITTowerRentClause = item.ITTowerRentClause;
                            RI.CommercialPermission = item.CommercialPermission;
                            RI.TerminationClause = item.TerminationClause;
                            RI.TerminationNoticePeriod = item.TerminationNoticePeriod;
                            RI.PremisesOpeningDate = item.PremisesOpeningDate?.ToString("dd/MM/yyyy");
                            if (SpaceItem.SpaceTotalAdvance > 0 && SpaceItem.SpaceTotalAdjustment > 0)
                            {
                                RI.AdvanceAdjustmentPeriod = SpaceItem.SpaceTotalAdvance / SpaceItem.SpaceTotalAdjustment;
                            }
                            RI.SpaceRemarks = SpaceItem.SpaceRemarks;
                            RI.RegionalOffice = item.RegionalOffice;
                            RI.AreaStatus = item.AreaStatus;
                            RI.AttachedControl = item.AttachedControl;
                            RI.ControllerOfficeDistance = item.ControllerOfficeDistance;
                            RI.BangladeshBankApproval = item.BangladeshBankApproval;
                            RI.BangladeshBankReference = item.BangladeshBankReference;
                            RI.BasicRemarks = item.Remarks;
                            RI.AgreementRemarks = item.AgreementRemarks;
                            var AdvanceInfo = db.AdvanceInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo).Select(x => new { x.AdvanceSLNo, x.AdvanceNote }).OrderBy(x => x.AdvanceSLNo).Take(1).ToList();
                            if (AdvanceInfo.Count > 0)
                            {
                                if (string.IsNullOrEmpty(AdvanceInfo[0].AdvanceNote) == false)
                                {
                                    RI.AdvanceSlotNote = AdvanceInfo[0].AdvanceNote;
                                }
                            }
                            RI.AdvanceRemarks = item.AdvanceRemarks;
                            RI.BuildingPlan = item.BuildingPlan;
                            RI.PremisesSituatedFloor = item.PremisesSituatedFloor;
                            RI.RoutingNo = item.RoutingNumber;
                            RI.Division = item.Division;
                            RI.District = item.District;
                            RI.Upazila = item.Upazila;
                            RI.Thana = item.Thana;
                            RI.ThanaCode = item.ThanaCode;
                            RI.Pourasabha = item.Pourasabha;
                            RI.PourasabhaType = item.PourasabhaType;
                            RI.UnionName = item.UnionName;
                            RI.WardNo = item.WardNo;
                            //==Add to list
                            lstReport.Add(RI);
                        }
                        //==
                    }
                    ViewBag.DateRange = DTO.FromDate + " - " + DTO.ToDate;
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.LeaseInfoReport, lstReport);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult JournalEntries()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/JournalEntries";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 88 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;

                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    RMS.Models.IFRSScheduleDTO DTO = new RMS.Models.IFRSScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.JournalEntries, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult JournalEntries(RMS.Models.IFRSScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/JournalEntries";
                    ViewBag.DateRange = "January-" + DTO.Month + ", " + DTO.Year;
                    //==
                    DataTable rpt = new DataTable();
                    rpt.Columns.Add("A");
                    rpt.Columns.Add("B");
                    rpt.Columns.Add("C");
                    rpt.Columns.Add("D");
                    rpt.Columns.Add("E");
                    //==1
                    var row = rpt.NewRow();
                    row["A"] = @"<b><font color='chocolate'>" + "1." + "</b></font>";
                    row["B"] = @"<b><font color='chocolate'>" + "Calculated Summary" + "</b></font>";
                    rpt.Rows.Add(row);
                    row = rpt.NewRow();
                    row["A"] = @"<b><font color='teal'>" + "a." + "</b></font>";
                    row["B"] = @"<b><font color='teal'>" + "Entry against Right of Use Assets" + "</b></font>";
                    rpt.Rows.Add(row);
                    row = rpt.NewRow();
                    row["B"] = "Depreciation Expense";
                    row["C"] = "Debit";
                    //==Get the Calculated Summary Values
                    DTOBasic dtoBasic = new DTOBasic();
                    AgreementType AgreementType = new AgreementType();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    IList<RMS.Models.IFRSCalculatedSummaryDTO> lstReport = new List<RMS.Models.IFRSCalculatedSummaryDTO>();
                    RMS.Models.IFRSCalculatedSummaryDTO obj;
                    IList<RMS.Models.AgreementInfo> lstAgreement = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate && x.IsRenewal == false && x.IsModified == false && x.IsIFRSEnable == true).ToList();
                    IList<RMS.Models.IFRSSchedule> lstSchedule = new List<RMS.Models.IFRSSchedule>();
                    int FromMonthNo = 0;
                    int ToMonthNo = 0;
                    int ToMonth = Convert.ToDateTime("01-" + DTO.Month + "2021").Month;
                    int BlockMonthNo = 0;
                    double Sum4 = 0;
                    double Sum5 = 0;
                    double Sum6 = 0;
                    double Sum10 = 0;
                    double Sum11 = 0;
                    double Sum12 = 0;
                    double Sum13 = 0;
                    bool xModified = false;
                    foreach (RMS.Models.AgreementInfo item in lstAgreement)
                    {
                        int BlockMonthCount = 0;
                        int BlockMonthRange = 0;
                        if (item.AgreementType == AgreementType.Modified)
                        {
                            xModified = false;
                            lstSchedule = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.Month == "January").ToList();
                            if (lstSchedule.Count == 0)
                            {
                                xModified = true;
                                lstSchedule = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.xModifiedAgreementSLNo && x.Year == DTO.Year).ToList();
                                BlockMonthCount = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.xModifiedAgreementSLNo && x.IsBlock == true).OrderBy(x => x.IFRSSLNo).Select(x => x.MonthNo).Take(1).SingleOrDefault();
                            }
                            else
                            {
                                lstSchedule = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year).ToList();
                            }
                            obj = new RMS.Models.IFRSCalculatedSummaryDTO();
                            if (lstSchedule.Count > 0)
                            {
                                FromMonthNo = lstSchedule.Where(x => x.Month == "January").Select(x => x.MonthNo).SingleOrDefault();
                                ToMonthNo = lstSchedule.Where(x => x.Month == DTO.Month).Select(x => x.MonthNo).SingleOrDefault();
                                if (ToMonthNo == 0) { ToMonthNo = item.AgreementPeriod; }
                                if (ToMonthNo >= BlockMonthCount)
                                {
                                    BlockMonthRange = (ToMonthNo - BlockMonthCount) + 1;
                                }
                                //==Step1
                                //==Step2
                                obj.DuringTheYearROU = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo && x.IsBlock == false).Sum(x => (double?)x.Depreciation) ?? 0;
                                obj.DuringTheYearAdvanceROU = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo && x.IsBlock == false).Sum(x => (double?)x.AdvanceDepreciation) ?? 0;
                                obj.DuringTheYearLease = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo && x.IsBlock == false).Sum(x => (double?)x.SettlementofLeaseLiabilities) ?? 0;
                                if (xModified == true && ToMonthNo >= BlockMonthCount)
                                {
                                    var DuringTheYearROU = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= 1 && x.MonthNo <= BlockMonthRange && x.IsBlock == false).Sum(x => (double?)x.Depreciation) ?? 0;
                                    var DuringTheYearAdvanceROU = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= 1 && x.MonthNo <= BlockMonthRange && x.IsBlock == false).Sum(x => (double?)x.AdvanceDepreciation) ?? 0;
                                    var DuringTheYearLease = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= 1 && x.MonthNo <= BlockMonthRange && x.IsBlock == false).Sum(x => (double?)x.SettlementofLeaseLiabilities) ?? 0;
                                    obj.DuringTheYearROU = obj.DuringTheYearROU + DuringTheYearROU;
                                    obj.DuringTheYearAdvanceROU = obj.DuringTheYearAdvanceROU + DuringTheYearAdvanceROU;
                                    obj.DuringTheYearLease = obj.DuringTheYearLease + DuringTheYearLease;
                                }
                                Sum4 = Sum4 + obj.DuringTheYearROU;
                                Sum5 = Sum5 + obj.DuringTheYearAdvanceROU;
                                Sum6 = Sum6 + obj.DuringTheYearLease;
                                //==Step3
                                //==Step4
                                BlockMonthNo = ToMonthNo;
                                for (int i = FromMonthNo; i <= ToMonthNo; i++)
                                {
                                    if (lstSchedule.Where(x => x.MonthNo == i && x.IsBlock == true).Any() == true)
                                    {
                                        BlockMonthNo = i - 1;
                                        break;
                                    }
                                }
                                obj.DuringTheYearInterestExpense = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.InteresetExpense) ?? 0;
                                obj.DuringTheYearDepreciation = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.Depreciation) ?? 0;
                                obj.DuringTheYearAdvanceDepreciation = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.AdvanceDepreciation) ?? 0;
                                obj.RentPaid = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.LeasePayment) ?? 0;
                                if (xModified == true && ToMonthNo >= BlockMonthCount)
                                {
                                    var DuringTheYearInterestExpense = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= 1 && x.MonthNo <= BlockMonthRange && x.IsBlock == false).Sum(x => (double?)x.InteresetExpense) ?? 0;
                                    var DuringTheYearDepreciation = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= 1 && x.MonthNo <= BlockMonthRange && x.IsBlock == false).Sum(x => (double?)x.Depreciation) ?? 0;
                                    var DuringTheYearAdvanceDepreciation = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= 1 && x.MonthNo <= BlockMonthRange && x.IsBlock == false).Sum(x => (double?)x.AdvanceDepreciation) ?? 0;
                                    var RentPaid = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo >= 1 && x.MonthNo <= BlockMonthRange && x.IsBlock == false).Sum(x => (double?)x.LeasePayment) ?? 0;
                                    obj.DuringTheYearInterestExpense = obj.DuringTheYearInterestExpense + DuringTheYearInterestExpense;
                                    obj.DuringTheYearDepreciation = obj.DuringTheYearDepreciation + DuringTheYearDepreciation;
                                    obj.DuringTheYearAdvanceDepreciation = obj.DuringTheYearAdvanceDepreciation + DuringTheYearAdvanceDepreciation;
                                    obj.RentPaid = obj.RentPaid + RentPaid;
                                }
                                Sum10 = Sum10 + obj.DuringTheYearInterestExpense;
                                Sum11 = Sum11 + obj.DuringTheYearDepreciation;
                                Sum12 = Sum12 + obj.DuringTheYearAdvanceDepreciation;
                                Sum13 = Sum13 + obj.RentPaid;
                            }
                        }
                        else
                        {
                            lstSchedule = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year).ToList();
                            obj = new RMS.Models.IFRSCalculatedSummaryDTO();
                            if (lstSchedule.Count > 0)
                            {
                                FromMonthNo = lstSchedule.Where(x => x.Month == "January").Select(x => x.MonthNo).SingleOrDefault();
                                ToMonthNo = lstSchedule.Where(x => x.Month == DTO.Month).Select(x => x.MonthNo).SingleOrDefault();
                                if (ToMonthNo == 0) { ToMonthNo = item.AgreementPeriod; }
                                //==Step1
                                //==Step2
                                obj.DuringTheYearROU = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo && x.IsBlock == false).Sum(x => (double?)x.Depreciation) ?? 0;
                                obj.DuringTheYearAdvanceROU = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo && x.IsBlock == false).Sum(x => (double?)x.AdvanceDepreciation) ?? 0;
                                obj.DuringTheYearLease = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo && x.IsBlock == false).Sum(x => (double?)x.SettlementofLeaseLiabilities) ?? 0;
                                Sum4 = Sum4 + obj.DuringTheYearROU;
                                Sum5 = Sum5 + obj.DuringTheYearAdvanceROU;
                                Sum6 = Sum6 + obj.DuringTheYearLease;
                                //==Step3
                                //==Step4
                                BlockMonthNo = ToMonthNo;
                                for (int i = FromMonthNo; i <= ToMonthNo; i++)
                                {
                                    if (lstSchedule.Where(x => x.MonthNo == i && x.IsBlock == true).Any() == true)
                                    {
                                        BlockMonthNo = i - 1;
                                        break;
                                    }
                                }
                                obj.DuringTheYearInterestExpense = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.InteresetExpense) ?? 0;
                                obj.DuringTheYearDepreciation = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.Depreciation) ?? 0;
                                obj.DuringTheYearAdvanceDepreciation = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.AdvanceDepreciation) ?? 0;
                                obj.RentPaid = lstSchedule.Where(x => x.MonthNo >= FromMonthNo && x.MonthNo <= BlockMonthNo).Sum(x => (double?)x.LeasePayment) ?? 0;
                                Sum10 = Sum10 + obj.DuringTheYearInterestExpense;
                                Sum11 = Sum11 + obj.DuringTheYearDepreciation;
                                Sum12 = Sum12 + obj.DuringTheYearAdvanceDepreciation;
                                Sum13 = Sum13 + obj.RentPaid;
                            }
                        }
                    }
                    //==
                    row["D"] = String.Format("{0:0,0.00}", Sum11);
                    rpt.Rows.Add(row);
                    row = rpt.NewRow();
                    row["B"] = "Right of Use Assets";
                    row["C"] = "Credit";
                    row["E"] = String.Format("{0:0,0.00}", Sum11);
                    rpt.Rows.Add(row);
                    //==
                    row = rpt.NewRow();
                    row["A"] = @"<b><font color='teal'>" + "b." + "</b></font>";
                    row["B"] = @"<b><font color='teal'>" + "Entry against Lease Liability for payment of rental Assets" + "</b></font>";
                    rpt.Rows.Add(row);
                    row = rpt.NewRow();
                    row["B"] = "Interest Expense";
                    row["C"] = "Debit";
                    row["D"] = String.Format("{0:0,0.00}", Sum10);
                    rpt.Rows.Add(row);
                    row = rpt.NewRow();
                    row["B"] = "Lease Liability";
                    row["C"] = "Debit";
                    row["D"] = String.Format("{0:0,0.00}", Sum6);
                    rpt.Rows.Add(row);
                    row = rpt.NewRow();
                    row["B"] = "Office Rent Expense";
                    row["C"] = "Credit";
                    row["E"] = String.Format("{0:0,0.00}", Sum10 + Sum6);
                    rpt.Rows.Add(row);
                    //==2
                    row = rpt.NewRow();
                    row["A"] = @"<b><font color='chocolate'>" + "2." + "</b></font>";
                    row["B"] = @"<b><font color='chocolate'>" + "New Summary" + "</b></font>";
                    rpt.Rows.Add(row);
                    row = rpt.NewRow();
                    row["A"] = @"<b><font color='teal'>" + "a." + "</b></font>";
                    row["B"] = @"<b><font color='teal'>" + "At the starting lease agreement" + "</b></font>";
                    rpt.Rows.Add(row);
                    //==Get the New Summary Values
                    lstReport = new List<RMS.Models.IFRSCalculatedSummaryDTO>();
                    double Sum1 = 0;
                    double Sum2 = 0;
                    double Sum3 = 0;
                    lstAgreement = db.AgreementInfos.Where(x => x.AgreementStartDate.Year == DTO.Year && x.AgreementStartDate.Month <= ToMonth && x.AgreementStatus == AgreementStatus.Activate).ToList();
                    lstSchedule = new List<RMS.Models.IFRSSchedule>();
                    foreach (RMS.Models.AgreementInfo item in lstAgreement)
                    {
                        lstSchedule = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo == 1).ToList();
                        obj = new RMS.Models.IFRSCalculatedSummaryDTO();
                        if (lstSchedule.Count > 0)
                        {
                            //==Step1
                            var Step1 = lstSchedule.Select(x => new { x.OBROU, x.OBLeaseLiability, x.OBAdvance }).SingleOrDefault();
                            obj.PreviousROU = (Step1 == null) ? 0 : Step1.OBROU;
                            obj.PreviousAdvance = (Step1 == null) ? 0 : Step1.OBAdvance;
                            obj.PreviousLease = (Step1 == null) ? 0 : Step1.OBLeaseLiability;
                            Sum1 = Sum1 + obj.PreviousROU;
                            Sum2 = Sum2 + obj.PreviousAdvance;
                            Sum3 = Sum3 + obj.PreviousLease;

                        }
                    }
                    //==
                    row = rpt.NewRow();
                    row["B"] = "Right of Use Assets";
                    row["C"] = "Debit";
                    row["D"] = String.Format("{0:0,0.00}", Sum1);
                    rpt.Rows.Add(row);
                    row = rpt.NewRow();
                    row["B"] = "Lease Liability";
                    row["C"] = "Credit";
                    row["E"] = String.Format("{0:0,0.00}", Sum3);
                    rpt.Rows.Add(row);
                    row = rpt.NewRow();
                    row["B"] = "Advance Office Rent";
                    row["C"] = "Credit";
                    row["E"] = String.Format("{0:0,0.00}", Sum2);
                    rpt.Rows.Add(row);
                    //==3
                    row = rpt.NewRow();
                    row["A"] = @"<b><font color='chocolate'>" + "3." + "</b></font>";
                    row["B"] = @"<b><font color='chocolate'>" + "Terminated Summary" + "</b></font>";
                    rpt.Rows.Add(row);
                    row = rpt.NewRow();
                    row["A"] = @"<b><font color='teal'>" + "a." + "</b></font>";
                    row["B"] = @"<b><font color='teal'>" + "At the date of Discontinuation" + "</b></font>";
                    rpt.Rows.Add(row);
                    //==Get the Blocked Summary Values
                    lstReport = new List<RMS.Models.IFRSCalculatedSummaryDTO>();
                    Sum1 = 0;
                    Sum2 = 0;
                    Sum3 = 0;
                    Sum4 = 0;
                    Sum5 = 0;
                    lstAgreement = db.AgreementInfos.Where(x => x.IsBlock == true && x.AgreementStatus == AgreementStatus.Activate).ToList();
                    lstSchedule = new List<RMS.Models.IFRSSchedule>();
                    foreach (RMS.Models.AgreementInfo item in lstAgreement)
                    {
                        lstSchedule = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.ScheduleDate.Month <= ToMonth && x.IsBlock == true).Take(1).ToList();
                        if (lstSchedule.Count > 0)
                        {
                            obj = new RMS.Models.IFRSCalculatedSummaryDTO();
                            //==Step1
                            obj.PreviousROU = lstSchedule[0].OBROU;
                            obj.PreviousAdvance = lstSchedule[0].OBAdvance;
                            obj.PreviousLease = lstSchedule[0].OBLeaseLiability;
                            if (lstSchedule[0].MonthNo > item.AdvanceAdjustmentPeriod)
                            {
                                obj.UnadjustedAdvance = 0;
                            }
                            else
                            {
                                obj.UnadjustedAdvance = item.AdvanceAmount - (item.AdvanceAdjustmentAmount * (lstSchedule[0].MonthNo - 1));
                            }
                            obj.Difference = obj.PreviousAdvance - obj.UnadjustedAdvance;
                            Sum1 = Sum1 + obj.PreviousROU;
                            Sum2 = Sum2 + obj.PreviousAdvance;
                            Sum3 = Sum3 + obj.PreviousLease;
                            Sum4 = Sum4 + obj.UnadjustedAdvance;
                            Sum5 = Sum5 + obj.Difference;
                        }
                    }
                    row = rpt.NewRow();
                    row["B"] = "Advance Office Rent";
                    row["C"] = "Debit";
                    row["D"] = String.Format("{0:0,0.00}", Sum4);
                    rpt.Rows.Add(row);
                    row = rpt.NewRow();
                    row["B"] = "Lease Liability";
                    row["C"] = "Debit";
                    row["D"] = String.Format("{0:0,0.00}", Sum3);
                    rpt.Rows.Add(row);
                    var PLValue = (Sum4 + Sum3) - (Sum1 + Sum2);
                    if (PLValue > 0)
                    {
                        row = rpt.NewRow();
                        row["B"] = "P&L A/C";
                        row["C"] = "Credit";
                        row["E"] = String.Format("{0:0,0.00}", PLValue);
                        rpt.Rows.Add(row);
                    }
                    else
                    {
                        row = rpt.NewRow();
                        row["B"] = "P&L A/C";
                        row["C"] = "Debit";
                        row["E"] = String.Format("{0:0,0.00}", PLValue * -1);
                        rpt.Rows.Add(row);
                    }
                    row = rpt.NewRow();
                    row["B"] = "Right of Use Assets";
                    row["C"] = "Credit";
                    row["E"] = String.Format("{0:0,0.00}", Sum1 + Sum2);
                    rpt.Rows.Add(row);
                    //==4
                    row = rpt.NewRow();
                    row["A"] = @"<b><font color='chocolate'>" + "4." + "</b></font>";
                    row["B"] = @"<b><font color='chocolate'>" + "Modified Summary" + "</b></font>";
                    rpt.Rows.Add(row);
                    row = rpt.NewRow();
                    row["A"] = @"<b><font color='teal'>" + "a." + "</b></font>";
                    row["B"] = @"<b><font color='teal'>" + "At the Modification of lease agreement" + "</b></font>";
                    rpt.Rows.Add(row);
                    //==Get the Modified Summary Values
                    Sum1 = 0;
                    Sum2 = 0;
                    Sum3 = 0;
                    Sum4 = 0;
                    Sum5 = 0;
                    Sum6 = 0;
                    double Sum7 = 0;
                    RMS.Models.IFRSModSummaryDTO objMod;
                    lstAgreement = db.AgreementInfos.Where(x => x.IsModified == true &&
                                x.AgreementStartDate.Year == DTO.Year && x.AgreementStatus == AgreementStatus.Activate).ToList();
                    lstSchedule = new List<RMS.Models.IFRSSchedule>();
                    foreach (RMS.Models.AgreementInfo item in lstAgreement)
                    {
                        lstSchedule = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == DTO.Year && x.MonthNo == 1).ToList();
                        objMod = new RMS.Models.IFRSModSummaryDTO();
                        objMod.AliasCode = item.AliasCode;
                        objMod.AgreementStartDate = item.AgreementStartDate.ToString("dd/MM/yyyy");
                        objMod.AgreementEndDate = (db.AgreementInfos.Where(x => x.AgreementSLNo == item.yModifiedAgreementSLNo).Select(x => x.AgreementStartDate).SingleOrDefault()).ToString("dd/MM/yyyy");
                        //==Finding the Block Month No
                        var BlockInfo = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.IsBlock == true).OrderBy(x => x.IFRSSLNo).Select(x => new { x.OBROU, x.OBAdvance, x.OBLeaseLiability }).Take(1).SingleOrDefault();
                        if (BlockInfo != null)
                        {
                            objMod.ROULease = BlockInfo.OBROU; //Col4
                            objMod.ROUAdvance = BlockInfo.OBAdvance; //Col5
                            objMod.LeaseLiability = BlockInfo.OBLeaseLiability; //Col6
                                                                                //Sum
                            Sum1 = Sum1 + objMod.ROULease;
                            Sum2 = Sum2 + objMod.ROUAdvance;
                            Sum3 = Sum3 + objMod.LeaseLiability;
                        }
                        //Col10
                        objMod.AdjustmentLeaseLiability = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.yModifiedAgreementSLNo && x.MonthNo == 1).Select(x => x.OBLeaseLiability).SingleOrDefault();
                        Sum7 = Sum7 + objMod.AdjustmentLeaseLiability;
                        //Col7
                        objMod.AdjustmentforModification = objMod.AdjustmentLeaseLiability - objMod.LeaseLiability;
                        Sum4 = Sum4 + objMod.AdjustmentforModification;
                        //Col8
                        objMod.AdjustmentLease = objMod.ROULease + objMod.AdjustmentforModification;
                        Sum5 = Sum5 + objMod.AdjustmentLease;
                        //Col9
                        objMod.AdjustmentAdvance = objMod.ROUAdvance;
                        Sum6 = Sum6 + objMod.AdjustmentAdvance;
                    }
                    //==
                    row = rpt.NewRow();
                    row["B"] = "Right of Use Assets";
                    row["C"] = "Debit";
                    row["D"] = String.Format("{0:0,0.00}", Sum4);
                    rpt.Rows.Add(row);
                    row = rpt.NewRow();
                    row["B"] = "Lease Liability";
                    row["C"] = "Credit";
                    row["E"] = String.Format("{0:0,0.00}", Sum4);
                    rpt.Rows.Add(row);
                    //==
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.JournalEntriesReport, rpt);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult ModSummary()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/ModSummary";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 86 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate &&
                         x.IsBlock == false && x.IsRenewal == false && x.IsModified == false && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();

                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();

                    RMS.Models.CostCenterScheduleDTO DTO = new RMS.Models.CostCenterScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.ModSummary, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ModSummary(RMS.Models.CostCenterScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/ModSummary";
                    DateTime dtFromDate = DateTime.ParseExact(DTO.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime dtToDate = DateTime.ParseExact(DTO.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DTOBasic dtoBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    IList<RMS.Models.IFRSModSummaryDTO> lstReport = new List<RMS.Models.IFRSModSummaryDTO>();
                    RMS.Models.IFRSModSummaryDTO obj;
                    double Sum1 = 0;
                    double Sum2 = 0;
                    double Sum3 = 0;
                    double Sum4 = 0;
                    double Sum5 = 0;
                    double Sum6 = 0;
                    double Sum7 = 0;
                    IList<RMS.Models.AgreementInfo> lstAgreement = new List<RMS.Models.AgreementInfo>();
                    if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        lstAgreement = db.AgreementInfos.Where(x => DTO.PremiseTypeSLNoCheckList.Contains(x.PremiseTypeSLNo) && x.AgreementStartDate >= dtFromDate && x.AgreementStartDate <= dtToDate && x.IsModified == true && x.AgreementStatus == AgreementStatus.Activate && x.IsIFRSEnable == true).ToList();
                    }
                    else if (DTO.AgreementSLNoCheckList != null)
                    {
                        lstAgreement = db.AgreementInfos.Where(x => DTO.AgreementSLNoCheckList.Contains(x.AgreementSLNo) && x.AgreementStartDate >= dtFromDate && x.AgreementStartDate <= dtToDate && x.IsModified == true && x.AgreementStatus == AgreementStatus.Activate && x.IsIFRSEnable == true).ToList();
                    }
                    else
                    {
                        lstAgreement = db.AgreementInfos.Where(x => x.AgreementStartDate >= dtFromDate && x.AgreementStartDate <= dtToDate && x.IsModified == true && x.AgreementStatus == AgreementStatus.Activate && x.IsIFRSEnable == true).ToList();
                    }
                    IList<RMS.Models.IFRSSchedule> lstSchedule = new List<RMS.Models.IFRSSchedule>();
                    foreach (RMS.Models.AgreementInfo item in lstAgreement)
                    {
                        lstSchedule = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.MonthNo == 1).ToList();
                        obj = new RMS.Models.IFRSModSummaryDTO();
                        obj.AliasCode = item.AliasCode;
                        obj.AgreementStartDate = item.AgreementStartDate.ToString("dd/MM/yyyy");
                        obj.AgreementEndDate = (db.AgreementInfos.Where(x => x.AgreementSLNo == item.yModifiedAgreementSLNo).Select(x => x.AgreementStartDate).SingleOrDefault()).ToString("dd/MM/yyyy");
                        //==Finding the Block Month No
                        var BlockInfo = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.IsBlock == true).OrderBy(x => x.IFRSSLNo).Select(x => new { x.OBROU, x.OBAdvance, x.OBLeaseLiability }).Take(1).SingleOrDefault();
                        if (BlockInfo != null)
                        {
                            obj.ROULease = BlockInfo.OBROU; //Col4
                            obj.ROUAdvance = BlockInfo.OBAdvance; //Col5
                            obj.LeaseLiability = BlockInfo.OBLeaseLiability; //Col6
                                                                             //Sum
                            Sum1 = Sum1 + obj.ROULease;
                            Sum2 = Sum2 + obj.ROUAdvance;
                            Sum3 = Sum3 + obj.LeaseLiability;
                        }
                        //Col10
                        obj.AdjustmentLeaseLiability = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.yModifiedAgreementSLNo && x.MonthNo == 1).Select(x => x.OBLeaseLiability).SingleOrDefault();
                        Sum7 = Sum7 + obj.AdjustmentLeaseLiability;
                        //Col7
                        obj.AdjustmentforModification = obj.AdjustmentLeaseLiability - obj.LeaseLiability;
                        Sum4 = Sum4 + obj.AdjustmentforModification;
                        //Col8
                        obj.AdjustmentLease = obj.ROULease + obj.AdjustmentforModification;
                        Sum5 = Sum5 + obj.AdjustmentLease;
                        //Col9
                        obj.AdjustmentAdvance = obj.ROUAdvance;
                        Sum6 = Sum6 + obj.AdjustmentAdvance;
                        //==Add to list
                        lstReport.Add(obj);
                    }
                    ViewBag.DateRange = DTO.FromDate + " - " + DTO.ToDate;
                    ViewBag.Sum1 = Sum1.ToString("N2");
                    ViewBag.Sum2 = Sum2.ToString("N2");
                    ViewBag.Sum3 = Sum3.ToString("N2");
                    ViewBag.Sum4 = Sum4.ToString("N2");
                    ViewBag.Sum5 = Sum5.ToString("N2");
                    ViewBag.Sum6 = Sum6.ToString("N2");
                    ViewBag.Sum7 = Sum7.ToString("N2");
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.ModSummaryReport, lstReport);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult BlockedSummary()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/BlockedSummary";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 87 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate && x.IsBlock == true && x.IsClosed == false)
                        //(x.IsRenewal == false && x.IsModified == false) || (x.IsRenewal == true && x.IsModified == true))
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();

                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();

                    RMS.Models.CostCenterScheduleDTO DTO = new RMS.Models.CostCenterScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.BlockedSummary, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult BlockedSummary(RMS.Models.CostCenterScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/BlockedSummary";
                    DateTime dtFromDate = DateTime.ParseExact(DTO.FromDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DateTime dtToDate = DateTime.ParseExact(DTO.ToDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    DTOBasic dtoBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    IList<RMS.Models.IFRSCalculatedSummaryDTO> lstReport = new List<RMS.Models.IFRSCalculatedSummaryDTO>();
                    int SLNO = 0;
                    double Sum1 = 0;
                    double Sum2 = 0;
                    double Sum3 = 0;
                    double Sum4 = 0;
                    double Sum5 = 0;
                    IList<RMS.Models.AgreementInfo> lstAgreement = new List<RMS.Models.AgreementInfo>();
                    if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        lstAgreement = db.AgreementInfos.Where(x => DTO.PremiseTypeSLNoCheckList.Contains(x.PremiseTypeSLNo) && x.AgreementStartDate >= dtFromDate && x.AgreementStartDate <= dtToDate && x.IsBlock == true && x.AgreementStatus == AgreementStatus.Activate && x.IsIFRSEnable == true && x.IsModified == false).ToList();
                    }
                    else if (DTO.AgreementSLNoCheckList != null)
                    {
                        lstAgreement = db.AgreementInfos.Where(x => DTO.AgreementSLNoCheckList.Contains(x.AgreementSLNo) && x.AgreementStartDate >= dtFromDate && x.AgreementStartDate <= dtToDate && x.IsBlock == true && x.AgreementStatus == AgreementStatus.Activate && x.IsIFRSEnable == true && x.IsModified == false).ToList();
                    }
                    else
                    {
                        lstAgreement = db.AgreementInfos.Where(x => x.AgreementStartDate >= dtFromDate && x.AgreementStartDate <= dtToDate && x.IsBlock == true && x.AgreementStatus == AgreementStatus.Activate && x.IsIFRSEnable == true && x.IsModified == false).ToList();
                    }
                    IList<RMS.Models.IFRSSchedule> lstSchedule = new List<RMS.Models.IFRSSchedule>();
                    foreach (RMS.Models.AgreementInfo item in lstAgreement)
                    {
                        lstSchedule = db.IFRSSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.IsBlock == true).Take(1).ToList();
                        if (lstSchedule.Count > 0)
                        {
                            RMS.Models.IFRSCalculatedSummaryDTO obj = new RMS.Models.IFRSCalculatedSummaryDTO();
                            //==Step1
                            obj.PreviousROU = lstSchedule[0].OBROU;
                            obj.PreviousAdvance = lstSchedule[0].OBAdvance;
                            obj.PreviousLease = lstSchedule[0].OBLeaseLiability;
                            if (lstSchedule[0].MonthNo > item.AdvanceAdjustmentPeriod)
                            {
                                obj.UnadjustedAdvance = 0;
                            }
                            else
                            {
                                obj.UnadjustedAdvance = item.AdvanceAmount - (item.AdvanceAdjustmentAmount * (lstSchedule[0].MonthNo - 1));
                            }
                            obj.Difference = obj.PreviousAdvance - obj.UnadjustedAdvance;
                            Sum1 = Sum1 + obj.PreviousROU;
                            Sum2 = Sum2 + obj.PreviousAdvance;
                            Sum3 = Sum3 + obj.PreviousLease;
                            Sum4 = Sum4 + obj.UnadjustedAdvance;
                            Sum5 = Sum5 + obj.Difference;
                            //==Agreement Details
                            obj.MonthNo = lstSchedule[0].MonthNo;
                            obj.Year = lstSchedule[0].Year;
                            obj.Month = lstSchedule[0].Month;
                            SLNO++;
                            obj.SLNO = SLNO;
                            obj.AgreementSLNo = item.AgreementSLNo;
                            obj.AgreementCode = item.AgreementCode;
                            obj.AliasCode = item.AliasCode;
                            obj.AgreementName = item.AgreementName;
                            obj.PremiseType = db.PremiseTypeInfos.Where(x => x.PremiseTypeSLNo == item.PremiseTypeSLNo).Select(x => x.PremiseType).SingleOrDefault();
                            obj.PremiseName = item.PremiseName;
                            obj.AgreementStartDate = item.AgreementStartDate.ToString("dd/MM/yyyy");
                            obj.AgreementEndDate = item.AgreementEndDate.ToString("dd/MM/yyyy");
                            obj.AgreementPeriod = item.AgreementPeriod;
                            obj.CostPerUnit = item.CostPerUnit;
                            obj.TotalArea = item.TotalArea;
                            obj.AdvanceAmount = item.AdvanceAmount + item.AdditionalAdvanceAmount;
                            obj.RentDueDay = item.RentDueDay;
                            obj.ClusterGroup = item.ClusterGroup;
                            obj.BlockText = "Terminated";
                            obj.BlockDate = item.BlockDate;
                            //==Add to list
                            lstReport.Add(obj);
                        }
                    }
                    ViewBag.DateRange = DTO.FromDate + " - " + DTO.ToDate;
                    ViewBag.Step1 = "As at Blocked Month";
                    ViewBag.SLNo = SLNO + 1;
                    ViewBag.Sum1 = Sum1.ToString("N2");
                    ViewBag.Sum2 = Sum2.ToString("N2");
                    ViewBag.Sum3 = Sum3.ToString("N2");
                    ViewBag.Sum4 = Sum4.ToString("N2");
                    ViewBag.Sum5 = Sum5.ToString("N2");
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.BlockedSummaryReport, lstReport);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult Block()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/Block";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 16 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;
                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementType == AgreementType.Regular && x.AgreementStatus == AgreementStatus.Activate &&
                    x.IsBlock == false && x.IsRenewal == false && x.IsModified == false && x.IsClosed == false && x.Status == DTOBasic.active)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();

                    RMS.Models.IFRSScheduleDTO DTO = new RMS.Models.IFRSScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.Block, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult Block(RMS.Models.IFRSScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/Block";
                    DTOBasic DTOBasic = new DTOBasic();
                    int UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    int FromMonthNo = db.ContractSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.Year == DTO.Year && x.Month == DTO.Month).Select(x => x.MonthNo).SingleOrDefault();
                    if (FromMonthNo > 0)
                    {
                        //==Agreement Info
                        RMS.Models.AgreementInfo AI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).SingleOrDefault();
                        AI.IsBlock = true;
                        AI.BlockDate = DateTime.Now;
                        AI.BlockUserSLNo = UserSLNo;
                        db.Entry(AI).State = EntityState.Modified;
                        db.SaveChanges();
                        //==Contract Schedule
                        List<RMS.Models.ContractSchedule> lstCS = db.ContractSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        lstCS.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = UserSLNo; });
                        db.SaveChanges();
                        //==Landlord Schedule
                        List<RMS.Models.LandlordSchedule> lstLandlord = db.LandlordSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        lstLandlord.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = UserSLNo; });
                        db.SaveChanges();
                        //==Cost Center Schedule
                        List<RMS.Models.CostCenterSchedule> lstCC = db.CostCenterSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        lstCC.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = UserSLNo; });
                        db.SaveChanges();
                        //==Utility Schedule
                        //List<RMS.Models.UtilitySchedule> lstUtility = db.UtilitySchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        //lstUtility.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = UserSLNo; });
                        //db.SaveChanges();
                        //==IFRS Schedule
                        List<RMS.Models.IFRSSchedule> lstIFRS = db.IFRSSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        lstIFRS.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = UserSLNo; });
                        db.SaveChanges();
                        return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult Unblock()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/Unblock";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 17 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;
                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementType == AgreementType.Regular && x.AgreementStatus == AgreementStatus.Activate &&
                         x.IsBlock == true && x.IsRenewal == false && x.IsModified == false && x.Status == DTOBasic.active)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();

                    RMS.Models.IFRSScheduleDTO DTO = new RMS.Models.IFRSScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.Unblock, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult Unblock(RMS.Models.IFRSScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/Unblock";
                    DTOBasic DTOBasic = new DTOBasic();
                    int UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    int FromMonthNo = db.ContractSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.Year == DTO.Year && x.Month == DTO.Month).Select(x => x.MonthNo).SingleOrDefault();
                    if (FromMonthNo > 0)
                    {
                        //==Agreement Info
                        RMS.Models.AgreementInfo AI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).SingleOrDefault();
                        AI.IsBlock = false;
                        AI.BlockDate = null;
                        AI.BlockUserSLNo = null;
                        db.Entry(AI).State = EntityState.Modified;
                        db.SaveChanges();
                        //==Contract Schedule
                        int ToMonthNo = AI.AgreementPeriod;
                        List<RMS.Models.ContractSchedule> lstCS = db.ContractSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo).ToList();
                        lstCS.ToList().ForEach(x => { x.IsBlock = false; x.BlockDate = null; x.BlockUserSLNo = null; });
                        db.SaveChanges();
                        //==Landlord Schedule
                        List<RMS.Models.LandlordSchedule> lstLandlord = db.LandlordSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo).ToList();
                        lstLandlord.ToList().ForEach(x => { x.IsBlock = false; x.BlockDate = null; x.BlockUserSLNo = null; });
                        db.SaveChanges();
                        //==Cost Center Schedule
                        List<RMS.Models.CostCenterSchedule> lstCC = db.CostCenterSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo).ToList();
                        lstCC.ToList().ForEach(x => { x.IsBlock = false; x.BlockDate = null; x.BlockUserSLNo = null; });
                        db.SaveChanges();
                        //==Utility Schedule
                        //List<RMS.Models.UtilitySchedule> lstUtility = db.UtilitySchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo).ToList();
                        //lstUtility.ToList().ForEach(x => { x.IsBlock = false; x.BlockDate = null; x.BlockUserSLNo = null; });
                        //db.SaveChanges();
                        //==IFRS Schedule
                        List<RMS.Models.IFRSSchedule> lstIFRS = db.IFRSSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo).ToList();
                        lstIFRS.ToList().ForEach(x => { x.IsBlock = false; x.BlockDate = null; x.BlockUserSLNo = null; });
                        db.SaveChanges();
                        return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult ReBlock()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/ReBlock";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 29 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;
                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementType == AgreementType.Renewal && x.AgreementStatus == AgreementStatus.Activate &&
                    x.IsBlock == false && x.IsRenewal == false && x.IsModified == false && x.IsClosed == false && x.Status == DTOBasic.active)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();

                    RMS.Models.IFRSScheduleDTO DTO = new RMS.Models.IFRSScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.ReBlock, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult ReBlock(RMS.Models.IFRSScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/ReBlock";
                    DTOBasic DTOBasic = new DTOBasic();
                    int UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    int FromMonthNo = db.ContractSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.Year == DTO.Year && x.Month == DTO.Month).Select(x => x.MonthNo).SingleOrDefault();
                    if (FromMonthNo > 0)
                    {
                        //==Agreement Info
                        RMS.Models.AgreementInfo AI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).SingleOrDefault();
                        AI.IsBlock = true;
                        AI.BlockDate = DateTime.Now;
                        AI.BlockUserSLNo = UserSLNo;
                        db.Entry(AI).State = EntityState.Modified;
                        db.SaveChanges();
                        //==Contract Schedule
                        List<RMS.Models.ContractSchedule> lstCS = db.ContractSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        lstCS.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = UserSLNo; });
                        db.SaveChanges();
                        //==Landlord Schedule
                        List<RMS.Models.LandlordSchedule> lstLandlord = db.LandlordSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        lstLandlord.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = UserSLNo; });
                        db.SaveChanges();
                        //==Cost Center Schedule
                        List<RMS.Models.CostCenterSchedule> lstCC = db.CostCenterSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        lstCC.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = UserSLNo; });
                        db.SaveChanges();
                        //==Utility Schedule
                        //List<RMS.Models.UtilitySchedule> lstUtility = db.UtilitySchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        //lstUtility.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = UserSLNo; });
                        //db.SaveChanges();
                        //==IFRS Schedule
                        List<RMS.Models.IFRSSchedule> lstIFRS = db.IFRSSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        lstIFRS.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = UserSLNo; });
                        db.SaveChanges();
                        return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult ModBlock()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/ModBlock";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 42 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;
                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementType == AgreementType.Modified && x.AgreementStatus == AgreementStatus.Activate &&
                    x.IsBlock == false && x.IsRenewal == false && x.IsModified == false && x.IsClosed == false && x.Status == DTOBasic.active)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();

                    RMS.Models.IFRSScheduleDTO DTO = new RMS.Models.IFRSScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.ModBlock, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult ModBlock(RMS.Models.IFRSScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/ModBlock";
                    DTOBasic DTOBasic = new DTOBasic();
                    int UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    int FromMonthNo = db.ContractSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.Year == DTO.Year && x.Month == DTO.Month).Select(x => x.MonthNo).SingleOrDefault();
                    if (FromMonthNo > 0)
                    {
                        //==Agreement Info
                        RMS.Models.AgreementInfo AI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).SingleOrDefault();
                        AI.IsBlock = true;
                        AI.BlockDate = DateTime.Now;
                        AI.BlockUserSLNo = UserSLNo;
                        db.Entry(AI).State = EntityState.Modified;
                        db.SaveChanges();
                        //==Contract Schedule
                        List<RMS.Models.ContractSchedule> lstCS = db.ContractSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        lstCS.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = UserSLNo; });
                        db.SaveChanges();
                        //==Landlord Schedule
                        List<RMS.Models.LandlordSchedule> lstLandlord = db.LandlordSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        lstLandlord.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = UserSLNo; });
                        db.SaveChanges();
                        //==Cost Center Schedule
                        List<RMS.Models.CostCenterSchedule> lstCC = db.CostCenterSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        lstCC.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = UserSLNo; });
                        db.SaveChanges();
                        //==Utility Schedule
                        //List<RMS.Models.UtilitySchedule> lstUtility = db.UtilitySchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        //lstUtility.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = UserSLNo; });
                        //db.SaveChanges();
                        //==IFRS Schedule
                        List<RMS.Models.IFRSSchedule> lstIFRS = db.IFRSSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo).ToList();
                        lstIFRS.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = UserSLNo; });
                        db.SaveChanges();
                        return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult ReUnblock()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/ReUnblock";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 30 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;
                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementType == AgreementType.Renewal && x.AgreementStatus == AgreementStatus.Activate &&
                         x.IsBlock == true && x.IsRenewal == false && x.IsModified == false && x.Status == DTOBasic.active)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();

                    RMS.Models.IFRSScheduleDTO DTO = new RMS.Models.IFRSScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.ReUnblock, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult ReUnblock(RMS.Models.IFRSScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/ReUnblock";
                    DTOBasic DTOBasic = new DTOBasic();
                    int UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    int FromMonthNo = db.ContractSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.Year == DTO.Year && x.Month == DTO.Month).Select(x => x.MonthNo).SingleOrDefault();
                    if (FromMonthNo > 0)
                    {
                        //==Agreement Info
                        RMS.Models.AgreementInfo AI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).SingleOrDefault();
                        AI.IsBlock = false;
                        AI.BlockDate = null;
                        AI.BlockUserSLNo = null;
                        db.Entry(AI).State = EntityState.Modified;
                        db.SaveChanges();
                        //==Contract Schedule
                        int ToMonthNo = AI.AgreementPeriod;
                        List<RMS.Models.ContractSchedule> lstCS = db.ContractSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo).ToList();
                        lstCS.ToList().ForEach(x => { x.IsBlock = false; x.BlockDate = null; x.BlockUserSLNo = null; });
                        db.SaveChanges();
                        //==Landlord Schedule
                        List<RMS.Models.LandlordSchedule> lstLandlord = db.LandlordSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo).ToList();
                        lstLandlord.ToList().ForEach(x => { x.IsBlock = false; x.BlockDate = null; x.BlockUserSLNo = null; });
                        db.SaveChanges();
                        //==Cost Center Schedule
                        List<RMS.Models.CostCenterSchedule> lstCC = db.CostCenterSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo).ToList();
                        lstCC.ToList().ForEach(x => { x.IsBlock = false; x.BlockDate = null; x.BlockUserSLNo = null; });
                        db.SaveChanges();
                        //==Utility Schedule
                        //List<RMS.Models.UtilitySchedule> lstUtility = db.UtilitySchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo).ToList();
                        //lstUtility.ToList().ForEach(x => { x.IsBlock = false; x.BlockDate = null; x.BlockUserSLNo = null; });
                        //db.SaveChanges();
                        //==IFRS Schedule
                        List<RMS.Models.IFRSSchedule> lstIFRS = db.IFRSSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo).ToList();
                        lstIFRS.ToList().ForEach(x => { x.IsBlock = false; x.BlockDate = null; x.BlockUserSLNo = null; });
                        db.SaveChanges();
                        return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult ModUnblock()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/ModUnblock";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 43 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;
                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementType == AgreementType.Modified && x.AgreementStatus == AgreementStatus.Activate &&
                         x.IsBlock == true && x.IsRenewal == false && x.IsModified == false && x.Status == DTOBasic.active)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();

                    RMS.Models.IFRSScheduleDTO DTO = new RMS.Models.IFRSScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.ModUnblock, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult ModUnblock(RMS.Models.IFRSScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/ModUnblock";
                    DTOBasic DTOBasic = new DTOBasic();
                    int UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    int FromMonthNo = db.ContractSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.Year == DTO.Year && x.Month == DTO.Month).Select(x => x.MonthNo).SingleOrDefault();
                    if (FromMonthNo > 0)
                    {
                        //==Agreement Info
                        RMS.Models.AgreementInfo AI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).SingleOrDefault();
                        AI.IsBlock = false;
                        AI.BlockDate = null;
                        AI.BlockUserSLNo = null;
                        db.Entry(AI).State = EntityState.Modified;
                        db.SaveChanges();
                        //==Contract Schedule
                        int ToMonthNo = AI.AgreementPeriod;
                        List<RMS.Models.ContractSchedule> lstCS = db.ContractSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo).ToList();
                        lstCS.ToList().ForEach(x => { x.IsBlock = false; x.BlockDate = null; x.BlockUserSLNo = null; });
                        db.SaveChanges();
                        //==Landlord Schedule
                        List<RMS.Models.LandlordSchedule> lstLandlord = db.LandlordSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo).ToList();
                        lstLandlord.ToList().ForEach(x => { x.IsBlock = false; x.BlockDate = null; x.BlockUserSLNo = null; });
                        db.SaveChanges();
                        //==Cost Center Schedule
                        List<RMS.Models.CostCenterSchedule> lstCC = db.CostCenterSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo).ToList();
                        lstCC.ToList().ForEach(x => { x.IsBlock = false; x.BlockDate = null; x.BlockUserSLNo = null; });
                        db.SaveChanges();
                        //==Utility Schedule
                        //List<RMS.Models.UtilitySchedule> lstUtility = db.UtilitySchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo).ToList();
                        //lstUtility.ToList().ForEach(x => { x.IsBlock = false; x.BlockDate = null; x.BlockUserSLNo = null; });
                        //db.SaveChanges();
                        //==IFRS Schedule
                        List<RMS.Models.IFRSSchedule> lstIFRS = db.IFRSSchedules.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && x.MonthNo >= FromMonthNo && x.MonthNo <= ToMonthNo).ToList();
                        lstIFRS.ToList().ForEach(x => { x.IsBlock = false; x.BlockDate = null; x.BlockUserSLNo = null; });
                        db.SaveChanges();
                        return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RentAPExecuteLog()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentAPExecuteLog";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 53 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;
                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    DTOBasic dtoBasic = new DTOBasic();
                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == dtoBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate &&
                     x.IsRenewal == false && x.IsModified == false && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();


                    RMS.Models.ContractScheduleDTO DTO = new RMS.Models.ContractScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentAPExecuteLog, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult RentAPExecuteLog(RMS.Models.ContractScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    DTOBasic dtoBasic = new DTOBasic();
                    IList<RMS.Models.ContractScheduleDTO> lst = new List<RMS.Models.ContractScheduleDTO>();
                    IList<RMS.Models.ContractScheduleDTO> lstCurrentMonth = new List<RMS.Models.ContractScheduleDTO>();
                    IList<RMS.Models.ContractScheduleDTO> lstFollowingMonth = new List<RMS.Models.ContractScheduleDTO>();
                    int Year = 0;
                    string Month = string.Empty;
                    int SelectedMonthNo = 0;
                    if (DTO.AgreementSLNoCheckList != null)
                    {
                        //AgreementSLNo Wise Current Month
                        var queryCM = from CS in db.ContractSchedules
                                      join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                      join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                      where DTO.AgreementSLNoCheckList.Contains(CS.AgreementSLNo) && CS.IsPosted == false &&
                                                 AI.IsRenewal == false && AI.IsModified == false && CS.IsBlock == false &&
                                                 CS.Year == DTO.Year && CS.Month == DTO.Month && AI.CalculationMethod == "Current Month"
                                      orderby CS.AgreementSLNo ascending
                                      select new
                                      {
                                          CS.ContractScheduleSLNo,
                                          CS.AgreementSLNo,
                                          PT.PremiseTypeSLNo,
                                      };
                        lstCurrentMonth = queryCM.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                        {
                            ContractScheduleSLNo = x.ContractScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            Year = DTO.Year,
                            Month = DTO.Month,
                        }).ToList();
                        foreach (var item in lstCurrentMonth)
                        {
                            lst.Add(item);
                        }
                        //AgreementSLNo Wise Following Month
                        SelectedMonthNo = DateTime.ParseExact(DTO.Month, "MMMM", CultureInfo.InvariantCulture).Month;
                        if (SelectedMonthNo == 1)
                        {
                            Year = DTO.Year - 1;
                            Month = "December";
                        }
                        else
                        {
                            //Get the full month name 
                            Year = DTO.Year;
                            Month = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(SelectedMonthNo - 1);
                        }
                        var queryFM = from CS in db.ContractSchedules
                                      join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                      join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                      where DTO.AgreementSLNoCheckList.Contains(CS.AgreementSLNo) && CS.IsPosted == false &&
                                                 AI.IsRenewal == false && AI.IsModified == false && CS.IsBlock == false &&
                                                 CS.Year == Year && CS.Month == Month && AI.CalculationMethod == "Following Month"
                                      orderby CS.AgreementSLNo ascending
                                      select new
                                      {
                                          CS.ContractScheduleSLNo,
                                          CS.AgreementSLNo,
                                          PT.PremiseTypeSLNo,
                                      };
                        lstFollowingMonth = queryFM.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                        {
                            ContractScheduleSLNo = x.ContractScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            Year = Year,
                            Month = Month,
                        }).ToList();
                        foreach (var item in lstFollowingMonth)
                        {
                            lst.Add(item);
                        }
                        //==xx
                    }
                    else if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        //==Premise Type Wise Current Month
                        var queryPremiseTypeCM = from CS in db.ContractSchedules
                                                 join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                 join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                 where DTO.PremiseTypeSLNoCheckList.Contains(PT.PremiseTypeSLNo) &&
                                                       AI.IsRenewal == false && AI.IsModified == false && CS.IsPosted == false && CS.IsBlock == false &&
                                                       CS.Year == DTO.Year && CS.Month == DTO.Month && AI.CalculationMethod == "Current Month"
                                                 orderby CS.AgreementSLNo ascending
                                                 select new
                                                 {
                                                     CS.ContractScheduleSLNo,
                                                     CS.AgreementSLNo,
                                                     PT.PremiseTypeSLNo,
                                                 };
                        lstCurrentMonth = queryPremiseTypeCM.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                        {
                            ContractScheduleSLNo = x.ContractScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            Year = DTO.Year,
                            Month = DTO.Month,
                        }).ToList();
                        foreach (var item in lstCurrentMonth)
                        {
                            lst.Add(item);
                        }
                        //==Premise Type Wise Following Month
                        SelectedMonthNo = DateTime.ParseExact(DTO.Month, "MMMM", CultureInfo.InvariantCulture).Month;
                        if (SelectedMonthNo == 1)
                        {
                            Year = DTO.Year - 1;
                            Month = "December";
                        }
                        else
                        {
                            //Get the full month name 
                            Year = DTO.Year;
                            Month = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(SelectedMonthNo - 1);
                        }
                        var queryPremiseTypeFM = from CS in db.ContractSchedules
                                                 join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                 join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                 where DTO.PremiseTypeSLNoCheckList.Contains(PT.PremiseTypeSLNo) &&
                                                       AI.IsRenewal == false && AI.IsModified == false && CS.IsPosted == false && CS.IsBlock == false &&
                                                       CS.Year == Year && CS.Month == Month && AI.CalculationMethod == "Following Month"
                                                 orderby CS.AgreementSLNo ascending
                                                 select new
                                                 {
                                                     CS.ContractScheduleSLNo,
                                                     CS.AgreementSLNo,
                                                     PT.PremiseTypeSLNo,
                                                 };
                        lstFollowingMonth = queryPremiseTypeFM.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                        {
                            ContractScheduleSLNo = x.ContractScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            Year = Year,
                            Month = Month,
                        }).ToList();
                        foreach (var item in lstFollowingMonth)
                        {
                            lst.Add(item);
                        }
                        //==
                    }
                    else
                    {
                        //All Agreements Current Month
                        var queryAllCM = from CS in db.ContractSchedules
                                         join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                         join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                         where AI.IsRenewal == false && AI.IsModified == false && CS.IsPosted == false && CS.IsBlock == false &&
                                               CS.Year == DTO.Year && CS.Month == DTO.Month && AI.CalculationMethod == "Current Month"
                                         orderby CS.AgreementSLNo ascending
                                         select new
                                         {
                                             CS.ContractScheduleSLNo,
                                             CS.AgreementSLNo,
                                             PT.PremiseTypeSLNo,
                                         };
                        lstCurrentMonth = queryAllCM.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                        {
                            ContractScheduleSLNo = x.ContractScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            Year = DTO.Year,
                            Month = DTO.Month,
                        }).ToList();
                        foreach (var item in lstCurrentMonth)
                        {
                            lst.Add(item);
                        }
                        //All Agreements Following Month
                        SelectedMonthNo = DateTime.ParseExact(DTO.Month, "MMMM", CultureInfo.InvariantCulture).Month;
                        if (SelectedMonthNo == 1)
                        {
                            Year = DTO.Year - 1;
                            Month = "December";
                        }
                        else
                        {
                            //Get the full month name 
                            Year = DTO.Year;
                            Month = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(SelectedMonthNo - 1);
                        }
                        var queryAllFM = from CS in db.ContractSchedules
                                         join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                         join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                         where AI.IsRenewal == false && AI.IsModified == false && CS.IsPosted == false && CS.IsBlock == false &&
                                               CS.Year == Year && CS.Month == Month && AI.CalculationMethod == "Following Month"
                                         orderby CS.AgreementSLNo ascending
                                         select new
                                         {
                                             CS.ContractScheduleSLNo,
                                             CS.AgreementSLNo,
                                             PT.PremiseTypeSLNo,
                                         };
                        lstFollowingMonth = queryAllFM.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                        {
                            ContractScheduleSLNo = x.ContractScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            Year = Year,
                            Month = Month,
                        }).ToList();
                        foreach (var item in lstFollowingMonth)
                        {
                            lst.Add(item);
                        }
                    }
                    if (lst.Count == 0)
                    {
                        return Json(new { AgrNotFound = true, CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                    int Max = db.RentAPExecuteLogs.Max(x => (int?)x.LogID) ?? 0;
                    if (Max == 0)
                    {
                        Max = 20001;
                    }
                    else
                    {
                        Max = Max + 1;
                    }
                    RMS.Models.RentAPExecuteLog RLog = new RMS.Models.RentAPExecuteLog();
                    List<RMS.Models.CostCenterSchedule> lstCCSchedule = new List<RMS.Models.CostCenterSchedule>();
                    List<RMS.Models.LandlordSchedule> lstLandlordSchedule = new List<RMS.Models.LandlordSchedule>();
                    RMS.Models.PreviewRentAPJournalInfo ji = new RMS.Models.PreviewRentAPJournalInfo();
                    DebitCredit DebitCredit = new DebitCredit();
                    foreach (RMS.Models.ContractScheduleDTO item in lst.OrderBy(x => x.AgreementSLNo))
                    {
                        //==Contract Schedule Update
                        RMS.Models.ContractSchedule CS = db.ContractSchedules.Where(x => x.ContractScheduleSLNo == item.ContractScheduleSLNo && x.AgreementSLNo == item.AgreementSLNo).SingleOrDefault();
                        CS.IsLog = true;
                        db.Entry(CS).State = EntityState.Modified;
                        db.SaveChanges();
                        //==RentAPExecuteLog - Log Register
                        RLog = new RMS.Models.RentAPExecuteLog();
                        RLog.LogID = Max;
                        RLog.LogName = DTO.LogName;
                        RLog.LogDate = System.DateTime.Now;
                        RLog.PremiseTypeSLNo = item.PremiseTypeSLNo;
                        RLog.AgreementSLNo = item.AgreementSLNo;
                        RLog.Year = item.Year;
                        RLog.Month = item.Month;
                        RLog.LogStatus = "Created";
                        RLog.Status = dtoBasic.active;
                        RLog.EntryBy = LoginUserID;
                        RLog.EntryDate = System.DateTime.Now;
                        RLog.ExecuteDate = null;
                        RLog.ExecuteBy = null;
                        RLog.LogYear = DTO.Year;
                        RLog.LogMonth = DTO.Month;
                        db.RentAPExecuteLogs.Add(RLog);
                        db.SaveChanges();
                        #region "PreviewRentAPJournalInfo"
                        //==RentAPJournalInfo for Cost Center
                        var AgreementControlData = db.AgreementInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo).Select(x => new { x.RentGLCode, x.TaxGLCode, x.VATGLCode, x.AdvanceAdjustmentGLCode, x.CalculationMethod }).SingleOrDefault();
                        lstCCSchedule = db.CostCenterSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == item.Year && x.Month == item.Month).ToList();
                        foreach (RMS.Models.CostCenterSchedule CCS in lstCCSchedule.OrderBy(x => x.AgreementSLNo))
                        {
                            //==RentAPJournalInfo Debit  Starts
                            var CCInfo = db.CostCenterInfos.Where(x => x.CCSLNo == CCS.CCSLNo).Select(x => new { x.CCCode, x.CCName, x.CCShareAllotment }).SingleOrDefault();
                            //==Debit Journal Cost Center Rent
                            ji = new RMS.Models.PreviewRentAPJournalInfo();
                            ji.PostingID = Max.ToString();
                            ji.PostingDate = DateTime.Now;
                            ji.AgreementSLNo = CCS.AgreementSLNo;
                            ji.Year = item.Year;
                            ji.Month = item.Month;
                            ji.GLCode = AgreementControlData.RentGLCode;
                            ji.GLName = "Rent GL";
                            ji.DrCrID = DebitCredit.Debit;
                            ji.Amount = (CCS.TotalRentAmount * CCInfo.CCShareAllotment) / 100;
                            ji.CCSLNo = CCS.CCSLNo;
                            ji.LandlordSLNo = 0;
                            ji.Remarks = "Rent " + item.Month + ", " + item.Year;
                            ji.UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                            db.PreviewRentAPJournalInfos.Add(ji);
                            db.SaveChanges();
                        }
                        //==RentAPJournalInfo for Landlord
                        lstLandlordSchedule = db.LandlordSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == item.Year && x.Month == item.Month).ToList();
                        foreach (RMS.Models.LandlordSchedule LS in lstLandlordSchedule)
                        {
                            var LandlordInfo = db.LandlordInfos.Where(x => x.LandlordSLNo == LS.LandlordSLNo).Select(x => new { x.VendorCode, x.LandlordName }).SingleOrDefault();
                            //==Credit Journal - Tax
                            if (LS.TaxAmount > 0)
                            {
                                ji = new RMS.Models.PreviewRentAPJournalInfo();
                                ji.PostingID = Max.ToString();
                                ji.PostingDate = DateTime.Now;
                                ji.AgreementSLNo = LS.AgreementSLNo;
                                ji.Year = item.Year;
                                ji.Month = item.Month;
                                if (db.AgreementInfos.Any(x => x.AgreementSLNo == LS.AgreementSLNo && x.IsHoldBlockPayment == true) == true)
                                {
                                    ji.GLCode = db.AgreementInfos.Where(x => x.AgreementSLNo == LS.AgreementSLNo).Select(x => x.ProvisionGLTax).SingleOrDefault();
                                    ji.GLName = "Provision Tax GL";
                                    ji.Remarks = "Tax Provision " + item.Month + ", " + item.Year;
                                }
                                else
                                {
                                    ji.GLCode = AgreementControlData.TaxGLCode;
                                    ji.GLName = "Tax GL";
                                    ji.Remarks = "Tax " + item.Month + ", " + item.Year;
                                }
                                ji.DrCrID = DebitCredit.Credit;
                                ji.Amount = LS.TaxAmount;
                                ji.CCSLNo = 0;
                                ji.LandlordSLNo = LS.LandlordSLNo;
                                ji.UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                                db.PreviewRentAPJournalInfos.Add(ji);
                                db.SaveChanges();
                            }
                            //==Credit Journal - VAT
                            if (LS.VATAmount > 0)
                            {
                                ji = new RMS.Models.PreviewRentAPJournalInfo();
                                ji.PostingID = Max.ToString();
                                ji.PostingDate = DateTime.Now;
                                ji.AgreementSLNo = LS.AgreementSLNo;
                                ji.Year = item.Year;
                                ji.Month = item.Month;
                                ji.GLCode = AgreementControlData.VATGLCode;
                                ji.GLName = "VAT GL";
                                ji.DrCrID = DebitCredit.Credit;
                                ji.Amount = LS.VATAmount;
                                ji.CCSLNo = 0;
                                ji.LandlordSLNo = LS.LandlordSLNo;
                                ji.Remarks = "VAT " + item.Month + ", " + item.Year;
                                ji.UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                                db.PreviewRentAPJournalInfos.Add(ji);
                                db.SaveChanges();
                            }
                            //==Credit Journal - Landlord Wise
                            ji = new RMS.Models.PreviewRentAPJournalInfo();
                            ji.PostingID = Max.ToString();
                            ji.PostingDate = DateTime.Now;
                            ji.AgreementSLNo = LS.AgreementSLNo;
                            ji.Year = item.Year;
                            ji.Month = item.Month;
                            if (db.AgreementInfos.Any(x => x.AgreementSLNo == LS.AgreementSLNo && x.IsHoldBlockPayment == true) == true)
                            {
                                ji.GLCode = db.AgreementInfos.Where(x => x.AgreementSLNo == LS.AgreementSLNo).Select(x => x.ProvisionGLAP).SingleOrDefault();
                                ji.GLName = "Provision AP GL";
                                ji.Remarks = "AP Provision " + item.Month + ", " + item.Year;
                            }
                            else
                            {
                                ji.GLCode = LandlordInfo.VendorCode;
                                ji.GLName = LandlordInfo.LandlordName;
                                ji.Remarks = "AP " + item.Month + ", " + item.Year;
                            }
                            ji.DrCrID = DebitCredit.Credit;
                            ji.Amount = (LS.NetRentAmount + LS.AdvanceAdjustmentAmount) - (LS.TaxAmount + LS.VATAmount);
                            ji.CCSLNo = 0;
                            ji.LandlordSLNo = LS.LandlordSLNo;
                            ji.UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                            db.PreviewRentAPJournalInfos.Add(ji);
                            db.SaveChanges();
                        }
                        //==xxx
                        #endregion
                    }
                    return Json(new { CheckStatus = true, LogID = RLog.LogID }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }


        [HttpGet]
        public ActionResult UtilityAPExecuteLog()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityAPExecuteLog";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 58 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;
                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    DTOBasic dtoBasic = new DTOBasic();
                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == dtoBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate &&
                     x.IsRenewal == false && x.IsModified == false && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();


                    RMS.Models.ContractScheduleDTO DTO = new RMS.Models.ContractScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityAPExecuteLog, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult UtilityAPExecuteLog(RMS.Models.ContractScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    DTOBasic dtoBasic = new DTOBasic();
                    IList<RMS.Models.UtilityScheduleDTO> lstUtilitySchedule = new List<RMS.Models.UtilityScheduleDTO>();
                    if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        //PremiseType Wise
                        var queryPremiseType = from US in db.UtilitySchedules
                                               join AI in db.AgreementInfos on US.AgreementSLNo equals AI.AgreementSLNo
                                               join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                               where DTO.PremiseTypeSLNoCheckList.Contains(PT.PremiseTypeSLNo) &&
                                                     AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                                     US.IsPosted == false && US.IsBlock == false && US.Year == DTO.Year && US.Month == DTO.Month
                                               orderby US.AgreementSLNo ascending
                                               select new
                                               {
                                                   US.UScheduleSLNo,
                                                   US.AgreementSLNo,
                                                   PT.PremiseTypeSLNo,
                                               };
                        lstUtilitySchedule = queryPremiseType.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                        }).ToList();
                    }
                    else if (DTO.AgreementSLNoCheckList != null)
                    {
                        //Agreement Wise
                        var queryAgreement = from US in db.UtilitySchedules
                                             join AI in db.AgreementInfos on US.AgreementSLNo equals AI.AgreementSLNo
                                             join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                             where DTO.AgreementSLNoCheckList.Contains(US.AgreementSLNo) &&
                                                    AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                                    US.IsPosted == false && US.IsBlock == false && US.Year == DTO.Year && US.Month == DTO.Month
                                             orderby US.AgreementSLNo ascending
                                             select new
                                             {
                                                 US.UScheduleSLNo,
                                                 US.AgreementSLNo,
                                                 PT.PremiseTypeSLNo,
                                             };
                        lstUtilitySchedule = queryAgreement.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                        }).ToList();
                    }
                    else
                    {
                        //All Records
                        var queryAll = from US in db.UtilitySchedules
                                       join AI in db.AgreementInfos on US.AgreementSLNo equals AI.AgreementSLNo
                                       join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                       where AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                             US.IsPosted == false && US.IsBlock == false && US.Year == DTO.Year && US.Month == DTO.Month
                                       orderby US.AgreementSLNo ascending
                                       select new
                                       {
                                           US.UScheduleSLNo,
                                           US.AgreementSLNo,
                                           PT.PremiseTypeSLNo,
                                       };
                        lstUtilitySchedule = queryAll.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                        }).ToList();
                    }
                    if (lstUtilitySchedule.Count == 0)
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                    int Max = db.UtilityAPExecuteLogs.Max(x => (int?)x.LogID) ?? 0;
                    if (Max == 0)
                    {
                        Max = 40001;
                    }
                    else
                    {
                        Max = Max + 1;
                    }
                    //==Utility Schedule Update
                    foreach (RMS.Models.UtilityScheduleDTO item in lstUtilitySchedule)
                    {
                        RMS.Models.UtilitySchedule US = db.UtilitySchedules.Where(x => x.UScheduleSLNo == item.UScheduleSLNo && x.AgreementSLNo == item.AgreementSLNo).SingleOrDefault();
                        US.IsLog = true;
                        db.Entry(US).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                    var lst = lstUtilitySchedule.GroupBy(x => x.AgreementSLNo).Select(x => new { x.FirstOrDefault().UScheduleSLNo, x.FirstOrDefault().AgreementSLNo, x.FirstOrDefault().PremiseTypeSLNo }).ToList();
                    RMS.Models.UtilityAPExecuteLog ULog = new RMS.Models.UtilityAPExecuteLog();
                    foreach (var item in lst.OrderBy(x => x.AgreementSLNo))
                    {
                        //==UtilityAPExecuteLog - Log Register
                        ULog = new RMS.Models.UtilityAPExecuteLog();
                        ULog.LogID = Max;
                        ULog.LogName = DTO.LogName;
                        ULog.LogDate = System.DateTime.Now;
                        ULog.PremiseTypeSLNo = item.PremiseTypeSLNo;
                        ULog.AgreementSLNo = item.AgreementSLNo;
                        ULog.Year = DTO.Year;
                        ULog.Month = DTO.Month;
                        ULog.LogStatus = "Created";
                        ULog.Status = dtoBasic.active;
                        ULog.EntryBy = LoginUserID;
                        ULog.EntryDate = System.DateTime.Now;
                        ULog.ExecuteDate = null;
                        ULog.ExecuteBy = null;
                        db.UtilityAPExecuteLogs.Add(ULog);
                        db.SaveChanges();
                    }
                    return Json(new { CheckStatus = true, LogID = ULog.LogID }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult RentAPReExecuteLog(RMS.Models.ContractScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    DTOBasic dtoBasic = new DTOBasic();
                    IList<RMS.Models.ContractScheduleDTO> lst = new List<RMS.Models.ContractScheduleDTO>();
                    if (DTO.AgreementSLNoCheckList != null)
                    {
                        //==Update Contract Schedule table AgreementSLNo wise IsLog Log to Planned
                        //var UpdateContractSchedule = db.ContractSchedules.Where(x => DTO.AgreementSLNoCheckList.Contains(x.AgreementSLNo) && x.IsLog == true && x.Year == DTO.Year && x.Month == DTO.Month).ToList();
                        //UpdateContractSchedule.ForEach(x => { x.IsLog = false; });
                        //db.SaveChanges();
                        //==Delete RentAPExecuteLog table AgreementSLNo wise Log records
                        var DeleteRLog = db.RentAPExecuteLogs.Where(x => DTO.AgreementSLNoCheckList.Contains(x.AgreementSLNo) && x.LogStatus == "Created" && x.Year == DTO.Year && x.Month == DTO.Month && x.Status == dtoBasic.active).ToList();
                        db.RentAPExecuteLogs.RemoveRange(DeleteRLog);
                        db.SaveChanges();
                        //Agreement Wise re-execute
                        var queryAgreement = from CS in db.ContractSchedules
                                             join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                             join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                             where DTO.AgreementSLNoCheckList.Contains(CS.AgreementSLNo) &&
                                                   AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                                   CS.IsPosted == false &&
                                                     CS.Year == DTO.Year && CS.Month == DTO.Month
                                             orderby CS.AgreementSLNo ascending
                                             select new
                                             {
                                                 CS.ContractScheduleSLNo,
                                                 CS.AgreementSLNo,
                                                 PT.PremiseTypeSLNo,
                                             };
                        lst = queryAgreement.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                        {
                            ContractScheduleSLNo = x.ContractScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                        }).ToList();
                    }
                    else if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        //==Update ContractSchedule table PremiseTypeSLNo wise IsLog Log to Planned
                        //var queryUpdateContractSchedule = from CS in db.ContractSchedules
                        //                                  join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                        //                                  join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                        //                                  where DTO.PremiseTypeSLNoCheckList.Contains(PT.PremiseTypeSLNo) && CS.IsLog == true &&
                        //                                                              CS.Year == DTO.Year && CS.Month == DTO.Month
                        //                                  orderby CS.AgreementSLNo ascending
                        //                                  select new
                        //                                  {
                        //                                      CS.AgreementSLNo,
                        //                                      CS.IsLog,
                        //                                      PT.PremiseTypeSLNo,
                        //                                  };
                        //var lstUpdateContractSchedule = queryUpdateContractSchedule.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                        //{
                        //    AgreementSLNo = x.AgreementSLNo,
                        //    IsLog = x.IsLog,
                        //    PremiseTypeSLNo = x.PremiseTypeSLNo,
                        //}).ToList();
                        //lstUpdateContractSchedule.ForEach(x => { x.IsLog = false; });
                        //db.SaveChanges();
                        //==Delete RentAPExecuteLog table PremiseType wise Log records
                        var DeleteRLog = db.RentAPExecuteLogs.Where(x => DTO.PremiseTypeSLNoCheckList.Contains(x.PremiseTypeSLNo) && x.LogStatus == "Created" && x.Year == DTO.Year && x.Month == DTO.Month && x.Status == dtoBasic.active).ToList();
                        db.RentAPExecuteLogs.RemoveRange(DeleteRLog);
                        db.SaveChanges();
                        //PremiseType Wise Re-Execute
                        var queryPremiseType = from CS in db.ContractSchedules
                                               join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                               join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                               where DTO.PremiseTypeSLNoCheckList.Contains(PT.PremiseTypeSLNo) &&
                                                     AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                                     CS.IsPosted == false && CS.Year == DTO.Year && CS.Month == DTO.Month
                                               orderby CS.AgreementSLNo ascending
                                               select new
                                               {
                                                   CS.ContractScheduleSLNo,
                                                   CS.AgreementSLNo,
                                                   PT.PremiseTypeSLNo,
                                               };
                        lst = queryPremiseType.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                        {
                            ContractScheduleSLNo = x.ContractScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                        }).ToList();
                    }
                    else
                    {
                        //==Delete RentAPExecuteLog table all created records for the year & month
                        var DeleteRLog = db.RentAPExecuteLogs.Where(x => x.LogStatus == "Created" && x.Year == DTO.Year && x.Month == DTO.Month && x.Status == dtoBasic.active).ToList();
                        db.RentAPExecuteLogs.RemoveRange(DeleteRLog);
                        db.SaveChanges();
                        //All Records
                        var queryAll = from CS in db.ContractSchedules
                                       join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                       join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                       where AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                             CS.IsPosted == false && CS.Year == DTO.Year && CS.Month == DTO.Month
                                       orderby CS.AgreementSLNo ascending
                                       select new
                                       {
                                           CS.ContractScheduleSLNo,
                                           CS.AgreementSLNo,
                                           PT.PremiseTypeSLNo,
                                       };
                        lst = queryAll.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                        {
                            ContractScheduleSLNo = x.ContractScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                        }).ToList();
                    }
                    if (lst.Count == 0)
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                    int Max = db.RentAPExecuteLogs.Max(x => (int?)x.LogID) ?? 0;
                    if (Max == 0)
                    {
                        Max = 20001;
                    }
                    else
                    {
                        Max = Max + 1;
                    }
                    RMS.Models.RentAPExecuteLog RLog = new RMS.Models.RentAPExecuteLog();
                    foreach (RMS.Models.ContractScheduleDTO item in lst.OrderBy(x => x.AgreementSLNo))
                    {
                        //==Contract Schedule Update
                        RMS.Models.ContractSchedule CS = db.ContractSchedules.Where(x => x.ContractScheduleSLNo == item.ContractScheduleSLNo && x.AgreementSLNo == item.AgreementSLNo && x.IsLog == false).SingleOrDefault();
                        if (CS != null)
                        {
                            CS.IsLog = true;
                            db.Entry(CS).State = EntityState.Modified;
                            db.SaveChanges();
                        }
                        //==RentAPExecuteLog - Re Log Register
                        RLog = new RMS.Models.RentAPExecuteLog();
                        RLog.LogID = Max;
                        RLog.LogName = DTO.LogName;
                        RLog.LogDate = System.DateTime.Now;
                        RLog.PremiseTypeSLNo = item.PremiseTypeSLNo;
                        RLog.AgreementSLNo = item.AgreementSLNo;
                        RLog.Year = DTO.Year;
                        RLog.Month = DTO.Month;
                        RLog.LogStatus = "Created";
                        RLog.Status = dtoBasic.active;
                        RLog.EntryBy = LoginUserID;
                        RLog.EntryDate = System.DateTime.Now;
                        RLog.ExecuteDate = null;
                        RLog.ExecuteBy = null;
                        db.RentAPExecuteLogs.Add(RLog);
                        db.SaveChanges();
                    }
                    return Json(new { CheckStatus = true, LogID = RLog.LogID }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult UtilityAPReExecuteLog(RMS.Models.ContractScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    DTOBasic dtoBasic = new DTOBasic();
                    IList<RMS.Models.UtilityScheduleDTO> lstUtilitySchedule = new List<RMS.Models.UtilityScheduleDTO>();
                    if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        //==Update Utility Schedule table PremiseTypeSLNo wise IsLog Log to Planned
                        //var queryUpdateUtilitySchedule = from US in db.UtilitySchedules
                        //                                  join AI in db.AgreementInfos on US.AgreementSLNo equals AI.AgreementSLNo
                        //                                  join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                        //                                  where DTO.PremiseTypeSLNoCheckList.Contains(PT.PremiseTypeSLNo) && US.IsLog == true &&
                        //                                                              US.Year == DTO.Year && US.Month == DTO.Month
                        //                                  orderby US.AgreementSLNo ascending
                        //                                  select new
                        //                                  {
                        //                                      US.AgreementSLNo,
                        //                                      US.IsLog,
                        //                                      PT.PremiseTypeSLNo,
                        //                                  };
                        //var lstUpdateUtilitySchedule = queryUpdateUtilitySchedule.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        //{
                        //    AgreementSLNo = x.AgreementSLNo,
                        //    IsLog = x.IsLog,
                        //    PremiseTypeSLNo = x.PremiseTypeSLNo,
                        //}).ToList();
                        //lstUpdateUtilitySchedule.ForEach(x => { x.IsLog = false; });
                        //db.SaveChanges();
                        //==Delete UtilityAPExecuteLog table PremiseType wise Log records
                        var DeleteULog = db.UtilityAPExecuteLogs.Where(x => DTO.PremiseTypeSLNoCheckList.Contains(x.PremiseTypeSLNo) && x.LogStatus == "Created" && x.Year == DTO.Year && x.Month == DTO.Month && x.Status == dtoBasic.active).ToList();
                        db.UtilityAPExecuteLogs.RemoveRange(DeleteULog);
                        db.SaveChanges();
                        //PremiseType Wise Re-Execute
                        var queryPremiseType = from US in db.UtilitySchedules
                                               join AI in db.AgreementInfos on US.AgreementSLNo equals AI.AgreementSLNo
                                               join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                               where DTO.PremiseTypeSLNoCheckList.Contains(PT.PremiseTypeSLNo) &&
                                                     AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                                     US.IsPosted == false && US.IsBlock == false && US.Year == DTO.Year && US.Month == DTO.Month
                                               orderby US.AgreementSLNo ascending
                                               select new
                                               {
                                                   US.UScheduleSLNo,
                                                   US.AgreementSLNo,
                                                   PT.PremiseTypeSLNo,
                                               };
                        lstUtilitySchedule = queryPremiseType.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                        }).ToList();
                    }
                    else if (DTO.AgreementSLNoCheckList != null)
                    {
                        //==Update Utility Schedule table AgreementSLNo wise IsLog Log to Planned
                        //var UpdateUtilitySchedule = db.UtilitySchedules.Where(x => DTO.AgreementSLNoCheckList.Contains(x.AgreementSLNo) && x.IsLog == true && x.Year == DTO.Year && x.Month == DTO.Month).ToList();
                        //UpdateUtilitySchedule.ForEach(x => { x.IsLog = false; });
                        //db.SaveChanges();
                        //==Delete UtilityAPExecuteLog table AgreementSLNo wise Log records
                        var DeleteULog = db.UtilityAPExecuteLogs.Where(x => DTO.AgreementSLNoCheckList.Contains(x.AgreementSLNo) && x.LogStatus == "Created" && x.Year == DTO.Year && x.Month == DTO.Month && x.Status == dtoBasic.active).ToList();
                        db.UtilityAPExecuteLogs.RemoveRange(DeleteULog);
                        db.SaveChanges();
                        //Agreement Wise re-execute
                        var queryAgreement = from US in db.UtilitySchedules
                                             join AI in db.AgreementInfos on US.AgreementSLNo equals AI.AgreementSLNo
                                             join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                             where DTO.AgreementSLNoCheckList.Contains(US.AgreementSLNo) &&
                                                   AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                                   US.IsPosted == false && US.IsBlock == false && US.Year == DTO.Year && US.Month == DTO.Month
                                             orderby US.AgreementSLNo ascending
                                             select new
                                             {
                                                 US.UScheduleSLNo,
                                                 US.AgreementSLNo,
                                                 PT.PremiseTypeSLNo,
                                             };
                        lstUtilitySchedule = queryAgreement.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                        }).ToList();
                    }
                    else
                    {
                        //==All Records
                        //==Delete UtilityAPExecuteLog table all created records for the year & month
                        var DeleteULog = db.UtilityAPExecuteLogs.Where(x => x.LogStatus == "Created" && x.Year == DTO.Year && x.Month == DTO.Month && x.Status == dtoBasic.active).ToList();
                        db.UtilityAPExecuteLogs.RemoveRange(DeleteULog);
                        db.SaveChanges();
                        //==All Records
                        var queryAll = from US in db.UtilitySchedules
                                       join AI in db.AgreementInfos on US.AgreementSLNo equals AI.AgreementSLNo
                                       join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                       where AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                             US.IsPosted == false && US.IsBlock == false && US.Year == DTO.Year && US.Month == DTO.Month
                                       orderby US.AgreementSLNo ascending
                                       select new
                                       {
                                           US.UScheduleSLNo,
                                           US.AgreementSLNo,
                                           PT.PremiseTypeSLNo,
                                       };
                        lstUtilitySchedule = queryAll.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                        }).ToList();
                    }
                    if (lstUtilitySchedule.Count == 0)
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                    int Max = db.UtilityAPExecuteLogs.Max(x => (int?)x.LogID) ?? 0;
                    if (Max == 0)
                    {
                        Max = 40001;
                    }
                    else
                    {
                        Max = Max + 1;
                    }
                    var lst = lstUtilitySchedule.GroupBy(x => x.AgreementSLNo).Select(x => new { x.FirstOrDefault().UScheduleSLNo, x.FirstOrDefault().AgreementSLNo, x.FirstOrDefault().PremiseTypeSLNo }).ToList();
                    RMS.Models.UtilityAPExecuteLog ULog = new RMS.Models.UtilityAPExecuteLog();
                    foreach (var item in lst.OrderBy(x => x.AgreementSLNo))
                    {
                        //==UtilityAPExecuteLog - Re Log Register
                        ULog = new RMS.Models.UtilityAPExecuteLog();
                        ULog.LogID = Max;
                        ULog.LogName = DTO.LogName;
                        ULog.LogDate = System.DateTime.Now;
                        ULog.PremiseTypeSLNo = item.PremiseTypeSLNo;
                        ULog.AgreementSLNo = item.AgreementSLNo;
                        ULog.Year = DTO.Year;
                        ULog.Month = DTO.Month;
                        ULog.LogStatus = "Created";
                        ULog.Status = dtoBasic.active;
                        ULog.EntryBy = LoginUserID;
                        ULog.EntryDate = System.DateTime.Now;
                        ULog.ExecuteDate = null;
                        ULog.ExecuteBy = null;
                        db.UtilityAPExecuteLogs.Add(ULog);
                        db.SaveChanges();
                    }
                    return Json(new { CheckStatus = true, LogID = ULog.LogID }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectAgreementIndex(int ViewID)
        {
            TempData.Remove("ViewID");
            TempData.Add("ViewID", ViewID);
            return RedirectToAction("AgreementIndex");
        }

        [HttpGet]
        public ActionResult AgreementIndex()
        {
            HomePath HomePath = new HomePath();
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strViewID = TempData["ViewID"];
                    if (strViewID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int ViewID = Convert.ToInt32(strViewID);
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RedirectAgreementIndex?ViewID=" + ViewID;
                    //==Check for Permission
                    bool Check = false;
                    if (ViewID == 0)
                    {
                        Check = true;
                    }
                    else if (ViewID == 1)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 12 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 2)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 13 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 3)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 14 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 4)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 15 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    //else if (ViewID == 5)
                    //{
                    //    Check = db.UserPermissions.Where(x => x.ChildID == 15 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    //}
                    else if (ViewID == 10)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 19 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 11)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 20 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 12)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 21 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 13)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 22 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 24)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 23 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    ViewBag.AlertMsg = AlertMsg;
                    AlertMsg = null;
                    //==Draft Agreement Info
                    if (ViewID == 0)
                    {
                        //==Draft Agreement Info
                        List<RMS.Models.AgreementInfoDTO> lstDraft = new List<RMS.Models.AgreementInfoDTO>();
                        var queryDraft = from AI in db.DraftAgreementInfos
                                         join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                         join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                         join S in db.StatusInfos on AI.Status equals S.StatusValue
                                         where AI.UserSLNo == LoginUserSLNo && AI.IsDeleted == false
                                         orderby AI.AgreementSLNo descending
                                         select new
                                         {
                                             AI.AgreementSLNo,
                                             //==Basic Info
                                             AI.PremiseTypeSLNo,
                                             PT.PremiseType,
                                             AI.PremiseName,
                                             AI.PremiseAddress,
                                             AI.ConcernBranch,
                                             AI.InspectorName,
                                             AI.InspectorContactNo,
                                             AI.ClusterGroup,
                                             //==Agreement Info
                                             AI.AgreementCode,
                                             AI.AliasCode,
                                             AI.AgreementName,
                                             AI.AgreementStartDate,
                                             AI.AgreementEndDate,
                                             AI.AgreementPeriod,
                                             AI.RenewalFrequency,
                                             AI.RentDueDay,
                                             AI.UOM,
                                             AI.TotalArea,
                                             AI.CostPerUnit,
                                             AI.TotalRentAmount,
                                             AI.SecurityDepositAmount,
                                             AI.AdvanceAmount,
                                             AI.AdvanceAdjustmentPeriod,
                                             AI.AdvanceAdjustmentAmount,
                                             AI.TaxPercentage,
                                             AI.TaxAmount,
                                             AI.VATPercentage,
                                             AI.VATAmount,
                                             AI.ServiceCharge,
                                             AI.OnlineTower,
                                             AI.GeneratorSpace,
                                             AI.CarParking,
                                             AI.NetRentAmount,
                                             AI.AgreementStatus,
                                             AI.AgreementText,
                                             AI.Status,
                                             AI.UserSLNo,
                                             U.UserID,
                                             AI.EntryDate,
                                             AI.IsDeleted,
                                             S.StatusName,
                                             AI.ReviewFrequency,
                                             AI.ReviewPercentage,
                                             AI.TaxType,
                                             AI.VatType,
                                         };
                        lstDraft = queryDraft.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                        {
                            AgreementSLNo = x.AgreementSLNo,
                            //==Basic Info
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            PremiseAddress = x.PremiseAddress,
                            ConcernBranch = x.ConcernBranch,
                            InspectorName = x.InspectorName,
                            InspectorContactNo = x.InspectorContactNo,
                            ClusterGroup = x.ClusterGroup,
                            //==Agreement Info
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            TotalArea = x.TotalArea,
                            CostPerUnit = x.CostPerUnit,
                            RentAmount = x.TotalArea * x.CostPerUnit,
                            TotalRentAmount = x.TotalRentAmount,
                            SecurityDepositAmount = x.SecurityDepositAmount,
                            AdvanceAmount = x.AdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            TaxPercentage = x.TaxPercentage,
                            TaxAmount = x.TaxAmount,
                            VATPercentage = x.VATPercentage,
                            VATAmount = x.VATAmount,
                            ServiceCharge = x.ServiceCharge,
                            OnlineTower = x.OnlineTower,
                            GeneratorSpace = x.GeneratorSpace,
                            CarParking = x.CarParking,
                            NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                            AgreementStatus = x.AgreementStatus,
                            AgreementText = x.AgreementText,
                            Status = x.Status,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsDeleted = x.IsDeleted,
                            StatusName = x.StatusName,
                            ReviewFrequency = x.ReviewFrequency,
                            ReviewPercentage = x.ReviewPercentage,
                            TaxType = x.TaxType,
                            xTaxType = x.TaxType,
                            VatType = x.VatType,
                        }).ToList();
                        return View(AgreementInfoPath.DraftIndex, lstDraft);
                    }
                    //==Regular Agreement Info
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    AgreementUOM AgreementUOM = new AgreementUOM();
                    List<RMS.Models.AgreementInfoDTO> lst = new List<RMS.Models.AgreementInfoDTO>();
                    var query = from AI in db.AgreementInfos
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                where AI.AgreementType == AgreementType.Regular && AI.IsClosed == false && AI.IsDeleted == false
                                orderby AI.AgreementCode descending
                                select new
                                {
                                    AI.AgreementSLNo,

                                    AI.PremiseTypeSLNo,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.PremiseAddress,
                                    AI.ConcernBranch,
                                    AI.InspectorName,
                                    AI.InspectorContactNo,
                                    AI.ClusterGroup,

                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.AgreementStartDate,
                                    AI.AgreementEndDate,
                                    AI.AgreementPeriod,
                                    AI.RenewalFrequency,
                                    AI.RentDueDay,
                                    AI.UOM,
                                    AI.TotalArea,
                                    AI.CostPerUnit,
                                    AI.TotalRentAmount,
                                    AI.SecurityDepositAmount,
                                    AI.AdvanceAmount,
                                    AI.AdvanceAdjustmentPeriod,
                                    AI.AdvanceAdjustmentAmount,
                                    AI.ReviewFrequency,
                                    AI.ReviewPercentage,
                                    AI.CashGLCode,
                                    AI.BankGLCode,
                                    AI.AdvanceGLCode,
                                    AI.AdvanceAdjustmentGLCode,
                                    AI.RentGLCode,
                                    AI.ServiceChargeGLCode,
                                    AI.TaxGLCode,
                                    AI.VATGLCode,
                                    AI.ServiceCharge,
                                    AI.OnlineTower,
                                    AI.GeneratorSpace,
                                    AI.CarParking,
                                    AI.CarParkingNo,
                                    AI.TaxPercentage,
                                    AI.TaxAmount,
                                    AI.VATPercentage,
                                    AI.VATAmount,
                                    AI.NetRentAmount,
                                    AI.AgreementStatus,
                                    AI.AgreementText,
                                    AI.Status,
                                    AI.UserSLNo,
                                    U.UserID,
                                    AI.EntryDate,
                                    AI.EditBy,
                                    AI.EditDate,
                                    AI.ActivateBy,
                                    AI.ActivateDate,
                                    AI.IsDeleted,
                                    S.StatusName,
                                    AI.IsBlock,
                                    AI.BlockDate,
                                    AI.BlockUserSLNo,
                                    AI.TaxType,
                                    AI.VatType,
                                    AI.IsRenewal,
                                    AI.IsModified,
                                    AI.IsIFRSEnable,
                                    AI.IFRSEffectiveDate,
                                    AI.CalculationMethod,
                                };
                    lst = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        ConcernBranch = x.ConcernBranch,
                        InspectorName = x.InspectorName,
                        InspectorContactNo = x.InspectorContactNo,
                        ClusterGroup = x.ClusterGroup,
                        AgreementCode = x.AgreementCode,
                        AgreementName = x.AgreementName,
                        AliasCode = x.AliasCode,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        RenewalFrequency = x.RenewalFrequency,
                        RentDueDay = x.RentDueDay,
                        UOM = x.UOM,
                        TotalArea = x.TotalArea,
                        CostPerUnit = x.CostPerUnit,
                        RentAmount = x.TotalArea * x.CostPerUnit,
                        TotalRentAmount = x.TotalRentAmount,
                        SecurityDepositAmount = x.SecurityDepositAmount,
                        AdvanceAmount = x.AdvanceAmount,
                        AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                        AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        ReviewFrequency = x.ReviewFrequency,
                        ReviewPercentage = x.ReviewPercentage,
                        CashGLCode = x.CashGLCode,
                        BankGLCode = x.BankGLCode,
                        AdvanceGLCode = x.AdvanceGLCode,
                        AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                        RentGLCode = x.RentGLCode,
                        ServiceChargeGLCode = x.ServiceChargeGLCode,
                        TaxGLCode = x.TaxGLCode,
                        VATGLCode = x.VATGLCode,
                        ServiceCharge = x.ServiceCharge,
                        OnlineTower = x.OnlineTower,
                        GeneratorSpace = x.GeneratorSpace,
                        CarParking = x.CarParking,
                        CarParkingNo = x.CarParkingNo,
                        TaxPercentage = x.TaxPercentage,
                        TaxAmount = x.TaxAmount,
                        VATPercentage = x.VATPercentage,
                        VATAmount = x.VATAmount,
                        NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                        AgreementStatus = x.AgreementStatus,
                        AgreementText = x.AgreementText,
                        Status = x.Status,
                        UserSLNo = x.UserSLNo,
                        UserID = x.UserID,
                        EditBy = x.EditBy,
                        EditDate = x.EditDate,
                        ActivateBy = x.ActivateBy,
                        ActivateDate = x.ActivateDate,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        IsDeleted = x.IsDeleted,
                        StatusName = x.StatusName,
                        IsBlock = x.IsBlock,
                        BlockDate = x.BlockDate,
                        BlockUserSLNo = x.BlockUserSLNo,
                        TaxType = x.TaxType,
                        VatType = x.VatType,
                        IsRenewal = x.IsRenewal,
                        IsModified = x.IsModified,
                        IsIFRSEnable = x.IsIFRSEnable,
                        IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        CalculationMethod = x.CalculationMethod,
                    }).ToList();
                    lst.Where(x => x.IsBlock == false).ToList().ForEach(x => { x.BlockText = "Open"; });
                    lst.Where(x => x.IsBlock == true).ToList().ForEach(x => { x.BlockText = "Terminated"; });
                    if (ViewID == 1)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Created).ToList();
                        return View(AgreementInfoPath.CreateIndex, lst);
                    }
                    else if (ViewID == 2)
                    {
                        lst = lst.Where(x => x.IsRenewal == false && x.IsModified == false && x.IsBlock == false).ToList();
                        return View(AgreementInfoPath.EditIndex, lst);
                    }
                    else if (ViewID == 3)
                    {
                        lst = lst.Where(x => x.IsRenewal == false && x.IsModified == false && x.IsBlock == false).ToList();
                        return View(AgreementInfoPath.DeleteIndex, lst);
                    }
                    else if (ViewID == 4)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Created && x.Status == DTOBasic.active && x.IsRenewal == false && x.IsModified == false && x.IsBlock == false).ToList();
                        return View(AgreementInfoPath.ActivateIndex, lst);
                    }
                    else if (ViewID == 5)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate && x.Status == DTOBasic.active).ToList();
                        return View(AgreementInfoPath.BlockIndex, lst);
                    }
                    //else if (ViewID == 6)
                    //{
                    //    lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate && x.Status == DTOBasic.InActive).ToList();
                    //    return View(AgreementInfoPath.UnblockIndex, lst);
                    //}
                    else if (ViewID == 10)
                    {
                        return View(AgreementInfoPath.ListOfAgreements, lst);
                    }
                    else if (ViewID == 11)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate).ToList();
                        ViewBag.Caption = "Contract Schedule";
                        ViewBag.RentScheduleFor = "11";
                        return View(AgreementInfoPath.ListOfRentSchedule, lst);
                    }
                    else if (ViewID == 12)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate).ToList();
                        ViewBag.Caption = "Landlord Wise Contract Schedule";
                        ViewBag.RentScheduleFor = "12";
                        return View(AgreementInfoPath.ListOfRentSchedule, lst);
                    }
                    else if (ViewID == 13)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate).ToList();
                        ViewBag.Caption = "Cost Center Wise Contract Schedule";
                        ViewBag.RentScheduleFor = "13";
                        return View(AgreementInfoPath.ListOfRentSchedule, lst);
                    }
                    else if (ViewID == 24)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate).ToList();
                        ViewBag.Caption = "Utility Wise Contract Schedule";
                        ViewBag.RentScheduleFor = "24";
                        return View(AgreementInfoPath.ListOfRentSchedule, lst);
                    }
                    else
                    {
                        return RedirectToAction("Login", "Home");
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult AllAgreementDetails()
        {
            HomePath HomePath = new HomePath();
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/AllAgreementDetails";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 89 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    AgreementUOM AgreementUOM = new AgreementUOM();
                    //==All Landlord Information
                    List<RMS.Models.LandlordInfoDTO> lstLandlord = new List<RMS.Models.LandlordInfoDTO>();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    var queryLandlord = from LI in db.LandlordInfos
                                        join AI in db.AgreementInfos on LI.AgreementSLNo equals AI.AgreementSLNo
                                        join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                        where AI.AgreementStatus == AgreementStatus.Activate && LI.IsOld == false && AI.IsClosed == false
                                        orderby AI.AgreementType ascending, AI.AgreementCode ascending
                                        select new
                                        {
                                            AI.AgreementCode,
                                            AI.AliasCode,
                                            AI.AgreementName,
                                            AI.AgreementStartDate,
                                            AI.AgreementEndDate,
                                            AI.AgreementPeriod,
                                            AI.AgreementType,
                                            PT.PremiseType,
                                            AI.PremiseName,
                                            AI.PremiseAddress,
                                            //==Landlord Info
                                            LI.LandlordSLNo,
                                            LI.AgreementSLNo,
                                            LI.VendorCode,
                                            LI.LandlordName,
                                            LI.ModeOfPayment,
                                            LI.AdvancePC,
                                            LI.AdvanceAmount,
                                            LI.AdvanceAdjustmentPC,
                                            LI.AdvanceAdjustmentAmount,
                                            LI.TaxPC,
                                            LI.TaxAmount,
                                            LI.VATPC,
                                            LI.VATAmount,
                                            LI.RentPC,
                                            LI.RentAmount,
                                            LI.LLAddress,
                                            LI.LLContactNo,
                                            LI.LLEmail,
                                            LI.ACNo,
                                            LI.BankName,
                                            LI.BranchName,
                                            LI.RoutingNo,
                                        };
                    lstLandlord = queryLandlord.AsEnumerable().Select(x => new RMS.Models.LandlordInfoDTO
                    {
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        AgreementType = x.AgreementType,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        //==Landlord Info
                        LandlordSLNo = x.AgreementSLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        VendorCode = x.VendorCode,
                        LandlordName = x.LandlordName,
                        ModeOfPayment = x.ModeOfPayment,
                        VendorAdvancePC = x.AdvancePC,
                        VendorAdvanceAmount = x.AdvanceAmount,
                        VendorAdvanceAdjustmentPC = x.AdvanceAdjustmentPC,
                        VendorAdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        VendorTaxPC = x.TaxPC,
                        VendorTaxAmount = x.TaxAmount,
                        VendorVATPC = x.VATPC,
                        VendorVATAmount = x.VATAmount,
                        VendorRentPC = x.RentPC,
                        VendorRentAmount = x.RentAmount,
                        LLAddress = x.LLAddress,
                        LLContactNo = x.LLContactNo,
                        LLEmail = x.LLEmail,
                        ACNo = x.ACNo,
                        BankName = x.BankName,
                        BranchName = x.BranchName,
                        RoutingNo = x.RoutingNo,
                    }).ToList();
                    if (lstLandlord.Count > 0)
                    {
                        for (int i = 0; i < lstLandlord.Count; i++)
                        {
                            if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.RTGS) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.EFTN) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Cash) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Others) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstLandlord = lstLandlord;
                    //==All Cost Center Info
                    List<RMS.Models.CostCenterInfoDTO> lstCC = new List<RMS.Models.CostCenterInfoDTO>();
                    var queryCC = from CC in db.CostCenterInfos
                                  join AI in db.AgreementInfos on CC.AgreementSLNo equals AI.AgreementSLNo
                                  join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                  where AI.AgreementStatus == AgreementStatus.Activate && CC.IsOld == false && AI.IsClosed == false
                                  orderby AI.AgreementType ascending, AI.AgreementCode ascending
                                  select new
                                  {
                                      AI.AgreementCode,
                                      AI.AliasCode,
                                      AI.AgreementName,
                                      AI.AgreementStartDate,
                                      AI.AgreementEndDate,
                                      AI.AgreementPeriod,
                                      AI.AgreementType,
                                      PT.PremiseType,
                                      AI.PremiseName,
                                      AI.PremiseAddress,
                                      CC.CCCode,
                                      CC.CCName,
                                      CC.SOLCode,
                                      CC.SOLName,
                                      CC.CCShareAllotment,
                                  };
                    lstCC = queryCC.AsEnumerable().Select(x => new RMS.Models.CostCenterInfoDTO
                    {
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        AgreementType = x.AgreementType,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        CCCode = x.CCCode,
                        CCName = x.CCName,
                        SOLCode = x.SOLCode,
                        SOLName = x.SOLName,
                        CCShareAllotment = x.CCShareAllotment,
                    }).ToList();
                    ViewBag.lstCC = lstCC;
                    //==All Utility Information
                    List<RMS.Models.UtilityInfoDTO> lstUtility = new List<RMS.Models.UtilityInfoDTO>();
                    var queryUtility = from UI in db.UtilityInfos
                                       join AI in db.AgreementInfos on UI.AgreementSLNo equals AI.AgreementSLNo
                                       join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                       where AI.AgreementStatus == AgreementStatus.Activate && UI.IsOld == false && AI.IsClosed == false
                                       orderby AI.AgreementType ascending, AI.AgreementCode ascending
                                       select new
                                       {
                                           AI.AgreementCode,
                                           AI.AliasCode,
                                           AI.AgreementName,
                                           AI.AgreementStartDate,
                                           AI.AgreementEndDate,
                                           AI.AgreementPeriod,
                                           AI.AgreementType,
                                           PT.PremiseType,
                                           AI.PremiseName,
                                           AI.PremiseAddress,
                                           //==Landlord Info
                                           UI.UtilitySLNo,
                                           UI.AgreementSLNo,
                                           UI.UtilityVendorCode,
                                           UI.UtilityLandlordName,
                                           UI.UtilityModeOfPayment,
                                           UI.ServiceChargePC,
                                           UI.ServiceChargeAmount,
                                           UI.OnlineTowerPC,
                                           UI.OnlineTowerAmount,
                                           UI.GeneratorSpacePC,
                                           UI.GeneratorSpaceAmount,
                                           UI.CarParkingPC,
                                           UI.CarParkingAmount,
                                           UI.TaxPC,
                                           UI.TaxAmount,
                                           UI.VATPC,
                                           UI.VATAmount,
                                           UI.UtilityAddress,
                                           UI.UtilityContactNo,
                                           UI.UtilityEmail,
                                           UI.UtilityACNo,
                                           UI.UtilityBankName,
                                           UI.UtilityBranchName,
                                           UI.UtilityRoutingNo,
                                       };
                    lstUtility = queryUtility.AsEnumerable().Select(x => new RMS.Models.UtilityInfoDTO
                    {
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        AgreementType = x.AgreementType,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        UtilitySLNo = x.UtilitySLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        UtilityVendorCode = x.UtilityVendorCode,
                        UtilityLandlordName = x.UtilityLandlordName,
                        UtilityModeOfPayment = x.UtilityModeOfPayment,
                        ServiceChargePC = x.ServiceChargePC,
                        ServiceChargeAmount = x.ServiceChargeAmount,
                        OnlineTowerPC = x.OnlineTowerPC,
                        OnlineTowerAmount = x.OnlineTowerAmount,
                        GeneratorSpacePC = x.GeneratorSpacePC,
                        GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                        CarParkingPC = x.CarParkingPC,
                        CarParkingAmount = x.CarParkingAmount,
                        UtilityTaxPC = x.TaxPC,
                        UtilityTaxAmount = x.TaxAmount,
                        UtilityVATPC = x.VATPC,
                        UtilityVATAmount = x.VATAmount,
                        UtilityAddress = x.UtilityAddress,
                        UtilityContactNo = x.UtilityContactNo,
                        UtilityEmail = x.UtilityEmail,
                        UtilityACNo = x.UtilityACNo,
                        UtilityBankName = x.UtilityBankName,
                        UtilityBranchName = x.UtilityBranchName,
                        UtilityRoutingNo = x.UtilityRoutingNo,
                    }).ToList();
                    if (lstUtility.Count > 0)
                    {
                        for (int i = 0; i < lstUtility.Count; i++)
                        {
                            if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.RTGS) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.EFTN) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Cash) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Others) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstUtility = lstUtility;
                    //==All Agreement Info
                    List<RMS.Models.AgreementInfoDTO> lst = new List<RMS.Models.AgreementInfoDTO>();
                    var query = from AI in db.AgreementInfos
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                where AI.AgreementStatus == AgreementStatus.Activate && AI.IsClosed == false
                                orderby AI.AgreementType ascending, AI.AgreementCode ascending
                                select new
                                {
                                    AI.AgreementSLNo,
                                    AI.PremiseTypeSLNo,
                                    AI.AgreementType,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.PremiseAddress,
                                    AI.ConcernBranch,
                                    AI.InspectorName,
                                    AI.InspectorContactNo,
                                    AI.ClusterGroup,

                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.AgreementStartDate,
                                    AI.AgreementEndDate,
                                    AI.AgreementPeriod,
                                    AI.RenewalFrequency,
                                    AI.RentDueDay,
                                    AI.UOM,
                                    AI.TotalArea,
                                    AI.CostPerUnit,
                                    AI.TotalRentAmount,
                                    AI.SecurityDepositAmount,
                                    AI.AdvanceAmount,
                                    AI.AdditionalAdvanceAmount,
                                    AI.AdvanceAdjustmentPeriod,
                                    AI.AdvanceAdjustmentAmount,
                                    AI.ReviewFrequency,
                                    AI.ReviewPercentage,
                                    AI.CashGLCode,
                                    AI.BankGLCode,
                                    AI.AdvanceGLCode,
                                    AI.AdvanceAdjustmentGLCode,
                                    AI.RentGLCode,
                                    AI.ServiceChargeGLCode,
                                    AI.TaxGLCode,
                                    AI.VATGLCode,
                                    AI.ProvisionGLTax,
                                    AI.ProvisionGLAP,
                                    AI.RTGSGL,
                                    AI.EFTNGL,
                                    AI.PayOrderGL,
                                    AI.IBBPaymentGL,
                                    AI.CityBrokerageGL,
                                    AI.CityCapitalGL,
                                    AI.OthersGL,
                                    AI.ServiceCharge,
                                    AI.OnlineTower,
                                    AI.GeneratorSpace,
                                    AI.CarParking,
                                    AI.TaxPercentage,
                                    AI.TaxAmount,
                                    AI.VATPercentage,
                                    AI.VATAmount,
                                    AI.NetRentAmount,
                                    AI.AgreementStatus,
                                    AI.AgreementText,
                                    AI.Status,
                                    AI.IsDeleted,
                                    S.StatusName,
                                    AI.TaxType,
                                    AI.VatType,
                                    AI.Special,
                                    AI.CalculationMethod,
                                    AI.WaterBillType,
                                    AI.WaterBillAmount,
                                    AI.IsIFRSEnable,
                                    AI.IFRSEffectiveDate,
                                    AI.BorrowingRate,
                                    AI.CorporateTaxRate,
                                    AI.UserSLNo,
                                    U.UserID,
                                    AI.EntryDate,
                                    AI.EditBy,
                                    AI.EditDate,
                                    AI.ActivateBy,
                                    AI.ActivateDate,
                                    AI.IsBlock,
                                    AI.BlockDate,
                                    AI.BlockUserSLNo,
                                };
                    lst = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        AgreementType = x.AgreementType,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        ConcernBranch = x.ConcernBranch,
                        InspectorName = x.InspectorName,
                        InspectorContactNo = x.InspectorContactNo,
                        ClusterGroup = x.ClusterGroup,
                        AgreementCode = x.AgreementCode,
                        AgreementName = x.AgreementName,
                        AliasCode = x.AliasCode,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        RenewalFrequency = x.RenewalFrequency,
                        RentDueDay = x.RentDueDay,
                        UOM = x.UOM,
                        TotalArea = x.TotalArea,
                        CostPerUnit = x.CostPerUnit,
                        RentAmount = x.TotalArea * x.CostPerUnit,
                        TotalRentAmount = x.TotalRentAmount,
                        SecurityDepositAmount = x.SecurityDepositAmount,
                        AdvanceAmount = x.AdvanceAmount + x.AdditionalAdvanceAmount,
                        AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                        AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        ReviewFrequency = x.ReviewFrequency,
                        ReviewPercentage = x.ReviewPercentage,
                        CashGLCode = x.CashGLCode,
                        BankGLCode = x.BankGLCode,
                        AdvanceGLCode = x.AdvanceGLCode,
                        AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                        RentGLCode = x.RentGLCode,
                        ServiceChargeGLCode = x.ServiceChargeGLCode,
                        TaxGLCode = x.TaxGLCode,
                        VATGLCode = x.VATGLCode,
                        ProvisionGLTax = x.ProvisionGLTax,
                        ProvisionGLAP = x.ProvisionGLAP,
                        RTGSGL = x.RTGSGL,
                        EFTNGL = x.EFTNGL,
                        PayOrderGL = x.PayOrderGL,
                        IBBPaymentGL = x.IBBPaymentGL,
                        CityBrokerageGL = x.CityBrokerageGL,
                        CityCapitalGL = x.CityCapitalGL,
                        OthersGL = x.OthersGL,
                        ServiceCharge = x.ServiceCharge,
                        OnlineTower = x.OnlineTower,
                        GeneratorSpace = x.GeneratorSpace,
                        CarParking = x.CarParking,
                        TaxPercentage = x.TaxPercentage,
                        TaxAmount = x.TaxAmount,
                        VATPercentage = x.VATPercentage,
                        VATAmount = x.VATAmount,
                        NetRentAmount = x.NetRentAmount,
                        AgreementStatus = x.AgreementStatus,
                        AgreementText = x.AgreementText,
                        Status = x.Status,
                        IsDeleted = x.IsDeleted,
                        StatusName = x.StatusName,
                        TaxType = x.TaxType,
                        VatType = x.VatType,
                        Special = x.Special,
                        CalculationMethod = x.CalculationMethod,
                        WaterBillType = x.WaterBillType,
                        WaterBillAmount = x.WaterBillAmount,
                        IsIFRSEnable = x.IsIFRSEnable,
                        IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        BorrowingRate = x.BorrowingRate,
                        CorporateTaxRate = x.CorporateTaxRate,
                        UserSLNo = x.UserSLNo,
                        UserID = x.UserID,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        EditBy = x.EditBy,
                        strEditDate = x.EditDate?.ToString("dd/MM/yyyy"),
                        ActivateBy = x.ActivateBy,
                        strActivateDate = x.ActivateDate?.ToString("dd/MM/yyyy"),
                        IsBlock = x.IsBlock,
                        BlockDate = x.BlockDate,
                        BlockUserSLNo = x.BlockUserSLNo,

                    }).ToList();
                    lst.Where(x => x.BlockUserSLNo != null).ToList().ForEach(x =>
                    {
                        x.TerminatedBy = db.UserInfos.Where(y => y.UserSLNo == x.UserSLNo).Select(z => z.UserID).FirstOrDefault();
                    });
                    //==Space Allocations
                    List<RMS.Models.SpaceInfoDTO> lstSpace = new List<RMS.Models.SpaceInfoDTO>();
                    var querySP = from SP in db.SpaceInfos
                                  join AI in db.AgreementInfos on SP.AgreementSLNo equals AI.AgreementSLNo
                                  join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                  where AI.AgreementStatus == AgreementStatus.Activate && AI.IsClosed == false
                                  orderby AI.AgreementType ascending, AI.AgreementCode ascending
                                  select new
                                  {
                                      AI.AgreementCode,
                                      AI.AliasCode,
                                      AI.AgreementName,
                                      AI.AgreementStartDate,
                                      AI.AgreementEndDate,
                                      AI.AgreementPeriod,
                                      AI.AgreementType,
                                      PT.PremiseType,
                                      AI.PremiseName,
                                      AI.PremiseAddress,
                                      SP.SpaceType,
                                      SP.SpaceArea,
                                      SP.SpaceRate,
                                      SP.SpaceRent,
                                      SP.SpaceTotalAdvance,
                                      SP.SpaceTotalAdjustment,
                                      SP.SpaceRemarks,
                                  };
                    lstSpace = querySP.AsEnumerable().Select(x => new RMS.Models.SpaceInfoDTO
                    {
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        AgreementType = x.AgreementType,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        SpaceType = x.SpaceType,
                        SpaceArea = x.SpaceArea,
                        SpaceRate = x.SpaceRate,
                        SpaceRent = x.SpaceRent,
                        SpaceTotalAdvance = x.SpaceTotalAdvance,
                        SpaceTotalAdjustment = x.SpaceTotalAdjustment,
                        SpaceRemarks = x.SpaceRemarks,
                    }).ToList();
                    ViewBag.lstSpace = lstSpace;
                    //==Advance Info
                    List<RMS.Models.AdvanceInfoDTO> lstAdvance = new List<RMS.Models.AdvanceInfoDTO>();
                    var queryAD = from Adv in db.AdvanceInfos
                                  join AI in db.AgreementInfos on Adv.AgreementSLNo equals AI.AgreementSLNo
                                  join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                  where AI.AgreementStatus == AgreementStatus.Activate && AI.IsClosed == false
                                  orderby AI.AgreementType ascending, AI.AgreementCode ascending
                                  select new
                                  {
                                      AI.AgreementCode,
                                      AI.AliasCode,
                                      AI.AgreementName,
                                      AI.AgreementStartDate,
                                      AI.AgreementEndDate,
                                      AI.AgreementPeriod,
                                      AI.AgreementType,
                                      PT.PremiseType,
                                      AI.PremiseName,
                                      AI.PremiseAddress,
                                      AI.AdvanceAmount,
                                      AI.AdditionalAdvanceAmount,
                                      Adv.AdvanceNo,
                                      Adv.AdvanceSlotPeriod,
                                      Adv.StartDate,
                                      Adv.EndDate,
                                      Adv.AdvanceNote,
                                      Adv.AdvanceSlotAmount,
                                  };
                    lstAdvance = queryAD.AsEnumerable().Select(x => new RMS.Models.AdvanceInfoDTO
                    {
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        AgreementType = x.AgreementType,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        AdvanceAmount = x.AdvanceAmount + x.AdditionalAdvanceAmount,
                        AdvanceNo = x.AdvanceNo,
                        AdvanceSlotPeriod = x.AdvanceSlotPeriod,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        AdvanceNote = x.AdvanceNote,
                        AdvanceSlotAmount = x.AdvanceSlotAmount,
                    }).ToList();
                    ViewBag.lstAdvance = lstAdvance;
                    //==Review Info
                    List<RMS.Models.ReviewInfoDTO> lstReview = new List<RMS.Models.ReviewInfoDTO>();
                    var queryRI = from RI in db.ReviewInfos
                                  join AI in db.AgreementInfos on RI.AgreementSLNo equals AI.AgreementSLNo
                                  join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                  where AI.AgreementStatus == AgreementStatus.Activate && AI.IsClosed == false
                                  orderby AI.AgreementType ascending, AI.AgreementCode ascending
                                  select new
                                  {
                                      AI.AgreementCode,
                                      AI.AliasCode,
                                      AI.AgreementName,
                                      AI.AgreementStartDate,
                                      AI.AgreementEndDate,
                                      AI.AgreementPeriod,
                                      AI.AgreementType,
                                      PT.PremiseType,
                                      AI.PremiseName,
                                      AI.PremiseAddress,
                                      AI.AdvanceAmount,
                                      AI.AdditionalAdvanceAmount,
                                      RI.ReviewNo,
                                      RI.StartDate,
                                      RI.EndDate,
                                      RI.Period,
                                      RI.IncreaseAmount,
                                      RI.IncreasePercentage,
                                      RI.ReviewNote,
                                  };
                    lstReview = queryRI.AsEnumerable().Select(x => new RMS.Models.ReviewInfoDTO
                    {
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        AgreementType = x.AgreementType,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        ReviewNo = x.ReviewNo,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        Period = x.Period,
                        IncreaseAmount = x.IncreaseAmount,
                        IncreasePercentage = x.IncreasePercentage,
                        ReviewNote = x.ReviewNote,
                    }).ToList();
                    ViewBag.lstReview = lstReview;
                    //==
                    lst.Where(x => x.IsBlock == false).ToList().ForEach(x => { x.BlockText = "Open"; });
                    lst.Where(x => x.IsBlock == true).ToList().ForEach(x => { x.BlockText = "Terminated"; });
                    ViewBag.AlertMsg = AlertMsg;
                    AlertMsg = null;
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate).ToList();
                    ViewBag.Caption = "All Agreement Details";
                    ViewBag.RentScheduleFor = "11";
                    return View(AgreementInfoPath.AllAgreementDetails, lst);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult BlockedAgreementReport()
        {
            HomePath HomePath = new HomePath();
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/BlockedAgreementReport";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 66 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    List<RMS.Models.AgreementInfoDTO> lst = new List<RMS.Models.AgreementInfoDTO>();
                    var query = from AI in db.AgreementInfos
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                where AI.IsHoldBlockPayment == true
                                orderby AI.AgreementCode descending
                                select new
                                {
                                    AI.AgreementSLNo,

                                    AI.PremiseTypeSLNo,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.PremiseAddress,
                                    AI.ConcernBranch,
                                    AI.InspectorName,
                                    AI.InspectorContactNo,
                                    AI.ClusterGroup,

                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.AgreementStartDate,
                                    AI.AgreementEndDate,
                                    AI.AgreementPeriod,
                                    AI.IsHoldBlockPayment,
                                };
                    lst = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        ConcernBranch = x.ConcernBranch,
                        InspectorName = x.InspectorName,
                        InspectorContactNo = x.InspectorContactNo,
                        ClusterGroup = x.ClusterGroup,
                        AgreementCode = x.AgreementCode,
                        AgreementName = x.AgreementName,
                        AliasCode = x.AliasCode,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        IsHoldBlockPayment = x.IsHoldBlockPayment,
                    }).ToList();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.BlockedAgreementReport, lst);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        public ActionResult BlockedVendorReport()
        {
            HomePath HomePath = new HomePath();
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/BlockedVendorReport";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 67 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==Landlord Info
                    List<RMS.Models.AgreementInfoDTO> lstLandlords = new List<RMS.Models.AgreementInfoDTO>();
                    var queryLandlord = from LI in db.LandlordInfos
                                        join AI in db.AgreementInfos on LI.AgreementSLNo equals AI.AgreementSLNo
                                        join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                        join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                        where LI.IsHoldBlockPayment == true && LI.IsOld == false
                                        orderby AI.AgreementCode ascending
                                        select new
                                        {
                                            AI.AgreementSLNo,
                                            AI.PremiseTypeSLNo,
                                            PT.PremiseType,
                                            AI.PremiseName,
                                            AI.PremiseAddress,
                                            AI.AgreementCode,
                                            AI.AliasCode,
                                            AI.AgreementName,
                                            LI.VendorCode,
                                            LI.LandlordName,
                                            AI.IsHoldBlockPayment,
                                        };
                    lstLandlords = queryLandlord.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        AgreementCode = x.AgreementCode,
                        AgreementName = x.AgreementName,
                        AliasCode = x.AliasCode,
                        VendorCode = x.VendorCode,
                        LandlordName = x.LandlordName,
                        IsHoldBlockPayment = x.IsHoldBlockPayment,
                        LandlordUtility = "Landlord",
                    }).ToList();
                    //==Utility Info
                    List<RMS.Models.AgreementInfoDTO> lstUtility = new List<RMS.Models.AgreementInfoDTO>();
                    var queryUtility = from UI in db.UtilityInfos
                                       join AI in db.AgreementInfos on UI.AgreementSLNo equals AI.AgreementSLNo
                                       join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                       join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                       where UI.IsHoldBlockPayment == true && UI.IsOld == false
                                       //orderby AI.AgreementCode ascending
                                       select new
                                       {
                                           UI.AgreementSLNo,
                                           AI.PremiseTypeSLNo,
                                           PT.PremiseType,
                                           AI.PremiseName,
                                           AI.PremiseAddress,
                                           AI.AgreementCode,
                                           AI.AliasCode,
                                           AI.AgreementName,
                                           UI.UtilityVendorCode,
                                           UI.UtilityLandlordName,
                                           UI.IsHoldBlockPayment,
                                       };
                    lstUtility = queryUtility.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        AgreementCode = x.AgreementCode,
                        AgreementName = x.AgreementName,
                        AliasCode = x.AliasCode,
                        VendorCode = x.UtilityVendorCode,
                        LandlordName = x.UtilityLandlordName,
                        IsHoldBlockPayment = x.IsHoldBlockPayment,
                        LandlordUtility = "Utility",
                    }).ToList();
                    //foreach (RMS.Models.AgreementInfoDTO item in lstUtility)
                    //{
                    //    var AgrInfo = db.AgreementInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo).Select(x => new { x.PremiseTypeSLNo, x.AgreementCode, x.AgreementName, x.AliasCode, x.PremiseName, x.PremiseAddress }).SingleOrDefault();
                    //    item.AgreementCode = AgrInfo.AgreementCode;
                    //    item.AgreementName = AgrInfo.AgreementName;
                    //    item.AliasCode = AgrInfo.AliasCode;
                    //    item.PremiseName = AgrInfo.PremiseName;
                    //    item.PremiseAddress = AgrInfo.PremiseAddress;
                    //    var PremiseInfo = db.PremiseTypeInfos.Where(x => x.PremiseTypeSLNo == AgrInfo.PremiseTypeSLNo).Select(x => new { x.PremiseType}).SingleOrDefault();
                    //    item.PremiseType = PremiseInfo.PremiseType;
                    //}
                    //lstUtility.OrderBy(x => x.AgreementCode);
                    lstLandlords.AddRange(lstUtility);
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.BlockedVendorReport, lstLandlords);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectPVLeaseList(int ViewID)
        {
            TempData.Remove("ViewID");
            TempData.Add("ViewID", ViewID);
            return RedirectToAction("PVLeaseList");
        }

        [HttpGet]
        public ActionResult PVLeaseList()
        {
            HomePath HomePath = new HomePath();
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strViewID = TempData["ViewID"];
                    if (strViewID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int ViewID = Convert.ToInt32(strViewID);
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RedirectPVLeaseList?ViewID=" + ViewID;
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 83 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    List<RMS.Models.AgreementInfoDTO> lst = new List<RMS.Models.AgreementInfoDTO>();
                    var query = from AI in db.AgreementInfos
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                where AI.AgreementStatus == AgreementStatus.Activate && AI.IsRenewal == false && AI.IsModified == false &&
                                      AI.IsClosed == false && AI.IsDeleted == false && AI.IsIFRSEnable == true
                                orderby AI.AgreementCode descending
                                select new
                                {
                                    AI.AgreementSLNo,

                                    AI.PremiseTypeSLNo,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.PremiseAddress,
                                    AI.ConcernBranch,
                                    AI.InspectorName,
                                    AI.InspectorContactNo,
                                    AI.ClusterGroup,
                                    AI.AgreementType,
                                    AI.AliasCode,
                                    AI.AgreementCode,
                                    AI.AgreementVersion,
                                    AI.AgreementName,
                                    AI.AgreementStartDate,
                                    AI.AgreementEndDate,
                                    AI.AgreementPeriod,
                                    AI.RenewalFrequency,
                                    AI.RentDueDay,
                                    AI.UOM,
                                    AI.TotalArea,
                                    AI.CostPerUnit,
                                    AI.TotalRentAmount,
                                    AI.SecurityDepositAmount,
                                    AI.AdvanceAmount,
                                    AI.AdditionalAdvanceAmount,
                                    AI.AdvanceAdjustmentPeriod,
                                    AI.AdvanceAdjustmentAmount,
                                    AI.ReviewFrequency,
                                    AI.ReviewPercentage,
                                    AI.CashGLCode,
                                    AI.BankGLCode,
                                    AI.AdvanceGLCode,
                                    AI.AdvanceAdjustmentGLCode,
                                    AI.RentGLCode,
                                    AI.ServiceChargeGLCode,
                                    AI.TaxGLCode,
                                    AI.VATGLCode,
                                    AI.ServiceCharge,
                                    AI.OnlineTower,
                                    AI.GeneratorSpace,
                                    AI.CarParking,
                                    AI.CarParkingNo,
                                    AI.TaxPercentage,
                                    AI.TaxAmount,
                                    AI.VATPercentage,
                                    AI.VATAmount,
                                    AI.NetRentAmount,
                                    AI.AgreementStatus,
                                    AI.AgreementText,
                                    AI.Status,
                                    AI.UserSLNo,
                                    U.UserID,
                                    AI.EntryDate,
                                    AI.EditBy,
                                    AI.EditDate,
                                    AI.ActivateBy,
                                    AI.ActivateDate,
                                    AI.IsDeleted,
                                    S.StatusName,
                                    AI.IsBlock,
                                    AI.BlockDate,
                                    AI.BlockUserSLNo,
                                    AI.TaxType,
                                    AI.VatType,
                                    AI.IsRenewal,
                                    AI.IsModified,
                                    AI.IsIFRSEnable,
                                    AI.IFRSEffectiveDate,
                                    AI.CalculationMethod,
                                };
                    lst = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        ConcernBranch = x.ConcernBranch,
                        InspectorName = x.InspectorName,
                        InspectorContactNo = x.InspectorContactNo,
                        ClusterGroup = x.ClusterGroup,
                        AgreementType = x.AgreementType,
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementVersion = x.AgreementVersion,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        RenewalFrequency = x.RenewalFrequency,
                        RentDueDay = x.RentDueDay,
                        UOM = x.UOM,
                        TotalArea = x.TotalArea,
                        CostPerUnit = x.CostPerUnit,
                        RentAmount = x.TotalArea * x.CostPerUnit,
                        TotalRentAmount = x.TotalRentAmount,
                        SecurityDepositAmount = x.SecurityDepositAmount,
                        AdvanceAmount = x.AdvanceAmount + x.AdditionalAdvanceAmount,
                        AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                        AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        ReviewFrequency = x.ReviewFrequency,
                        ReviewPercentage = x.ReviewPercentage,
                        CashGLCode = x.CashGLCode,
                        BankGLCode = x.BankGLCode,
                        AdvanceGLCode = x.AdvanceGLCode,
                        AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                        RentGLCode = x.RentGLCode,
                        ServiceChargeGLCode = x.ServiceChargeGLCode,
                        TaxGLCode = x.TaxGLCode,
                        VATGLCode = x.VATGLCode,
                        ServiceCharge = x.ServiceCharge,
                        OnlineTower = x.OnlineTower,
                        GeneratorSpace = x.GeneratorSpace,
                        CarParking = x.CarParking,
                        CarParkingNo = x.CarParkingNo,
                        TaxPercentage = x.TaxPercentage,
                        TaxAmount = x.TaxAmount,
                        VATPercentage = x.VATPercentage,
                        VATAmount = x.VATAmount,
                        NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                        AgreementStatus = x.AgreementStatus,
                        AgreementText = x.AgreementText,
                        Status = x.Status,
                        UserSLNo = x.UserSLNo,
                        UserID = x.UserID,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        EditBy = x.EditBy,
                        EditDate = x.EditDate,
                        ActivateBy = x.ActivateBy,
                        ActivateDate = x.ActivateDate,
                        IsDeleted = x.IsDeleted,
                        StatusName = x.StatusName,
                        IsBlock = x.IsBlock,
                        BlockDate = x.BlockDate,
                        BlockUserSLNo = x.BlockUserSLNo,
                        TaxType = x.TaxType,
                        VatType = x.VatType,
                        IsRenewal = x.IsRenewal,
                        IsModified = x.IsModified,
                        IsIFRSEnable = x.IsIFRSEnable,
                        IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        CalculationMethod = x.CalculationMethod,
                    }).ToList();
                    lst.Where(x => x.IsBlock == false).ToList().ForEach(x => { x.BlockText = "Open"; });
                    lst.Where(x => x.IsBlock == true).ToList().ForEach(x => { x.BlockText = "Terminated"; });
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    ViewBag.Caption = "IFRS 16 - Lease & ROU Schedule";
                    ViewBag.RentScheduleFor = "14";
                    return View(AgreementInfoPath.PVLeaseList, lst);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectReAgreementIndex(int ViewID)
        {
            TempData.Remove("ViewID");
            TempData.Add("ViewID", ViewID);
            return RedirectToAction("ReAgreementIndex");
        }


        [HttpGet]
        public ActionResult ReAgreementIndex()
        {
            HomePath HomePath = new HomePath();
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strViewID = TempData["ViewID"];
                    if (strViewID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int ViewID = Convert.ToInt32(strViewID);
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RedirectReAgreementIndex?ViewID=" + ViewID;
                    //==Check for Permission
                    bool Check = false;
                    if (ViewID == 1)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 25 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 2)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 26 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 3)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 27 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 4)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 28 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 5)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 95 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                        //Check = true;
                    }
                    else if (ViewID == 10)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 32 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 11)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 33 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 12)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 34 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 13)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 35 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 24)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 36 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==
                    DateTime ExpiredDate = DateTime.Now.AddDays(15);
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    AgreementUOM AgreementUOM = new AgreementUOM();
                    List<RMS.Models.AgreementInfoDTO> lst = new List<RMS.Models.AgreementInfoDTO>();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    if (ViewID == 1)
                    {
                        var query = from AI in db.AgreementInfos
                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    join S in db.StatusInfos on AI.Status equals S.StatusValue
                                    join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                    where (AI.AgreementStatus == AgreementStatus.Activate && AI.Special == false && AI.AgreementEndDate < ExpiredDate && AI.IsBlock == false && AI.IsRenewal == false && AI.IsModified == false && AI.IsClosed == false && AI.IsDeleted == false)
                                    || (AI.AgreementStatus == AgreementStatus.Activate && AI.Special == true && AI.IsBlock == false && AI.IsRenewal == false && AI.IsModified == false && AI.IsClosed == false && AI.IsDeleted == false)
                                    orderby AI.AgreementCode descending
                                    select new
                                    {
                                        AI.AgreementSLNo,

                                        AI.PremiseTypeSLNo,
                                        PT.PremiseType,
                                        AI.PremiseName,
                                        AI.PremiseAddress,
                                        AI.ConcernBranch,
                                        AI.InspectorName,
                                        AI.InspectorContactNo,
                                        AI.ClusterGroup,

                                        AI.AgreementType,
                                        AI.AliasCode,
                                        AI.AgreementCode,
                                        AI.AgreementVersion,
                                        AI.AgreementName,
                                        AI.AgreementStartDate,
                                        AI.AgreementEndDate,
                                        AI.AgreementPeriod,
                                        AI.RenewalFrequency,
                                        AI.RentDueDay,
                                        AI.UOM,
                                        AI.TotalArea,
                                        AI.CostPerUnit,
                                        AI.TotalRentAmount,
                                        AI.SecurityDepositAmount,
                                        AI.AdvanceAmount,
                                        AI.AdvanceAdjustmentPeriod,
                                        AI.AdvanceAdjustmentAmount,
                                        AI.TaxPercentage,
                                        AI.TaxAmount,
                                        AI.VATPercentage,
                                        AI.VATAmount,
                                        AI.NetRentAmount,
                                        AI.AgreementStatus,
                                        AI.AgreementText,
                                        AI.Status,
                                        AI.UserSLNo,
                                        U.UserID,
                                        AI.EntryDate,
                                        AI.EditBy,
                                        AI.EditDate,
                                        AI.ActivateBy,
                                        AI.ActivateDate,
                                        AI.IsDeleted,
                                        S.StatusName,
                                        AI.IsBlock,
                                        AI.BlockDate,
                                        AI.BlockUserSLNo,
                                        AI.TaxType,
                                        AI.VatType,
                                        AI.IsRenewal,
                                        AI.IsModified,
                                        AI.Special,
                                        AI.IsIFRSEnable,
                                        AI.IFRSEffectiveDate,
                                        AI.CalculationMethod,
                                    };
                        lst = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                        {
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            PremiseAddress = x.PremiseAddress,
                            ConcernBranch = x.ConcernBranch,
                            InspectorName = x.InspectorName,
                            InspectorContactNo = x.InspectorContactNo,
                            ClusterGroup = x.ClusterGroup,
                            AgreementType = x.AgreementType,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementVersion = x.AgreementVersion,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            TotalArea = x.TotalArea,
                            CostPerUnit = x.CostPerUnit,
                            RentAmount = x.TotalArea * x.CostPerUnit,
                            TotalRentAmount = x.TotalRentAmount,
                            SecurityDepositAmount = x.SecurityDepositAmount,
                            AdvanceAmount = x.AdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            TaxPercentage = x.TaxPercentage,
                            TaxAmount = x.TaxAmount,
                            VATPercentage = x.VATPercentage,
                            VATAmount = x.VATAmount,
                            NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                            AgreementStatus = x.AgreementStatus,
                            AgreementText = x.AgreementText,
                            Status = x.Status,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            EditBy = x.EditBy,
                            EditDate = x.EditDate,
                            ActivateBy = x.ActivateBy,
                            ActivateDate = x.ActivateDate,
                            IsDeleted = x.IsDeleted,
                            StatusName = x.StatusName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            IsRenewal = x.IsRenewal,
                            IsModified = x.IsModified,
                            Special = x.Special,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                            CalculationMethod = x.CalculationMethod,
                        }).ToList();
                        ViewBag.AlertMsg = AlertMsg;
                        AlertMsg = null;
                        return View(AgreementInfoPath.ReCreateIndex, lst);
                    }
                    else if (ViewID == 5)
                    {
                        var query = from AI in db.AgreementInfos
                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    join S in db.StatusInfos on AI.Status equals S.StatusValue
                                    join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                    where AI.AgreementStatus == AgreementStatus.Activate && AI.IsClosed == false && AI.IsDeleted == false &&
                                          AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false
                                    orderby AI.AgreementType ascending, AI.AgreementCode ascending
                                    select new
                                    {
                                        AI.AgreementSLNo,

                                        AI.PremiseTypeSLNo,
                                        PT.PremiseType,
                                        AI.PremiseName,
                                        AI.PremiseAddress,
                                        AI.ConcernBranch,
                                        AI.InspectorName,
                                        AI.InspectorContactNo,
                                        AI.ClusterGroup,

                                        AI.AgreementType,
                                        AI.AliasCode,
                                        AI.AgreementCode,
                                        AI.AgreementVersion,
                                        AI.AgreementName,
                                        AI.AgreementStartDate,
                                        AI.AgreementEndDate,
                                        AI.AgreementPeriod,
                                        AI.RenewalFrequency,
                                        AI.RentDueDay,
                                        AI.UOM,
                                        AI.TotalArea,
                                        AI.CostPerUnit,
                                        AI.TotalRentAmount,
                                        AI.SecurityDepositAmount,
                                        AI.AdvanceAmount,
                                        AI.AdditionalAdvanceAmount,
                                        AI.AdvanceAdjustmentPeriod,
                                        AI.AdvanceAdjustmentAmount,
                                        AI.ReviewFrequency,
                                        AI.ReviewPercentage,
                                        AI.CashGLCode,
                                        AI.BankGLCode,
                                        AI.AdvanceGLCode,
                                        AI.AdvanceAdjustmentGLCode,
                                        AI.RentGLCode,
                                        AI.ServiceChargeGLCode,
                                        AI.TaxGLCode,
                                        AI.VATGLCode,
                                        AI.ServiceCharge,
                                        AI.OnlineTower,
                                        AI.GeneratorSpace,
                                        AI.CarParking,
                                        AI.CarParkingNo,
                                        AI.TaxPercentage,
                                        AI.TaxAmount,
                                        AI.VATPercentage,
                                        AI.VATAmount,
                                        AI.NetRentAmount,
                                        AI.AgreementStatus,
                                        AI.AgreementText,
                                        AI.Status,
                                        AI.UserSLNo,
                                        U.UserID,
                                        AI.EntryDate,
                                        AI.EditBy,
                                        AI.EditDate,
                                        AI.ActivateBy,
                                        AI.ActivateDate,
                                        AI.IsDeleted,
                                        S.StatusName,
                                        AI.IsBlock,
                                        AI.BlockDate,
                                        AI.BlockUserSLNo,
                                        AI.TaxType,
                                        AI.VatType,
                                        AI.IsRenewal,
                                        AI.IsModified,
                                        AI.IsIFRSEnable,
                                        AI.IFRSEffectiveDate,
                                        AI.Special,
                                        AI.CalculationMethod,
                                    };
                        lst = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                        {
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            PremiseAddress = x.PremiseAddress,
                            ConcernBranch = x.ConcernBranch,
                            InspectorName = x.InspectorName,
                            InspectorContactNo = x.InspectorContactNo,
                            ClusterGroup = x.ClusterGroup,
                            AgreementType = x.AgreementType,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementVersion = x.AgreementVersion,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            TotalArea = x.TotalArea,
                            CostPerUnit = x.CostPerUnit,
                            RentAmount = x.TotalArea * x.CostPerUnit,
                            TotalRentAmount = x.TotalRentAmount,
                            SecurityDepositAmount = x.SecurityDepositAmount,
                            AdvanceAmount = x.AdvanceAmount + x.AdditionalAdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            ReviewFrequency = x.ReviewFrequency,
                            ReviewPercentage = x.ReviewPercentage,
                            CashGLCode = x.CashGLCode,
                            BankGLCode = x.BankGLCode,
                            AdvanceGLCode = x.AdvanceGLCode,
                            AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                            RentGLCode = x.RentGLCode,
                            ServiceChargeGLCode = x.ServiceChargeGLCode,
                            TaxGLCode = x.TaxGLCode,
                            VATGLCode = x.VATGLCode,
                            ServiceCharge = x.ServiceCharge,
                            OnlineTower = x.OnlineTower,
                            GeneratorSpace = x.GeneratorSpace,
                            CarParking = x.CarParking,
                            CarParkingNo = x.CarParkingNo,
                            TaxPercentage = x.TaxPercentage,
                            TaxAmount = x.TaxAmount,
                            VATPercentage = x.VATPercentage,
                            VATAmount = x.VATAmount,
                            NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                            AgreementStatus = x.AgreementStatus,
                            AgreementText = x.AgreementText,
                            Status = x.Status,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            EditBy = x.EditBy,
                            EditDate = x.EditDate,
                            ActivateBy = x.ActivateBy,
                            ActivateDate = x.ActivateDate,
                            IsDeleted = x.IsDeleted,
                            StatusName = x.StatusName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            IsRenewal = x.IsRenewal,
                            IsModified = x.IsModified,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                            Special = x.Special,
                            CalculationMethod = x.CalculationMethod,
                        }).ToList();
                        lst.Where(x => x.IsBlock == false).ToList().ForEach(x => { x.BlockText = "Open"; });
                        lst.Where(x => x.IsBlock == true).ToList().ForEach(x => { x.BlockText = "Terminated"; });
                    }
                    else
                    {
                        var query = from AI in db.AgreementInfos
                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    join S in db.StatusInfos on AI.Status equals S.StatusValue
                                    join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                    where AI.AgreementType == AgreementType.Renewal && AI.IsClosed == false && AI.IsDeleted == false
                                    orderby AI.AgreementCode descending
                                    select new
                                    {
                                        AI.AgreementSLNo,

                                        AI.PremiseTypeSLNo,
                                        PT.PremiseType,
                                        AI.PremiseName,
                                        AI.PremiseAddress,
                                        AI.ConcernBranch,
                                        AI.InspectorName,
                                        AI.InspectorContactNo,
                                        AI.ClusterGroup,

                                        AI.AgreementType,
                                        AI.AliasCode,
                                        AI.AgreementCode,
                                        AI.AgreementVersion,
                                        AI.AgreementName,
                                        AI.AgreementStartDate,
                                        AI.AgreementEndDate,
                                        AI.AgreementPeriod,
                                        AI.RenewalFrequency,
                                        AI.RentDueDay,
                                        AI.UOM,
                                        AI.TotalArea,
                                        AI.CostPerUnit,
                                        AI.TotalRentAmount,
                                        AI.SecurityDepositAmount,
                                        AI.AdvanceAmount,
                                        AI.AdvanceAdjustmentPeriod,
                                        AI.AdvanceAdjustmentAmount,
                                        AI.ReviewFrequency,
                                        AI.ReviewPercentage,
                                        AI.CashGLCode,
                                        AI.BankGLCode,
                                        AI.AdvanceGLCode,
                                        AI.AdvanceAdjustmentGLCode,
                                        AI.RentGLCode,
                                        AI.ServiceChargeGLCode,
                                        AI.TaxGLCode,
                                        AI.VATGLCode,
                                        AI.ServiceCharge,
                                        AI.OnlineTower,
                                        AI.GeneratorSpace,
                                        AI.CarParking,
                                        AI.CarParkingNo,
                                        AI.TaxPercentage,
                                        AI.TaxAmount,
                                        AI.VATPercentage,
                                        AI.VATAmount,
                                        AI.NetRentAmount,
                                        AI.AgreementStatus,
                                        AI.AgreementText,
                                        AI.Status,
                                        AI.UserSLNo,
                                        U.UserID,
                                        AI.EntryDate,
                                        AI.EditBy,
                                        AI.EditDate,
                                        AI.ActivateBy,
                                        AI.ActivateDate,
                                        AI.IsDeleted,
                                        S.StatusName,
                                        AI.IsBlock,
                                        AI.BlockDate,
                                        AI.BlockUserSLNo,
                                        AI.TaxType,
                                        AI.VatType,
                                        AI.IsRenewal,
                                        AI.IsModified,
                                        AI.IsIFRSEnable,
                                        AI.IFRSEffectiveDate,
                                        AI.Special,
                                        AI.CalculationMethod,
                                    };
                        lst = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                        {
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            PremiseAddress = x.PremiseAddress,
                            ConcernBranch = x.ConcernBranch,
                            InspectorName = x.InspectorName,
                            InspectorContactNo = x.InspectorContactNo,
                            ClusterGroup = x.ClusterGroup,
                            AgreementType = x.AgreementType,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementVersion = x.AgreementVersion,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            TotalArea = x.TotalArea,
                            CostPerUnit = x.CostPerUnit,
                            RentAmount = x.TotalArea * x.CostPerUnit,
                            TotalRentAmount = x.TotalRentAmount,
                            SecurityDepositAmount = x.SecurityDepositAmount,
                            AdvanceAmount = x.AdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            ReviewFrequency = x.ReviewFrequency,
                            ReviewPercentage = x.ReviewPercentage,
                            CashGLCode = x.CashGLCode,
                            BankGLCode = x.BankGLCode,
                            AdvanceGLCode = x.AdvanceGLCode,
                            AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                            RentGLCode = x.RentGLCode,
                            ServiceChargeGLCode = x.ServiceChargeGLCode,
                            TaxGLCode = x.TaxGLCode,
                            VATGLCode = x.VATGLCode,
                            ServiceCharge = x.ServiceCharge,
                            OnlineTower = x.OnlineTower,
                            GeneratorSpace = x.GeneratorSpace,
                            CarParking = x.CarParking,
                            CarParkingNo = x.CarParkingNo,
                            TaxPercentage = x.TaxPercentage,
                            TaxAmount = x.TaxAmount,
                            VATPercentage = x.VATPercentage,
                            VATAmount = x.VATAmount,
                            NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                            AgreementStatus = x.AgreementStatus,
                            AgreementText = x.AgreementText,
                            Status = x.Status,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            EditBy = x.EditBy,
                            EditDate = x.EditDate,
                            ActivateBy = x.ActivateBy,
                            ActivateDate = x.ActivateDate,
                            IsDeleted = x.IsDeleted,
                            StatusName = x.StatusName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            IsRenewal = x.IsRenewal,
                            IsModified = x.IsModified,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                            Special = x.Special,
                            CalculationMethod = x.CalculationMethod,
                        }).ToList();
                        lst.Where(x => x.IsBlock == false).ToList().ForEach(x => { x.BlockText = "Open"; });
                        lst.Where(x => x.IsBlock == true).ToList().ForEach(x => { x.BlockText = "Terminated"; });
                        ViewBag.AlertMsg = AlertMsg;
                        AlertMsg = null;
                    }
                    if (ViewID == 2)
                    {
                        //lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Created).ToList();
                        lst = lst.Where(x => x.IsRenewal == false && x.IsModified == false && x.IsBlock == false).ToList();
                        return View(AgreementInfoPath.ReEditIndex, lst);
                    }
                    else if (ViewID == 3)
                    {
                        lst = lst.Where(x => x.IsRenewal == false && x.IsModified == false && x.IsBlock == false).ToList();
                        return View(AgreementInfoPath.ReDeleteIndex, lst);
                    }
                    else if (ViewID == 4)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Created && x.Status == DTOBasic.active && x.IsRenewal == false && x.IsModified == false && x.IsBlock == false).ToList();
                        return View(AgreementInfoPath.ReActivateIndex, lst);
                    }
                    else if (ViewID == 5)
                    {
                        ViewBag.ContractCaption = "Contract Schedule";
                        ViewBag.ContractRentScheduleFor = "11";
                        ViewBag.LLCaption = "Landlord Wise Contract Schedule";
                        ViewBag.LLRentScheduleFor = "12";
                        ViewBag.CCCaption = "Cost Center Wise Contract Schedule";
                        ViewBag.CCRentScheduleFor = "13";
                        return View(AgreementInfoPath.LatestAgreementList, lst);
                    }
                    //else if (ViewID == 6)
                    //{
                    //    lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate && x.Status == DTOBasic.InActive).ToList();
                    //    return View(AgreementInfoPath.ReUnblockIndex, lst);
                    //}
                    else if (ViewID == 10)
                    {
                        return View(AgreementInfoPath.ReListOfAgreements, lst);
                    }
                    else if (ViewID == 11)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate).ToList();
                        ViewBag.Caption = "Contract Schedule";
                        ViewBag.RentScheduleFor = "11";
                        return View(AgreementInfoPath.ReListOfRentSchedule, lst);
                    }
                    else if (ViewID == 12)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate).ToList();
                        ViewBag.Caption = "Landlord Wise Contract Schedule";
                        ViewBag.RentScheduleFor = "12";
                        return View(AgreementInfoPath.ReListOfRentSchedule, lst);
                    }
                    else if (ViewID == 13)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate).ToList();
                        ViewBag.Caption = "Cost Center Wise Contract Schedule";
                        ViewBag.RentScheduleFor = "13";
                        return View(AgreementInfoPath.ReListOfRentSchedule, lst);
                    }
                    else if (ViewID == 24)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate).ToList();
                        ViewBag.Caption = "Utility Wise Contract Schedule";
                        ViewBag.RentScheduleFor = "24";
                        return View(AgreementInfoPath.ReListOfRentSchedule, lst);
                    }
                    else
                    {
                        return RedirectToAction("Login", "Home");
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectModAgreementIndex(int ViewID)
        {
            TempData.Remove("ViewID");
            TempData.Add("ViewID", ViewID);
            return RedirectToAction("ModAgreementIndex");
        }

        [HttpGet]
        public ActionResult ModAgreementIndex()
        {
            HomePath HomePath = new HomePath();
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strViewID = TempData["ViewID"];
                    if (strViewID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int ViewID = Convert.ToInt32(strViewID);
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RedirectModAgreementIndex?ViewID=" + ViewID;
                    //==Check for Permission
                    bool Check = false;
                    if (ViewID == 1)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 38 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 2)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 39 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 3)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 40 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 4)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 41 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 10)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 45 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 11)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 46 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 12)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 47 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 13)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 48 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    else if (ViewID == 24)
                    {
                        Check = db.UserPermissions.Where(x => x.ChildID == 49 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    }
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    AgreementUOM AgreementUOM = new AgreementUOM();
                    List<RMS.Models.AgreementInfoDTO> lst = new List<RMS.Models.AgreementInfoDTO>();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    if (ViewID == 1)
                    {
                        var query = from AI in db.AgreementInfos
                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    join S in db.StatusInfos on AI.Status equals S.StatusValue
                                    join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                    where AI.AgreementStatus == AgreementStatus.Activate
                                        && AI.IsBlock == false && AI.IsRenewal == false && AI.IsModified == false &&
                                        AI.IsClosed == false && AI.IsDeleted == false && AI.Special == false
                                    orderby AI.AgreementCode descending
                                    select new
                                    {
                                        AI.AgreementSLNo,
                                        AI.xModifiedAgreementSLNo,

                                        AI.PremiseTypeSLNo,
                                        PT.PremiseType,
                                        AI.PremiseName,
                                        AI.PremiseAddress,
                                        AI.ConcernBranch,
                                        AI.InspectorName,
                                        AI.InspectorContactNo,
                                        AI.ClusterGroup,

                                        AI.AgreementType,
                                        AI.AliasCode,
                                        AI.AgreementCode,
                                        AI.AgreementVersion,
                                        AI.AgreementName,
                                        AI.AgreementStartDate,
                                        AI.AgreementEndDate,
                                        AI.AgreementPeriod,
                                        AI.RenewalFrequency,
                                        AI.RentDueDay,
                                        AI.UOM,
                                        AI.TotalArea,
                                        AI.CostPerUnit,
                                        AI.TotalRentAmount,
                                        AI.SecurityDepositAmount,
                                        AI.AdvanceAmount,
                                        AI.AdditionalAdvanceAmount,
                                        AI.AdvanceAdjustmentPeriod,
                                        AI.AdvanceAdjustmentAmount,
                                        AI.TaxPercentage,
                                        AI.TaxAmount,
                                        AI.VATPercentage,
                                        AI.VATAmount,
                                        AI.NetRentAmount,
                                        AI.AgreementStatus,
                                        AI.AgreementText,
                                        AI.Status,
                                        AI.UserSLNo,
                                        U.UserID,
                                        AI.EntryDate,
                                        AI.EditBy,
                                        AI.EditDate,
                                        AI.ActivateBy,
                                        AI.ActivateDate,
                                        AI.IsDeleted,
                                        S.StatusName,
                                        AI.IsBlock,
                                        AI.BlockDate,
                                        AI.BlockUserSLNo,
                                        AI.TaxType,
                                        AI.VatType,
                                        AI.IsRenewal,
                                        AI.IsModified,
                                        AI.IsIFRSEnable,
                                        AI.IFRSEffectiveDate,
                                        AI.CalculationMethod,
                                    };
                        lst = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                        {
                            AgreementSLNo = x.AgreementSLNo,
                            xModifiedAgreementSLNo = x.xModifiedAgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            PremiseAddress = x.PremiseAddress,
                            ConcernBranch = x.ConcernBranch,
                            InspectorName = x.InspectorName,
                            InspectorContactNo = x.InspectorContactNo,
                            ClusterGroup = x.ClusterGroup,
                            AgreementType = x.AgreementType,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementVersion = x.AgreementVersion,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            TotalArea = x.TotalArea,
                            CostPerUnit = x.CostPerUnit,
                            RentAmount = x.TotalArea * x.CostPerUnit,
                            TotalRentAmount = x.TotalRentAmount,
                            SecurityDepositAmount = x.SecurityDepositAmount,
                            AdvanceAmount = x.AdvanceAmount + x.AdditionalAdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            TaxPercentage = x.TaxPercentage,
                            TaxAmount = x.TaxAmount,
                            VATPercentage = x.VATPercentage,
                            VATAmount = x.VATAmount,
                            NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                            AgreementStatus = x.AgreementStatus,
                            AgreementText = x.AgreementText,
                            Status = x.Status,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            EditBy = x.EditBy,
                            EditDate = x.EditDate,
                            ActivateBy = x.ActivateBy,
                            ActivateDate = x.ActivateDate,
                            IsDeleted = x.IsDeleted,
                            StatusName = x.StatusName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            IsRenewal = x.IsRenewal,
                            IsModified = x.IsModified,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                            CalculationMethod = x.CalculationMethod,
                        }).ToList();
                        ViewBag.AlertMsg = AlertMsg;
                        AlertMsg = null;
                        return View(AgreementInfoPath.ModCreateIndex, lst);
                    }
                    else
                    {
                        var query = from AI in db.AgreementInfos
                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    join S in db.StatusInfos on AI.Status equals S.StatusValue
                                    join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                    where AI.AgreementType == AgreementType.Modified && AI.IsClosed == false && AI.IsDeleted == false
                                    //where (AI.AgreementType == AgreementType.Modified && AI.IsRenewal == false) ||
                                    //(AI.AgreementType == AgreementType.Regular && AI.IsRenewal == false && AI.IsModified == true) ||
                                    //(AI.AgreementType == AgreementType.Renewal && AI.IsRenewal == false && AI.IsModified == true)
                                    //&& AI.IsDeleted == false
                                    orderby AI.AgreementCode descending
                                    select new
                                    {
                                        AI.AgreementSLNo,
                                        AI.xModifiedAgreementSLNo,

                                        AI.PremiseTypeSLNo,
                                        PT.PremiseType,
                                        AI.PremiseName,
                                        AI.PremiseAddress,
                                        AI.ConcernBranch,
                                        AI.InspectorName,
                                        AI.InspectorContactNo,
                                        AI.ClusterGroup,

                                        AI.AgreementType,
                                        AI.AliasCode,
                                        AI.AgreementCode,
                                        AI.AgreementVersion,
                                        AI.AgreementName,
                                        AI.AgreementStartDate,
                                        AI.AgreementEndDate,
                                        AI.AgreementPeriod,
                                        AI.RenewalFrequency,
                                        AI.RentDueDay,
                                        AI.UOM,
                                        AI.TotalArea,
                                        AI.CostPerUnit,
                                        AI.TotalRentAmount,
                                        AI.SecurityDepositAmount,
                                        AI.AdvanceAmount,
                                        AI.AdditionalAdvanceAmount,
                                        AI.AdvanceAdjustmentPeriod,
                                        AI.AdvanceAdjustmentAmount,
                                        AI.ReviewFrequency,
                                        AI.ReviewPercentage,
                                        AI.CashGLCode,
                                        AI.BankGLCode,
                                        AI.AdvanceGLCode,
                                        AI.AdvanceAdjustmentGLCode,
                                        AI.RentGLCode,
                                        AI.ServiceChargeGLCode,
                                        AI.TaxGLCode,
                                        AI.VATGLCode,
                                        AI.ServiceCharge,
                                        AI.OnlineTower,
                                        AI.GeneratorSpace,
                                        AI.CarParking,
                                        AI.CarParkingNo,
                                        AI.TaxPercentage,
                                        AI.TaxAmount,
                                        AI.VATPercentage,
                                        AI.VATAmount,
                                        AI.NetRentAmount,
                                        AI.AgreementStatus,
                                        AI.AgreementText,
                                        AI.Status,
                                        AI.UserSLNo,
                                        U.UserID,
                                        AI.EntryDate,
                                        AI.EditBy,
                                        AI.EditDate,
                                        AI.ActivateBy,
                                        AI.ActivateDate,
                                        AI.IsDeleted,
                                        S.StatusName,
                                        AI.IsBlock,
                                        AI.BlockDate,
                                        AI.BlockUserSLNo,
                                        AI.TaxType,
                                        AI.VatType,
                                        AI.IsRenewal,
                                        AI.IsModified,
                                        AI.IsIFRSEnable,
                                        AI.IFRSEffectiveDate,
                                        AI.CalculationMethod,
                                    };
                        lst = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                        {
                            AgreementSLNo = x.AgreementSLNo,
                            xModifiedAgreementSLNo = x.xModifiedAgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            PremiseAddress = x.PremiseAddress,
                            ConcernBranch = x.ConcernBranch,
                            InspectorName = x.InspectorName,
                            InspectorContactNo = x.InspectorContactNo,
                            ClusterGroup = x.ClusterGroup,
                            AgreementType = x.AgreementType,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementVersion = x.AgreementVersion,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            TotalArea = x.TotalArea,
                            CostPerUnit = x.CostPerUnit,
                            RentAmount = x.TotalArea * x.CostPerUnit,
                            TotalRentAmount = x.TotalRentAmount,
                            SecurityDepositAmount = x.SecurityDepositAmount,
                            AdvanceAmount = x.AdvanceAmount + x.AdditionalAdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            ReviewFrequency = x.ReviewFrequency,
                            ReviewPercentage = x.ReviewPercentage,
                            CashGLCode = x.CashGLCode,
                            BankGLCode = x.BankGLCode,
                            AdvanceGLCode = x.AdvanceGLCode,
                            AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                            RentGLCode = x.RentGLCode,
                            ServiceChargeGLCode = x.ServiceChargeGLCode,
                            TaxGLCode = x.TaxGLCode,
                            VATGLCode = x.VATGLCode,
                            ServiceCharge = x.ServiceCharge,
                            OnlineTower = x.OnlineTower,
                            GeneratorSpace = x.GeneratorSpace,
                            CarParking = x.CarParking,
                            CarParkingNo = x.CarParkingNo,
                            TaxPercentage = x.TaxPercentage,
                            TaxAmount = x.TaxAmount,
                            VATPercentage = x.VATPercentage,
                            VATAmount = x.VATAmount,
                            NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                            AgreementStatus = x.AgreementStatus,
                            AgreementText = x.AgreementText,
                            Status = x.Status,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            EditBy = x.EditBy,
                            EditDate = x.EditDate,
                            ActivateBy = x.ActivateBy,
                            ActivateDate = x.ActivateDate,
                            IsDeleted = x.IsDeleted,
                            StatusName = x.StatusName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            IsRenewal = x.IsRenewal,
                            IsModified = x.IsModified,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                            CalculationMethod = x.CalculationMethod,
                        }).ToList();
                        lst.Where(x => x.IsBlock == false).ToList().ForEach(x => { x.BlockText = "Open"; });
                        lst.Where(x => x.IsBlock == true).ToList().ForEach(x => { x.BlockText = "Terminated"; });
                        ViewBag.AlertMsg = AlertMsg;
                        AlertMsg = null;
                    }
                    if (ViewID == 2)
                    {
                        lst = lst.Where(x => x.IsRenewal == false && x.IsModified == false && x.IsBlock == false).ToList();
                        return View(AgreementInfoPath.ModEditIndex, lst);
                    }
                    else if (ViewID == 3)
                    {
                        lst = lst.Where(x => x.IsRenewal == false && x.IsModified == false && x.IsBlock == false).ToList();
                        return View(AgreementInfoPath.ModDeleteIndex, lst);
                    }
                    else if (ViewID == 4)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Created && x.Status == DTOBasic.active && x.IsRenewal == false && x.IsModified == false && x.IsBlock == false).ToList();
                        return View(AgreementInfoPath.ModActivateIndex, lst);
                    }
                    else if (ViewID == 5)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate && x.Status == DTOBasic.active).ToList();
                        return View(AgreementInfoPath.ModBlockIndex, lst);
                    }
                    else if (ViewID == 6)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate && x.Status == DTOBasic.InActive).ToList();
                        return View(AgreementInfoPath.ModUnblockIndex, lst);
                    }
                    else if (ViewID == 10)
                    {
                        return View(AgreementInfoPath.ModListOfAgreements, lst);
                    }
                    else if (ViewID == 11)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate).ToList();
                        ViewBag.Caption = "Contract Schedule";
                        ViewBag.RentScheduleFor = "11";
                        return View(AgreementInfoPath.ModListOfRentSchedule, lst);
                    }
                    else if (ViewID == 12)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate).ToList();
                        ViewBag.Caption = "Landlord Wise Contract Schedule";
                        ViewBag.RentScheduleFor = "12";
                        return View(AgreementInfoPath.ModListOfRentSchedule, lst);
                    }
                    else if (ViewID == 13)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate).ToList();
                        ViewBag.Caption = "Cost Center Wise Contract Schedule";
                        ViewBag.RentScheduleFor = "13";
                        return View(AgreementInfoPath.ModListOfRentSchedule, lst);
                    }
                    else if (ViewID == 24)
                    {
                        lst = lst.Where(x => x.AgreementStatus == AgreementStatus.Activate).ToList();
                        ViewBag.Caption = "Utility Wise Contract Schedule";
                        ViewBag.RentScheduleFor = "24";
                        return View(AgreementInfoPath.ModListOfRentSchedule, lst);
                    }
                    else
                    {
                        return RedirectToAction("Login", "Home");
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectRentSchedule(int AgreementSLNo, int RentScheduleFor, int ShowReport)
        {
            TempData.Remove("AgreementSLNo");
            TempData.Add("AgreementSLNo", AgreementSLNo);
            TempData.Remove("RentScheduleFor");
            TempData.Add("RentScheduleFor", RentScheduleFor);
            TempData.Remove("ShowReport");
            TempData.Add("ShowReport", ShowReport);
            return RedirectToAction("RentSchedule");
        }

        [HttpGet]
        public ActionResult RentSchedule()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strAgreementSLNo = TempData["AgreementSLNo"];
                    if (strAgreementSLNo == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int AgreementSLNo = Convert.ToInt32(strAgreementSLNo);
                    var strRentScheduleFor = TempData["RentScheduleFor"];
                    if (strRentScheduleFor == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int RentScheduleFor = Convert.ToInt32(strRentScheduleFor);
                    var strShowReport = TempData["ShowReport"];
                    if (strShowReport == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int ShowReport = Convert.ToInt32(strShowReport);
                    ViewBag.ShowReport = ShowReport;
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    if (RentScheduleFor == 14)
                    {
                        ViewBag.URLPath = "AgreementInfo/PVLeaseList?ViewID=" + RentScheduleFor;
                    }
                    else
                    {
                        if (ShowReport == 1)
                        {
                            ViewBag.URLPath = "AgreementInfo/RedirectAgreementIndex?ViewID=" + RentScheduleFor;
                        }
                        else
                        {
                            ViewBag.URLPath = "AgreementInfo/RedirectReAgreementIndex?ViewID=5";
                        }
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    IList<RMS.Models.ContractScheduleDTO> lstContractSchedule = new List<RMS.Models.ContractScheduleDTO>();
                    IList<RMS.Models.IFRSScheduleDTO> lstIFRSSchedule = new List<RMS.Models.IFRSScheduleDTO>();
                    IList<RMS.Models.LandlordScheduleDTO> lstLandlordSchedule = new List<RMS.Models.LandlordScheduleDTO>();
                    IList<RMS.Models.CostCenterScheduleDTO> lstCostCenterSchedule = new List<RMS.Models.CostCenterScheduleDTO>();
                    IList<RMS.Models.UtilityScheduleDTO> lstUtilitySchedule = new List<RMS.Models.UtilityScheduleDTO>();
                    if (RentScheduleFor == 11)
                    {
                        var queryContractSchedule = from CS in db.ContractSchedules
                                                    join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                    join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                    join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                    where CS.AgreementSLNo == AgreementSLNo
                                                    orderby CS.MonthNo ascending
                                                    select new
                                                    {
                                                        CS.ContractScheduleSLNo,
                                                        CS.ScheduleDate,
                                                        CS.AgreementSLNo,
                                                        AI.PremiseTypeSLNo,
                                                        PT.PremiseType,
                                                        AI.PremiseName,
                                                        AI.AgreementCode,
                                                        AI.AliasCode,
                                                        AI.AgreementName,
                                                        AI.AgreementStartDate,
                                                        AI.AgreementEndDate,
                                                        AI.AgreementPeriod,
                                                        AI.RenewalFrequency,
                                                        AI.RentDueDay,
                                                        AI.UOM,
                                                        CS.MonthNo,
                                                        CS.Year,
                                                        CS.Month,
                                                        CS.ReviewNo,
                                                        CS.CostPerUnit,
                                                        AI.TotalArea,
                                                        CS.TotalRentAmount,
                                                        AI.AdvanceAmount,
                                                        AI.AdvanceAdjustmentPeriod,
                                                        CS.AdvanceAdjustmentAmount,
                                                        AI.ReviewFrequency,
                                                        AI.ReviewPercentage,
                                                        AI.CashGLCode,
                                                        AI.BankGLCode,
                                                        AI.AdvanceGLCode,
                                                        AI.AdvanceAdjustmentGLCode,
                                                        AI.RentGLCode,
                                                        AI.ServiceChargeGLCode,
                                                        AI.TaxGLCode,
                                                        AI.VATGLCode,
                                                        AI.ServiceCharge,
                                                        AI.OnlineTower,
                                                        AI.GeneratorSpace,
                                                        AI.CarParking,
                                                        AI.TaxPercentage,
                                                        CS.TaxAmount,
                                                        AI.VATPercentage,
                                                        CS.VATAmount,
                                                        CS.NetRentAmount,
                                                        CS.UserSLNo,
                                                        U.UserID,
                                                        CS.EntryDate,
                                                        CS.IsPosted,
                                                        CS.PostingID,
                                                        CS.PostingDate,
                                                        CS.PostingUserSLNo,
                                                        S.StatusName,
                                                        CS.IsBlock,
                                                        CS.BlockDate,
                                                        CS.BlockUserSLNo,
                                                        CS.IsPJPosted,
                                                        CS.PJPostingID,
                                                        CS.PJPostingDate,
                                                        CS.PJPostingUserSLNo,
                                                        AI.TaxType,
                                                        AI.VatType,
                                                        AI.ClusterGroup,
                                                        CS.IsHoldBlockPayment,
                                                        AI.CalculationMethod,
                                                        AI.IsIFRSEnable,
                                                        AI.IFRSEffectiveDate,
                                                    };
                        lstContractSchedule = queryContractSchedule.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                        {
                            ContractScheduleSLNo = x.ContractScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ReviewNo = x.ReviewNo,
                            CostPerUnit = x.CostPerUnit,
                            TotalArea = x.TotalArea,
                            RentAmount = x.CostPerUnit * x.TotalArea,
                            TotalRentAmount = x.TotalRentAmount,
                            AdvanceAmount = x.AdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            ReviewFrequency = x.ReviewFrequency,
                            ReviewPercentage = x.ReviewPercentage,
                            CashGLCode = x.CashGLCode,
                            BankGLCode = x.BankGLCode,
                            AdvanceGLCode = x.AdvanceGLCode,
                            AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                            RentGLCode = x.RentGLCode,
                            ServiceChargeGLCode = x.ServiceChargeGLCode,
                            TaxGLCode = x.TaxGLCode,
                            VATGLCode = x.VATGLCode,
                            ServiceCharge = x.ServiceCharge,
                            OnlineTower = x.OnlineTower,
                            GeneratorSpace = x.GeneratorSpace,
                            CarParking = x.CarParking,
                            TaxPercentage = x.TaxPercentage,
                            TaxAmount = x.TaxAmount,
                            VATPercentage = x.VATPercentage,
                            VATAmount = x.VATAmount,
                            NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString(),
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            ClusterGroup = x.ClusterGroup,
                            IsHoldBlockPayment = x.IsHoldBlockPayment,
                            CalculationMethod = x.CalculationMethod,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        }).ToList();
                        int SLNOContract = 0;
                        double AdvanceAmountOB = 0;
                        foreach (RMS.Models.ContractScheduleDTO item in lstContractSchedule)
                        {
                            SLNOContract++;
                            item.SLNO = SLNOContract;
                            if (item.MonthNo == 1)
                            {
                                item.AdvanceAmountOB = item.AdvanceAmount;
                                item.AdvanceAmountCB = item.AdvanceAmountOB - item.AdvanceAdjustmentAmount;
                                AdvanceAmountOB = item.AdvanceAmountCB;
                            }
                            else
                            {
                                item.AdvanceAmountOB = AdvanceAmountOB;
                                item.AdvanceAmountCB = item.AdvanceAmountOB - item.AdvanceAdjustmentAmount;
                                AdvanceAmountOB = item.AdvanceAmountCB;
                            }
                            //==Termination Checked
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            //==AP Posted Checked
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            //==Payment Posted Checked
                            if (item.IsPJPosted == true)
                            {
                                item.PJPostText = "Posted";
                            }
                            else
                            {
                                //==Payment Blocked Checked
                                if (item.IsHoldBlockPayment == true)
                                {
                                    item.PJPostText = "Hold";
                                }
                                else
                                {
                                    item.PJPostText = "Unposted";
                                }
                            }
                        }
                        return View(AgreementInfoPath.AgreementRentSchedule, lstContractSchedule);
                    }
                    else if (RentScheduleFor == 12)
                    {
                        var queryLandlordSchedule = from LS in db.LandlordSchedules
                                                    join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                    join LI in db.LandlordInfos on LS.LandlordSLNo equals LI.LandlordSLNo
                                                    join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                    join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                    where LS.AgreementSLNo == AgreementSLNo
                                                    orderby LS.MonthNo ascending
                                                    select new
                                                    {
                                                        LS.LScheduleSLNo,
                                                        LS.ScheduleDate,
                                                        LS.AgreementSLNo,
                                                        AI.PremiseTypeSLNo,
                                                        PT.PremiseType,
                                                        AI.PremiseName,
                                                        AI.AgreementCode,
                                                        AI.AliasCode,
                                                        AI.AgreementName,
                                                        AI.AgreementStartDate,
                                                        AI.AgreementEndDate,
                                                        AI.AgreementPeriod,
                                                        AI.RenewalFrequency,
                                                        AI.RentDueDay,
                                                        AI.UOM,
                                                        LS.MonthNo,
                                                        LS.Year,
                                                        LS.Month,
                                                        LS.ReviewNo,
                                                        LS.CostPerUnit,
                                                        AI.TotalArea,
                                                        LS.TotalRentAmount,
                                                        AI.AdvanceAmount,
                                                        AI.AdvanceAdjustmentPeriod,
                                                        AiAdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount,
                                                        LIAdvancePC = LI.AdvancePC,
                                                        LIAdvanceAmount = LI.AdvanceAmount,
                                                        LI.AdvanceAdjustmentPC,
                                                        LS.AdvanceAdjustmentAmount,
                                                        AI.ReviewFrequency,
                                                        AI.ReviewPercentage,
                                                        AI.CashGLCode,
                                                        AI.BankGLCode,
                                                        AI.AdvanceGLCode,
                                                        AI.AdvanceAdjustmentGLCode,
                                                        AI.RentGLCode,
                                                        AI.ServiceChargeGLCode,
                                                        AI.TaxGLCode,
                                                        AI.VATGLCode,
                                                        AI.ServiceCharge,
                                                        AI.OnlineTower,
                                                        AI.GeneratorSpace,
                                                        AI.CarParking,
                                                        AiTaxPercentage = AI.TaxPercentage,
                                                        AiTaxAmount = AI.TaxAmount,
                                                        LI.TaxPC,
                                                        LS.TaxAmount,
                                                        AiVATPercentage = AI.VATPercentage,
                                                        AiVATAmount = AI.VATAmount,
                                                        LI.VATPC,
                                                        LS.VATAmount,
                                                        AiNetRentAmount = AI.NetRentAmount,
                                                        LI.RentPC,
                                                        LS.NetRentAmount,
                                                        LS.UserSLNo,
                                                        U.UserID,
                                                        LS.EntryDate,
                                                        LS.IsPosted,
                                                        LS.PostingID,
                                                        LS.PostingDate,
                                                        LS.PostingUserSLNo,
                                                        S.StatusName,
                                                        LI.VendorCode,
                                                        LI.LandlordName,
                                                        LS.IsBlock,
                                                        LS.BlockDate,
                                                        LS.BlockUserSLNo,
                                                        LS.IsPJPosted,
                                                        LS.PJPostingID,
                                                        LS.PJPostingDate,
                                                        LS.PJPostingUserSLNo,
                                                        AI.TaxType,
                                                        AI.VatType,
                                                        LI.ModeOfPayment,
                                                        LI.BankName,
                                                        LI.BranchName,
                                                        LI.ACNo,
                                                        AI.ClusterGroup,
                                                        LS.IsHoldBlockPayment,
                                                        AI.CalculationMethod,
                                                        AI.IsIFRSEnable,
                                                        AI.IFRSEffectiveDate,
                                                    };
                        lstLandlordSchedule = queryLandlordSchedule.AsEnumerable().Select(x => new RMS.Models.LandlordScheduleDTO
                        {
                            LScheduleSLNo = x.LScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ReviewNo = x.ReviewNo,
                            CostPerUnit = x.CostPerUnit,
                            TotalArea = x.TotalArea,
                            RentAmount = x.CostPerUnit * x.TotalArea,
                            TotalRentAmount = x.TotalRentAmount,
                            AdvanceAmount = x.AdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AiAdvanceAdjustmentAmount = x.AiAdvanceAdjustmentAmount,
                            LIAdvancePC = x.LIAdvancePC,
                            LIAdvanceamount = x.LIAdvanceAmount,
                            AdvanceAdjustmentPC = x.AdvanceAdjustmentPC,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            ReviewFrequency = x.ReviewFrequency,
                            ReviewPercentage = x.ReviewPercentage,
                            CashGLCode = x.CashGLCode,
                            BankGLCode = x.BankGLCode,
                            AdvanceGLCode = x.AdvanceGLCode,
                            AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                            RentGLCode = x.RentGLCode,
                            ServiceChargeGLCode = x.ServiceChargeGLCode,
                            TaxGLCode = x.TaxGLCode,
                            VATGLCode = x.VATGLCode,
                            ServiceCharge = x.ServiceCharge,
                            OnlineTower = x.OnlineTower,
                            GeneratorSpace = x.GeneratorSpace,
                            CarParking = x.CarParking,
                            AiTaxPercentage = x.AiTaxPercentage,
                            AiTaxAmount = x.AiTaxAmount,
                            TaxPercentage = x.TaxPC,
                            TaxAmount = x.TaxAmount,
                            AiVATPercentage = x.AiVATPercentage,
                            AiVATAmount = x.AiVATAmount,
                            VATPercentage = x.VATPC,
                            VATAmount = x.VATAmount,
                            RentPercentage = x.RentPC,
                            NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                            LLRentAmount = x.NetRentAmount + x.AdvanceAdjustmentAmount,
                            LLArea = (x.TotalArea * x.RentPC) / 100,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate,
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            VendorCode = x.VendorCode,
                            LandlordName = x.LandlordName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            ModeOfPayment = x.ModeOfPayment,
                            BankName = x.BankName,
                            BranchName = x.BranchName,
                            ACNo = x.ACNo,
                            ClusterGroup = x.ClusterGroup,
                            IsHoldBlockPayment = x.IsHoldBlockPayment,
                            CalculationMethod = x.CalculationMethod,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        }).ToList();
                        int SLNOLandlord = 0;
                        ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                        foreach (RMS.Models.LandlordScheduleDTO item in lstLandlordSchedule)
                        {
                            SLNOLandlord++;
                            item.SLNO = SLNOLandlord;
                            //==Termination Checked
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            //==AP Posted Checked
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            //==Payment Posted Checked
                            if (item.IsPJPosted == true)
                            {
                                item.PJPostText = "Posted";
                            }
                            else
                            {
                                //==Payment Blocked Checked
                                if (item.IsHoldBlockPayment == true)
                                {
                                    item.PJPostText = "Hold";
                                }
                                else
                                {
                                    item.PJPostText = "Unposted";
                                }
                            }
                            if (item.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { item.ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.RTGS) { item.ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.EFTN) { item.ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { item.ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.Cash) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { item.ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.Others) { item.ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                        return View(AgreementInfoPath.LandlordRentSchedule, lstLandlordSchedule);
                    }
                    else if (RentScheduleFor == 13)
                    {
                        var queryCostCenterSchedule = from CS in db.CostCenterSchedules
                                                      join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                      join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                      join CC in db.CostCenterInfos on CS.CCSLNo equals CC.CCSLNo
                                                      join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                      join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                      where CS.AgreementSLNo == AgreementSLNo
                                                      orderby CS.MonthNo ascending
                                                      select new
                                                      {
                                                          CS.CCScheduleSLNo,
                                                          CS.ScheduleDate,
                                                          CS.AgreementSLNo,
                                                          AI.PremiseTypeSLNo,
                                                          PT.PremiseType,
                                                          AI.PremiseName,
                                                          AI.AgreementCode,
                                                          AI.AliasCode,
                                                          AI.AgreementName,
                                                          AI.AgreementStartDate,
                                                          AI.AgreementEndDate,
                                                          AI.AgreementPeriod,
                                                          AI.RenewalFrequency,
                                                          AI.RentDueDay,
                                                          AI.UOM,
                                                          CS.MonthNo,
                                                          CS.Year,
                                                          CS.Month,
                                                          CS.ReviewNo,
                                                          CS.CostPerUnit,
                                                          AI.TotalArea,
                                                          CS.TotalRentAmount,
                                                          AI.AdvanceAmount,
                                                          AI.AdvanceAdjustmentPeriod,
                                                          AiAdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount,
                                                          CS.AdvanceAdjustmentAmount,
                                                          AI.ReviewFrequency,
                                                          AI.ReviewPercentage,
                                                          AI.CashGLCode,
                                                          AI.BankGLCode,
                                                          AI.AdvanceGLCode,
                                                          AI.AdvanceAdjustmentGLCode,
                                                          AI.RentGLCode,
                                                          AI.ServiceChargeGLCode,
                                                          AI.TaxGLCode,
                                                          AI.VATGLCode,
                                                          AI.ServiceCharge,
                                                          AI.OnlineTower,
                                                          AI.GeneratorSpace,
                                                          AI.CarParking,
                                                          AiTaxPercentage = AI.TaxPercentage,
                                                          AiTaxAmount = AI.TaxAmount,
                                                          CS.TaxAmount,
                                                          AiVATPercentage = AI.VATPercentage,
                                                          AiVATAmount = AI.VATAmount,
                                                          CS.VATAmount,
                                                          AiNetRentAmount = AI.NetRentAmount,
                                                          CS.NetRentAmount,
                                                          CS.UserSLNo,
                                                          U.UserID,
                                                          CS.EntryDate,
                                                          CS.IsPosted,
                                                          CS.PostingID,
                                                          CS.PostingDate,
                                                          CS.PostingUserSLNo,
                                                          S.StatusName,
                                                          CC.CCCode,
                                                          CC.CCName,
                                                          CC.SOLCode,
                                                          CC.SOLName,
                                                          CC.CCShareAllotment,
                                                          CS.IsBlock,
                                                          CS.BlockDate,
                                                          CS.BlockUserSLNo,
                                                          CS.IsPJPosted,
                                                          CS.PJPostingID,
                                                          CS.PJPostingDate,
                                                          CS.PJPostingUserSLNo,
                                                          AI.TaxType,
                                                          AI.VatType,
                                                          AI.ClusterGroup,
                                                          CS.IsHoldBlockPayment,
                                                          AI.CalculationMethod,
                                                          AI.IsIFRSEnable,
                                                          AI.IFRSEffectiveDate,
                                                      };
                        lstCostCenterSchedule = queryCostCenterSchedule.AsEnumerable().Select(x => new RMS.Models.CostCenterScheduleDTO
                        {
                            CCScheduleSLNo = x.CCScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ReviewNo = x.ReviewNo,
                            CostPerUnit = x.CostPerUnit,
                            TotalArea = x.TotalArea,
                            RentAmount = x.CostPerUnit * x.TotalArea,
                            TotalRentAmount = x.TotalRentAmount,
                            AdvanceAmount = x.AdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AiAdvanceAdjustmentAmount = x.AiAdvanceAdjustmentAmount,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            ReviewFrequency = x.ReviewFrequency,
                            ReviewPercentage = x.ReviewPercentage,
                            CashGLCode = x.CashGLCode,
                            BankGLCode = x.BankGLCode,
                            AdvanceGLCode = x.AdvanceGLCode,
                            AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                            RentGLCode = x.RentGLCode,
                            ServiceChargeGLCode = x.ServiceChargeGLCode,
                            TaxGLCode = x.TaxGLCode,
                            VATGLCode = x.VATGLCode,
                            ServiceCharge = x.ServiceCharge,
                            OnlineTower = x.OnlineTower,
                            GeneratorSpace = x.GeneratorSpace,
                            CarParking = x.CarParking,
                            AiTaxPercentage = x.AiTaxPercentage,
                            AiTaxAmount = x.AiTaxAmount,
                            TaxAmount = x.TaxAmount,
                            AiVATPercentage = x.AiVATPercentage,
                            AiVATAmount = x.AiVATAmount,
                            VATAmount = x.VATAmount,
                            AiNetRentAmount = x.NetRentAmount,
                            NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                            CCRentAmount = x.NetRentAmount + x.AdvanceAdjustmentAmount,
                            CCArea = (x.TotalArea * x.CCShareAllotment) / 100,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate,
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            CCCode = x.CCCode,
                            CCName = x.CCName,
                            SOLCode = x.SOLCode,
                            SOLName = x.SOLName,
                            CCSharePercentage = x.CCShareAllotment,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            ClusterGroup = x.ClusterGroup,
                            IsHoldBlockPayment = x.IsHoldBlockPayment,
                            CalculationMethod = x.CalculationMethod,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        }).ToList();
                        int SLNOCostCenter = 0;
                        foreach (RMS.Models.CostCenterScheduleDTO item in lstCostCenterSchedule)
                        {
                            SLNOCostCenter++;
                            item.SLNO = SLNOCostCenter;
                            //==Termination Checked
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            //==AP Posted Checked
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            //==Payment Posted Checked
                            if (item.IsPJPosted == true)
                            {
                                item.PJPostText = "Posted";
                            }
                            else
                            {
                                //==Payment Blocked Checked
                                if (item.IsHoldBlockPayment == true)
                                {
                                    item.PJPostText = "Hold";
                                }
                                else
                                {
                                    item.PJPostText = "Unposted";
                                }
                            }
                        }
                        return View(AgreementInfoPath.CostCenterRentSchedule, lstCostCenterSchedule);
                    }
                    else if (RentScheduleFor == 24)
                    {
                        var queryUtilitySchedule = from US in db.UtilitySchedules
                                                   join AI in db.AgreementInfos on US.AgreementSLNo equals AI.AgreementSLNo
                                                   join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                   join UI in db.UtilityInfos on US.UtilitySLNo equals UI.UtilitySLNo
                                                   join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                   join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                   where US.AgreementSLNo == AgreementSLNo
                                                   orderby US.MonthNo ascending
                                                   select new
                                                   {
                                                       US.UScheduleSLNo,
                                                       US.ScheduleDate,
                                                       US.AgreementSLNo,
                                                       AI.PremiseTypeSLNo,
                                                       PT.PremiseType,
                                                       AI.PremiseName,
                                                       AI.AgreementCode,
                                                       AI.AliasCode,
                                                       AI.AgreementName,
                                                       AI.AgreementStartDate,
                                                       AI.AgreementEndDate,
                                                       AI.AgreementPeriod,
                                                       AI.RenewalFrequency,
                                                       AI.RentDueDay,
                                                       AI.UOM,
                                                       US.MonthNo,
                                                       US.Year,
                                                       US.Month,
                                                       UI.ServiceChargePC,
                                                       US.ServiceChargeAmount,
                                                       UI.OnlineTowerPC,
                                                       US.OnlineTowerAmount,
                                                       UI.GeneratorSpacePC,
                                                       US.GeneratorSpaceAmount,
                                                       UI.CarParkingPC,
                                                       US.CarParkingAmount,
                                                       UI.TaxPC,
                                                       US.TaxAmount,
                                                       UI.VATPC,
                                                       US.VATAmount,
                                                       US.UserSLNo,
                                                       U.UserID,
                                                       US.EntryDate,
                                                       US.IsPosted,
                                                       US.PostingID,
                                                       US.PostingDate,
                                                       US.PostingUserSLNo,
                                                       S.StatusName,
                                                       UI.UtilityVendorCode,
                                                       UI.UtilityLandlordName,
                                                       US.IsBlock,
                                                       US.BlockDate,
                                                       US.BlockUserSLNo,
                                                       US.IsPJPosted,
                                                       US.PJPostingID,
                                                       US.PJPostingDate,
                                                       US.PJPostingUserSLNo,
                                                       AI.TaxType,
                                                       AI.VatType,
                                                       UI.UtilityModeOfPayment,
                                                       UI.UtilityBankName,
                                                       UI.UtilityBranchName,
                                                       UI.UtilityACNo,
                                                       AI.IsHoldBlockPayment,
                                                   };
                        lstUtilitySchedule = queryUtilitySchedule.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ServiceChargePC = x.ServiceChargePC,
                            ServiceChargeAmount = x.ServiceChargeAmount,
                            OnlineTowerPC = x.OnlineTowerPC,
                            OnlineTowerAmount = x.OnlineTowerAmount,
                            GeneratorSpacePC = x.GeneratorSpacePC,
                            GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                            CarParkingPC = x.CarParkingPC,
                            CarParkingAmount = x.CarParkingAmount,
                            UtilityTaxPC = x.TaxPC,
                            UtilityTaxAmount = x.TaxAmount,
                            UtilityVATPC = x.VATPC,
                            UtilityVATAmount = x.VATAmount,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate,
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            VendorCode = x.UtilityVendorCode,
                            LandlordName = x.UtilityLandlordName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            ModeOfPayment = x.UtilityModeOfPayment,
                            BankName = x.UtilityBankName,
                            BranchName = x.UtilityBranchName,
                            ACNo = x.UtilityACNo,
                            IsHoldBlockPayment = x.IsHoldBlockPayment,
                        }).ToList();
                        int SLNOUtility = 0;
                        ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                        foreach (RMS.Models.UtilityScheduleDTO item in lstUtilitySchedule)
                        {
                            SLNOUtility++;
                            item.SLNO = SLNOUtility;
                            //==Termination Checked
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            //==AP Posted Checked
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            //==Payment Posted Checked
                            if (item.IsPJPosted == true)
                            {
                                item.PJPostText = "Posted";
                            }
                            else
                            {
                                //==Payment Blocked Checked
                                if (item.IsHoldBlockPayment == true)
                                {
                                    item.PJPostText = "Hold";
                                }
                                else
                                {
                                    item.PJPostText = "Unposted";
                                }
                            }
                            if (item.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { item.ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.RTGS) { item.ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.EFTN) { item.ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { item.ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.Cash) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { item.ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.Others) { item.ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                        return View(AgreementInfoPath.UtilityRentSchedule, lstUtilitySchedule);
                    }
                    else
                    {
                        var queryIFRSSchedule = from IFRS in db.IFRSSchedules
                                                join AI in db.AgreementInfos on IFRS.AgreementSLNo equals AI.AgreementSLNo
                                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                join CC in db.CostCenterInfos on AI.AgreementSLNo equals CC.AgreementSLNo
                                                join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                where IFRS.AgreementSLNo == AgreementSLNo
                                                orderby IFRS.IFRSSLNo ascending
                                                select new
                                                {
                                                    IFRS.IFRSSLNo,
                                                    IFRS.ScheduleDate,
                                                    IFRS.AgreementSLNo,
                                                    AI.PremiseTypeSLNo,
                                                    PT.PremiseType,
                                                    AI.PremiseName,
                                                    AI.AgreementCode,
                                                    AI.AliasCode,
                                                    AI.AgreementName,
                                                    AI.AgreementStartDate,
                                                    AI.AgreementEndDate,
                                                    AI.AgreementPeriod,
                                                    AI.RenewalFrequency,
                                                    AI.RentDueDay,
                                                    AI.UOM,
                                                    IFRS.MonthNo,
                                                    IFRS.Year,
                                                    IFRS.Month,
                                                    IFRS.ReviewNo,
                                                    IFRS.CostPerUnit,
                                                    IFRS.AdvanceAdjustmentAmount,
                                                    AI.TotalArea,
                                                    AI.AdvanceAmount,
                                                    AI.AdvanceAdjustmentPeriod,
                                                    IFRS.PaymentAmount,
                                                    IFRS.DiscountFactor,
                                                    IFRS.PresentValue,
                                                    IFRS.OBLeaseLiability,
                                                    IFRS.LeasePayment,
                                                    IFRS.InteresetExpense,
                                                    IFRS.SettlementofLeaseLiabilities,
                                                    IFRS.CBLeaseLiability,
                                                    IFRS.OBROU,
                                                    IFRS.Depreciation,
                                                    IFRS.CBROU,
                                                    IFRS.OBAdvance,
                                                    IFRS.AdvanceDepreciation,
                                                    IFRS.CBAdvance,
                                                    IFRS.UserSLNo,
                                                    U.UserID,
                                                    IFRS.EntryDate,
                                                    IFRS.IsBlock,
                                                    IFRS.BlockDate,
                                                    IFRS.BlockUserSLNo,
                                                    CC.CCCode,
                                                    CC.CCName,
                                                    CC.SOLCode,
                                                    CC.SOLName,
                                                    AI.TaxType,
                                                    AI.VatType,
                                                    AI.IsHoldBlockPayment,
                                                    AI.IsIFRSEnable,
                                                    AI.IFRSEffectiveDate,
                                                };
                        lstIFRSSchedule = queryIFRSSchedule.AsEnumerable().Select(x => new RMS.Models.IFRSScheduleDTO
                        {
                            IFRSSLNo = x.IFRSSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ReviewNo = x.ReviewNo,
                            CostPerUnit = x.CostPerUnit,
                            TotalArea = x.TotalArea,
                            TotalRentAmount = x.CostPerUnit * x.TotalArea,
                            AdvanceAmount = x.AdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            PaymentAmount = x.PaymentAmount,
                            DiscountFactor = x.DiscountFactor,
                            PresentValue = x.PresentValue,
                            OBLeaseLiability = x.OBLeaseLiability,
                            LeasePayment = x.LeasePayment,
                            InteresetExpense = x.InteresetExpense,
                            SettlementofLeaseLiabilities = x.SettlementofLeaseLiabilities,
                            CBLeaseLiability = x.CBLeaseLiability,
                            OBROU = x.OBROU,
                            Depreciation = x.Depreciation,
                            CBROU = x.CBROU,
                            OBAdvance = x.OBAdvance,
                            AdvanceDepreciation = x.AdvanceDepreciation,
                            CBAdvance = x.CBAdvance,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            CCCode = x.CCCode,
                            CCName = x.CCName,
                            SOLCode = x.SOLCode,
                            SOLName = x.SOLName,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            IsHoldBlockPayment = x.IsHoldBlockPayment,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        }).ToList();
                        int SLNOIFRS = 0;
                        foreach (RMS.Models.IFRSScheduleDTO item in lstIFRSSchedule)
                        {
                            SLNOIFRS++;
                            item.SLNO = SLNOIFRS;
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                        }
                        return View(AgreementInfoPath.IFRSLeaseSchedule, lstIFRSSchedule);
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectReRentSchedule(int AgreementSLNo, int RentScheduleFor, int ShowReport)
        {
            TempData.Remove("AgreementSLNo");
            TempData.Add("AgreementSLNo", AgreementSLNo);
            TempData.Remove("RentScheduleFor");
            TempData.Add("RentScheduleFor", RentScheduleFor);
            TempData.Remove("ShowReport");
            TempData.Add("ShowReport", ShowReport);
            return RedirectToAction("ReRentSchedule");
        }

        [HttpGet]
        public ActionResult ReRentSchedule()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strAgreementSLNo = TempData["AgreementSLNo"];
                    if (strAgreementSLNo == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int AgreementSLNo = Convert.ToInt32(strAgreementSLNo);
                    var strRentScheduleFor = TempData["RentScheduleFor"];
                    if (strRentScheduleFor == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int RentScheduleFor = Convert.ToInt32(strRentScheduleFor);
                    var strShowReport = TempData["ShowReport"];
                    if (strShowReport == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int ShowReport = Convert.ToInt32(strShowReport);
                    ViewBag.ShowReport = ShowReport;
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    if (RentScheduleFor == 14)
                    {
                        ViewBag.URLPath = "AgreementInfo/RedirectPVLeaseList?ViewID=" + RentScheduleFor;
                    }
                    else
                    {
                        if (ShowReport == 1)
                        {
                            ViewBag.URLPath = "AgreementInfo/RedirectReAgreementIndex?ViewID=" + RentScheduleFor;
                        }
                        else
                        {
                            ViewBag.URLPath = "AgreementInfo/RedirectReAgreementIndex?ViewID=5";
                        }
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    IList<RMS.Models.ContractScheduleDTO> lstContractSchedule = new List<RMS.Models.ContractScheduleDTO>();
                    IList<RMS.Models.IFRSScheduleDTO> lstIFRSSchedule = new List<RMS.Models.IFRSScheduleDTO>();
                    IList<RMS.Models.LandlordScheduleDTO> lstLandlordSchedule = new List<RMS.Models.LandlordScheduleDTO>();
                    IList<RMS.Models.CostCenterScheduleDTO> lstCostCenterSchedule = new List<RMS.Models.CostCenterScheduleDTO>();
                    IList<RMS.Models.UtilityScheduleDTO> lstUtilitySchedule = new List<RMS.Models.UtilityScheduleDTO>();
                    if (RentScheduleFor == 11)
                    {
                        var queryContractSchedule = from CS in db.ContractSchedules
                                                    join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                    join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                    join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                    where CS.AgreementSLNo == AgreementSLNo
                                                    orderby CS.MonthNo ascending
                                                    select new
                                                    {
                                                        CS.ContractScheduleSLNo,
                                                        CS.ScheduleDate,
                                                        CS.AgreementSLNo,
                                                        AI.PremiseTypeSLNo,
                                                        PT.PremiseType,
                                                        AI.PremiseName,
                                                        AI.AgreementCode,
                                                        AI.AliasCode,
                                                        AI.AgreementName,
                                                        AI.AgreementStartDate,
                                                        AI.AgreementEndDate,
                                                        AI.AgreementPeriod,
                                                        AI.RenewalFrequency,
                                                        AI.RentDueDay,
                                                        AI.UOM,
                                                        CS.MonthNo,
                                                        CS.Year,
                                                        CS.Month,
                                                        CS.ReviewNo,
                                                        CS.CostPerUnit,
                                                        AI.TotalArea,
                                                        CS.TotalRentAmount,
                                                        AI.AdvanceAmount,
                                                        AI.AdvanceAdjustmentPeriod,
                                                        CS.AdvanceAdjustmentAmount,
                                                        AI.ReviewFrequency,
                                                        AI.ReviewPercentage,
                                                        AI.CashGLCode,
                                                        AI.BankGLCode,
                                                        AI.AdvanceGLCode,
                                                        AI.AdvanceAdjustmentGLCode,
                                                        AI.RentGLCode,
                                                        AI.ServiceChargeGLCode,
                                                        AI.TaxGLCode,
                                                        AI.VATGLCode,
                                                        AI.ServiceCharge,
                                                        AI.OnlineTower,
                                                        AI.GeneratorSpace,
                                                        AI.CarParking,
                                                        AI.TaxPercentage,
                                                        CS.TaxAmount,
                                                        AI.VATPercentage,
                                                        CS.VATAmount,
                                                        CS.NetRentAmount,
                                                        CS.UserSLNo,
                                                        U.UserID,
                                                        CS.EntryDate,
                                                        CS.IsPosted,
                                                        CS.PostingID,
                                                        CS.PostingDate,
                                                        CS.PostingUserSLNo,
                                                        S.StatusName,
                                                        CS.IsBlock,
                                                        CS.BlockDate,
                                                        CS.BlockUserSLNo,
                                                        CS.IsPJPosted,
                                                        CS.PJPostingID,
                                                        CS.PJPostingDate,
                                                        CS.PJPostingUserSLNo,
                                                        AI.TaxType,
                                                        AI.VatType,
                                                        AI.ClusterGroup,
                                                        CS.IsHoldBlockPayment,
                                                        AI.Special,
                                                        AI.CalculationMethod,
                                                        AI.IsIFRSEnable,
                                                        AI.IFRSEffectiveDate,
                                                    };
                        lstContractSchedule = queryContractSchedule.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                        {
                            ContractScheduleSLNo = x.ContractScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ReviewNo = x.ReviewNo,
                            CostPerUnit = x.CostPerUnit,
                            TotalArea = x.TotalArea,
                            RentAmount = x.CostPerUnit * x.TotalArea,
                            TotalRentAmount = x.TotalRentAmount,
                            AdvanceAmount = x.AdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            ReviewFrequency = x.ReviewFrequency,
                            ReviewPercentage = x.ReviewPercentage,
                            CashGLCode = x.CashGLCode,
                            BankGLCode = x.BankGLCode,
                            AdvanceGLCode = x.AdvanceGLCode,
                            AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                            RentGLCode = x.RentGLCode,
                            ServiceChargeGLCode = x.ServiceChargeGLCode,
                            TaxGLCode = x.TaxGLCode,
                            VATGLCode = x.VATGLCode,
                            ServiceCharge = x.ServiceCharge,
                            OnlineTower = x.OnlineTower,
                            GeneratorSpace = x.GeneratorSpace,
                            CarParking = x.CarParking,
                            TaxPercentage = x.TaxPercentage,
                            TaxAmount = x.TaxAmount,
                            VATPercentage = x.VATPercentage,
                            VATAmount = x.VATAmount,
                            NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString(),
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            ClusterGroup = x.ClusterGroup,
                            IsHoldBlockPayment = x.IsHoldBlockPayment,
                            Special = x.Special,
                            CalculationMethod = x.CalculationMethod,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        }).ToList();
                        int SLNOContract = 0;
                        double AdvanceAmountOB = 0;
                        foreach (RMS.Models.ContractScheduleDTO item in lstContractSchedule)
                        {
                            SLNOContract++;
                            item.SLNO = SLNOContract;
                            if (item.MonthNo == 1)
                            {
                                item.AdvanceAmountOB = item.AdvanceAmount;
                                item.AdvanceAmountCB = item.AdvanceAmountOB - item.AdvanceAdjustmentAmount;
                                AdvanceAmountOB = item.AdvanceAmountCB;
                            }
                            else
                            {
                                item.AdvanceAmountOB = AdvanceAmountOB;
                                item.AdvanceAmountCB = item.AdvanceAmountOB - item.AdvanceAdjustmentAmount;
                                AdvanceAmountOB = item.AdvanceAmountCB;
                            }
                            //==Termination Checked
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            //==AP Posted Checked
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            //==Payment Posted Checked
                            if (item.IsPJPosted == true)
                            {
                                item.PJPostText = "Posted";
                            }
                            else
                            {
                                //==Payment Blocked Checked
                                if (item.IsHoldBlockPayment == true)
                                {
                                    item.PJPostText = "Hold";
                                }
                                else
                                {
                                    item.PJPostText = "Unposted";
                                }
                            }
                        }
                        return View(AgreementInfoPath.ReAgreementRentSchedule, lstContractSchedule);
                    }
                    else if (RentScheduleFor == 12)
                    {
                        var queryLandlordSchedule = from LS in db.LandlordSchedules
                                                    join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                    join LI in db.LandlordInfos on LS.LandlordSLNo equals LI.LandlordSLNo
                                                    join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                    join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                    where LS.AgreementSLNo == AgreementSLNo
                                                    orderby LS.MonthNo ascending
                                                    select new
                                                    {
                                                        LS.LScheduleSLNo,
                                                        LS.ScheduleDate,
                                                        LS.AgreementSLNo,
                                                        AI.PremiseTypeSLNo,
                                                        PT.PremiseType,
                                                        AI.PremiseName,
                                                        AI.AgreementCode,
                                                        AI.AliasCode,
                                                        AI.AgreementName,
                                                        AI.AgreementStartDate,
                                                        AI.AgreementEndDate,
                                                        AI.AgreementPeriod,
                                                        AI.RenewalFrequency,
                                                        AI.RentDueDay,
                                                        AI.UOM,
                                                        LS.MonthNo,
                                                        LS.Year,
                                                        LS.Month,
                                                        LS.ReviewNo,
                                                        LS.CostPerUnit,
                                                        AI.TotalArea,
                                                        LS.TotalRentAmount,
                                                        AI.AdvanceAmount,
                                                        AI.AdvanceAdjustmentPeriod,
                                                        AiAdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount,
                                                        LIAdvancePC = LI.AdvancePC,
                                                        LIAdvanceAmount = LI.AdvanceAmount,
                                                        LI.AdvanceAdjustmentPC,
                                                        LS.AdvanceAdjustmentAmount,
                                                        AI.ReviewFrequency,
                                                        AI.ReviewPercentage,
                                                        AI.CashGLCode,
                                                        AI.BankGLCode,
                                                        AI.AdvanceGLCode,
                                                        AI.AdvanceAdjustmentGLCode,
                                                        AI.RentGLCode,
                                                        AI.ServiceChargeGLCode,
                                                        AI.TaxGLCode,
                                                        AI.VATGLCode,
                                                        AI.ServiceCharge,
                                                        AI.OnlineTower,
                                                        AI.GeneratorSpace,
                                                        AI.CarParking,
                                                        AiTaxPercentage = AI.TaxPercentage,
                                                        AiTaxAmount = AI.TaxAmount,
                                                        LI.TaxPC,
                                                        LS.TaxAmount,
                                                        AiVATPercentage = AI.VATPercentage,
                                                        AiVATAmount = AI.VATAmount,
                                                        LI.VATPC,
                                                        LS.VATAmount,
                                                        AiNetRentAmount = AI.NetRentAmount,
                                                        LI.RentPC,
                                                        LS.NetRentAmount,
                                                        LS.UserSLNo,
                                                        U.UserID,
                                                        LS.EntryDate,
                                                        LS.IsPosted,
                                                        LS.PostingID,
                                                        LS.PostingDate,
                                                        LS.PostingUserSLNo,
                                                        S.StatusName,
                                                        LI.VendorCode,
                                                        LI.LandlordName,
                                                        LS.IsBlock,
                                                        LS.BlockDate,
                                                        LS.BlockUserSLNo,
                                                        LS.IsPJPosted,
                                                        LS.PJPostingID,
                                                        LS.PJPostingDate,
                                                        LS.PJPostingUserSLNo,
                                                        AI.TaxType,
                                                        AI.VatType,
                                                        LI.ModeOfPayment,
                                                        LI.BankName,
                                                        LI.BranchName,
                                                        LI.ACNo,
                                                        AI.ClusterGroup,
                                                        LS.IsHoldBlockPayment,
                                                        AI.Special,
                                                        AI.CalculationMethod,
                                                        AI.IsIFRSEnable,
                                                        AI.IFRSEffectiveDate,
                                                    };
                        lstLandlordSchedule = queryLandlordSchedule.AsEnumerable().Select(x => new RMS.Models.LandlordScheduleDTO
                        {
                            LScheduleSLNo = x.LScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ReviewNo = x.ReviewNo,
                            CostPerUnit = x.CostPerUnit,
                            TotalArea = x.TotalArea,
                            RentAmount = x.CostPerUnit * x.TotalArea,
                            TotalRentAmount = x.TotalRentAmount,
                            AdvanceAmount = x.AdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AiAdvanceAdjustmentAmount = x.AiAdvanceAdjustmentAmount,
                            LIAdvancePC = x.LIAdvancePC,
                            LIAdvanceamount = x.LIAdvanceAmount,
                            AdvanceAdjustmentPC = x.AdvanceAdjustmentPC,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            ReviewFrequency = x.ReviewFrequency,
                            ReviewPercentage = x.ReviewPercentage,
                            CashGLCode = x.CashGLCode,
                            BankGLCode = x.BankGLCode,
                            AdvanceGLCode = x.AdvanceGLCode,
                            AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                            RentGLCode = x.RentGLCode,
                            ServiceChargeGLCode = x.ServiceChargeGLCode,
                            TaxGLCode = x.TaxGLCode,
                            VATGLCode = x.VATGLCode,
                            ServiceCharge = x.ServiceCharge,
                            OnlineTower = x.OnlineTower,
                            GeneratorSpace = x.GeneratorSpace,
                            CarParking = x.CarParking,
                            AiTaxPercentage = x.AiTaxPercentage,
                            AiTaxAmount = x.AiTaxAmount,
                            TaxPercentage = x.TaxPC,
                            TaxAmount = x.TaxAmount,
                            AiVATPercentage = x.AiVATPercentage,
                            AiVATAmount = x.AiVATAmount,
                            VATPercentage = x.VATPC,
                            VATAmount = x.VATAmount,
                            RentPercentage = x.RentPC,
                            NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                            LLRentAmount = x.NetRentAmount + x.AdvanceAdjustmentAmount,
                            LLArea = (x.TotalArea * x.RentPC) / 100,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate,
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            VendorCode = x.VendorCode,
                            LandlordName = x.LandlordName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            ModeOfPayment = x.ModeOfPayment,
                            BankName = x.BankName,
                            BranchName = x.BranchName,
                            ACNo = x.ACNo,
                            ClusterGroup = x.ClusterGroup,
                            IsHoldBlockPayment = x.IsHoldBlockPayment,
                            Special = x.Special,
                            CalculationMethod = x.CalculationMethod,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        }).ToList();
                        int SLNOLandlord = 0;
                        ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                        foreach (RMS.Models.LandlordScheduleDTO item in lstLandlordSchedule)
                        {
                            SLNOLandlord++;
                            item.SLNO = SLNOLandlord;
                            //==Termination Checked
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            //==AP Posted Checked
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            //==Payment Posted Checked
                            if (item.IsPJPosted == true)
                            {
                                item.PJPostText = "Posted";
                            }
                            else
                            {
                                //==Payment Blocked Checked
                                if (item.IsHoldBlockPayment == true)
                                {
                                    item.PJPostText = "Hold";
                                }
                                else
                                {
                                    item.PJPostText = "Unposted";
                                }
                            }
                            if (item.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { item.ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.RTGS) { item.ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.EFTN) { item.ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { item.ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.Cash) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { item.ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.Others) { item.ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                        return View(AgreementInfoPath.ReLandlordRentSchedule, lstLandlordSchedule);
                    }
                    else if (RentScheduleFor == 13)
                    {
                        var queryCostCenterSchedule = from CS in db.CostCenterSchedules
                                                      join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                      join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                      join CC in db.CostCenterInfos on CS.CCSLNo equals CC.CCSLNo
                                                      join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                      join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                      where CS.AgreementSLNo == AgreementSLNo
                                                      orderby CS.MonthNo ascending
                                                      select new
                                                      {
                                                          CS.CCScheduleSLNo,
                                                          CS.ScheduleDate,
                                                          CS.AgreementSLNo,
                                                          AI.PremiseTypeSLNo,
                                                          PT.PremiseType,
                                                          AI.PremiseName,
                                                          AI.AgreementCode,
                                                          AI.AliasCode,
                                                          AI.AgreementName,
                                                          AI.AgreementStartDate,
                                                          AI.AgreementEndDate,
                                                          AI.AgreementPeriod,
                                                          AI.RenewalFrequency,
                                                          AI.RentDueDay,
                                                          AI.UOM,
                                                          CS.MonthNo,
                                                          CS.Year,
                                                          CS.Month,
                                                          CS.ReviewNo,
                                                          CS.CostPerUnit,
                                                          AI.TotalArea,
                                                          CS.TotalRentAmount,
                                                          AI.AdvanceAmount,
                                                          AI.AdvanceAdjustmentPeriod,
                                                          AiAdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount,
                                                          CS.AdvanceAdjustmentAmount,
                                                          AI.ReviewFrequency,
                                                          AI.ReviewPercentage,
                                                          AI.CashGLCode,
                                                          AI.BankGLCode,
                                                          AI.AdvanceGLCode,
                                                          AI.AdvanceAdjustmentGLCode,
                                                          AI.RentGLCode,
                                                          AI.ServiceChargeGLCode,
                                                          AI.TaxGLCode,
                                                          AI.VATGLCode,
                                                          AI.ServiceCharge,
                                                          AI.OnlineTower,
                                                          AI.GeneratorSpace,
                                                          AI.CarParking,
                                                          AiTaxPercentage = AI.TaxPercentage,
                                                          AiTaxAmount = AI.TaxAmount,
                                                          CS.TaxAmount,
                                                          AiVATPercentage = AI.VATPercentage,
                                                          AiVATAmount = AI.VATAmount,
                                                          CS.VATAmount,
                                                          AiNetRentAmount = AI.NetRentAmount,
                                                          CS.NetRentAmount,
                                                          CS.UserSLNo,
                                                          U.UserID,
                                                          CS.EntryDate,
                                                          CS.IsPosted,
                                                          CS.PostingID,
                                                          CS.PostingDate,
                                                          CS.PostingUserSLNo,
                                                          S.StatusName,
                                                          CC.CCCode,
                                                          CC.CCName,
                                                          CC.SOLCode,
                                                          CC.SOLName,
                                                          CC.CCShareAllotment,
                                                          CS.IsBlock,
                                                          CS.BlockDate,
                                                          CS.BlockUserSLNo,
                                                          CS.IsPJPosted,
                                                          CS.PJPostingID,
                                                          CS.PJPostingDate,
                                                          CS.PJPostingUserSLNo,
                                                          AI.TaxType,
                                                          AI.VatType,
                                                          AI.ClusterGroup,
                                                          CS.IsHoldBlockPayment,
                                                          AI.Special,
                                                          AI.CalculationMethod,
                                                          AI.IsIFRSEnable,
                                                          AI.IFRSEffectiveDate,
                                                      };
                        lstCostCenterSchedule = queryCostCenterSchedule.AsEnumerable().Select(x => new RMS.Models.CostCenterScheduleDTO
                        {
                            CCScheduleSLNo = x.CCScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ReviewNo = x.ReviewNo,
                            CostPerUnit = x.CostPerUnit,
                            TotalArea = x.TotalArea,
                            RentAmount = x.CostPerUnit * x.TotalArea,
                            TotalRentAmount = x.TotalRentAmount,
                            AdvanceAmount = x.AdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AiAdvanceAdjustmentAmount = x.AiAdvanceAdjustmentAmount,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            ReviewFrequency = x.ReviewFrequency,
                            ReviewPercentage = x.ReviewPercentage,
                            CashGLCode = x.CashGLCode,
                            BankGLCode = x.BankGLCode,
                            AdvanceGLCode = x.AdvanceGLCode,
                            AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                            RentGLCode = x.RentGLCode,
                            ServiceChargeGLCode = x.ServiceChargeGLCode,
                            TaxGLCode = x.TaxGLCode,
                            VATGLCode = x.VATGLCode,
                            ServiceCharge = x.ServiceCharge,
                            OnlineTower = x.OnlineTower,
                            GeneratorSpace = x.GeneratorSpace,
                            CarParking = x.CarParking,
                            AiTaxPercentage = x.AiTaxPercentage,
                            AiTaxAmount = x.AiTaxAmount,
                            TaxAmount = x.TaxAmount,
                            AiVATPercentage = x.AiVATPercentage,
                            AiVATAmount = x.AiVATAmount,
                            VATAmount = x.VATAmount,
                            AiNetRentAmount = x.NetRentAmount,
                            NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                            CCRentAmount = x.NetRentAmount + x.AdvanceAdjustmentAmount,
                            CCArea = (x.TotalArea * x.CCShareAllotment) / 100,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate,
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            CCCode = x.CCCode,
                            CCName = x.CCName,
                            SOLCode = x.SOLCode,
                            SOLName = x.SOLName,
                            CCSharePercentage = x.CCShareAllotment,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            ClusterGroup = x.ClusterGroup,
                            IsHoldBlockPayment = x.IsHoldBlockPayment,
                            Special = x.Special,
                            CalculationMethod = x.CalculationMethod,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        }).ToList();
                        int SLNOCostCenter = 0;
                        foreach (RMS.Models.CostCenterScheduleDTO item in lstCostCenterSchedule)
                        {
                            SLNOCostCenter++;
                            item.SLNO = SLNOCostCenter;
                            //==Termination Checked
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            //==AP Posted Checked
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            //==Payment Posted Checked
                            if (item.IsPJPosted == true)
                            {
                                item.PJPostText = "Posted";
                            }
                            else
                            {
                                //==Payment Blocked Checked
                                if (item.IsHoldBlockPayment == true)
                                {
                                    item.PJPostText = "Hold";
                                }
                                else
                                {
                                    item.PJPostText = "Unposted";
                                }
                            }
                        }
                        return View(AgreementInfoPath.ReCostCenterRentSchedule, lstCostCenterSchedule);
                    }
                    else if (RentScheduleFor == 24)
                    {
                        var queryUtilitySchedule = from US in db.UtilitySchedules
                                                   join AI in db.AgreementInfos on US.AgreementSLNo equals AI.AgreementSLNo
                                                   join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                   join UI in db.UtilityInfos on US.UtilitySLNo equals UI.UtilitySLNo
                                                   join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                   join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                   where US.AgreementSLNo == AgreementSLNo
                                                   orderby US.MonthNo ascending
                                                   select new
                                                   {
                                                       US.UScheduleSLNo,
                                                       US.ScheduleDate,
                                                       US.AgreementSLNo,
                                                       AI.PremiseTypeSLNo,
                                                       PT.PremiseType,
                                                       AI.PremiseName,
                                                       AI.AgreementCode,
                                                       AI.AliasCode,
                                                       AI.AgreementName,
                                                       AI.AgreementStartDate,
                                                       AI.AgreementEndDate,
                                                       AI.AgreementPeriod,
                                                       AI.RenewalFrequency,
                                                       AI.RentDueDay,
                                                       AI.UOM,
                                                       US.MonthNo,
                                                       US.Year,
                                                       US.Month,
                                                       UI.ServiceChargePC,
                                                       US.ServiceChargeAmount,
                                                       UI.OnlineTowerPC,
                                                       US.OnlineTowerAmount,
                                                       UI.GeneratorSpacePC,
                                                       US.GeneratorSpaceAmount,
                                                       UI.CarParkingPC,
                                                       US.CarParkingAmount,
                                                       UI.TaxPC,
                                                       US.TaxAmount,
                                                       UI.VATPC,
                                                       US.VATAmount,
                                                       US.UserSLNo,
                                                       U.UserID,
                                                       US.EntryDate,
                                                       US.IsPosted,
                                                       US.PostingID,
                                                       US.PostingDate,
                                                       US.PostingUserSLNo,
                                                       S.StatusName,
                                                       UI.UtilityVendorCode,
                                                       UI.UtilityLandlordName,
                                                       US.IsBlock,
                                                       US.BlockDate,
                                                       US.BlockUserSLNo,
                                                       US.IsPJPosted,
                                                       US.PJPostingID,
                                                       US.PJPostingDate,
                                                       US.PJPostingUserSLNo,
                                                       AI.TaxType,
                                                       AI.VatType,
                                                       UI.UtilityModeOfPayment,
                                                       UI.UtilityBankName,
                                                       UI.UtilityBranchName,
                                                       UI.UtilityACNo,
                                                       AI.IsHoldBlockPayment,
                                                   };
                        lstUtilitySchedule = queryUtilitySchedule.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ServiceChargePC = x.ServiceChargePC,
                            ServiceChargeAmount = x.ServiceChargeAmount,
                            OnlineTowerPC = x.OnlineTowerPC,
                            OnlineTowerAmount = x.OnlineTowerAmount,
                            GeneratorSpacePC = x.GeneratorSpacePC,
                            GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                            CarParkingPC = x.CarParkingPC,
                            CarParkingAmount = x.CarParkingAmount,
                            UtilityTaxPC = x.TaxPC,
                            UtilityTaxAmount = x.TaxAmount,
                            UtilityVATPC = x.VATPC,
                            UtilityVATAmount = x.VATAmount,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate,
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            VendorCode = x.UtilityVendorCode,
                            LandlordName = x.UtilityLandlordName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            ModeOfPayment = x.UtilityModeOfPayment,
                            BankName = x.UtilityBankName,
                            BranchName = x.UtilityBranchName,
                            ACNo = x.UtilityACNo,
                            IsHoldBlockPayment = x.IsHoldBlockPayment,
                        }).ToList();
                        int SLNOUtility = 0;
                        ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                        foreach (RMS.Models.UtilityScheduleDTO item in lstUtilitySchedule)
                        {
                            SLNOUtility++;
                            item.SLNO = SLNOUtility;
                            //==Termination Checked
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            //==AP Posted Checked
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            //==Payment Posted Checked
                            if (item.IsPJPosted == true)
                            {
                                item.PJPostText = "Posted";
                            }
                            else
                            {
                                //==Payment Blocked Checked
                                if (item.IsHoldBlockPayment == true)
                                {
                                    item.PJPostText = "Hold";
                                }
                                else
                                {
                                    item.PJPostText = "Unposted";
                                }
                            }
                            if (item.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { item.ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.RTGS) { item.ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.EFTN) { item.ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { item.ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.Cash) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { item.ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.Others) { item.ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                        return View(AgreementInfoPath.ReUtilityRentSchedule, lstUtilitySchedule);
                    }
                    else
                    {
                        var queryIFRSSchedule = from IFRS in db.IFRSSchedules
                                                join AI in db.AgreementInfos on IFRS.AgreementSLNo equals AI.AgreementSLNo
                                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                where IFRS.AgreementSLNo == AgreementSLNo
                                                orderby IFRS.IFRSSLNo ascending
                                                select new
                                                {
                                                    IFRS.IFRSSLNo,
                                                    IFRS.ScheduleDate,
                                                    IFRS.AgreementSLNo,
                                                    AI.PremiseTypeSLNo,
                                                    PT.PremiseType,
                                                    AI.PremiseName,
                                                    AI.AgreementCode,
                                                    AI.AliasCode,
                                                    AI.AgreementName,
                                                    AI.AgreementStartDate,
                                                    AI.AgreementEndDate,
                                                    AI.AgreementPeriod,
                                                    AI.RenewalFrequency,
                                                    AI.RentDueDay,
                                                    AI.UOM,
                                                    IFRS.MonthNo,
                                                    IFRS.Year,
                                                    IFRS.Month,
                                                    IFRS.ReviewNo,
                                                    IFRS.CostPerUnit,
                                                    AI.TotalArea,
                                                    AI.SecurityDepositAmount,
                                                    AI.AdvanceAmount,
                                                    AI.AdvanceAdjustmentPeriod,
                                                    IFRS.AdvanceAdjustmentAmount,
                                                    IFRS.PaymentAmount,
                                                    IFRS.DiscountFactor,
                                                    IFRS.PresentValue,
                                                    IFRS.OBLeaseLiability,
                                                    IFRS.LeasePayment,
                                                    IFRS.InteresetExpense,
                                                    IFRS.SettlementofLeaseLiabilities,
                                                    IFRS.CBLeaseLiability,
                                                    IFRS.OBROU,
                                                    IFRS.Depreciation,
                                                    IFRS.CBROU,
                                                    IFRS.OBAdvance,
                                                    IFRS.AdvanceDepreciation,
                                                    IFRS.CBAdvance,
                                                    IFRS.UserSLNo,
                                                    U.UserID,
                                                    IFRS.EntryDate,
                                                    IFRS.IsBlock,
                                                    IFRS.BlockDate,
                                                    IFRS.BlockUserSLNo,
                                                    AI.TaxType,
                                                    AI.VatType,
                                                    AI.ClusterGroup,
                                                    AI.IsHoldBlockPayment,
                                                    AI.IsIFRSEnable,
                                                    AI.IFRSEffectiveDate,
                                                    AI.BorrowingRate,
                                                    AI.CorporateTaxRate,
                                                    AI.CalculationMethod,
                                                };
                        lstIFRSSchedule = queryIFRSSchedule.AsEnumerable().Select(x => new RMS.Models.IFRSScheduleDTO
                        {
                            IFRSSLNo = x.IFRSSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ReviewNo = x.ReviewNo,
                            CostPerUnit = x.CostPerUnit,
                            TotalArea = x.TotalArea,
                            RentAmount = x.CostPerUnit * x.TotalArea,
                            SecurityDepositAmount = x.SecurityDepositAmount,
                            AdvanceAmount = x.AdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            PaymentAmount = x.PaymentAmount,
                            DiscountFactor = x.DiscountFactor,
                            PresentValue = x.PresentValue,
                            OBLeaseLiability = x.OBLeaseLiability,
                            LeasePayment = x.LeasePayment,
                            InteresetExpense = x.InteresetExpense,
                            SettlementofLeaseLiabilities = x.SettlementofLeaseLiabilities,
                            CBLeaseLiability = x.CBLeaseLiability,
                            OBROU = x.OBROU,
                            Depreciation = x.Depreciation,
                            CBROU = x.CBROU,
                            OBAdvance = x.OBAdvance,
                            AdvanceDepreciation = x.AdvanceDepreciation,
                            CBAdvance = x.CBAdvance,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            ClusterGroup = x.ClusterGroup,
                            IsHoldBlockPayment = x.IsHoldBlockPayment,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                            BorrowingRate = x.BorrowingRate,
                            CorporateTaxRate = x.CorporateTaxRate,
                            CalculationMethod = x.CalculationMethod,
                        }).ToList();
                        int SLNOIFRS = 0;
                        int IFRSPeriodCount = db.IFRSSchedules.Where(x => x.AgreementSLNo == AgreementSLNo).Count();
                        double AdvanceAmountOB = db.IFRSSchedules.Where(x => x.AgreementSLNo == AgreementSLNo).Sum(x => (double?)x.AdvanceAdjustmentAmount) ?? 0;
                        double PV = 0;
                        double DeferredSD_CB = 0;
                        double ROUAssetSD_DEP = 0;
                        double ROUAssetSD_CB = 0;
                        double DTTaxBaseAmountRent_Expense = 0;
                        double DT_Impact_PV = 0;
                        foreach (RMS.Models.IFRSScheduleDTO item in lstIFRSSchedule)
                        {
                            SLNOIFRS++;
                            item.SLNO = SLNOIFRS;
                            if (item.IsBlock == false) { item.BlockText = "Open"; }
                            else { item.BlockText = "Terminated"; }
                            item.TotalRentAmount = db.ContractSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == item.Year && x.Month == item.Month).Select(x => x.TotalRentAmount).SingleOrDefault();
                            if (item.MonthNo == 1)
                            {
                                item.AdvanceAmountOB = AdvanceAmountOB;
                                item.AdvanceAmountCB = item.AdvanceAmountOB - item.AdvanceAdjustmentAmount;
                                AdvanceAmountOB = item.AdvanceAmountCB;
                                #region //Calculation Method
                                //Current Month PV1 Calculation Method
                                if (item.CalculationMethod == "Current Month")
                                {
                                    PV = db.BorrowingRateDetails.Where(x => x.MonthNo == IFRSPeriodCount && x.AgreementSLNo == AgreementSLNo).Select(x => x.PV1).SingleOrDefault();
                                }
                                //Following Month PV2 Calculation Method
                                else if (item.CalculationMethod == "Following Month")
                                {
                                    PV = db.BorrowingRateDetails.Where(x => x.MonthNo == IFRSPeriodCount && x.AgreementSLNo == AgreementSLNo).Select(x => x.PV2).SingleOrDefault();
                                }
                                #endregion
                                //==Step 1 Deferred SD
                                item.DeferredSD_OB = item.SecurityDepositAmount * PV;
                                item.DeferredSD_Interest = item.DeferredSD_OB * (item.BorrowingRate / 100) / 12;
                                item.DeferredSD_CB = item.DeferredSD_OB + item.DeferredSD_Interest;
                                DeferredSD_CB = item.DeferredSD_CB;
                                //==Step 2 ROU Asset SD
                                item.ROUAssetSD_OB = item.SecurityDepositAmount - item.DeferredSD_OB;
                                item.ROUAssetSD_DEP = item.ROUAssetSD_OB / IFRSPeriodCount;
                                ROUAssetSD_DEP = item.ROUAssetSD_DEP;
                                item.ROUAssetSD_CB = item.ROUAssetSD_OB - item.ROUAssetSD_DEP;
                                ROUAssetSD_CB = item.ROUAssetSD_CB;
                                //Step 3 ROU Asset Total
                                item.ROUAssetTotal_OB = item.OBROU + item.OBAdvance + item.ROUAssetSD_OB;
                                item.ROUAssetTotal_Dep = item.Depreciation + item.AdvanceDepreciation + item.ROUAssetSD_DEP;
                                item.ROUAssetTotal_CB = item.CBROU + item.CBAdvance + item.ROUAssetSD_CB;
                                //Step 4 - Deferred Tax Impact
                                item.DTCarringAmountROUAssetTotal_CB = item.ROUAssetTotal_CB;
                                item.DTCarringAmount_Lease = item.CBLeaseLiability;
                                item.DTCoporateTaxRate = item.CorporateTaxRate;
                                item.DTImpact = (item.DTCarringAmountROUAssetTotal_CB - item.DTCarringAmount_Lease - item.AdvanceAmountCB) * (item.CorporateTaxRate / 100);
                                item.DT_IncomeExpense = item.DTImpact;
                                DT_Impact_PV = item.DTImpact;
                            }
                            else
                            {
                                item.AdvanceAmountOB = AdvanceAmountOB;
                                item.AdvanceAmountCB = item.AdvanceAmountOB - item.AdvanceAdjustmentAmount;
                                AdvanceAmountOB = item.AdvanceAmountCB;
                                //==Step 1 Deferred SD
                                item.DeferredSD_OB = DeferredSD_CB;
                                item.DeferredSD_Interest = item.DeferredSD_OB * (item.BorrowingRate / 100) / 12;
                                if (item.CalculationMethod == "Current Month" && item.MonthNo == lstIFRSSchedule.Count())
                                {
                                    item.DeferredSD_Interest = 0;
                                }
                                item.DeferredSD_CB = item.DeferredSD_OB + item.DeferredSD_Interest;
                                DeferredSD_CB = item.DeferredSD_CB;
                                //==Step 2 ROU Asset SD
                                item.ROUAssetSD_OB = ROUAssetSD_CB;
                                item.ROUAssetSD_DEP = ROUAssetSD_DEP;
                                item.ROUAssetSD_CB = item.ROUAssetSD_OB - item.ROUAssetSD_DEP;
                                ROUAssetSD_CB = item.ROUAssetSD_CB;
                                //Step 3 ROU Asset Total
                                item.ROUAssetTotal_OB = item.OBROU + item.OBAdvance + item.ROUAssetSD_OB;
                                item.ROUAssetTotal_Dep = item.Depreciation + item.AdvanceDepreciation + item.ROUAssetSD_DEP;
                                item.ROUAssetTotal_CB = item.CBROU + item.CBAdvance + item.ROUAssetSD_CB;
                                //Step 4 - Deferred Tax Impact
                                item.DTCarringAmountROUAssetTotal_CB = item.ROUAssetTotal_CB;
                                item.DTCarringAmount_Lease = item.CBLeaseLiability;
                                item.DTCoporateTaxRate = item.CorporateTaxRate;
                                item.DTImpact = (item.DTCarringAmountROUAssetTotal_CB - item.DTCarringAmount_Lease - item.AdvanceAmountCB) * (item.CorporateTaxRate / 100);
                                item.DT_IncomeExpense = item.DTImpact - DT_Impact_PV;
                                DT_Impact_PV = item.DTImpact;
                            }
                        }
                        return View(AgreementInfoPath.ReIFRSLeaseSchedule, lstIFRSSchedule);
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectModRentSchedule(int AgreementSLNo, int RentScheduleFor, int ShowReport)
        {
            TempData.Remove("AgreementSLNo");
            TempData.Remove("RentScheduleFor");
            TempData.Add("AgreementSLNo", AgreementSLNo);
            TempData.Add("RentScheduleFor", RentScheduleFor);
            TempData.Remove("ShowReport");
            TempData.Add("ShowReport", ShowReport);
            return RedirectToAction("ModRentSchedule");
        }

        [HttpGet]
        public ActionResult ModRentSchedule()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strAgreementSLNo = TempData["AgreementSLNo"];
                    if (strAgreementSLNo == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int AgreementSLNo = Convert.ToInt32(strAgreementSLNo);
                    var strRentScheduleFor = TempData["RentScheduleFor"];
                    if (strRentScheduleFor == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int RentScheduleFor = Convert.ToInt32(strRentScheduleFor);
                    var strShowReport = TempData["ShowReport"];
                    if (strShowReport == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int ShowReport = Convert.ToInt32(strShowReport);
                    ViewBag.ShowReport = ShowReport;
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    if (RentScheduleFor == 14)
                    {
                        ViewBag.URLPath = "AgreementInfo/PVLeaseList?ViewID=" + RentScheduleFor;
                    }
                    else
                    {
                        if (ShowReport == 1)
                        {
                            ViewBag.URLPath = "AgreementInfo/RedirectModAgreementIndex?ViewID=" + RentScheduleFor;
                        }
                        else
                        {
                            ViewBag.URLPath = "AgreementInfo/RedirectReAgreementIndex?ViewID=5";
                        }
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    IList<RMS.Models.ContractScheduleDTO> lstContractSchedule = new List<RMS.Models.ContractScheduleDTO>();
                    IList<RMS.Models.IFRSScheduleDTO> lstIFRSSchedule = new List<RMS.Models.IFRSScheduleDTO>();
                    IList<RMS.Models.LandlordScheduleDTO> lstLandlordSchedule = new List<RMS.Models.LandlordScheduleDTO>();
                    IList<RMS.Models.CostCenterScheduleDTO> lstCostCenterSchedule = new List<RMS.Models.CostCenterScheduleDTO>();
                    IList<RMS.Models.UtilityScheduleDTO> lstUtilitySchedule = new List<RMS.Models.UtilityScheduleDTO>();
                    if (RentScheduleFor == 11)
                    {
                        var queryContractSchedule = from CS in db.ContractSchedules
                                                    join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                    join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                    join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                    where CS.AgreementSLNo == AgreementSLNo
                                                    orderby CS.MonthNo ascending
                                                    select new
                                                    {
                                                        CS.ContractScheduleSLNo,
                                                        CS.ScheduleDate,
                                                        CS.AgreementSLNo,
                                                        AI.PremiseTypeSLNo,
                                                        PT.PremiseType,
                                                        AI.PremiseName,
                                                        AI.AgreementCode,
                                                        AI.AliasCode,
                                                        AI.AgreementName,
                                                        AI.AgreementStartDate,
                                                        AI.AgreementEndDate,
                                                        AI.AgreementPeriod,
                                                        AI.RenewalFrequency,
                                                        AI.RentDueDay,
                                                        AI.UOM,
                                                        CS.MonthNo,
                                                        CS.Year,
                                                        CS.Month,
                                                        CS.ReviewNo,
                                                        CS.CostPerUnit,
                                                        AI.TotalArea,
                                                        CS.TotalRentAmount,
                                                        AI.AdvanceAmount,
                                                        AI.AdditionalAdvanceAmount,
                                                        AI.AdvanceAdjustmentPeriod,
                                                        CS.AdvanceAdjustmentAmount,
                                                        AI.ReviewFrequency,
                                                        AI.ReviewPercentage,
                                                        AI.CashGLCode,
                                                        AI.BankGLCode,
                                                        AI.AdvanceGLCode,
                                                        AI.AdvanceAdjustmentGLCode,
                                                        AI.RentGLCode,
                                                        AI.ServiceChargeGLCode,
                                                        AI.TaxGLCode,
                                                        AI.VATGLCode,
                                                        AI.ServiceCharge,
                                                        AI.OnlineTower,
                                                        AI.GeneratorSpace,
                                                        AI.CarParking,
                                                        AI.TaxPercentage,
                                                        CS.TaxAmount,
                                                        AI.VATPercentage,
                                                        CS.VATAmount,
                                                        CS.NetRentAmount,
                                                        CS.UserSLNo,
                                                        U.UserID,
                                                        CS.EntryDate,
                                                        CS.IsPosted,
                                                        CS.PostingID,
                                                        CS.PostingDate,
                                                        CS.PostingUserSLNo,
                                                        S.StatusName,
                                                        CS.IsBlock,
                                                        CS.BlockDate,
                                                        CS.BlockUserSLNo,
                                                        CS.IsPJPosted,
                                                        CS.PJPostingID,
                                                        CS.PJPostingDate,
                                                        CS.PJPostingUserSLNo,
                                                        AI.TaxType,
                                                        AI.VatType,
                                                        AI.ClusterGroup,
                                                        CS.IsHoldBlockPayment,
                                                        AI.CalculationMethod,
                                                        AI.IsIFRSEnable,
                                                        AI.IFRSEffectiveDate,
                                                    };
                        lstContractSchedule = queryContractSchedule.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                        {
                            ContractScheduleSLNo = x.ContractScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ReviewNo = x.ReviewNo,
                            CostPerUnit = x.CostPerUnit,
                            TotalArea = x.TotalArea,
                            RentAmount = x.CostPerUnit * x.TotalArea,
                            TotalRentAmount = x.TotalRentAmount,
                            AdvanceAmount = x.AdvanceAmount + x.AdditionalAdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            ReviewFrequency = x.ReviewFrequency,
                            ReviewPercentage = x.ReviewPercentage,
                            CashGLCode = x.CashGLCode,
                            BankGLCode = x.BankGLCode,
                            AdvanceGLCode = x.AdvanceGLCode,
                            AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                            RentGLCode = x.RentGLCode,
                            ServiceChargeGLCode = x.ServiceChargeGLCode,
                            TaxGLCode = x.TaxGLCode,
                            VATGLCode = x.VATGLCode,
                            ServiceCharge = x.ServiceCharge,
                            OnlineTower = x.OnlineTower,
                            GeneratorSpace = x.GeneratorSpace,
                            CarParking = x.CarParking,
                            TaxPercentage = x.TaxPercentage,
                            TaxAmount = x.TaxAmount,
                            VATPercentage = x.VATPercentage,
                            VATAmount = x.VATAmount,
                            NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString(),
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            ClusterGroup = x.ClusterGroup,
                            IsHoldBlockPayment = x.IsHoldBlockPayment,
                            CalculationMethod = x.CalculationMethod,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        }).ToList();
                        int SLNOContract = 0;
                        double AdvanceAmountOB = 0;
                        foreach (RMS.Models.ContractScheduleDTO item in lstContractSchedule)
                        {
                            SLNOContract++;
                            item.SLNO = SLNOContract;
                            if (item.MonthNo == 1)
                            {
                                item.AdvanceAmountOB = item.AdvanceAmount;
                                item.AdvanceAmountCB = item.AdvanceAmountOB - item.AdvanceAdjustmentAmount;
                                AdvanceAmountOB = item.AdvanceAmountCB;
                            }
                            else
                            {
                                item.AdvanceAmountOB = AdvanceAmountOB;
                                item.AdvanceAmountCB = item.AdvanceAmountOB - item.AdvanceAdjustmentAmount;
                                AdvanceAmountOB = item.AdvanceAmountCB;
                            }
                            //==Termination Checked
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            //==AP Posted Checked
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            //==Payment Posted Checked
                            if (item.IsPJPosted == true)
                            {
                                item.PJPostText = "Posted";
                            }
                            else
                            {
                                //==Payment Blocked Checked
                                if (item.IsHoldBlockPayment == true)
                                {
                                    item.PJPostText = "Hold";
                                }
                                else
                                {
                                    item.PJPostText = "Unposted";
                                }
                            }
                        }
                        return View(AgreementInfoPath.ModAgreementRentSchedule, lstContractSchedule);
                    }
                    else if (RentScheduleFor == 12)
                    {
                        var queryLandlordSchedule = from LS in db.LandlordSchedules
                                                    join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                    join LI in db.LandlordInfos on LS.LandlordSLNo equals LI.LandlordSLNo
                                                    join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                    join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                    where LS.AgreementSLNo == AgreementSLNo
                                                    orderby LS.MonthNo ascending
                                                    select new
                                                    {
                                                        LS.LScheduleSLNo,
                                                        LS.ScheduleDate,
                                                        LS.AgreementSLNo,
                                                        AI.PremiseTypeSLNo,
                                                        PT.PremiseType,
                                                        AI.PremiseName,
                                                        AI.AgreementCode,
                                                        AI.AliasCode,
                                                        AI.AgreementName,
                                                        AI.AgreementStartDate,
                                                        AI.AgreementEndDate,
                                                        AI.AgreementPeriod,
                                                        AI.RenewalFrequency,
                                                        AI.RentDueDay,
                                                        AI.UOM,
                                                        LS.MonthNo,
                                                        LS.Year,
                                                        LS.Month,
                                                        LS.ReviewNo,
                                                        LS.CostPerUnit,
                                                        AI.TotalArea,
                                                        LS.TotalRentAmount,
                                                        AI.AdvanceAmount,
                                                        AI.AdditionalAdvanceAmount,
                                                        AI.AdvanceAdjustmentPeriod,
                                                        AiAdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount,
                                                        LIAdvancePC = LI.AdvancePC,
                                                        LIAdvanceAmount = LI.AdvanceAmount,
                                                        LI.AdvanceAdjustmentPC,
                                                        LS.AdvanceAdjustmentAmount,
                                                        AI.ReviewFrequency,
                                                        AI.ReviewPercentage,
                                                        AI.CashGLCode,
                                                        AI.BankGLCode,
                                                        AI.AdvanceGLCode,
                                                        AI.AdvanceAdjustmentGLCode,
                                                        AI.RentGLCode,
                                                        AI.ServiceChargeGLCode,
                                                        AI.TaxGLCode,
                                                        AI.VATGLCode,
                                                        AI.ServiceCharge,
                                                        AI.OnlineTower,
                                                        AI.GeneratorSpace,
                                                        AI.CarParking,
                                                        AiTaxPercentage = AI.TaxPercentage,
                                                        AiTaxAmount = AI.TaxAmount,
                                                        LI.TaxPC,
                                                        LS.TaxAmount,
                                                        AiVATPercentage = AI.VATPercentage,
                                                        AiVATAmount = AI.VATAmount,
                                                        LI.VATPC,
                                                        LS.VATAmount,
                                                        AiNetRentAmount = AI.NetRentAmount,
                                                        LI.RentPC,
                                                        LS.NetRentAmount,
                                                        LS.UserSLNo,
                                                        U.UserID,
                                                        LS.EntryDate,
                                                        LS.IsPosted,
                                                        LS.PostingID,
                                                        LS.PostingDate,
                                                        LS.PostingUserSLNo,
                                                        S.StatusName,
                                                        LI.VendorCode,
                                                        LI.LandlordName,
                                                        LS.IsBlock,
                                                        LS.BlockDate,
                                                        LS.BlockUserSLNo,
                                                        LS.IsPJPosted,
                                                        LS.PJPostingID,
                                                        LS.PJPostingDate,
                                                        LS.PJPostingUserSLNo,
                                                        AI.TaxType,
                                                        AI.VatType,
                                                        LI.ModeOfPayment,
                                                        LI.BankName,
                                                        LI.BranchName,
                                                        LI.ACNo,
                                                        AI.ClusterGroup,
                                                        LS.IsHoldBlockPayment,
                                                        AI.CalculationMethod,
                                                        AI.IsIFRSEnable,
                                                        AI.IFRSEffectiveDate,
                                                    };
                        lstLandlordSchedule = queryLandlordSchedule.AsEnumerable().Select(x => new RMS.Models.LandlordScheduleDTO
                        {
                            LScheduleSLNo = x.LScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ReviewNo = x.ReviewNo,
                            CostPerUnit = x.CostPerUnit,
                            TotalArea = x.TotalArea,
                            RentAmount = x.CostPerUnit * x.TotalArea,
                            TotalRentAmount = x.TotalRentAmount,
                            AdvanceAmount = x.AdvanceAmount + x.AdditionalAdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AiAdvanceAdjustmentAmount = x.AiAdvanceAdjustmentAmount,
                            LIAdvancePC = x.LIAdvancePC,
                            LIAdvanceamount = x.LIAdvanceAmount,
                            AdvanceAdjustmentPC = x.AdvanceAdjustmentPC,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            ReviewFrequency = x.ReviewFrequency,
                            ReviewPercentage = x.ReviewPercentage,
                            CashGLCode = x.CashGLCode,
                            BankGLCode = x.BankGLCode,
                            AdvanceGLCode = x.AdvanceGLCode,
                            AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                            RentGLCode = x.RentGLCode,
                            ServiceChargeGLCode = x.ServiceChargeGLCode,
                            TaxGLCode = x.TaxGLCode,
                            VATGLCode = x.VATGLCode,
                            ServiceCharge = x.ServiceCharge,
                            OnlineTower = x.OnlineTower,
                            GeneratorSpace = x.GeneratorSpace,
                            CarParking = x.CarParking,
                            AiTaxPercentage = x.AiTaxPercentage,
                            AiTaxAmount = x.AiTaxAmount,
                            TaxPercentage = x.TaxPC,
                            TaxAmount = x.TaxAmount,
                            AiVATPercentage = x.AiVATPercentage,
                            AiVATAmount = x.AiVATAmount,
                            VATPercentage = x.VATPC,
                            VATAmount = x.VATAmount,
                            RentPercentage = x.RentPC,
                            NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                            LLRentAmount = x.NetRentAmount + x.AdvanceAdjustmentAmount,
                            LLArea = (x.TotalArea * x.RentPC) / 100,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate,
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            VendorCode = x.VendorCode,
                            LandlordName = x.LandlordName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            ModeOfPayment = x.ModeOfPayment,
                            BankName = x.BankName,
                            BranchName = x.BranchName,
                            ACNo = x.ACNo,
                            ClusterGroup = x.ClusterGroup,
                            IsHoldBlockPayment = x.IsHoldBlockPayment,
                            CalculationMethod = x.CalculationMethod,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        }).ToList();
                        int SLNOLandlord = 0;
                        ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                        foreach (RMS.Models.LandlordScheduleDTO item in lstLandlordSchedule)
                        {
                            SLNOLandlord++;
                            item.SLNO = SLNOLandlord;
                            //==Termination Checked
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            //==AP Posted Checked
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            //==Payment Posted Checked
                            if (item.IsPJPosted == true)
                            {
                                item.PJPostText = "Posted";
                            }
                            else
                            {
                                //==Payment Blocked Checked
                                if (item.IsHoldBlockPayment == true)
                                {
                                    item.PJPostText = "Hold";
                                }
                                else
                                {
                                    item.PJPostText = "Unposted";
                                }
                            }
                            if (item.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { item.ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.RTGS) { item.ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.EFTN) { item.ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { item.ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.Cash) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { item.ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.Others) { item.ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                        return View(AgreementInfoPath.ModLandlordRentSchedule, lstLandlordSchedule);
                    }
                    else if (RentScheduleFor == 13)
                    {
                        var queryCostCenterSchedule = from CS in db.CostCenterSchedules
                                                      join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                      join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                      join CC in db.CostCenterInfos on CS.CCSLNo equals CC.CCSLNo
                                                      join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                      join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                      where CS.AgreementSLNo == AgreementSLNo
                                                      orderby CS.MonthNo ascending
                                                      select new
                                                      {
                                                          CS.CCScheduleSLNo,
                                                          CS.ScheduleDate,
                                                          CS.AgreementSLNo,
                                                          AI.PremiseTypeSLNo,
                                                          PT.PremiseType,
                                                          AI.PremiseName,
                                                          AI.AgreementCode,
                                                          AI.AliasCode,
                                                          AI.AgreementName,
                                                          AI.AgreementStartDate,
                                                          AI.AgreementEndDate,
                                                          AI.AgreementPeriod,
                                                          AI.RenewalFrequency,
                                                          AI.RentDueDay,
                                                          AI.UOM,
                                                          CS.MonthNo,
                                                          CS.Year,
                                                          CS.Month,
                                                          CS.ReviewNo,
                                                          CS.CostPerUnit,
                                                          AI.TotalArea,
                                                          CS.TotalRentAmount,
                                                          AI.AdvanceAmount,
                                                          AI.AdditionalAdvanceAmount,
                                                          AI.AdvanceAdjustmentPeriod,
                                                          AiAdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount,
                                                          CS.AdvanceAdjustmentAmount,
                                                          AI.ReviewFrequency,
                                                          AI.ReviewPercentage,
                                                          AI.CashGLCode,
                                                          AI.BankGLCode,
                                                          AI.AdvanceGLCode,
                                                          AI.AdvanceAdjustmentGLCode,
                                                          AI.RentGLCode,
                                                          AI.ServiceChargeGLCode,
                                                          AI.TaxGLCode,
                                                          AI.VATGLCode,
                                                          AI.ServiceCharge,
                                                          AI.OnlineTower,
                                                          AI.GeneratorSpace,
                                                          AI.CarParking,
                                                          AiTaxPercentage = AI.TaxPercentage,
                                                          AiTaxAmount = AI.TaxAmount,
                                                          CS.TaxAmount,
                                                          AiVATPercentage = AI.VATPercentage,
                                                          AiVATAmount = AI.VATAmount,
                                                          CS.VATAmount,
                                                          AiNetRentAmount = AI.NetRentAmount,
                                                          CS.NetRentAmount,
                                                          CS.UserSLNo,
                                                          U.UserID,
                                                          CS.EntryDate,
                                                          CS.IsPosted,
                                                          CS.PostingID,
                                                          CS.PostingDate,
                                                          CS.PostingUserSLNo,
                                                          S.StatusName,
                                                          CC.CCCode,
                                                          CC.CCName,
                                                          CC.SOLCode,
                                                          CC.SOLName,
                                                          CC.CCShareAllotment,
                                                          CS.IsBlock,
                                                          CS.BlockDate,
                                                          CS.BlockUserSLNo,
                                                          CS.IsPJPosted,
                                                          CS.PJPostingID,
                                                          CS.PJPostingDate,
                                                          CS.PJPostingUserSLNo,
                                                          AI.TaxType,
                                                          AI.VatType,
                                                          AI.ClusterGroup,
                                                          CS.IsHoldBlockPayment,
                                                          AI.CalculationMethod,
                                                          AI.IsIFRSEnable,
                                                          AI.IFRSEffectiveDate,
                                                      };
                        lstCostCenterSchedule = queryCostCenterSchedule.AsEnumerable().Select(x => new RMS.Models.CostCenterScheduleDTO
                        {
                            CCScheduleSLNo = x.CCScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ReviewNo = x.ReviewNo,
                            CostPerUnit = x.CostPerUnit,
                            TotalArea = x.TotalArea,
                            RentAmount = x.CostPerUnit * x.TotalArea,
                            TotalRentAmount = x.TotalRentAmount,
                            AdvanceAmount = x.AdvanceAmount + x.AdditionalAdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AiAdvanceAdjustmentAmount = x.AiAdvanceAdjustmentAmount,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            ReviewFrequency = x.ReviewFrequency,
                            ReviewPercentage = x.ReviewPercentage,
                            CashGLCode = x.CashGLCode,
                            BankGLCode = x.BankGLCode,
                            AdvanceGLCode = x.AdvanceGLCode,
                            AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                            RentGLCode = x.RentGLCode,
                            ServiceChargeGLCode = x.ServiceChargeGLCode,
                            TaxGLCode = x.TaxGLCode,
                            VATGLCode = x.VATGLCode,
                            ServiceCharge = x.ServiceCharge,
                            OnlineTower = x.OnlineTower,
                            GeneratorSpace = x.GeneratorSpace,
                            CarParking = x.CarParking,
                            AiTaxPercentage = x.AiTaxPercentage,
                            AiTaxAmount = x.AiTaxAmount,
                            TaxAmount = x.TaxAmount,
                            AiVATPercentage = x.AiVATPercentage,
                            AiVATAmount = x.AiVATAmount,
                            VATAmount = x.VATAmount,
                            AiNetRentAmount = x.NetRentAmount,
                            NetRentAmount = x.NetRentAmount - (x.TaxAmount + x.VATAmount),
                            CCRentAmount = x.NetRentAmount + x.AdvanceAdjustmentAmount,
                            CCArea = (x.TotalArea * x.CCShareAllotment) / 100,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate,
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            CCCode = x.CCCode,
                            CCName = x.CCName,
                            SOLCode = x.SOLCode,
                            SOLName = x.SOLName,
                            CCSharePercentage = x.CCShareAllotment,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            ClusterGroup = x.ClusterGroup,
                            IsHoldBlockPayment = x.IsHoldBlockPayment,
                            CalculationMethod = x.CalculationMethod,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        }).ToList();
                        int SLNOCostCenter = 0;
                        foreach (RMS.Models.CostCenterScheduleDTO item in lstCostCenterSchedule)
                        {
                            SLNOCostCenter++;
                            item.SLNO = SLNOCostCenter;
                            //==Termination Checked
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            //==AP Posted Checked
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            //==Payment Posted Checked
                            if (item.IsPJPosted == true)
                            {
                                item.PJPostText = "Posted";
                            }
                            else
                            {
                                //==Payment Blocked Checked
                                if (item.IsHoldBlockPayment == true)
                                {
                                    item.PJPostText = "Hold";
                                }
                                else
                                {
                                    item.PJPostText = "Unposted";
                                }
                            }
                        }
                        return View(AgreementInfoPath.ModCostCenterRentSchedule, lstCostCenterSchedule);
                    }
                    else if (RentScheduleFor == 24)
                    {
                        var queryUtilitySchedule = from US in db.UtilitySchedules
                                                   join AI in db.AgreementInfos on US.AgreementSLNo equals AI.AgreementSLNo
                                                   join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                   join UI in db.UtilityInfos on US.UtilitySLNo equals UI.UtilitySLNo
                                                   join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                   join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                   where US.AgreementSLNo == AgreementSLNo
                                                   orderby US.UScheduleSLNo ascending
                                                   select new
                                                   {
                                                       US.UScheduleSLNo,
                                                       US.ScheduleDate,
                                                       US.AgreementSLNo,
                                                       AI.PremiseTypeSLNo,
                                                       PT.PremiseType,
                                                       AI.PremiseName,
                                                       AI.AgreementCode,
                                                       AI.AliasCode,
                                                       AI.AgreementName,
                                                       AI.AgreementStartDate,
                                                       AI.AgreementEndDate,
                                                       AI.AgreementPeriod,
                                                       AI.RenewalFrequency,
                                                       AI.RentDueDay,
                                                       AI.UOM,
                                                       US.MonthNo,
                                                       US.Year,
                                                       US.Month,
                                                       UI.ServiceChargePC,
                                                       US.ServiceChargeAmount,
                                                       UI.OnlineTowerPC,
                                                       US.OnlineTowerAmount,
                                                       UI.GeneratorSpacePC,
                                                       US.GeneratorSpaceAmount,
                                                       UI.CarParkingPC,
                                                       US.CarParkingAmount,
                                                       UI.TaxPC,
                                                       US.TaxAmount,
                                                       UI.VATPC,
                                                       US.VATAmount,
                                                       US.UserSLNo,
                                                       U.UserID,
                                                       US.EntryDate,
                                                       US.IsPosted,
                                                       US.PostingID,
                                                       US.PostingDate,
                                                       US.PostingUserSLNo,
                                                       S.StatusName,
                                                       UI.UtilityVendorCode,
                                                       UI.UtilityLandlordName,
                                                       US.IsBlock,
                                                       US.BlockDate,
                                                       US.BlockUserSLNo,
                                                       US.IsPJPosted,
                                                       US.PJPostingID,
                                                       US.PJPostingDate,
                                                       US.PJPostingUserSLNo,
                                                       AI.TaxType,
                                                       AI.VatType,
                                                       UI.UtilityModeOfPayment,
                                                       UI.UtilityBankName,
                                                       UI.UtilityBranchName,
                                                       UI.UtilityACNo,
                                                       AI.IsHoldBlockPayment,
                                                   };
                        lstUtilitySchedule = queryUtilitySchedule.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ServiceChargePC = x.ServiceChargePC,
                            ServiceChargeAmount = x.ServiceChargeAmount,
                            OnlineTowerPC = x.OnlineTowerPC,
                            OnlineTowerAmount = x.OnlineTowerAmount,
                            GeneratorSpacePC = x.GeneratorSpacePC,
                            GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                            CarParkingPC = x.CarParkingPC,
                            CarParkingAmount = x.CarParkingAmount,
                            UtilityTaxPC = x.TaxPC,
                            UtilityTaxAmount = x.TaxAmount,
                            UtilityVATPC = x.VATPC,
                            UtilityVATAmount = x.VATAmount,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate,
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            VendorCode = x.UtilityVendorCode,
                            LandlordName = x.UtilityLandlordName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            ModeOfPayment = x.UtilityModeOfPayment,
                            BankName = x.UtilityBankName,
                            BranchName = x.UtilityBranchName,
                            ACNo = x.UtilityACNo,
                            IsHoldBlockPayment = x.IsHoldBlockPayment,
                        }).ToList();
                        int SLNOUtility = 0;
                        ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                        foreach (RMS.Models.UtilityScheduleDTO item in lstUtilitySchedule)
                        {
                            SLNOUtility++;
                            item.SLNO = SLNOUtility;
                            //==Termination Checked
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            //==AP Posted Checked
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            //==Payment Posted Checked
                            if (item.IsPJPosted == true)
                            {
                                item.PJPostText = "Posted";
                            }
                            else
                            {
                                //==Payment Blocked Checked
                                if (item.IsHoldBlockPayment == true)
                                {
                                    item.PJPostText = "Hold";
                                }
                                else
                                {
                                    item.PJPostText = "Unposted";
                                }
                            }
                            if (item.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { item.ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.RTGS) { item.ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.EFTN) { item.ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { item.ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.Cash) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { item.ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (item.ModeOfPayment == ModeOfPaymentLocation.Others) { item.ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                        return View(AgreementInfoPath.ModUtilityRentSchedule, lstUtilitySchedule);
                    }
                    else
                    {
                        var queryIFRSSchedule = from IFRS in db.IFRSSchedules
                                                join AI in db.AgreementInfos on IFRS.AgreementSLNo equals AI.AgreementSLNo
                                                join CC in db.CostCenterInfos on AI.AgreementSLNo equals CC.AgreementSLNo
                                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                where IFRS.AgreementSLNo == AgreementSLNo
                                                orderby IFRS.IFRSSLNo ascending
                                                select new
                                                {
                                                    IFRS.IFRSSLNo,
                                                    IFRS.ScheduleDate,
                                                    IFRS.AgreementSLNo,
                                                    AI.PremiseTypeSLNo,
                                                    PT.PremiseType,
                                                    AI.PremiseName,
                                                    AI.AgreementCode,
                                                    AI.AliasCode,
                                                    AI.AgreementName,
                                                    AI.AgreementStartDate,
                                                    AI.AgreementEndDate,
                                                    AI.AgreementPeriod,
                                                    AI.RenewalFrequency,
                                                    AI.RentDueDay,
                                                    AI.UOM,
                                                    IFRS.MonthNo,
                                                    IFRS.Year,
                                                    IFRS.Month,
                                                    IFRS.ReviewNo,
                                                    IFRS.CostPerUnit,
                                                    AI.TotalArea,
                                                    AI.AdvanceAmount,
                                                    AI.AdditionalAdvanceAmount,
                                                    AI.AdvanceAdjustmentPeriod,
                                                    AI.AdvanceAdjustmentAmount,
                                                    IFRS.PaymentAmount,
                                                    IFRS.DiscountFactor,
                                                    IFRS.PresentValue,
                                                    IFRS.OBLeaseLiability,
                                                    IFRS.LeasePayment,
                                                    IFRS.InteresetExpense,
                                                    IFRS.SettlementofLeaseLiabilities,
                                                    IFRS.CBLeaseLiability,
                                                    IFRS.OBROU,
                                                    IFRS.Depreciation,
                                                    IFRS.CBROU,
                                                    IFRS.OBAdvance,
                                                    IFRS.AdvanceDepreciation,
                                                    IFRS.CBAdvance,
                                                    IFRS.UserSLNo,
                                                    U.UserID,
                                                    IFRS.EntryDate,
                                                    IFRS.IsBlock,
                                                    IFRS.BlockDate,
                                                    IFRS.BlockUserSLNo,
                                                    CC.CCCode,
                                                    CC.CCName,
                                                    CC.SOLCode,
                                                    CC.SOLName,
                                                    AI.TaxType,
                                                    AI.VatType,
                                                    AI.IsHoldBlockPayment,
                                                    AI.IsIFRSEnable,
                                                    AI.IFRSEffectiveDate,
                                                };
                        lstIFRSSchedule = queryIFRSSchedule.AsEnumerable().Select(x => new RMS.Models.IFRSScheduleDTO
                        {
                            IFRSSLNo = x.IFRSSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ReviewNo = x.ReviewNo,
                            CostPerUnit = x.CostPerUnit,
                            TotalArea = x.TotalArea,
                            TotalRentAmount = x.CostPerUnit * x.TotalArea,
                            AdvanceAmount = x.AdvanceAmount + x.AdditionalAdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            PaymentAmount = x.PaymentAmount,
                            DiscountFactor = x.DiscountFactor,
                            PresentValue = x.PresentValue,
                            OBLeaseLiability = x.OBLeaseLiability,
                            LeasePayment = x.LeasePayment,
                            InteresetExpense = x.InteresetExpense,
                            SettlementofLeaseLiabilities = x.SettlementofLeaseLiabilities,
                            CBLeaseLiability = x.CBLeaseLiability,
                            OBROU = x.OBROU,
                            Depreciation = x.Depreciation,
                            CBROU = x.CBROU,
                            OBAdvance = x.OBAdvance,
                            AdvanceDepreciation = x.AdvanceDepreciation,
                            CBAdvance = x.CBAdvance,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            CCCode = x.CCCode,
                            CCName = x.CCName,
                            SOLCode = x.SOLCode,
                            SOLName = x.SOLName,
                            TaxType = x.TaxType,
                            VatType = x.VatType,
                            IsHoldBlockPayment = x.IsHoldBlockPayment,
                            IsIFRSEnable = x.IsIFRSEnable,
                            IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        }).ToList();
                        int SLNOIFRS = 0;
                        foreach (RMS.Models.IFRSScheduleDTO item in lstIFRSSchedule)
                        {
                            SLNOIFRS++;
                            item.SLNO = SLNOIFRS;
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                        }
                        return View(AgreementInfoPath.ModIFRSLeaseSchedule, lstIFRSSchedule);
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult Create()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.URLPath = "AgreementInfo/RedirectAgreementIndex?ViewID=1";
                    //======Lookup
                    var lstLookup = db.Lookups
                        .Where(x => (x.GroupName == "Cost Center" || x.GroupName == "SOL" || x.GroupName == "Bank" || x.GroupName == "Regional Office"
                        || x.GroupName == "Division" || x.GroupName == "District" || x.GroupName == "Upazila" || x.GroupName == "Thana"
                        || x.GroupName == "Premises Type for Accounts" || x.GroupName == "Sub Premises Type" || x.GroupName == "Payment Method") &&
                        x.Status == DTOBasic.active && x.IsDeleted == false).ToList();
                    //==Bank Info
                    ViewBag.BankInfoList = lstLookup.Where(x => x.GroupName == "Bank").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==CC Info
                    ViewBag.CCInfoList = lstLookup.Where(x => x.GroupName == "Cost Center").Select(x => new { CCSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==SOL Info
                    ViewBag.SOLInfoList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { SOLSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premise Type
                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();
                    //==Area Status
                    IList<SelectListItem> AreaStatusList = new List<SelectListItem>();
                    AreaStatusList.Add(new SelectListItem { Text = "Select Area Status", Value = "0" });
                    AreaStatusList.Add(new SelectListItem { Text = "Urban", Value = "Urban" });
                    AreaStatusList.Add(new SelectListItem { Text = "Rural", Value = "Rural" });
                    SelectList AreaStatus = new SelectList(AreaStatusList, "Value", "Text");
                    ViewBag.AreaStatusList = AreaStatus;
                    //==Regional Office 
                    ViewBag.RegionalOfficeList = lstLookup.Where(x => x.GroupName == "Regional Office").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Primary SOL 
                    ViewBag.PrimarySOLList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Attached Control
                    ViewBag.AttachedControlList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Division
                    ViewBag.DivisionList = lstLookup.Where(x => x.GroupName == "Division").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==District
                    ViewBag.DistrictList = lstLookup.Where(x => x.GroupName == "District").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Upazila
                    ViewBag.UpazilaList = lstLookup.Where(x => x.GroupName == "Upazila").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Thana
                    ViewBag.ThanaList = lstLookup.Where(x => x.GroupName == "Thana").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premises Type for Accounts
                    ViewBag.PremisesTypeforAccountsList = lstLookup.Where(x => x.GroupName == "Premises Type for Accounts").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Provided By
                    IList<SelectListItem> ProvidedByList = new List<SelectListItem>();
                    ProvidedByList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    ProvidedByList.Add(new SelectListItem { Text = "Company", Value = "1" });
                    ProvidedByList.Add(new SelectListItem { Text = "Landlord", Value = "2" });
                    ProvidedByList.Add(new SelectListItem { Text = "Others", Value = "3" });
                    SelectList ProvidedByStatus = new SelectList(ProvidedByList, "Value", "Text");
                    ViewBag.ProvidedByList = ProvidedByStatus;
                    //==Yes No
                    IList<SelectListItem> YesNoList = new List<SelectListItem>();
                    YesNoList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    YesNoList.Add(new SelectListItem { Text = "Yes", Value = "1" });
                    YesNoList.Add(new SelectListItem { Text = "No", Value = "2" });
                    SelectList YesNoStatus = new SelectList(YesNoList, "Value", "Text");
                    ViewBag.YesNoList = YesNoStatus;
                    //==Sub Premises Type
                    ViewBag.SubPremisesTypeList = lstLookup.Where(x => x.GroupName == "Sub Premises Type").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Payment Method
                    ViewBag.PaymentMethodList = lstLookup.Where(x => x.GroupName == "Payment Method").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Calculation Method
                    IList<SelectListItem> CalculationMethodList = new List<SelectListItem>();
                    CalculationMethodList.Add(new SelectListItem { Text = "Current Month", Value = "Current Month" });
                    CalculationMethodList.Add(new SelectListItem { Text = "Following Month", Value = "Following Month" });
                    SelectList CalculationMethod = new SelectList(CalculationMethodList, "Value", "Text");
                    ViewBag.CalculationMethodList = CalculationMethod;
                    //======Lookup
                    //==UOM
                    IList<SelectListItem> UOMList = new List<SelectListItem>();
                    UOMList.Add(new SelectListItem { Text = "Select Unit of Measurement", Value = "0" });
                    UOMList.Add(new SelectListItem { Text = "Square Feet", Value = "1" });
                    UOMList.Add(new SelectListItem { Text = "Square Meter", Value = "2" });
                    SelectList UOM = new SelectList(UOMList, "Value", "Text");
                    ViewBag.UOMList = UOM;
                    //==Mode of Payment
                    IList<SelectListItem> ModeOfPaymentList = new List<SelectListItem>();
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Select Mode of Payment", Value = "0" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Account Transfer", Value = "Account Transfer" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "RTGS", Value = "RTGS" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "EFTN", Value = "EFTN" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Pay Order", Value = "Pay Order" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Cash", Value = "Cash" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "IBB Payment", Value = "IBB Payment" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Brokerage", Value = "City Brokerage" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Capital", Value = "City Capital" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Others", Value = "Others" });
                    SelectList ModeOfPayment = new SelectList(ModeOfPaymentList, "Value", "Text");
                    ViewBag.ModeOfPaymentList = ModeOfPayment;
                    //==Tax Type
                    IList<SelectListItem> TaxTypeList = new List<SelectListItem>();
                    //TaxTypeList.Add(new SelectListItem { Text = "Select Tax Type", Value = "0" });
                    TaxTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList TaxType = new SelectList(TaxTypeList, "Value", "Text");
                    ViewBag.TaxTypeList = TaxType;
                    //==Vat Type
                    IList<SelectListItem> VatTypeList = new List<SelectListItem>();
                    //VatTypeList.Add(new SelectListItem { Text = "Select VAT Type", Value = "0" });
                    VatTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    VatTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    VatTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList VatType = new SelectList(VatTypeList, "Value", "Text");
                    ViewBag.VatTypeList = VatType;
                    //==Advance No
                    IList<SelectListItem> AdvanceNoList = new List<SelectListItem>();
                    AdvanceNoList.Add(new SelectListItem { Text = "Select Advance No", Value = "0" });
                    AdvanceNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    AdvanceNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    AdvanceNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    AdvanceNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    AdvanceNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    AdvanceNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    AdvanceNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    AdvanceNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    AdvanceNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    AdvanceNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList AdvanceNo = new SelectList(AdvanceNoList, "Value", "Text");
                    ViewBag.AdvanceNoList = AdvanceNo;
                    //==Review No
                    IList<SelectListItem> ReviewNoList = new List<SelectListItem>();
                    ReviewNoList.Add(new SelectListItem { Text = "Select Enhancement No", Value = "0" });
                    ReviewNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    ReviewNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    ReviewNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    ReviewNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    ReviewNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    ReviewNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    ReviewNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    ReviewNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    ReviewNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    ReviewNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList ReviewNo = new SelectList(ReviewNoList, "Value", "Text");
                    ViewBag.ReviewNoList = ReviewNo;
                    //==Water Bill Type meter reading
                    IList<SelectListItem> WaterBillTypeList = new List<SelectListItem>();
                    WaterBillTypeList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Meter Reading", Value = "Meter Reading" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Fixed Value", Value = "Fixed Value" });
                    SelectList WaterBillTypeStatus = new SelectList(WaterBillTypeList, "Value", "Text");
                    ViewBag.WaterBillTypeList = WaterBillTypeStatus;
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    RMS.Models.AgreementInfoDTO DTO = new RMS.Models.AgreementInfoDTO();
                    return View(AgreementInfoPath.Create, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult Create(RMS.Models.AgreementInfoDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    RMS.Models.AgreementInfo AI = new RMS.Models.AgreementInfo();
                    DTOBasic dtoBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    string LoginUserID = (string)Session["LoginUserID"];
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    //==Save to Agreement Info Table
                    int Max = db.AgreementInfos.Max(x => (int?)x.AgreementCode) ?? 0;
                    if (Max == 0)
                    {
                        Max = 10001;
                    }
                    else
                    {
                        Max = Max + 1;
                    }
                    AI.AgreementCode = Max;
                    AI.AgreementType = AgreementType.Regular;
                    AI.AliasCode = Max.ToString();
                    //==Basic Info
                    AI.PremiseTypeSLNo = DTO.PremiseTypeSLNo;
                    AI.PremiseName = DTO.PremiseName;
                    AI.PremiseAddress = DTO.PremiseAddress;
                    AI.ClusterGroup = DTO.ClusterGroup;
                    AI.ConcernBranch = DTO.ConcernBranch;
                    AI.InspectorName = DTO.InspectorName;
                    AI.InspectorContactNo = DTO.InspectorContactNo;
                    //==Agreement Info
                    AI.AgreementName = DTO.AgreementName;
                    AI.AgreementStartDate = DateTime.ParseExact(DTO.AgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    AI.AgreementEndDate = DateTime.ParseExact(DTO.AgreementEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    AI.AgreementPeriod = DTO.AgreementPeriod;
                    AI.RenewalFrequency = AI.AgreementPeriod;
                    AI.RentDueDay = DTO.RentDueDay;
                    AI.UOM = DTO.UOM;
                    AI.TotalArea = DTO.TotalArea;
                    AI.CostPerUnit = DTO.CostPerUnit;
                    AI.TotalRentAmount = DTO.TotalRentAmount;
                    AI.SecurityDepositAmount = DTO.SecurityDepositAmount;
                    AI.AdvanceAmount = DTO.AdvanceAmount;
                    AI.AdvanceAdjustmentPeriod = DTO.AdvanceAdjustmentPeriod;
                    AI.AdvanceAdjustmentAmount = DTO.AdvanceAdjustmentAmount;
                    AI.TaxPercentage = DTO.TaxPercentage;
                    AI.TaxAmount = DTO.TaxAmount;
                    AI.VATPercentage = DTO.VATPercentage;
                    AI.VATAmount = DTO.VATAmount;
                    AI.NetRentAmount = AI.TotalRentAmount - AI.AdvanceAdjustmentAmount;
                    AI.AgreementStatus = AgreementStatus.Created;
                    AI.AgreementText = null;
                    AI.Status = dtoBasic.active;
                    AI.UserSLNo = LoginUserSLNo;
                    AI.EntryDate = DateTime.Now;
                    AI.IsDeleted = false;
                    AI.ReviewFrequency = DTO.ReviewFrequency;
                    AI.ReviewPercentage = DTO.ReviewPercentage;
                    AI.TaxType = DTO.TaxType;
                    AI.VatType = DTO.VatType;
                    AI.ServiceCharge = DTO.ServiceCharge;
                    AI.OnlineTower = DTO.OnlineTower;
                    AI.GeneratorSpace = DTO.GeneratorSpace;
                    AI.CarParking = DTO.CarParking;
                    //==Control Data
                    AI.CashGLCode = DTO.CashGLCode;
                    AI.BankGLCode = DTO.BankGLCode;
                    AI.AdvanceGLCode = DTO.AdvanceGLCode;
                    AI.AdvanceAdjustmentGLCode = DTO.AdvanceAdjustmentGLCode;
                    AI.RentGLCode = DTO.RentGLCode;
                    AI.ServiceChargeGLCode = DTO.ServiceChargeGLCode;
                    AI.TaxGLCode = DTO.TaxGLCode;
                    AI.VATGLCode = DTO.VATGLCode;
                    AI.ProvisionGLTax = DTO.ProvisionGLTax;
                    AI.ProvisionGLAP = DTO.ProvisionGLAP;
                    AI.RTGSGL = DTO.RTGSGL;
                    AI.EFTNGL = DTO.EFTNGL;
                    AI.PayOrderGL = DTO.PayOrderGL;
                    AI.IBBPaymentGL = DTO.IBBPaymentGL;
                    AI.CityBrokerageGL = DTO.CityBrokerageGL;
                    AI.CityCapitalGL = DTO.CityCapitalGL;
                    AI.OthersGL = DTO.OthersGL;
                    //=====
                    AI.PremiseAddressBangla = DTO.PremiseAddressBangla;
                    AI.AreaStatus = DTO.AreaStatus;
                    AI.RegionalOffice = DTO.RegionalOffice;
                    AI.PrimarySOL = DTO.PrimarySOL;
                    AI.AttachedControl = DTO.AttachedControl;
                    AI.ControllerOfficeDistance = DTO.ControllerOfficeDistance;
                    AI.RoutingNumber = DTO.RoutingNumber;
                    AI.Division = DTO.Division;
                    AI.District = DTO.District;
                    AI.Upazila = DTO.Upazila;
                    AI.Thana = DTO.Thana;
                    AI.ThanaCode = DTO.ThanaCode;
                    AI.Pourasabha = DTO.Pourasabha;
                    AI.PourasabhaType = DTO.PourasabhaType;
                    AI.UnionName = DTO.UnionName;
                    AI.WardNo = DTO.WardNo;
                    AI.PremisesTypeforAccounts = DTO.PremisesTypeforAccounts;
                    AI.ParentAgreementCode = DTO.ParentAgreementCode;
                    AI.ElectricityLoad = DTO.ElectricityLoad;
                    AI.ElectricityProvidedBy = DTO.ElectricityProvidedBy;
                    AI.AITBourneBy = DTO.AITBourneBy;
                    AI.CommercialPermission = DTO.CommercialPermission;
                    AI.BuildingPlan = DTO.BuildingPlan;
                    AI.PremisesSituatedFloor = DTO.PremisesSituatedFloor;
                    AI.BangladeshBankApproval = DTO.BangladeshBankApproval;
                    AI.BangladeshBankReference = DTO.BangladeshBankReference;
                    AI.ITTowerRentClause = DTO.ITTowerRentClause;
                    AI.TerminationClause = DTO.TerminationClause;
                    AI.TerminationNoticePeriod = DTO.TerminationNoticePeriod;
                    if (DTO.PremisesOpeningDate != null)
                    {
                        AI.PremisesOpeningDate = DateTime.ParseExact(DTO.PremisesOpeningDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.PremisesOpeningDate = null;
                    }
                    if (DTO.DocumentDate != null)
                    {
                        AI.DocumentDate = DateTime.ParseExact(DTO.DocumentDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.DocumentDate = null;
                    }
                    AI.Remarks = DTO.Remarks;
                    AI.AgreementRemarks = DTO.AgreementRemarks;
                    AI.AdvanceRemarks = DTO.AdvanceRemarks;
                    AI.ReviewRemarks = DTO.ReviewRemarks;
                    AI.LLRemarks = DTO.LLRemarks;
                    AI.CCRemarks = DTO.CCRemarks;
                    AI.UtilityRemarks = DTO.UtilityRemarks;
                    AI.ControlDataRemarks = DTO.ControlDataRemarks;

                    AI.BorrowingRate = DTO.BorrowingRate;
                    AI.PaymentMethod = DTO.PaymentMethod;
                    AI.IsIFRSEnable = DTO.IsIFRSEnable;
                    AI.CalculationMethod = DTO.CalculationMethod;
                    AI.WithHoldingCode = DTO.WithHoldingCode;
                    AI.AdditionalExpense = DTO.AdditionalExpense;
                    AI.InitialDirectCost = DTO.InitialDirectCost;
                    AI.DismantlingCost = DTO.DismantlingCost;
                    AI.CarParkingNo = DTO.CarParkingNo;
                    AI.WaterBillType = DTO.WaterBillType;
                    AI.WaterBillAmount = DTO.WaterBillAmount;
                    if (DTO.IFRSEffectiveDate != null && DTO.IsIFRSEnable == true)
                    {
                        AI.IFRSEffectiveDate = DateTime.ParseExact(DTO.IFRSEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.IFRSEffectiveDate = null;
                    }
                    AI.CorporateTaxRate = DTO.CorporateTaxRate;
                    //=====
                    db.AgreementInfos.Add(AI);
                    db.SaveChanges();
                    //==Space Information
                    string[] SpaceTypeList = null;
                    if (DTO.SpaceTypeList != null)
                    {
                        SpaceTypeList = DTO.SpaceTypeList.Split(',');
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            SpaceTypeList[i] = SpaceTypeList[i].Trim();
                        }
                    }
                    string[] SpaceAreaList = null;
                    if (DTO.SpaceAreaList != null)
                    {
                        SpaceAreaList = DTO.SpaceAreaList.Split(',');
                        for (int i = 0; i < SpaceAreaList.Length; i++)
                        {
                            SpaceAreaList[i] = SpaceAreaList[i].Trim();
                        }
                    }
                    string[] SpaceRateList = null;
                    if (DTO.SpaceRateList != null)
                    {
                        SpaceRateList = DTO.SpaceRateList.Split(',');
                        for (int i = 0; i < SpaceRateList.Length; i++)
                        {
                            SpaceRateList[i] = SpaceRateList[i].Trim();
                        }
                    }
                    string[] SpaceRentList = null;
                    if (DTO.SpaceRentList != null)
                    {
                        SpaceRentList = DTO.SpaceRentList.Split(',');
                        for (int i = 0; i < SpaceRentList.Length; i++)
                        {
                            SpaceRentList[i] = SpaceRentList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdvanceList = null;
                    if (DTO.SpaceTotalAdvanceList != null)
                    {
                        SpaceTotalAdvanceList = DTO.SpaceTotalAdvanceList.Split(',');
                        for (int i = 0; i < SpaceTotalAdvanceList.Length; i++)
                        {
                            SpaceTotalAdvanceList[i] = SpaceTotalAdvanceList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdjustmentList = null;
                    if (DTO.SpaceTotalAdjustmentList != null)
                    {
                        SpaceTotalAdjustmentList = DTO.SpaceTotalAdjustmentList.Split(',');
                        for (int i = 0; i < SpaceTotalAdjustmentList.Length; i++)
                        {
                            SpaceTotalAdjustmentList[i] = SpaceTotalAdjustmentList[i].Trim();
                        }
                    }
                    string[] SpaceRemarksList = null;
                    if (DTO.SpaceRemarksList != null)
                    {
                        SpaceRemarksList = DTO.SpaceRemarksList.Split(',');
                        for (int i = 0; i < SpaceRemarksList.Length; i++)
                        {
                            SpaceRemarksList[i] = SpaceRemarksList[i].Trim();
                        }
                    }
                    if (SpaceTypeList != null)
                    {
                        RMS.Models.SpaceInfo SpaceInfo;
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            if (SpaceTypeList[i] != null && SpaceTypeList[i] != "")
                            {
                                SpaceInfo = new RMS.Models.SpaceInfo();
                                SpaceInfo.AgreementSLNo = AI.AgreementSLNo;
                                SpaceInfo.SpaceType = (SpaceTypeList == null) ? null : SpaceTypeList[i].ToString();
                                SpaceInfo.SpaceArea = Convert.ToDouble(SpaceAreaList[i].ToString());
                                SpaceInfo.SpaceRate = Convert.ToDouble(SpaceRateList[i].ToString());
                                SpaceInfo.SpaceRent = Convert.ToDouble(SpaceRentList[i].ToString());
                                SpaceInfo.SpaceTotalAdvance = Convert.ToDouble(SpaceTotalAdvanceList[i].ToString());
                                SpaceInfo.SpaceTotalAdjustment = Convert.ToDouble(SpaceTotalAdjustmentList[i].ToString());
                                SpaceInfo.SpaceRemarks = (SpaceRemarksList == null) ? null : SpaceRemarksList[i].ToString();
                                db.SpaceInfos.Add(SpaceInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Advance Information
                    string[] AdvanceNoList = null;
                    if (DTO.AdvanceNoList != null)
                    {
                        AdvanceNoList = DTO.AdvanceNoList.Split(',');
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            AdvanceNoList[i] = AdvanceNoList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotPeriodList = null;
                    if (DTO.AdvanceSlotPeriodList != null)
                    {
                        AdvanceSlotPeriodList = DTO.AdvanceSlotPeriodList.Split(',');
                        for (int i = 0; i < AdvanceSlotPeriodList.Length; i++)
                        {
                            AdvanceSlotPeriodList[i] = AdvanceSlotPeriodList[i].Trim();
                        }
                    }
                    string[] AdvanceStartDateList = null;
                    if (DTO.AdvanceStartDateList != null)
                    {
                        AdvanceStartDateList = DTO.AdvanceStartDateList.Split(',');
                        for (int i = 0; i < AdvanceStartDateList.Length; i++)
                        {
                            AdvanceStartDateList[i] = AdvanceStartDateList[i].Trim();
                        }
                    }
                    string[] AdvanceEndDateList = null;
                    if (DTO.AdvanceEndDateList != null)
                    {
                        AdvanceEndDateList = DTO.AdvanceEndDateList.Split(',');
                        for (int i = 0; i < AdvanceEndDateList.Length; i++)
                        {
                            AdvanceEndDateList[i] = AdvanceEndDateList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotAmountList = null;
                    if (DTO.AdvanceSlotAmountList != null)
                    {
                        AdvanceSlotAmountList = DTO.AdvanceSlotAmountList.Split(',');
                        for (int i = 0; i < AdvanceSlotAmountList.Length; i++)
                        {
                            AdvanceSlotAmountList[i] = AdvanceSlotAmountList[i].Trim();
                        }
                    }
                    string[] AdvanceNoteList = null;
                    if (DTO.AdvanceNoteList != null)
                    {
                        AdvanceNoteList = DTO.AdvanceNoteList.Split(',');
                        for (int i = 0; i < AdvanceNoteList.Length; i++)
                        {
                            AdvanceNoteList[i] = AdvanceNoteList[i].Trim();
                        }
                    }
                    if (AdvanceNoList != null)
                    {
                        RMS.Models.AdvanceInfo AdvInfo;
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            if (AdvanceNoList[i] != null && AdvanceNoList[i] != "")
                            {
                                AdvInfo = new RMS.Models.AdvanceInfo();
                                AdvInfo.AgreementSLNo = AI.AgreementSLNo;
                                AdvInfo.AdvanceNo = Convert.ToInt32(AdvanceNoList[i].ToString());
                                AdvInfo.AdvanceSlotPeriod = Convert.ToInt32(AdvanceSlotPeriodList[i].ToString());
                                AdvInfo.StartDate = DateTime.ParseExact(AdvanceStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.EndDate = DateTime.ParseExact(AdvanceEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.AdvanceSlotAmount = Convert.ToDouble(AdvanceSlotAmountList[i].ToString());
                                AdvInfo.AdvanceNote = (AdvanceNoteList == null) ? null : AdvanceNoteList[i].ToString();
                                db.AdvanceInfos.Add(AdvInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Review Info
                    string[] ReviewNoList = null;
                    if (DTO.ReviewNoList != null)
                    {
                        ReviewNoList = DTO.ReviewNoList.Split(',');
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            ReviewNoList[i] = ReviewNoList[i].Trim();
                        }
                    }
                    string[] ReviewStartDateList = null;
                    if (DTO.ReviewStartDateList != null)
                    {
                        ReviewStartDateList = DTO.ReviewStartDateList.Split(',');
                        for (int i = 0; i < ReviewStartDateList.Length; i++)
                        {
                            ReviewStartDateList[i] = ReviewStartDateList[i].Trim();
                        }
                    }
                    string[] ReviewEndDateList = null;
                    if (DTO.ReviewEndDateList != null)
                    {
                        ReviewEndDateList = DTO.ReviewEndDateList.Split(',');
                        for (int i = 0; i < ReviewEndDateList.Length; i++)
                        {
                            ReviewEndDateList[i] = ReviewEndDateList[i].Trim();
                        }
                    }
                    string[] ReviewPeriodList = null;
                    if (DTO.ReviewPeriodList != null)
                    {
                        ReviewPeriodList = DTO.ReviewPeriodList.Split(',');
                        for (int i = 0; i < ReviewPeriodList.Length; i++)
                        {
                            ReviewPeriodList[i] = ReviewPeriodList[i].Trim();
                        }
                    }
                    string[] ReviewIncreaseAmountList = null;
                    if (DTO.ReviewIncreaseAmountList != null)
                    {
                        ReviewIncreaseAmountList = DTO.ReviewIncreaseAmountList.Split(',');
                        for (int i = 0; i < ReviewIncreaseAmountList.Length; i++)
                        {
                            ReviewIncreaseAmountList[i] = ReviewIncreaseAmountList[i].Trim();
                        }
                    }
                    string[] ReviewIncreasePercentageList = null;
                    if (DTO.ReviewIncreasePercentageList != null)
                    {
                        ReviewIncreasePercentageList = DTO.ReviewIncreasePercentageList.Split(',');
                        for (int i = 0; i < ReviewIncreasePercentageList.Length; i++)
                        {
                            ReviewIncreasePercentageList[i] = ReviewIncreasePercentageList[i].Trim();
                        }
                    }
                    string[] ReviewNoteList = null;
                    if (DTO.ReviewNoteList != null)
                    {
                        ReviewNoteList = DTO.ReviewNoteList.Split(',');
                        for (int i = 0; i < ReviewNoteList.Length; i++)
                        {
                            ReviewNoteList[i] = ReviewNoteList[i].Trim();
                        }
                    }
                    if (ReviewNoList != null)
                    {
                        RMS.Models.ReviewInfo RI;
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            if (ReviewNoList[i] != null && ReviewNoList[i] != "")
                            {
                                RI = new RMS.Models.ReviewInfo();
                                RI.AgreementSLNo = AI.AgreementSLNo;
                                RI.ReviewNo = Convert.ToInt32(ReviewNoList[i].ToString());
                                RI.Period = Convert.ToInt32(ReviewPeriodList[i].ToString());
                                RI.StartDate = DateTime.ParseExact(ReviewStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                RI.EndDate = DateTime.ParseExact(ReviewEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                //RI.StartDate = DateTime.Parse(ReviewStartDateList[i]);
                                //RI.EndDate = DateTime.Parse(ReviewEndDateList[i]);
                                RI.IncreaseAmount = Convert.ToDouble(ReviewIncreaseAmountList[i].ToString());
                                RI.IncreasePercentage = Convert.ToDouble(ReviewIncreasePercentageList[i].ToString());
                                RI.ReviewNote = (ReviewNoteList == null) ? null : ReviewNoteList[i].ToString();
                                db.ReviewInfos.Add(RI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Landlord Information
                    string[] VendorCodeList = null;
                    if (DTO.VendorCodeList != null)
                    {
                        VendorCodeList = DTO.VendorCodeList.Split(',');
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            VendorCodeList[i] = VendorCodeList[i].Trim();
                        }
                    }
                    string[] LandlordNameList = null;
                    if (DTO.LandlordNameList != null)
                    {
                        LandlordNameList = DTO.LandlordNameList.Split(',');
                        for (int i = 0; i < LandlordNameList.Length; i++)
                        {
                            LandlordNameList[i] = LandlordNameList[i].Trim();
                        }
                    }
                    string[] ModeOfPaymentList = null;
                    if (DTO.ModeOfPaymentList != null)
                    {
                        ModeOfPaymentList = DTO.ModeOfPaymentList.Split(',');
                        for (int i = 0; i < ModeOfPaymentList.Length; i++)
                        {
                            ModeOfPaymentList[i] = ModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] VendorAdvancePCList = null;
                    if (DTO.VendorAdvancePCList != null)
                    {
                        VendorAdvancePCList = DTO.VendorAdvancePCList.Split(',');
                        for (int i = 0; i < VendorAdvancePCList.Length; i++)
                        {
                            VendorAdvancePCList[i] = VendorAdvancePCList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAmountList = null;
                    if (DTO.VendorAdvanceAmountList != null)
                    {
                        VendorAdvanceAmountList = DTO.VendorAdvanceAmountList.Split(',');
                        for (int i = 0; i < VendorAdvanceAmountList.Length; i++)
                        {
                            VendorAdvanceAmountList[i] = VendorAdvanceAmountList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAdjustmentPCList = null;
                    if (DTO.VendorAdvanceAdjustmentPCList != null)
                    {
                        VendorAdvanceAdjustmentPCList = DTO.VendorAdvanceAdjustmentPCList.Split(',');
                        for (int i = 0; i < VendorAdvanceAdjustmentPCList.Length; i++)
                        {
                            VendorAdvanceAdjustmentPCList[i] = VendorAdvanceAdjustmentPCList[i].Trim();
                        }
                    }
                    //string[] VendorAdvanceAdjustmentAmountList = null;
                    //if (DTO.VendorAdvanceAdjustmentAmountList != null)
                    //{
                    //    VendorAdvanceAdjustmentAmountList = DTO.VendorAdvanceAdjustmentAmountList.Split(',');
                    //    for (int i = 0; i < VendorAdvanceAdjustmentAmountList.Length; i++)
                    //    {
                    //        VendorAdvanceAdjustmentAmountList[i] = VendorAdvanceAdjustmentAmountList[i].Trim();
                    //    }
                    //}
                    string[] VendorTaxPCList = null;
                    if (DTO.VendorTaxPCList != null)
                    {
                        VendorTaxPCList = DTO.VendorTaxPCList.Split(',');
                        for (int i = 0; i < VendorTaxPCList.Length; i++)
                        {
                            VendorTaxPCList[i] = VendorTaxPCList[i].Trim();
                        }
                    }
                    string[] VendorTaxAmountList = null;
                    if (DTO.VendorTaxAmountList != null)
                    {
                        VendorTaxAmountList = DTO.VendorTaxAmountList.Split(',');
                        for (int i = 0; i < VendorTaxAmountList.Length; i++)
                        {
                            VendorTaxAmountList[i] = VendorTaxAmountList[i].Trim();
                        }
                    }
                    string[] VendorVATPCList = null;
                    if (DTO.VendorVATPCList != null)
                    {
                        VendorVATPCList = DTO.VendorVATPCList.Split(',');
                        for (int i = 0; i < VendorVATPCList.Length; i++)
                        {
                            VendorVATPCList[i] = VendorVATPCList[i].Trim();
                        }
                    }
                    string[] VendorVATAmountList = null;
                    if (DTO.VendorVATAmountList != null)
                    {
                        VendorVATAmountList = DTO.VendorVATAmountList.Split(',');
                        for (int i = 0; i < VendorVATAmountList.Length; i++)
                        {
                            VendorVATAmountList[i] = VendorVATAmountList[i].Trim();
                        }
                    }
                    string[] VendorRentPCList = null;
                    if (DTO.VendorRentPCList != null)
                    {
                        VendorRentPCList = DTO.VendorRentPCList.Split(',');
                        for (int i = 0; i < VendorRentPCList.Length; i++)
                        {
                            VendorRentPCList[i] = VendorRentPCList[i].Trim();
                        }
                    }
                    //string[] VendorRentAmountList = null;
                    //if (DTO.VendorRentAmountList != null)
                    //{
                    //    VendorRentAmountList = DTO.VendorRentAmountList.Split(',');
                    //    for (int i = 0; i < VendorRentAmountList.Length; i++)
                    //    {
                    //        VendorRentAmountList[i] = VendorRentAmountList[i].Trim();
                    //    }
                    //}
                    string[] AddressList = null;
                    if (DTO.LLAddressList != null)
                    {
                        AddressList = DTO.LLAddressList.Split(',');
                        for (int i = 0; i < AddressList.Length; i++)
                        {
                            AddressList[i] = AddressList[i].Trim();
                        }
                    }
                    string[] ContactNoList = null;
                    if (DTO.LLContactNoList != null)
                    {
                        ContactNoList = DTO.LLContactNoList.Split(',');
                        for (int i = 0; i < ContactNoList.Length; i++)
                        {
                            ContactNoList[i] = ContactNoList[i].Trim();
                        }
                    }
                    string[] EmailList = null;
                    if (DTO.LLEmailList != null)
                    {
                        EmailList = DTO.LLEmailList.Split(',');
                        for (int i = 0; i < EmailList.Length; i++)
                        {
                            EmailList[i] = EmailList[i].Trim();
                        }
                    }
                    string[] ACNoList = null;
                    if (DTO.ACNoList != null)
                    {
                        ACNoList = DTO.ACNoList.Split(',');
                        for (int i = 0; i < ACNoList.Length; i++)
                        {
                            ACNoList[i] = ACNoList[i].Trim();
                        }
                    }
                    string[] BankNameList = null;
                    if (DTO.BankNameList != null)
                    {
                        BankNameList = DTO.BankNameList.Split(',');
                        for (int i = 0; i < BankNameList.Length; i++)
                        {
                            BankNameList[i] = BankNameList[i].Trim();
                        }
                    }
                    string[] BranchNameList = null;
                    if (DTO.BranchNameList != null)
                    {
                        BranchNameList = DTO.BranchNameList.Split(',');
                        for (int i = 0; i < BranchNameList.Length; i++)
                        {
                            BranchNameList[i] = BranchNameList[i].Trim();
                        }
                    }
                    string[] RoutingNoList = null;
                    if (DTO.RoutingNoList != null)
                    {
                        RoutingNoList = DTO.RoutingNoList.Split(',');
                        for (int i = 0; i < RoutingNoList.Length; i++)
                        {
                            RoutingNoList[i] = RoutingNoList[i].Trim();
                        }
                    }
                    RMS.Models.LandlordInfo LI;
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    for (int i = 0; i < VendorCodeList.Length; i++)
                    {
                        if (VendorCodeList[i] != null && VendorCodeList[i] != "")
                        {
                            LI = new RMS.Models.LandlordInfo();
                            LI.AgreementSLNo = AI.AgreementSLNo;
                            LI.VendorCode = (VendorCodeList == null) ? null : VendorCodeList[i].ToString();
                            LI.LandlordName = (LandlordNameList == null) ? null : LandlordNameList[i].ToString();
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { LI.ModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { LI.ModeOfPayment = ModeOfPaymentLocation.RTGS; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { LI.ModeOfPayment = ModeOfPaymentLocation.EFTN; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { LI.ModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { LI.ModeOfPayment = ModeOfPaymentLocation.Cash; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { LI.ModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { LI.ModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { LI.ModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { LI.ModeOfPayment = ModeOfPaymentLocation.Others; }
                            LI.AdvancePC = Convert.ToDouble(VendorAdvancePCList[i].ToString());
                            LI.AdvanceAdjustmentPC = Convert.ToDouble(VendorAdvanceAdjustmentPCList[i].ToString());
                            LI.TaxPC = Convert.ToDouble(VendorTaxPCList[i].ToString());
                            LI.VATPC = Convert.ToDouble(VendorVATPCList[i].ToString());
                            LI.RentPC = Convert.ToDouble(VendorRentPCList[i].ToString());
                            //==PC Amount
                            LI.AdvanceAmount = (AI.AdvanceAmount * LI.AdvancePC) / 100;
                            LI.TaxAmount = (AI.TaxAmount * LI.TaxPC) / 100;
                            LI.VATAmount = (AI.VATAmount * LI.VATPC) / 100;
                            //==
                            LI.LLAddress = (AddressList == null) ? null : AddressList[i].ToString();
                            LI.LLContactNo = (ContactNoList == null) ? null : ContactNoList[i].ToString();
                            LI.LLEmail = (EmailList == null) ? null : EmailList[i].ToString();
                            LI.ACNo = (ACNoList == null) ? null : ACNoList[i].ToString();
                            LI.BankName = (BankNameList == null) ? null : BankNameList[i].ToString();
                            LI.BranchName = (BranchNameList == null) ? null : BranchNameList[i].ToString();
                            LI.RoutingNo = (RoutingNoList == null) ? null : RoutingNoList[i].ToString();
                            db.LandlordInfos.Add(LI);
                            db.SaveChanges();
                        }
                    }
                    //==Cost Center
                    string[] CCCodeList = null;
                    if (DTO.CCCodeList != null)
                    {
                        CCCodeList = DTO.CCCodeList.Split(',');
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            CCCodeList[i] = CCCodeList[i].Trim();
                        }
                    }
                    string[] CCNameList = null;
                    if (DTO.CCNameList != null)
                    {
                        CCNameList = DTO.CCNameList.Split(',');
                        for (int i = 0; i < CCNameList.Length; i++)
                        {
                            CCNameList[i] = CCNameList[i].Trim();
                        }
                    }
                    string[] SOLCodeList = null;
                    if (DTO.SOLCodeList != null)
                    {
                        SOLCodeList = DTO.SOLCodeList.Split(',');
                        for (int i = 0; i < SOLCodeList.Length; i++)
                        {
                            SOLCodeList[i] = SOLCodeList[i].Trim();
                        }
                    }
                    string[] SOLNameList = null;
                    if (DTO.SOLNameList != null)
                    {
                        SOLNameList = DTO.SOLNameList.Split(',');
                        for (int i = 0; i < SOLNameList.Length; i++)
                        {
                            SOLNameList[i] = SOLNameList[i].Trim();
                        }
                    }
                    string[] CCShareAllotmentList = null;
                    if (DTO.CCShareAllotmentList != null)
                    {
                        CCShareAllotmentList = DTO.CCShareAllotmentList.Split(',');
                        for (int i = 0; i < CCShareAllotmentList.Length; i++)
                        {
                            CCShareAllotmentList[i] = CCShareAllotmentList[i].Trim();
                        }
                    }
                    RMS.Models.CostCenterInfo CC;
                    for (int i = 0; i < CCCodeList.Length; i++)
                    {
                        if (CCCodeList[i] != null && CCCodeList[i] != "")
                        {
                            CC = new RMS.Models.CostCenterInfo();
                            CC.AgreementSLNo = AI.AgreementSLNo;
                            CC.CCCode = (CCCodeList == null) ? null : CCCodeList[i].ToString();
                            CC.CCName = (CCNameList == null) ? null : CCNameList[i].ToString();
                            CC.SOLCode = (SOLCodeList == null) ? null : SOLCodeList[i].ToString();
                            CC.SOLName = (SOLNameList == null) ? null : SOLNameList[i].ToString();
                            CC.CCShareAllotment = Convert.ToDouble(CCShareAllotmentList[i].ToString());
                            db.CostCenterInfos.Add(CC);
                            db.SaveChanges();
                        }
                    }
                    //==Utility Information
                    string[] UtilityVendorCodeList = null;
                    if (DTO.UtilityVendorCodeList != null)
                    {
                        UtilityVendorCodeList = DTO.UtilityVendorCodeList.Split(',');
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            UtilityVendorCodeList[i] = UtilityVendorCodeList[i].Trim();
                        }
                    }
                    string[] UtilityLandlordNameList = null;
                    if (DTO.UtilityLandlordNameList != null)
                    {
                        UtilityLandlordNameList = DTO.UtilityLandlordNameList.Split(',');
                        for (int i = 0; i < UtilityLandlordNameList.Length; i++)
                        {
                            UtilityLandlordNameList[i] = UtilityLandlordNameList[i].Trim();
                        }
                    }
                    string[] UtilityModeOfPaymentList = null;
                    if (DTO.UtilityModeOfPaymentList != null)
                    {
                        UtilityModeOfPaymentList = DTO.UtilityModeOfPaymentList.Split(',');
                        for (int i = 0; i < UtilityModeOfPaymentList.Length; i++)
                        {
                            UtilityModeOfPaymentList[i] = UtilityModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] ServiceChargePCList = null;
                    if (DTO.ServiceChargePCList != null)
                    {
                        ServiceChargePCList = DTO.ServiceChargePCList.Split(',');
                        for (int i = 0; i < ServiceChargePCList.Length; i++)
                        {
                            ServiceChargePCList[i] = ServiceChargePCList[i].Trim();
                        }
                    }
                    string[] ServiceChargeAmountList = null;
                    if (DTO.ServiceChargeAmountList != null)
                    {
                        ServiceChargeAmountList = DTO.ServiceChargeAmountList.Split(',');
                        for (int i = 0; i < ServiceChargeAmountList.Length; i++)
                        {
                            ServiceChargeAmountList[i] = ServiceChargeAmountList[i].Trim();
                        }
                    }
                    string[] OnlineTowerPCList = null;
                    if (DTO.OnlineTowerPCList != null)
                    {
                        OnlineTowerPCList = DTO.OnlineTowerPCList.Split(',');
                        for (int i = 0; i < OnlineTowerPCList.Length; i++)
                        {
                            OnlineTowerPCList[i] = OnlineTowerPCList[i].Trim();
                        }
                    }
                    string[] OnlineTowerAmountList = null;
                    if (DTO.OnlineTowerAmountList != null)
                    {
                        OnlineTowerAmountList = DTO.OnlineTowerAmountList.Split(',');
                        for (int i = 0; i < OnlineTowerAmountList.Length; i++)
                        {
                            OnlineTowerAmountList[i] = OnlineTowerAmountList[i].Trim();
                        }
                    }

                    string[] GeneratorSpacePCList = null;
                    if (DTO.GeneratorSpacePCList != null)
                    {
                        GeneratorSpacePCList = DTO.GeneratorSpacePCList.Split(',');
                        for (int i = 0; i < GeneratorSpacePCList.Length; i++)
                        {
                            GeneratorSpacePCList[i] = GeneratorSpacePCList[i].Trim();
                        }
                    }
                    string[] GeneratorSpaceAmountList = null;
                    if (DTO.GeneratorSpaceAmountList != null)
                    {
                        GeneratorSpaceAmountList = DTO.GeneratorSpaceAmountList.Split(',');
                        for (int i = 0; i < GeneratorSpaceAmountList.Length; i++)
                        {
                            GeneratorSpaceAmountList[i] = GeneratorSpaceAmountList[i].Trim();
                        }
                    }
                    string[] CarParkingPCList = null;
                    if (DTO.CarParkingPCList != null)
                    {
                        CarParkingPCList = DTO.CarParkingPCList.Split(',');
                        for (int i = 0; i < CarParkingPCList.Length; i++)
                        {
                            CarParkingPCList[i] = CarParkingPCList[i].Trim();
                        }
                    }
                    string[] CarParkingAmountList = null;
                    if (DTO.CarParkingAmountList != null)
                    {
                        CarParkingAmountList = DTO.CarParkingAmountList.Split(',');
                        for (int i = 0; i < CarParkingAmountList.Length; i++)
                        {
                            CarParkingAmountList[i] = CarParkingAmountList[i].Trim();
                        }
                    }
                    string[] UtilityTaxPCList = null;
                    if (DTO.UtilityTaxPCList != null)
                    {
                        UtilityTaxPCList = DTO.UtilityTaxPCList.Split(',');
                        for (int i = 0; i < UtilityTaxPCList.Length; i++)
                        {
                            UtilityTaxPCList[i] = UtilityTaxPCList[i].Trim();
                        }
                    }
                    string[] UtilityTaxAmountList = null;
                    if (DTO.UtilityTaxAmountList != null)
                    {
                        UtilityTaxAmountList = DTO.UtilityTaxAmountList.Split(',');
                        for (int i = 0; i < UtilityTaxAmountList.Length; i++)
                        {
                            UtilityTaxAmountList[i] = UtilityTaxAmountList[i].Trim();
                        }
                    }
                    string[] UtilityVATPCList = null;
                    if (DTO.UtilityVATPCList != null)
                    {
                        UtilityVATPCList = DTO.UtilityVATPCList.Split(',');
                        for (int i = 0; i < UtilityVATPCList.Length; i++)
                        {
                            UtilityVATPCList[i] = UtilityVATPCList[i].Trim();
                        }
                    }
                    string[] UtilityVATAmountList = null;
                    if (DTO.UtilityVATAmountList != null)
                    {
                        UtilityVATAmountList = DTO.UtilityVATAmountList.Split(',');
                        for (int i = 0; i < UtilityVATAmountList.Length; i++)
                        {
                            UtilityVATAmountList[i] = UtilityVATAmountList[i].Trim();
                        }
                    }
                    string[] UtilityAddressList = null;
                    if (DTO.UtilityAddressList != null)
                    {
                        UtilityAddressList = DTO.UtilityAddressList.Split(',');
                        for (int i = 0; i < UtilityAddressList.Length; i++)
                        {
                            UtilityAddressList[i] = UtilityAddressList[i].Trim();
                        }
                    }
                    string[] UtilityContactNoList = null;
                    if (DTO.UtilityContactNoList != null)
                    {
                        UtilityContactNoList = DTO.UtilityContactNoList.Split(',');
                        for (int i = 0; i < UtilityContactNoList.Length; i++)
                        {
                            UtilityContactNoList[i] = UtilityContactNoList[i].Trim();
                        }
                    }
                    string[] UtilityEmailList = null;
                    if (DTO.UtilityEmailList != null)
                    {
                        UtilityEmailList = DTO.UtilityEmailList.Split(',');
                        for (int i = 0; i < UtilityEmailList.Length; i++)
                        {
                            UtilityEmailList[i] = UtilityEmailList[i].Trim();
                        }
                    }
                    string[] UtilityACNoList = null;
                    if (DTO.UtilityACNoList != null)
                    {
                        UtilityACNoList = DTO.UtilityACNoList.Split(',');
                        for (int i = 0; i < UtilityACNoList.Length; i++)
                        {
                            UtilityACNoList[i] = UtilityACNoList[i].Trim();
                        }
                    }
                    string[] UtilityBankNameList = null;
                    if (DTO.UtilityBankNameList != null)
                    {
                        UtilityBankNameList = DTO.UtilityBankNameList.Split(',');
                        for (int i = 0; i < UtilityBankNameList.Length; i++)
                        {
                            UtilityBankNameList[i] = UtilityBankNameList[i].Trim();
                        }
                    }
                    string[] UtilityBranchNameList = null;
                    if (DTO.UtilityBranchNameList != null)
                    {
                        UtilityBranchNameList = DTO.UtilityBranchNameList.Split(',');
                        for (int i = 0; i < UtilityBranchNameList.Length; i++)
                        {
                            UtilityBranchNameList[i] = UtilityBranchNameList[i].Trim();
                        }
                    }
                    string[] UtilityRoutingNoList = null;
                    if (DTO.UtilityRoutingNoList != null)
                    {
                        UtilityRoutingNoList = DTO.UtilityRoutingNoList.Split(',');
                        for (int i = 0; i < UtilityRoutingNoList.Length; i++)
                        {
                            UtilityRoutingNoList[i] = UtilityRoutingNoList[i].Trim();
                        }
                    }
                    if (UtilityVendorCodeList != null)
                    {
                        RMS.Models.UtilityInfo UI;
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            if (UtilityVendorCodeList[i] != null && UtilityVendorCodeList[i] != "")
                            {
                                UI = new RMS.Models.UtilityInfo();
                                UI.AgreementSLNo = AI.AgreementSLNo;
                                UI.UtilityVendorCode = (UtilityVendorCodeList == null) ? null : UtilityVendorCodeList[i].ToString();
                                UI.UtilityLandlordName = (UtilityLandlordNameList == null) ? null : UtilityLandlordNameList[i].ToString();

                                if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Others; }

                                UI.ServiceChargePC = Convert.ToDouble(ServiceChargePCList[i].ToString());
                                UI.ServiceChargeAmount = Convert.ToDouble(ServiceChargeAmountList[i].ToString());

                                UI.OnlineTowerPC = Convert.ToDouble(OnlineTowerPCList[i].ToString());
                                UI.OnlineTowerAmount = Convert.ToDouble(OnlineTowerAmountList[i].ToString());

                                UI.GeneratorSpacePC = Convert.ToDouble(GeneratorSpacePCList[i].ToString());
                                UI.GeneratorSpaceAmount = Convert.ToDouble(GeneratorSpaceAmountList[i].ToString());

                                UI.CarParkingPC = Convert.ToDouble(CarParkingPCList[i].ToString());
                                UI.CarParkingAmount = Convert.ToDouble(CarParkingAmountList[i].ToString());

                                UI.TaxPC = Convert.ToDouble(UtilityTaxPCList[i].ToString());
                                UI.TaxAmount = Convert.ToDouble(UtilityTaxAmountList[i].ToString());
                                UI.VATPC = Convert.ToDouble(UtilityVATPCList[i].ToString());
                                UI.VATAmount = Convert.ToDouble(UtilityVATAmountList[i].ToString());

                                UI.UtilityAddress = (UtilityAddressList == null) ? null : UtilityAddressList[i].ToString();
                                UI.UtilityContactNo = (UtilityContactNoList == null) ? null : UtilityContactNoList[i].ToString();
                                UI.UtilityEmail = (UtilityEmailList == null) ? null : UtilityEmailList[i].ToString();
                                UI.UtilityAddress = (UtilityAddressList == null) ? null : UtilityAddressList[i].ToString();
                                UI.UtilityContactNo = (UtilityContactNoList == null) ? null : UtilityContactNoList[i].ToString();
                                UI.UtilityEmail = (UtilityEmailList == null) ? null : UtilityEmailList[i].ToString();
                                UI.UtilityACNo = (UtilityACNoList == null) ? null : UtilityACNoList[i].ToString();
                                UI.UtilityBankName = (UtilityBankNameList == null) ? null : UtilityBankNameList[i].ToString();
                                UI.UtilityBranchName = (UtilityBranchNameList == null) ? null : UtilityBranchNameList[i].ToString();
                                UI.UtilityRoutingNo = (UtilityRoutingNoList == null) ? null : UtilityRoutingNoList[i].ToString();
                                db.UtilityInfos.Add(UI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Attach Documents
                    if (DTO.files != null)
                    {
                        RMS.Models.FileUploadInfo FU;
                        foreach (var file in DTO.files)
                        {
                            //Save file content goes here
                            if (file != null && file.ContentLength > 0)
                            {
                                //==
                                if (db.FileUploadInfos.Any(x => x.AgreementSLNo == AI.AgreementSLNo && x.FileName == file.FileName) == false)
                                {
                                    FU = new RMS.Models.FileUploadInfo();
                                    FU.AgreementSLNo = AI.AgreementSLNo;
                                    FU.FileName = file.FileName;
                                    FU.FilePath = "Content/FileUpload/" + AI.AliasCode + "/" + file.FileName;
                                    db.FileUploadInfos.Add(FU);
                                    db.SaveChanges();
                                }
                                //==
                                var originalDirectory = new DirectoryInfo(string.Format("{0}Content\\FileUpload\\", Server.MapPath(@"\")));
                                string pathString = Path.Combine(originalDirectory.ToString(), AI.AliasCode);
                                if (Directory.Exists(pathString) == false)
                                {
                                    System.IO.Directory.CreateDirectory(pathString);
                                }
                                var path = string.Format("{0}\\{1}", pathString, file.FileName);
                                file.SaveAs(path);
                            }
                        }
                    }
                    //===Delete Existing Draft
                    //int DraftAgreementSLNo = db.DraftAgreementInfos.Where(x => x.AgreementType == AgreementType.Regular && x.UserSLNo == LoginUserSLNo).Select(x => x.AgreementSLNo).SingleOrDefault();
                    //if (DraftAgreementSLNo != 0)
                    //{
                    //    //===Delete Existing Draft Advance Info
                    //    db.DraftAdvanceInfos.RemoveRange(db.DraftAdvanceInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Review Info
                    //    db.DraftReviewInfos.RemoveRange(db.DraftReviewInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Landlord Info
                    //    db.DraftLandlordInfos.RemoveRange(db.DraftLandlordInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Cost Center Info
                    //    db.DraftCostCenterInfos.RemoveRange(db.DraftCostCenterInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Utility Info
                    //    db.DraftUtilityInfos.RemoveRange(db.DraftUtilityInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Agreement Info
                    //    db.DraftAgreementInfos.RemoveRange(db.DraftAgreementInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //}
                    //==
                    AlertMsg = "The agreement: " + AI.AgreementName + " has been created.";
                    return Json(new { CheckStatus = true, AgreementCode = AI.AgreementCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateAttach(RMS.Models.AgreementInfoDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    RMS.Models.AgreementInfo AI = new RMS.Models.AgreementInfo();
                    DTOBasic dtoBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    string LoginUserID = (string)Session["LoginUserID"];
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    //==Save to Agreement Info Table
                    int Max = db.AgreementInfos.Max(x => (int?)x.AgreementCode) ?? 0;
                    if (Max == 0)
                    {
                        Max = 10001;
                    }
                    else
                    {
                        Max = Max + 1;
                    }
                    AI.AgreementCode = Max;
                    AI.AgreementType = AgreementType.Regular;
                    AI.AliasCode = Max.ToString();
                    //==Basic Info
                    AI.PremiseTypeSLNo = DTO.PremiseTypeSLNo;
                    AI.PremiseName = DTO.PremiseName;
                    AI.PremiseAddress = DTO.PremiseAddress;
                    AI.ClusterGroup = DTO.ClusterGroup;
                    AI.ConcernBranch = DTO.ConcernBranch;
                    AI.InspectorName = DTO.InspectorName;
                    AI.InspectorContactNo = DTO.InspectorContactNo;
                    //==Agreement Info
                    AI.AgreementName = DTO.AgreementName;
                    AI.AgreementStartDate = DateTime.ParseExact(DTO.AgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    AI.AgreementEndDate = DateTime.ParseExact(DTO.AgreementEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    AI.AgreementPeriod = DTO.AgreementPeriod;
                    AI.RenewalFrequency = AI.AgreementPeriod;
                    AI.RentDueDay = DTO.RentDueDay;
                    AI.UOM = DTO.UOM;
                    AI.TotalArea = DTO.TotalArea;
                    AI.CostPerUnit = DTO.CostPerUnit;
                    AI.TotalRentAmount = DTO.TotalRentAmount;
                    AI.SecurityDepositAmount = DTO.SecurityDepositAmount;
                    AI.AdvanceAmount = DTO.AdvanceAmount;
                    AI.AdvanceAdjustmentPeriod = DTO.AdvanceAdjustmentPeriod;
                    AI.AdvanceAdjustmentAmount = DTO.AdvanceAdjustmentAmount;
                    AI.TaxPercentage = DTO.TaxPercentage;
                    AI.TaxAmount = DTO.TaxAmount;
                    AI.VATPercentage = DTO.VATPercentage;
                    AI.VATAmount = DTO.VATAmount;
                    AI.NetRentAmount = AI.TotalRentAmount - AI.AdvanceAdjustmentAmount;
                    AI.AgreementStatus = AgreementStatus.Created;
                    AI.AgreementText = null;
                    AI.Status = dtoBasic.active;
                    AI.UserSLNo = LoginUserSLNo;
                    AI.EntryDate = DateTime.Now;
                    AI.IsDeleted = false;
                    AI.ReviewFrequency = DTO.ReviewFrequency;
                    AI.ReviewPercentage = DTO.ReviewPercentage;
                    AI.TaxType = DTO.TaxType;
                    AI.VatType = DTO.VatType;
                    AI.ServiceCharge = DTO.ServiceCharge;
                    AI.OnlineTower = DTO.OnlineTower;
                    AI.GeneratorSpace = DTO.GeneratorSpace;
                    AI.CarParking = DTO.CarParking;
                    //==Control Data
                    AI.CashGLCode = DTO.CashGLCode;
                    AI.BankGLCode = DTO.BankGLCode;
                    AI.AdvanceGLCode = DTO.AdvanceGLCode;
                    AI.AdvanceAdjustmentGLCode = DTO.AdvanceAdjustmentGLCode;
                    AI.RentGLCode = DTO.RentGLCode;
                    AI.ServiceChargeGLCode = DTO.ServiceChargeGLCode;
                    AI.TaxGLCode = DTO.TaxGLCode;
                    AI.VATGLCode = DTO.VATGLCode;
                    AI.ProvisionGLTax = DTO.ProvisionGLTax;
                    AI.ProvisionGLAP = DTO.ProvisionGLAP;
                    AI.RTGSGL = DTO.RTGSGL;
                    AI.EFTNGL = DTO.EFTNGL;
                    AI.PayOrderGL = DTO.PayOrderGL;
                    AI.IBBPaymentGL = DTO.IBBPaymentGL;
                    AI.CityBrokerageGL = DTO.CityBrokerageGL;
                    AI.CityCapitalGL = DTO.CityCapitalGL;
                    AI.OthersGL = DTO.OthersGL;
                    //=====
                    AI.PremiseAddressBangla = DTO.PremiseAddressBangla;
                    AI.AreaStatus = DTO.AreaStatus;
                    AI.RegionalOffice = DTO.RegionalOffice;
                    AI.PrimarySOL = DTO.PrimarySOL;
                    AI.AttachedControl = DTO.AttachedControl;
                    AI.ControllerOfficeDistance = DTO.ControllerOfficeDistance;
                    AI.RoutingNumber = DTO.RoutingNumber;
                    AI.Division = DTO.Division;
                    AI.District = DTO.District;
                    AI.Upazila = DTO.Upazila;
                    AI.Thana = DTO.Thana;
                    AI.ThanaCode = DTO.ThanaCode;
                    AI.Pourasabha = DTO.Pourasabha;
                    AI.PourasabhaType = DTO.PourasabhaType;
                    AI.UnionName = DTO.UnionName;
                    AI.WardNo = DTO.WardNo;
                    AI.PremisesTypeforAccounts = DTO.PremisesTypeforAccounts;
                    AI.ParentAgreementCode = DTO.ParentAgreementCode;
                    AI.ElectricityLoad = DTO.ElectricityLoad;
                    AI.ElectricityProvidedBy = DTO.ElectricityProvidedBy;
                    AI.AITBourneBy = DTO.AITBourneBy;
                    AI.CommercialPermission = DTO.CommercialPermission;
                    AI.BuildingPlan = DTO.BuildingPlan;
                    AI.PremisesSituatedFloor = DTO.PremisesSituatedFloor;
                    AI.BangladeshBankApproval = DTO.BangladeshBankApproval;
                    AI.BangladeshBankReference = DTO.BangladeshBankReference;
                    AI.ITTowerRentClause = DTO.ITTowerRentClause;
                    AI.TerminationClause = DTO.TerminationClause;
                    AI.TerminationNoticePeriod = DTO.TerminationNoticePeriod;
                    if (DTO.PremisesOpeningDate != null)
                    {
                        AI.PremisesOpeningDate = DateTime.ParseExact(DTO.PremisesOpeningDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.PremisesOpeningDate = null;
                    }
                    if (DTO.DocumentDate != null)
                    {
                        AI.DocumentDate = DateTime.ParseExact(DTO.DocumentDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.DocumentDate = null;
                    }
                    AI.Remarks = DTO.Remarks;
                    AI.AgreementRemarks = DTO.AgreementRemarks;
                    AI.AdvanceRemarks = DTO.AdvanceRemarks;
                    AI.ReviewRemarks = DTO.ReviewRemarks;
                    AI.LLRemarks = DTO.LLRemarks;
                    AI.CCRemarks = DTO.CCRemarks;
                    AI.UtilityRemarks = DTO.UtilityRemarks;
                    AI.ControlDataRemarks = DTO.ControlDataRemarks;

                    AI.BorrowingRate = DTO.BorrowingRate;
                    AI.PaymentMethod = DTO.PaymentMethod;
                    AI.IsIFRSEnable = DTO.IsIFRSEnable;
                    AI.CalculationMethod = DTO.CalculationMethod;
                    AI.WithHoldingCode = DTO.WithHoldingCode;
                    AI.AdditionalExpense = DTO.AdditionalExpense;
                    AI.InitialDirectCost = DTO.InitialDirectCost;
                    AI.DismantlingCost = DTO.DismantlingCost;
                    AI.CarParkingNo = DTO.CarParkingNo;
                    AI.WaterBillType = DTO.WaterBillType;
                    AI.WaterBillAmount = DTO.WaterBillAmount;
                    if (DTO.IFRSEffectiveDate != null && DTO.IsIFRSEnable == true)
                    {
                        AI.IFRSEffectiveDate = DateTime.ParseExact(DTO.IFRSEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.IFRSEffectiveDate = null;
                    }
                    AI.CorporateTaxRate = DTO.CorporateTaxRate;
                    //=====
                    db.AgreementInfos.Add(AI);
                    db.SaveChanges();
                    //==Space Information
                    string[] SpaceTypeList = null;
                    if (DTO.SpaceTypeList != null)
                    {
                        SpaceTypeList = DTO.SpaceTypeList.Split(',');
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            SpaceTypeList[i] = SpaceTypeList[i].Trim();
                        }
                    }
                    string[] SpaceAreaList = null;
                    if (DTO.SpaceAreaList != null)
                    {
                        SpaceAreaList = DTO.SpaceAreaList.Split(',');
                        for (int i = 0; i < SpaceAreaList.Length; i++)
                        {
                            SpaceAreaList[i] = SpaceAreaList[i].Trim();
                        }
                    }
                    string[] SpaceRateList = null;
                    if (DTO.SpaceRateList != null)
                    {
                        SpaceRateList = DTO.SpaceRateList.Split(',');
                        for (int i = 0; i < SpaceRateList.Length; i++)
                        {
                            SpaceRateList[i] = SpaceRateList[i].Trim();
                        }
                    }
                    string[] SpaceRentList = null;
                    if (DTO.SpaceRentList != null)
                    {
                        SpaceRentList = DTO.SpaceRentList.Split(',');
                        for (int i = 0; i < SpaceRentList.Length; i++)
                        {
                            SpaceRentList[i] = SpaceRentList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdvanceList = null;
                    if (DTO.SpaceTotalAdvanceList != null)
                    {
                        SpaceTotalAdvanceList = DTO.SpaceTotalAdvanceList.Split(',');
                        for (int i = 0; i < SpaceTotalAdvanceList.Length; i++)
                        {
                            SpaceTotalAdvanceList[i] = SpaceTotalAdvanceList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdjustmentList = null;
                    if (DTO.SpaceTotalAdjustmentList != null)
                    {
                        SpaceTotalAdjustmentList = DTO.SpaceTotalAdjustmentList.Split(',');
                        for (int i = 0; i < SpaceTotalAdjustmentList.Length; i++)
                        {
                            SpaceTotalAdjustmentList[i] = SpaceTotalAdjustmentList[i].Trim();
                        }
                    }
                    string[] SpaceRemarksList = null;
                    if (DTO.SpaceRemarksList != null)
                    {
                        SpaceRemarksList = DTO.SpaceRemarksList.Split(',');
                        for (int i = 0; i < SpaceRemarksList.Length; i++)
                        {
                            SpaceRemarksList[i] = SpaceRemarksList[i].Trim();
                        }
                    }
                    if (SpaceTypeList != null)
                    {
                        RMS.Models.SpaceInfo SpaceInfo;
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            if (SpaceTypeList[i] != null && SpaceTypeList[i] != "")
                            {
                                SpaceInfo = new RMS.Models.SpaceInfo();
                                SpaceInfo.AgreementSLNo = AI.AgreementSLNo;
                                SpaceInfo.SpaceType = (SpaceTypeList == null) ? null : SpaceTypeList[i].ToString();
                                SpaceInfo.SpaceArea = Convert.ToDouble(SpaceAreaList[i].ToString());
                                SpaceInfo.SpaceRate = Convert.ToDouble(SpaceRateList[i].ToString());
                                SpaceInfo.SpaceRent = Convert.ToDouble(SpaceRentList[i].ToString());
                                SpaceInfo.SpaceTotalAdvance = Convert.ToDouble(SpaceTotalAdvanceList[i].ToString());
                                SpaceInfo.SpaceTotalAdjustment = Convert.ToDouble(SpaceTotalAdjustmentList[i].ToString());
                                SpaceInfo.SpaceRemarks = (SpaceRemarksList == null) ? null : SpaceRemarksList[i].ToString();
                                db.SpaceInfos.Add(SpaceInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Advance Information
                    string[] AdvanceNoList = null;
                    if (DTO.AdvanceNoList != null)
                    {
                        AdvanceNoList = DTO.AdvanceNoList.Split(',');
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            AdvanceNoList[i] = AdvanceNoList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotPeriodList = null;
                    if (DTO.AdvanceSlotPeriodList != null)
                    {
                        AdvanceSlotPeriodList = DTO.AdvanceSlotPeriodList.Split(',');
                        for (int i = 0; i < AdvanceSlotPeriodList.Length; i++)
                        {
                            AdvanceSlotPeriodList[i] = AdvanceSlotPeriodList[i].Trim();
                        }
                    }
                    string[] AdvanceStartDateList = null;
                    if (DTO.AdvanceStartDateList != null)
                    {
                        AdvanceStartDateList = DTO.AdvanceStartDateList.Split(',');
                        for (int i = 0; i < AdvanceStartDateList.Length; i++)
                        {
                            AdvanceStartDateList[i] = AdvanceStartDateList[i].Trim();
                        }
                    }
                    string[] AdvanceEndDateList = null;
                    if (DTO.AdvanceEndDateList != null)
                    {
                        AdvanceEndDateList = DTO.AdvanceEndDateList.Split(',');
                        for (int i = 0; i < AdvanceEndDateList.Length; i++)
                        {
                            AdvanceEndDateList[i] = AdvanceEndDateList[i].Trim();
                        }
                    }
                    string[] AdvanceNoteList = null;
                    if (DTO.AdvanceNoteList != null)
                    {
                        AdvanceNoteList = DTO.AdvanceNoteList.Split(',');
                        for (int i = 0; i < AdvanceNoteList.Length; i++)
                        {
                            AdvanceNoteList[i] = AdvanceNoteList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotAmountList = null;
                    if (DTO.AdvanceSlotAmountList != null)
                    {
                        AdvanceSlotAmountList = DTO.AdvanceSlotAmountList.Split(',');
                        for (int i = 0; i < AdvanceSlotAmountList.Length; i++)
                        {
                            AdvanceSlotAmountList[i] = AdvanceSlotAmountList[i].Trim();
                        }
                    }
                    if (AdvanceNoList != null)
                    {
                        RMS.Models.AdvanceInfo AdvInfo;
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            if (AdvanceNoList[i] != null && AdvanceNoList[i] != "")
                            {
                                AdvInfo = new RMS.Models.AdvanceInfo();
                                AdvInfo.AgreementSLNo = AI.AgreementSLNo;
                                AdvInfo.AdvanceNo = Convert.ToInt32(AdvanceNoList[i].ToString());
                                AdvInfo.AdvanceSlotPeriod = Convert.ToInt32(AdvanceSlotPeriodList[i].ToString());
                                AdvInfo.StartDate = DateTime.ParseExact(AdvanceStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.EndDate = DateTime.ParseExact(AdvanceEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.AdvanceSlotAmount = Convert.ToDouble(AdvanceSlotAmountList[i].ToString());
                                AdvInfo.AdvanceNote = (AdvanceNoteList == null) ? null : AdvanceNoteList[i].ToString();
                                db.AdvanceInfos.Add(AdvInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Review Info
                    string[] ReviewNoList = null;
                    if (DTO.ReviewNoList != null)
                    {
                        ReviewNoList = DTO.ReviewNoList.Split(',');
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            ReviewNoList[i] = ReviewNoList[i].Trim();
                        }
                    }
                    string[] ReviewStartDateList = null;
                    if (DTO.ReviewStartDateList != null)
                    {
                        ReviewStartDateList = DTO.ReviewStartDateList.Split(',');
                        for (int i = 0; i < ReviewStartDateList.Length; i++)
                        {
                            ReviewStartDateList[i] = ReviewStartDateList[i].Trim();
                        }
                    }
                    string[] ReviewEndDateList = null;
                    if (DTO.ReviewEndDateList != null)
                    {
                        ReviewEndDateList = DTO.ReviewEndDateList.Split(',');
                        for (int i = 0; i < ReviewEndDateList.Length; i++)
                        {
                            ReviewEndDateList[i] = ReviewEndDateList[i].Trim();
                        }
                    }
                    string[] ReviewPeriodList = null;
                    if (DTO.ReviewPeriodList != null)
                    {
                        ReviewPeriodList = DTO.ReviewPeriodList.Split(',');
                        for (int i = 0; i < ReviewPeriodList.Length; i++)
                        {
                            ReviewPeriodList[i] = ReviewPeriodList[i].Trim();
                        }
                    }
                    string[] ReviewIncreaseAmountList = null;
                    if (DTO.ReviewIncreaseAmountList != null)
                    {
                        ReviewIncreaseAmountList = DTO.ReviewIncreaseAmountList.Split(',');
                        for (int i = 0; i < ReviewIncreaseAmountList.Length; i++)
                        {
                            ReviewIncreaseAmountList[i] = ReviewIncreaseAmountList[i].Trim();
                        }
                    }
                    string[] ReviewIncreasePercentageList = null;
                    if (DTO.ReviewIncreasePercentageList != null)
                    {
                        ReviewIncreasePercentageList = DTO.ReviewIncreasePercentageList.Split(',');
                        for (int i = 0; i < ReviewIncreasePercentageList.Length; i++)
                        {
                            ReviewIncreasePercentageList[i] = ReviewIncreasePercentageList[i].Trim();
                        }
                    }
                    string[] ReviewNoteList = null;
                    if (DTO.ReviewNoteList != null)
                    {
                        ReviewNoteList = DTO.ReviewNoteList.Split(',');
                        for (int i = 0; i < ReviewNoteList.Length; i++)
                        {
                            ReviewNoteList[i] = ReviewNoteList[i].Trim();
                        }
                    }
                    if (ReviewNoList != null)
                    {
                        RMS.Models.ReviewInfo RI;
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            if (ReviewNoList[i] != null && ReviewNoList[i] != "")
                            {
                                RI = new RMS.Models.ReviewInfo();
                                RI.AgreementSLNo = AI.AgreementSLNo;
                                RI.ReviewNo = Convert.ToInt32(ReviewNoList[i].ToString());
                                RI.Period = Convert.ToInt32(ReviewPeriodList[i].ToString());
                                RI.StartDate = DateTime.ParseExact(ReviewStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                RI.EndDate = DateTime.ParseExact(ReviewEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                RI.IncreaseAmount = Convert.ToDouble(ReviewIncreaseAmountList[i].ToString());
                                RI.IncreasePercentage = Convert.ToDouble(ReviewIncreasePercentageList[i].ToString());
                                RI.ReviewNote = (ReviewNoteList == null) ? null : ReviewNoteList[i].ToString();
                                db.ReviewInfos.Add(RI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Landlord Information
                    string[] VendorCodeList = null;
                    if (DTO.VendorCodeList != null)
                    {
                        VendorCodeList = DTO.VendorCodeList.Split(',');
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            VendorCodeList[i] = VendorCodeList[i].Trim();
                        }
                    }
                    string[] LandlordNameList = null;
                    if (DTO.LandlordNameList != null)
                    {
                        LandlordNameList = DTO.LandlordNameList.Split(',');
                        for (int i = 0; i < LandlordNameList.Length; i++)
                        {
                            LandlordNameList[i] = LandlordNameList[i].Trim();
                        }
                    }
                    string[] ModeOfPaymentList = null;
                    if (DTO.ModeOfPaymentList != null)
                    {
                        ModeOfPaymentList = DTO.ModeOfPaymentList.Split(',');
                        for (int i = 0; i < ModeOfPaymentList.Length; i++)
                        {
                            ModeOfPaymentList[i] = ModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] VendorAdvancePCList = null;
                    if (DTO.VendorAdvancePCList != null)
                    {
                        VendorAdvancePCList = DTO.VendorAdvancePCList.Split(',');
                        for (int i = 0; i < VendorAdvancePCList.Length; i++)
                        {
                            VendorAdvancePCList[i] = VendorAdvancePCList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAmountList = null;
                    if (DTO.VendorAdvanceAmountList != null)
                    {
                        VendorAdvanceAmountList = DTO.VendorAdvanceAmountList.Split(',');
                        for (int i = 0; i < VendorAdvanceAmountList.Length; i++)
                        {
                            VendorAdvanceAmountList[i] = VendorAdvanceAmountList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAdjustmentPCList = null;
                    if (DTO.VendorAdvanceAdjustmentPCList != null)
                    {
                        VendorAdvanceAdjustmentPCList = DTO.VendorAdvanceAdjustmentPCList.Split(',');
                        for (int i = 0; i < VendorAdvanceAdjustmentPCList.Length; i++)
                        {
                            VendorAdvanceAdjustmentPCList[i] = VendorAdvanceAdjustmentPCList[i].Trim();
                        }
                    }
                    //string[] VendorAdvanceAdjustmentAmountList = null;
                    //if (DTO.VendorAdvanceAdjustmentAmountList != null)
                    //{
                    //    VendorAdvanceAdjustmentAmountList = DTO.VendorAdvanceAdjustmentAmountList.Split(',');
                    //    for (int i = 0; i < VendorAdvanceAdjustmentAmountList.Length; i++)
                    //    {
                    //        VendorAdvanceAdjustmentAmountList[i] = VendorAdvanceAdjustmentAmountList[i].Trim();
                    //    }
                    //}
                    string[] VendorTaxPCList = null;
                    if (DTO.VendorTaxPCList != null)
                    {
                        VendorTaxPCList = DTO.VendorTaxPCList.Split(',');
                        for (int i = 0; i < VendorTaxPCList.Length; i++)
                        {
                            VendorTaxPCList[i] = VendorTaxPCList[i].Trim();
                        }
                    }
                    string[] VendorTaxAmountList = null;
                    if (DTO.VendorTaxAmountList != null)
                    {
                        VendorTaxAmountList = DTO.VendorTaxAmountList.Split(',');
                        for (int i = 0; i < VendorTaxAmountList.Length; i++)
                        {
                            VendorTaxAmountList[i] = VendorTaxAmountList[i].Trim();
                        }
                    }
                    string[] VendorVATPCList = null;
                    if (DTO.VendorVATPCList != null)
                    {
                        VendorVATPCList = DTO.VendorVATPCList.Split(',');
                        for (int i = 0; i < VendorVATPCList.Length; i++)
                        {
                            VendorVATPCList[i] = VendorVATPCList[i].Trim();
                        }
                    }
                    string[] VendorVATAmountList = null;
                    if (DTO.VendorVATAmountList != null)
                    {
                        VendorVATAmountList = DTO.VendorVATAmountList.Split(',');
                        for (int i = 0; i < VendorVATAmountList.Length; i++)
                        {
                            VendorVATAmountList[i] = VendorVATAmountList[i].Trim();
                        }
                    }
                    string[] VendorRentPCList = null;
                    if (DTO.VendorRentPCList != null)
                    {
                        VendorRentPCList = DTO.VendorRentPCList.Split(',');
                        for (int i = 0; i < VendorRentPCList.Length; i++)
                        {
                            VendorRentPCList[i] = VendorRentPCList[i].Trim();
                        }
                    }
                    //string[] VendorRentAmountList = null;
                    //if (DTO.VendorRentAmountList != null)
                    //{
                    //    VendorRentAmountList = DTO.VendorRentAmountList.Split(',');
                    //    for (int i = 0; i < VendorRentAmountList.Length; i++)
                    //    {
                    //        VendorRentAmountList[i] = VendorRentAmountList[i].Trim();
                    //    }
                    //}
                    string[] AddressList = null;
                    if (DTO.LLAddressList != null)
                    {
                        AddressList = DTO.LLAddressList.Split(',');
                        for (int i = 0; i < AddressList.Length; i++)
                        {
                            AddressList[i] = AddressList[i].Trim();
                        }
                    }
                    string[] ContactNoList = null;
                    if (DTO.LLContactNoList != null)
                    {
                        ContactNoList = DTO.LLContactNoList.Split(',');
                        for (int i = 0; i < ContactNoList.Length; i++)
                        {
                            ContactNoList[i] = ContactNoList[i].Trim();
                        }
                    }
                    string[] EmailList = null;
                    if (DTO.LLEmailList != null)
                    {
                        EmailList = DTO.LLEmailList.Split(',');
                        for (int i = 0; i < EmailList.Length; i++)
                        {
                            EmailList[i] = EmailList[i].Trim();
                        }
                    }
                    string[] ACNoList = null;
                    if (DTO.ACNoList != null)
                    {
                        ACNoList = DTO.ACNoList.Split(',');
                        for (int i = 0; i < ACNoList.Length; i++)
                        {
                            ACNoList[i] = ACNoList[i].Trim();
                        }
                    }
                    string[] BankNameList = null;
                    if (DTO.BankNameList != null)
                    {
                        BankNameList = DTO.BankNameList.Split(',');
                        for (int i = 0; i < BankNameList.Length; i++)
                        {
                            BankNameList[i] = BankNameList[i].Trim();
                        }
                    }
                    string[] BranchNameList = null;
                    if (DTO.BranchNameList != null)
                    {
                        BranchNameList = DTO.BranchNameList.Split(',');
                        for (int i = 0; i < BranchNameList.Length; i++)
                        {
                            BranchNameList[i] = BranchNameList[i].Trim();
                        }
                    }
                    string[] RoutingNoList = null;
                    if (DTO.RoutingNoList != null)
                    {
                        RoutingNoList = DTO.RoutingNoList.Split(',');
                        for (int i = 0; i < RoutingNoList.Length; i++)
                        {
                            RoutingNoList[i] = RoutingNoList[i].Trim();
                        }
                    }
                    RMS.Models.LandlordInfo LI;
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    for (int i = 0; i < VendorCodeList.Length; i++)
                    {
                        if (VendorCodeList[i] != null && VendorCodeList[i] != "")
                        {
                            LI = new RMS.Models.LandlordInfo();
                            LI.AgreementSLNo = AI.AgreementSLNo;
                            LI.VendorCode = (VendorCodeList == null) ? null : VendorCodeList[i].ToString();
                            LI.LandlordName = (LandlordNameList == null) ? null : LandlordNameList[i].ToString();
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { LI.ModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { LI.ModeOfPayment = ModeOfPaymentLocation.RTGS; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { LI.ModeOfPayment = ModeOfPaymentLocation.EFTN; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { LI.ModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { LI.ModeOfPayment = ModeOfPaymentLocation.Cash; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { LI.ModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { LI.ModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { LI.ModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { LI.ModeOfPayment = ModeOfPaymentLocation.Others; }
                            LI.AdvancePC = Convert.ToDouble(VendorAdvancePCList[i].ToString());
                            LI.AdvanceAdjustmentPC = Convert.ToDouble(VendorAdvanceAdjustmentPCList[i].ToString());
                            LI.TaxPC = Convert.ToDouble(VendorTaxPCList[i].ToString());
                            LI.VATPC = Convert.ToDouble(VendorVATPCList[i].ToString());
                            LI.RentPC = Convert.ToDouble(VendorRentPCList[i].ToString());
                            //==PC Amount
                            LI.AdvanceAmount = (AI.AdvanceAmount * LI.AdvancePC) / 100;
                            LI.TaxAmount = (AI.TaxAmount * LI.TaxPC) / 100;
                            LI.VATAmount = (AI.VATAmount * LI.VATPC) / 100;
                            //==
                            LI.LLAddress = (AddressList == null) ? null : AddressList[i].ToString();
                            LI.LLContactNo = (ContactNoList == null) ? null : ContactNoList[i].ToString();
                            LI.LLEmail = (EmailList == null) ? null : EmailList[i].ToString();
                            LI.ACNo = (ACNoList == null) ? null : ACNoList[i].ToString();
                            LI.BankName = (BankNameList == null) ? null : BankNameList[i].ToString();
                            LI.BranchName = (BranchNameList == null) ? null : BranchNameList[i].ToString();
                            LI.RoutingNo = (RoutingNoList == null) ? null : RoutingNoList[i].ToString();
                            db.LandlordInfos.Add(LI);
                            db.SaveChanges();
                        }
                    }
                    //==Cost Center
                    string[] CCCodeList = null;
                    if (DTO.CCCodeList != null)
                    {
                        CCCodeList = DTO.CCCodeList.Split(',');
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            CCCodeList[i] = CCCodeList[i].Trim();
                        }
                    }
                    string[] CCNameList = null;
                    if (DTO.CCNameList != null)
                    {
                        CCNameList = DTO.CCNameList.Split(',');
                        for (int i = 0; i < CCNameList.Length; i++)
                        {
                            CCNameList[i] = CCNameList[i].Trim();
                        }
                    }
                    string[] SOLCodeList = null;
                    if (DTO.SOLCodeList != null)
                    {
                        SOLCodeList = DTO.SOLCodeList.Split(',');
                        for (int i = 0; i < SOLCodeList.Length; i++)
                        {
                            SOLCodeList[i] = SOLCodeList[i].Trim();
                        }
                    }
                    string[] SOLNameList = null;
                    if (DTO.SOLNameList != null)
                    {
                        SOLNameList = DTO.SOLNameList.Split(',');
                        for (int i = 0; i < SOLNameList.Length; i++)
                        {
                            SOLNameList[i] = SOLNameList[i].Trim();
                        }
                    }
                    string[] CCShareAllotmentList = null;
                    if (DTO.CCShareAllotmentList != null)
                    {
                        CCShareAllotmentList = DTO.CCShareAllotmentList.Split(',');
                        for (int i = 0; i < CCShareAllotmentList.Length; i++)
                        {
                            CCShareAllotmentList[i] = CCShareAllotmentList[i].Trim();
                        }
                    }
                    RMS.Models.CostCenterInfo CC;
                    for (int i = 0; i < CCCodeList.Length; i++)
                    {
                        if (CCCodeList[i] != null && CCCodeList[i] != "")
                        {
                            CC = new RMS.Models.CostCenterInfo();
                            CC.AgreementSLNo = AI.AgreementSLNo;
                            CC.CCCode = (CCCodeList == null) ? null : CCCodeList[i].ToString();
                            CC.CCName = (CCNameList == null) ? null : CCNameList[i].ToString();
                            CC.SOLCode = (SOLCodeList == null) ? null : SOLCodeList[i].ToString();
                            CC.SOLName = (SOLNameList == null) ? null : SOLNameList[i].ToString();
                            CC.CCShareAllotment = Convert.ToDouble(CCShareAllotmentList[i].ToString());
                            db.CostCenterInfos.Add(CC);
                            db.SaveChanges();
                        }
                    }
                    //==Utility Information
                    string[] UtilityVendorCodeList = null;
                    if (DTO.UtilityVendorCodeList != null)
                    {
                        UtilityVendorCodeList = DTO.UtilityVendorCodeList.Split(',');
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            UtilityVendorCodeList[i] = UtilityVendorCodeList[i].Trim();
                        }
                    }
                    string[] UtilityLandlordNameList = null;
                    if (DTO.UtilityLandlordNameList != null)
                    {
                        UtilityLandlordNameList = DTO.UtilityLandlordNameList.Split(',');
                        for (int i = 0; i < UtilityLandlordNameList.Length; i++)
                        {
                            UtilityLandlordNameList[i] = UtilityLandlordNameList[i].Trim();
                        }
                    }
                    string[] UtilityModeOfPaymentList = null;
                    if (DTO.UtilityModeOfPaymentList != null)
                    {
                        UtilityModeOfPaymentList = DTO.UtilityModeOfPaymentList.Split(',');
                        for (int i = 0; i < UtilityModeOfPaymentList.Length; i++)
                        {
                            UtilityModeOfPaymentList[i] = UtilityModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] ServiceChargePCList = null;
                    if (DTO.ServiceChargePCList != null)
                    {
                        ServiceChargePCList = DTO.ServiceChargePCList.Split(',');
                        for (int i = 0; i < ServiceChargePCList.Length; i++)
                        {
                            ServiceChargePCList[i] = ServiceChargePCList[i].Trim();
                        }
                    }
                    string[] ServiceChargeAmountList = null;
                    if (DTO.ServiceChargeAmountList != null)
                    {
                        ServiceChargeAmountList = DTO.ServiceChargeAmountList.Split(',');
                        for (int i = 0; i < ServiceChargeAmountList.Length; i++)
                        {
                            ServiceChargeAmountList[i] = ServiceChargeAmountList[i].Trim();
                        }
                    }
                    string[] OnlineTowerPCList = null;
                    if (DTO.OnlineTowerPCList != null)
                    {
                        OnlineTowerPCList = DTO.OnlineTowerPCList.Split(',');
                        for (int i = 0; i < OnlineTowerPCList.Length; i++)
                        {
                            OnlineTowerPCList[i] = OnlineTowerPCList[i].Trim();
                        }
                    }
                    string[] OnlineTowerAmountList = null;
                    if (DTO.OnlineTowerAmountList != null)
                    {
                        OnlineTowerAmountList = DTO.OnlineTowerAmountList.Split(',');
                        for (int i = 0; i < OnlineTowerAmountList.Length; i++)
                        {
                            OnlineTowerAmountList[i] = OnlineTowerAmountList[i].Trim();
                        }
                    }

                    string[] GeneratorSpacePCList = null;
                    if (DTO.GeneratorSpacePCList != null)
                    {
                        GeneratorSpacePCList = DTO.GeneratorSpacePCList.Split(',');
                        for (int i = 0; i < GeneratorSpacePCList.Length; i++)
                        {
                            GeneratorSpacePCList[i] = GeneratorSpacePCList[i].Trim();
                        }
                    }
                    string[] GeneratorSpaceAmountList = null;
                    if (DTO.GeneratorSpaceAmountList != null)
                    {
                        GeneratorSpaceAmountList = DTO.GeneratorSpaceAmountList.Split(',');
                        for (int i = 0; i < GeneratorSpaceAmountList.Length; i++)
                        {
                            GeneratorSpaceAmountList[i] = GeneratorSpaceAmountList[i].Trim();
                        }
                    }
                    string[] CarParkingPCList = null;
                    if (DTO.CarParkingPCList != null)
                    {
                        CarParkingPCList = DTO.CarParkingPCList.Split(',');
                        for (int i = 0; i < CarParkingPCList.Length; i++)
                        {
                            CarParkingPCList[i] = CarParkingPCList[i].Trim();
                        }
                    }
                    string[] CarParkingAmountList = null;
                    if (DTO.CarParkingAmountList != null)
                    {
                        CarParkingAmountList = DTO.CarParkingAmountList.Split(',');
                        for (int i = 0; i < CarParkingAmountList.Length; i++)
                        {
                            CarParkingAmountList[i] = CarParkingAmountList[i].Trim();
                        }
                    }
                    string[] UtilityTaxPCList = null;
                    if (DTO.UtilityTaxPCList != null)
                    {
                        UtilityTaxPCList = DTO.UtilityTaxPCList.Split(',');
                        for (int i = 0; i < UtilityTaxPCList.Length; i++)
                        {
                            UtilityTaxPCList[i] = UtilityTaxPCList[i].Trim();
                        }
                    }
                    string[] UtilityTaxAmountList = null;
                    if (DTO.UtilityTaxAmountList != null)
                    {
                        UtilityTaxAmountList = DTO.UtilityTaxAmountList.Split(',');
                        for (int i = 0; i < UtilityTaxAmountList.Length; i++)
                        {
                            UtilityTaxAmountList[i] = UtilityTaxAmountList[i].Trim();
                        }
                    }
                    string[] UtilityVATPCList = null;
                    if (DTO.UtilityVATPCList != null)
                    {
                        UtilityVATPCList = DTO.UtilityVATPCList.Split(',');
                        for (int i = 0; i < UtilityVATPCList.Length; i++)
                        {
                            UtilityVATPCList[i] = UtilityVATPCList[i].Trim();
                        }
                    }
                    string[] UtilityVATAmountList = null;
                    if (DTO.UtilityVATAmountList != null)
                    {
                        UtilityVATAmountList = DTO.UtilityVATAmountList.Split(',');
                        for (int i = 0; i < UtilityVATAmountList.Length; i++)
                        {
                            UtilityVATAmountList[i] = UtilityVATAmountList[i].Trim();
                        }
                    }
                    string[] UtilityAddressList = null;
                    if (DTO.UtilityAddressList != null)
                    {
                        UtilityAddressList = DTO.UtilityAddressList.Split(',');
                        for (int i = 0; i < UtilityAddressList.Length; i++)
                        {
                            UtilityAddressList[i] = UtilityAddressList[i].Trim();
                        }
                    }
                    string[] UtilityContactNoList = null;
                    if (DTO.UtilityContactNoList != null)
                    {
                        UtilityContactNoList = DTO.UtilityContactNoList.Split(',');
                        for (int i = 0; i < UtilityContactNoList.Length; i++)
                        {
                            UtilityContactNoList[i] = UtilityContactNoList[i].Trim();
                        }
                    }
                    string[] UtilityEmailList = null;
                    if (DTO.UtilityEmailList != null)
                    {
                        UtilityEmailList = DTO.UtilityEmailList.Split(',');
                        for (int i = 0; i < UtilityEmailList.Length; i++)
                        {
                            UtilityEmailList[i] = UtilityEmailList[i].Trim();
                        }
                    }
                    string[] UtilityACNoList = null;
                    if (DTO.UtilityACNoList != null)
                    {
                        UtilityACNoList = DTO.UtilityACNoList.Split(',');
                        for (int i = 0; i < UtilityACNoList.Length; i++)
                        {
                            UtilityACNoList[i] = UtilityACNoList[i].Trim();
                        }
                    }
                    string[] UtilityBankNameList = null;
                    if (DTO.UtilityBankNameList != null)
                    {
                        UtilityBankNameList = DTO.UtilityBankNameList.Split(',');
                        for (int i = 0; i < UtilityBankNameList.Length; i++)
                        {
                            UtilityBankNameList[i] = UtilityBankNameList[i].Trim();
                        }
                    }
                    string[] UtilityBranchNameList = null;
                    if (DTO.UtilityBranchNameList != null)
                    {
                        UtilityBranchNameList = DTO.UtilityBranchNameList.Split(',');
                        for (int i = 0; i < UtilityBranchNameList.Length; i++)
                        {
                            UtilityBranchNameList[i] = UtilityBranchNameList[i].Trim();
                        }
                    }
                    string[] UtilityRoutingNoList = null;
                    if (DTO.UtilityRoutingNoList != null)
                    {
                        UtilityRoutingNoList = DTO.UtilityRoutingNoList.Split(',');
                        for (int i = 0; i < UtilityRoutingNoList.Length; i++)
                        {
                            UtilityRoutingNoList[i] = UtilityRoutingNoList[i].Trim();
                        }
                    }
                    if (UtilityVendorCodeList != null)
                    {
                        RMS.Models.UtilityInfo UI;
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            if (UtilityVendorCodeList[i] != null && UtilityVendorCodeList[i] != "")
                            {
                                UI = new RMS.Models.UtilityInfo();
                                UI.AgreementSLNo = AI.AgreementSLNo;
                                UI.UtilityVendorCode = (UtilityVendorCodeList == null) ? null : UtilityVendorCodeList[i].ToString();
                                UI.UtilityLandlordName = (UtilityLandlordNameList == null) ? null : UtilityLandlordNameList[i].ToString();

                                if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Others; }

                                UI.ServiceChargePC = Convert.ToDouble(ServiceChargePCList[i].ToString());
                                UI.ServiceChargeAmount = Convert.ToDouble(ServiceChargeAmountList[i].ToString());

                                UI.OnlineTowerPC = Convert.ToDouble(OnlineTowerPCList[i].ToString());
                                UI.OnlineTowerAmount = Convert.ToDouble(OnlineTowerAmountList[i].ToString());

                                UI.GeneratorSpacePC = Convert.ToDouble(GeneratorSpacePCList[i].ToString());
                                UI.GeneratorSpaceAmount = Convert.ToDouble(GeneratorSpaceAmountList[i].ToString());

                                UI.CarParkingPC = Convert.ToDouble(CarParkingPCList[i].ToString());
                                UI.CarParkingAmount = Convert.ToDouble(CarParkingAmountList[i].ToString());

                                UI.TaxPC = Convert.ToDouble(UtilityTaxPCList[i].ToString());
                                UI.TaxAmount = Convert.ToDouble(UtilityTaxAmountList[i].ToString());
                                UI.VATPC = Convert.ToDouble(UtilityVATPCList[i].ToString());
                                UI.VATAmount = Convert.ToDouble(UtilityVATAmountList[i].ToString());
                                UI.UtilityAddress = (UtilityAddressList == null) ? null : UtilityAddressList[i].ToString();
                                UI.UtilityContactNo = (UtilityContactNoList == null) ? null : UtilityContactNoList[i].ToString();
                                UI.UtilityEmail = (UtilityEmailList == null) ? null : UtilityEmailList[i].ToString();
                                UI.UtilityACNo = (UtilityACNoList == null) ? null : UtilityACNoList[i].ToString();
                                UI.UtilityBankName = (UtilityBankNameList == null) ? null : UtilityBankNameList[i].ToString();
                                UI.UtilityBranchName = (UtilityBranchNameList == null) ? null : UtilityBranchNameList[i].ToString();
                                UI.UtilityRoutingNo = (UtilityRoutingNoList == null) ? null : UtilityRoutingNoList[i].ToString();
                                db.UtilityInfos.Add(UI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Attach Documents
                    if (DTO.files != null)
                    {
                        RMS.Models.FileUploadInfo FU;
                        foreach (var file in DTO.files)
                        {
                            //Save file content goes here
                            if (file != null && file.ContentLength > 0)
                            {
                                //==
                                if (db.FileUploadInfos.Any(x => x.AgreementSLNo == AI.AgreementSLNo && x.FileName == file.FileName) == false)
                                {
                                    FU = new RMS.Models.FileUploadInfo();
                                    FU.AgreementSLNo = AI.AgreementSLNo;
                                    FU.FileName = file.FileName;
                                    FU.FilePath = "Content/FileUpload/" + AI.AliasCode + "/" + file.FileName;
                                    db.FileUploadInfos.Add(FU);
                                    db.SaveChanges();
                                }
                                //==
                                var originalDirectory = new DirectoryInfo(string.Format("{0}Content\\FileUpload\\", Server.MapPath(@"\")));
                                string pathString = Path.Combine(originalDirectory.ToString(), AI.AliasCode);
                                if (Directory.Exists(pathString) == false)
                                {
                                    System.IO.Directory.CreateDirectory(pathString);
                                }
                                var path = string.Format("{0}\\{1}", pathString, file.FileName);
                                file.SaveAs(path);
                            }
                        }
                    }
                    //===Delete Existing Draft
                    //int DraftAgreementSLNo = db.DraftAgreementInfos.Where(x => x.AgreementType == AgreementType.Regular && x.UserSLNo == LoginUserSLNo).Select(x => x.AgreementSLNo).SingleOrDefault();
                    //if (DraftAgreementSLNo != 0)
                    //{
                    //    //===Delete Existing Draft Advance Info
                    //    db.DraftAdvanceInfos.RemoveRange(db.DraftAdvanceInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Review Info
                    //    db.DraftReviewInfos.RemoveRange(db.DraftReviewInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Landlord Info
                    //    db.DraftLandlordInfos.RemoveRange(db.DraftLandlordInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Cost Center Info
                    //    db.DraftCostCenterInfos.RemoveRange(db.DraftCostCenterInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Utility Info
                    //    db.DraftUtilityInfos.RemoveRange(db.DraftUtilityInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Agreement Info
                    //    db.DraftAgreementInfos.RemoveRange(db.DraftAgreementInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //}
                    //==
                    AlertMsg = "The agreement: " + AI.AgreementName + " has been created.";
                    return Json(new { CheckStatus = true, AgreementCode = AI.AgreementCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult DraftCreate(RMS.Models.AgreementInfoDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    RMS.Models.DraftAgreementInfo AI = new RMS.Models.DraftAgreementInfo();
                    DTOBasic dtoBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    string LoginUserID = (string)Session["LoginUserID"];
                    //==Save to Agreement Info Table
                    AI.AgreementType = AgreementType.Regular;
                    //==Basic Info
                    AI.PremiseTypeSLNo = DTO.PremiseTypeSLNo;
                    AI.PremiseName = DTO.PremiseName;
                    AI.PremiseAddress = DTO.PremiseAddress;
                    AI.ClusterGroup = DTO.ClusterGroup;
                    AI.ConcernBranch = DTO.ConcernBranch;
                    AI.InspectorName = DTO.InspectorName;
                    AI.InspectorContactNo = DTO.InspectorContactNo;
                    //==Agreement Info
                    AI.AgreementName = DTO.AgreementName;
                    if (DTO.AgreementStartDate != null)
                    {
                        AI.AgreementStartDate = DateTime.ParseExact(DTO.AgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.AgreementStartDate = DateTime.Now;
                    }
                    if (DTO.AgreementEndDate != null)
                    {
                        AI.AgreementEndDate = DateTime.ParseExact(DTO.AgreementEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.AgreementEndDate = DateTime.Now;
                    }
                    AI.AgreementPeriod = DTO.AgreementPeriod;
                    AI.RenewalFrequency = AI.AgreementPeriod;
                    AI.RentDueDay = DTO.RentDueDay;
                    AI.UOM = DTO.UOM;
                    AI.TotalArea = DTO.TotalArea;
                    AI.CostPerUnit = DTO.CostPerUnit;
                    if (DTO.TotalRentAmount > 0)
                    {
                        AI.TotalRentAmount = DTO.TotalRentAmount;
                    }
                    else
                    {
                        AI.TotalRentAmount = 0;
                    }
                    AI.SecurityDepositAmount = DTO.SecurityDepositAmount;
                    AI.AdvanceAmount = DTO.AdvanceAmount;
                    AI.AdvanceAdjustmentPeriod = DTO.AdvanceAdjustmentPeriod;
                    AI.AdvanceAdjustmentAmount = DTO.AdvanceAdjustmentAmount;
                    AI.TaxPercentage = DTO.TaxPercentage;
                    if (DTO.TaxAmount > 0)
                    {
                        AI.TaxAmount = DTO.TaxAmount;
                    }
                    else
                    {
                        AI.TaxAmount = 0;
                    }
                    AI.VATPercentage = DTO.VATPercentage;
                    if (DTO.VATAmount > 0)
                    {
                        AI.VATAmount = DTO.VATAmount;
                    }
                    else
                    {
                        AI.VATAmount = 0;
                    }
                    AI.NetRentAmount = AI.TotalRentAmount - AI.AdvanceAdjustmentAmount;
                    AI.AgreementStatus = AgreementStatus.Created;
                    AI.AgreementText = null;
                    AI.Status = dtoBasic.active;
                    AI.UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    AI.EntryDate = DateTime.Now;
                    AI.IsDeleted = false;
                    AI.ReviewFrequency = DTO.ReviewFrequency;
                    AI.ReviewPercentage = DTO.ReviewPercentage;
                    AI.TaxType = DTO.TaxType;
                    AI.VatType = DTO.VatType;
                    AI.ServiceCharge = DTO.ServiceCharge;
                    AI.OnlineTower = DTO.OnlineTower;
                    AI.GeneratorSpace = DTO.GeneratorSpace;
                    AI.CarParking = DTO.CarParking;
                    //==Control Data
                    AI.CashGLCode = DTO.CashGLCode;
                    AI.BankGLCode = DTO.BankGLCode;
                    AI.AdvanceGLCode = DTO.AdvanceGLCode;
                    AI.AdvanceAdjustmentGLCode = DTO.AdvanceAdjustmentGLCode;
                    AI.RentGLCode = DTO.RentGLCode;
                    AI.ServiceChargeGLCode = DTO.ServiceChargeGLCode;
                    AI.TaxGLCode = DTO.TaxGLCode;
                    AI.VATGLCode = DTO.VATGLCode;
                    AI.ProvisionGLTax = DTO.ProvisionGLTax;
                    AI.ProvisionGLAP = DTO.ProvisionGLAP;
                    AI.RTGSGL = DTO.RTGSGL;
                    AI.EFTNGL = DTO.EFTNGL;
                    AI.PayOrderGL = DTO.PayOrderGL;
                    AI.IBBPaymentGL = DTO.IBBPaymentGL;
                    AI.CityBrokerageGL = DTO.CityBrokerageGL;
                    AI.CityCapitalGL = DTO.CityCapitalGL;
                    AI.OthersGL = DTO.OthersGL;
                    //=====
                    AI.PremiseAddressBangla = DTO.PremiseAddressBangla;
                    AI.AreaStatus = DTO.AreaStatus;
                    AI.RegionalOffice = DTO.RegionalOffice;
                    AI.PrimarySOL = DTO.PrimarySOL;
                    AI.AttachedControl = DTO.AttachedControl;
                    AI.ControllerOfficeDistance = DTO.ControllerOfficeDistance;
                    AI.RoutingNumber = DTO.RoutingNumber;
                    AI.Division = DTO.Division;
                    AI.District = DTO.District;
                    AI.Upazila = DTO.Upazila;
                    AI.Thana = DTO.Thana;
                    AI.ThanaCode = DTO.ThanaCode;
                    AI.Pourasabha = DTO.Pourasabha;
                    AI.PourasabhaType = DTO.PourasabhaType;
                    AI.UnionName = DTO.UnionName;
                    AI.WardNo = DTO.WardNo;
                    AI.PremisesTypeforAccounts = DTO.PremisesTypeforAccounts;
                    AI.ParentAgreementCode = DTO.ParentAgreementCode;
                    AI.ElectricityLoad = DTO.ElectricityLoad;
                    AI.ElectricityProvidedBy = DTO.ElectricityProvidedBy;
                    AI.AITBourneBy = DTO.AITBourneBy;
                    AI.CommercialPermission = DTO.CommercialPermission;
                    AI.BuildingPlan = DTO.BuildingPlan;
                    AI.PremisesSituatedFloor = DTO.PremisesSituatedFloor;
                    AI.BangladeshBankApproval = DTO.BangladeshBankApproval;
                    AI.BangladeshBankReference = DTO.BangladeshBankReference;
                    AI.ITTowerRentClause = DTO.ITTowerRentClause;
                    AI.TerminationClause = DTO.TerminationClause;
                    AI.TerminationNoticePeriod = DTO.TerminationNoticePeriod;
                    if (DTO.PremisesOpeningDate != null)
                    {
                        AI.PremisesOpeningDate = DateTime.ParseExact(DTO.PremisesOpeningDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.PremisesOpeningDate = null;
                    }
                    if (DTO.DocumentDate != null)
                    {
                        AI.DocumentDate = DateTime.ParseExact(DTO.DocumentDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.DocumentDate = null;
                    }
                    AI.Remarks = DTO.Remarks;
                    AI.AgreementRemarks = DTO.AgreementRemarks;
                    AI.AdvanceRemarks = DTO.AdvanceRemarks;
                    AI.ReviewRemarks = DTO.ReviewRemarks;
                    AI.LLRemarks = DTO.LLRemarks;
                    AI.CCRemarks = DTO.CCRemarks;
                    AI.UtilityRemarks = DTO.UtilityRemarks;
                    AI.ControlDataRemarks = DTO.ControlDataRemarks;

                    AI.BorrowingRate = DTO.BorrowingRate;
                    AI.PaymentMethod = DTO.PaymentMethod;
                    AI.IsIFRSEnable = DTO.IsIFRSEnable;
                    AI.CalculationMethod = DTO.CalculationMethod;
                    AI.WithHoldingCode = DTO.WithHoldingCode;
                    AI.AdditionalExpense = DTO.AdditionalExpense;
                    AI.InitialDirectCost = DTO.InitialDirectCost;
                    AI.DismantlingCost = DTO.DismantlingCost;
                    AI.CarParkingNo = DTO.CarParkingNo;
                    AI.WaterBillType = DTO.WaterBillType;
                    AI.WaterBillAmount = DTO.WaterBillAmount;
                    if (DTO.IFRSEffectiveDate != null && DTO.IsIFRSEnable == true)
                    {
                        AI.IFRSEffectiveDate = DateTime.ParseExact(DTO.IFRSEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.IFRSEffectiveDate = null;
                    }
                    AI.CorporateTaxRate = DTO.CorporateTaxRate;
                    //=====
                    db.DraftAgreementInfos.Add(AI);
                    db.SaveChanges();
                    //==Space Information
                    string[] SpaceTypeList = null;
                    if (DTO.SpaceTypeList != null)
                    {
                        SpaceTypeList = DTO.SpaceTypeList.Split(',');
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            SpaceTypeList[i] = SpaceTypeList[i].Trim();
                        }
                    }
                    string[] SpaceAreaList = null;
                    if (DTO.SpaceAreaList != null)
                    {
                        SpaceAreaList = DTO.SpaceAreaList.Split(',');
                        for (int i = 0; i < SpaceAreaList.Length; i++)
                        {
                            SpaceAreaList[i] = SpaceAreaList[i].Trim();
                        }
                    }
                    string[] SpaceRateList = null;
                    if (DTO.SpaceRateList != null)
                    {
                        SpaceRateList = DTO.SpaceRateList.Split(',');
                        for (int i = 0; i < SpaceRateList.Length; i++)
                        {
                            SpaceRateList[i] = SpaceRateList[i].Trim();
                        }
                    }
                    string[] SpaceRentList = null;
                    if (DTO.SpaceRentList != null)
                    {
                        SpaceRentList = DTO.SpaceRentList.Split(',');
                        for (int i = 0; i < SpaceRentList.Length; i++)
                        {
                            SpaceRentList[i] = SpaceRentList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdvanceList = null;
                    if (DTO.SpaceTotalAdvanceList != null)
                    {
                        SpaceTotalAdvanceList = DTO.SpaceTotalAdvanceList.Split(',');
                        for (int i = 0; i < SpaceTotalAdvanceList.Length; i++)
                        {
                            SpaceTotalAdvanceList[i] = SpaceTotalAdvanceList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdjustmentList = null;
                    if (DTO.SpaceTotalAdjustmentList != null)
                    {
                        SpaceTotalAdjustmentList = DTO.SpaceTotalAdjustmentList.Split(',');
                        for (int i = 0; i < SpaceTotalAdjustmentList.Length; i++)
                        {
                            SpaceTotalAdjustmentList[i] = SpaceTotalAdjustmentList[i].Trim();
                        }
                    }
                    string[] SpaceRemarksList = null;
                    if (DTO.SpaceRemarksList != null)
                    {
                        SpaceRemarksList = DTO.SpaceRemarksList.Split(',');
                        for (int i = 0; i < SpaceRemarksList.Length; i++)
                        {
                            SpaceRemarksList[i] = SpaceRemarksList[i].Trim();
                        }
                    }
                    if (SpaceTypeList != null)
                    {
                        RMS.Models.DraftSpaceInfo SpaceInfo;
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            if (SpaceTypeList[i] != null && SpaceTypeList[i] != "")
                            {
                                SpaceInfo = new RMS.Models.DraftSpaceInfo();
                                SpaceInfo.AgreementSLNo = AI.AgreementSLNo;
                                SpaceInfo.SpaceType = (SpaceTypeList == null) ? null : SpaceTypeList[i].ToString();
                                SpaceInfo.SpaceArea = Convert.ToDouble(SpaceAreaList[i].ToString());
                                SpaceInfo.SpaceRate = Convert.ToDouble(SpaceRateList[i].ToString());
                                SpaceInfo.SpaceRent = Convert.ToDouble(SpaceRentList[i].ToString());
                                SpaceInfo.SpaceTotalAdvance = Convert.ToDouble(SpaceTotalAdvanceList[i].ToString());
                                SpaceInfo.SpaceTotalAdjustment = Convert.ToDouble(SpaceTotalAdjustmentList[i].ToString());
                                SpaceInfo.SpaceRemarks = (SpaceRemarksList == null) ? null : SpaceRemarksList[i].ToString();
                                db.DraftSpaceInfos.Add(SpaceInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Advance Information
                    string[] AdvanceNoList = null;
                    if (DTO.AdvanceNoList != null)
                    {
                        AdvanceNoList = DTO.AdvanceNoList.Split(',');
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            AdvanceNoList[i] = AdvanceNoList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotPeriodList = null;
                    if (DTO.AdvanceSlotPeriodList != null)
                    {
                        AdvanceSlotPeriodList = DTO.AdvanceSlotPeriodList.Split(',');
                        for (int i = 0; i < AdvanceSlotPeriodList.Length; i++)
                        {
                            AdvanceSlotPeriodList[i] = AdvanceSlotPeriodList[i].Trim();
                        }
                    }
                    string[] AdvanceStartDateList = null;
                    if (DTO.AdvanceStartDateList != null)
                    {
                        AdvanceStartDateList = DTO.AdvanceStartDateList.Split(',');
                        for (int i = 0; i < AdvanceStartDateList.Length; i++)
                        {
                            AdvanceStartDateList[i] = AdvanceStartDateList[i].Trim();
                        }
                    }
                    string[] AdvanceEndDateList = null;
                    if (DTO.AdvanceEndDateList != null)
                    {
                        AdvanceEndDateList = DTO.AdvanceEndDateList.Split(',');
                        for (int i = 0; i < AdvanceEndDateList.Length; i++)
                        {
                            AdvanceEndDateList[i] = AdvanceEndDateList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotAmountList = null;
                    if (DTO.AdvanceSlotAmountList != null)
                    {
                        AdvanceSlotAmountList = DTO.AdvanceSlotAmountList.Split(',');
                        for (int i = 0; i < AdvanceSlotAmountList.Length; i++)
                        {
                            AdvanceSlotAmountList[i] = AdvanceSlotAmountList[i].Trim();
                        }
                    }
                    string[] AdvanceNoteList = null;
                    if (DTO.AdvanceNoteList != null)
                    {
                        AdvanceNoteList = DTO.AdvanceNoteList.Split(',');
                        for (int i = 0; i < AdvanceNoteList.Length; i++)
                        {
                            AdvanceNoteList[i] = AdvanceNoteList[i].Trim();
                        }
                    }
                    if (AdvanceNoList != null)
                    {
                        RMS.Models.DraftAdvanceInfo AdvInfo;
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            if (AdvanceNoList[i] != null && AdvanceNoList[i] != "")
                            {
                                AdvInfo = new RMS.Models.DraftAdvanceInfo();
                                AdvInfo.AgreementSLNo = AI.AgreementSLNo;
                                AdvInfo.AdvanceNo = Convert.ToInt32(AdvanceNoList[i].ToString());
                                AdvInfo.AdvanceSlotPeriod = Convert.ToInt32(AdvanceSlotPeriodList[i].ToString());
                                AdvInfo.StartDate = DateTime.ParseExact(AdvanceStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.EndDate = DateTime.ParseExact(AdvanceEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.AdvanceSlotAmount = Convert.ToDouble(AdvanceSlotAmountList[i].ToString());
                                AdvInfo.AdvanceNote = (AdvanceNoteList == null) ? null : AdvanceNoteList[i].ToString();
                                db.DraftAdvanceInfos.Add(AdvInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Review Info
                    string[] ReviewNoList = null;
                    if (DTO.ReviewNoList != null)
                    {
                        ReviewNoList = DTO.ReviewNoList.Split(',');
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            ReviewNoList[i] = ReviewNoList[i].Trim();
                        }
                    }
                    string[] ReviewStartDateList = null;
                    if (DTO.ReviewStartDateList != null)
                    {
                        ReviewStartDateList = DTO.ReviewStartDateList.Split(',');
                        for (int i = 0; i < ReviewStartDateList.Length; i++)
                        {
                            ReviewStartDateList[i] = ReviewStartDateList[i].Trim();
                        }
                    }
                    string[] ReviewEndDateList = null;
                    if (DTO.ReviewEndDateList != null)
                    {
                        ReviewEndDateList = DTO.ReviewEndDateList.Split(',');
                        for (int i = 0; i < ReviewEndDateList.Length; i++)
                        {
                            ReviewEndDateList[i] = ReviewEndDateList[i].Trim();
                        }
                    }
                    string[] ReviewPeriodList = null;
                    if (DTO.ReviewPeriodList != null)
                    {
                        ReviewPeriodList = DTO.ReviewPeriodList.Split(',');
                        for (int i = 0; i < ReviewPeriodList.Length; i++)
                        {
                            ReviewPeriodList[i] = ReviewPeriodList[i].Trim();
                        }
                    }
                    string[] ReviewIncreaseAmountList = null;
                    if (DTO.ReviewIncreaseAmountList != null)
                    {
                        ReviewIncreaseAmountList = DTO.ReviewIncreaseAmountList.Split(',');
                        for (int i = 0; i < ReviewIncreaseAmountList.Length; i++)
                        {
                            ReviewIncreaseAmountList[i] = ReviewIncreaseAmountList[i].Trim();
                        }
                    }
                    string[] ReviewIncreasePercentageList = null;
                    if (DTO.ReviewIncreasePercentageList != null)
                    {
                        ReviewIncreasePercentageList = DTO.ReviewIncreasePercentageList.Split(',');
                        for (int i = 0; i < ReviewIncreasePercentageList.Length; i++)
                        {
                            ReviewIncreasePercentageList[i] = ReviewIncreasePercentageList[i].Trim();
                        }
                    }
                    string[] ReviewNoteList = null;
                    if (DTO.ReviewNoteList != null)
                    {
                        ReviewNoteList = DTO.ReviewNoteList.Split(',');
                        for (int i = 0; i < ReviewNoteList.Length; i++)
                        {
                            ReviewNoteList[i] = ReviewNoteList[i].Trim();
                        }
                    }
                    if (ReviewNoList != null)
                    {
                        RMS.Models.DraftReviewInfo RI;
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            if (ReviewNoList[i] != null && ReviewNoList[i] != "")
                            {
                                RI = new RMS.Models.DraftReviewInfo();
                                RI.AgreementSLNo = AI.AgreementSLNo;
                                RI.ReviewNo = Convert.ToInt32(ReviewNoList[i].ToString());
                                RI.Period = Convert.ToInt32(ReviewPeriodList[i].ToString());
                                RI.StartDate = DateTime.ParseExact(ReviewStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                RI.EndDate = DateTime.ParseExact(ReviewEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                RI.IncreaseAmount = Convert.ToDouble(ReviewIncreaseAmountList[i].ToString());
                                RI.IncreasePercentage = Convert.ToDouble(ReviewIncreasePercentageList[i].ToString());
                                RI.ReviewNote = (ReviewNoteList == null) ? null : ReviewNoteList[i].ToString();
                                db.DraftReviewInfos.Add(RI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Landlord Information
                    string[] VendorCodeList = null;
                    if (DTO.VendorCodeList != null)
                    {
                        VendorCodeList = DTO.VendorCodeList.Split(',');
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            VendorCodeList[i] = VendorCodeList[i].Trim();
                        }
                    }
                    string[] LandlordNameList = null;
                    if (DTO.LandlordNameList != null)
                    {
                        LandlordNameList = DTO.LandlordNameList.Split(',');
                        for (int i = 0; i < LandlordNameList.Length; i++)
                        {
                            LandlordNameList[i] = LandlordNameList[i].Trim();
                        }
                    }
                    string[] ModeOfPaymentList = null;
                    if (DTO.ModeOfPaymentList != null)
                    {
                        ModeOfPaymentList = DTO.ModeOfPaymentList.Split(',');
                        for (int i = 0; i < ModeOfPaymentList.Length; i++)
                        {
                            ModeOfPaymentList[i] = ModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] VendorAdvancePCList = null;
                    if (DTO.VendorAdvancePCList != null)
                    {
                        VendorAdvancePCList = DTO.VendorAdvancePCList.Split(',');
                        for (int i = 0; i < VendorAdvancePCList.Length; i++)
                        {
                            VendorAdvancePCList[i] = VendorAdvancePCList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAmountList = null;
                    if (DTO.VendorAdvanceAmountList != null)
                    {
                        VendorAdvanceAmountList = DTO.VendorAdvanceAmountList.Split(',');
                        for (int i = 0; i < VendorAdvanceAmountList.Length; i++)
                        {
                            VendorAdvanceAmountList[i] = VendorAdvanceAmountList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAdjustmentPCList = null;
                    if (DTO.VendorAdvanceAdjustmentPCList != null)
                    {
                        VendorAdvanceAdjustmentPCList = DTO.VendorAdvanceAdjustmentPCList.Split(',');
                        for (int i = 0; i < VendorAdvanceAdjustmentPCList.Length; i++)
                        {
                            VendorAdvanceAdjustmentPCList[i] = VendorAdvanceAdjustmentPCList[i].Trim();
                        }
                    }
                    //string[] VendorAdvanceAdjustmentAmountList = null;
                    //if (DTO.VendorAdvanceAdjustmentAmountList != null)
                    //{
                    //    VendorAdvanceAdjustmentAmountList = DTO.VendorAdvanceAdjustmentAmountList.Split(',');
                    //    for (int i = 0; i < VendorAdvanceAdjustmentAmountList.Length; i++)
                    //    {
                    //        VendorAdvanceAdjustmentAmountList[i] = VendorAdvanceAdjustmentAmountList[i].Trim();
                    //    }
                    //}
                    string[] VendorTaxPCList = null;
                    if (DTO.VendorTaxPCList != null)
                    {
                        VendorTaxPCList = DTO.VendorTaxPCList.Split(',');
                        for (int i = 0; i < VendorTaxPCList.Length; i++)
                        {
                            VendorTaxPCList[i] = VendorTaxPCList[i].Trim();
                        }
                    }
                    string[] VendorTaxAmountList = null;
                    if (DTO.VendorTaxAmountList != null)
                    {
                        VendorTaxAmountList = DTO.VendorTaxAmountList.Split(',');
                        for (int i = 0; i < VendorTaxAmountList.Length; i++)
                        {
                            VendorTaxAmountList[i] = VendorTaxAmountList[i].Trim();
                        }
                    }
                    string[] VendorVATPCList = null;
                    if (DTO.VendorVATPCList != null)
                    {
                        VendorVATPCList = DTO.VendorVATPCList.Split(',');
                        for (int i = 0; i < VendorVATPCList.Length; i++)
                        {
                            VendorVATPCList[i] = VendorVATPCList[i].Trim();
                        }
                    }
                    string[] VendorVATAmountList = null;
                    if (DTO.VendorVATAmountList != null)
                    {
                        VendorVATAmountList = DTO.VendorVATAmountList.Split(',');
                        for (int i = 0; i < VendorVATAmountList.Length; i++)
                        {
                            VendorVATAmountList[i] = VendorVATAmountList[i].Trim();
                        }
                    }
                    string[] VendorRentPCList = null;
                    if (DTO.VendorRentPCList != null)
                    {
                        VendorRentPCList = DTO.VendorRentPCList.Split(',');
                        for (int i = 0; i < VendorRentPCList.Length; i++)
                        {
                            VendorRentPCList[i] = VendorRentPCList[i].Trim();
                        }
                    }
                    //string[] VendorRentAmountList = null;
                    //if (DTO.VendorRentAmountList != null)
                    //{
                    //    VendorRentAmountList = DTO.VendorRentAmountList.Split(',');
                    //    for (int i = 0; i < VendorRentAmountList.Length; i++)
                    //    {
                    //        VendorRentAmountList[i] = VendorRentAmountList[i].Trim();
                    //    }
                    //}
                    string[] AddressList = null;
                    if (DTO.LLAddressList != null)
                    {
                        AddressList = DTO.LLAddressList.Split(',');
                        for (int i = 0; i < AddressList.Length; i++)
                        {
                            AddressList[i] = AddressList[i].Trim();
                        }
                    }
                    string[] ContactNoList = null;
                    if (DTO.LLContactNoList != null)
                    {
                        ContactNoList = DTO.LLContactNoList.Split(',');
                        for (int i = 0; i < ContactNoList.Length; i++)
                        {
                            ContactNoList[i] = ContactNoList[i].Trim();
                        }
                    }
                    string[] EmailList = null;
                    if (DTO.LLEmailList != null)
                    {
                        EmailList = DTO.LLEmailList.Split(',');
                        for (int i = 0; i < EmailList.Length; i++)
                        {
                            EmailList[i] = EmailList[i].Trim();
                        }
                    }
                    string[] ACNoList = null;
                    if (DTO.ACNoList != null)
                    {
                        ACNoList = DTO.ACNoList.Split(',');
                        for (int i = 0; i < ACNoList.Length; i++)
                        {
                            ACNoList[i] = ACNoList[i].Trim();
                        }
                    }
                    string[] BankNameList = null;
                    if (DTO.BankNameList != null)
                    {
                        BankNameList = DTO.BankNameList.Split(',');
                        for (int i = 0; i < BankNameList.Length; i++)
                        {
                            BankNameList[i] = BankNameList[i].Trim();
                        }
                    }
                    string[] BranchNameList = null;
                    if (DTO.BranchNameList != null)
                    {
                        BranchNameList = DTO.BranchNameList.Split(',');
                        for (int i = 0; i < BranchNameList.Length; i++)
                        {
                            BranchNameList[i] = BranchNameList[i].Trim();
                        }
                    }
                    string[] RoutingNoList = null;
                    if (DTO.RoutingNoList != null)
                    {
                        RoutingNoList = DTO.RoutingNoList.Split(',');
                        for (int i = 0; i < RoutingNoList.Length; i++)
                        {
                            RoutingNoList[i] = RoutingNoList[i].Trim();
                        }
                    }
                    RMS.Models.DraftLandlordInfo LI;
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    if (VendorCodeList != null)
                    {
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            if (VendorCodeList[i] != null && VendorCodeList[i] != "")
                            {
                                LI = new RMS.Models.DraftLandlordInfo();
                                LI.AgreementSLNo = AI.AgreementSLNo;
                                LI.VendorCode = (VendorCodeList == null) ? null : VendorCodeList[i].ToString();
                                LI.LandlordName = (LandlordNameList == null) ? null : LandlordNameList[i].ToString();
                                if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { LI.ModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { LI.ModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { LI.ModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { LI.ModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { LI.ModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { LI.ModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { LI.ModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { LI.ModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { LI.ModeOfPayment = ModeOfPaymentLocation.Others; }
                                LI.AdvancePC = Convert.ToDouble(VendorAdvancePCList[i].ToString());
                                LI.AdvanceAdjustmentPC = Convert.ToDouble(VendorAdvanceAdjustmentPCList[i].ToString());
                                LI.TaxPC = Convert.ToDouble(VendorTaxPCList[i].ToString());
                                LI.VATPC = Convert.ToDouble(VendorVATPCList[i].ToString());
                                LI.RentPC = Convert.ToDouble(VendorRentPCList[i].ToString());
                                //==PC Amount
                                LI.AdvanceAmount = (AI.AdvanceAmount * LI.AdvancePC) / 100;
                                LI.TaxAmount = (AI.TaxAmount * LI.TaxPC) / 100;
                                LI.VATAmount = (AI.VATAmount * LI.VATPC) / 100;
                                //==
                                LI.LLAddress = (AddressList == null) ? null : AddressList[i].ToString();
                                LI.LLContactNo = (ContactNoList == null) ? null : ContactNoList[i].ToString();
                                LI.LLEmail = (EmailList == null) ? null : EmailList[i].ToString();
                                LI.ACNo = (ACNoList == null) ? null : ACNoList[i].ToString();
                                LI.BankName = (BankNameList == null) ? null : BankNameList[i].ToString();
                                LI.BranchName = (BranchNameList == null) ? null : BranchNameList[i].ToString();
                                LI.RoutingNo = (RoutingNoList == null) ? null : RoutingNoList[i].ToString();
                                db.DraftLandlordInfos.Add(LI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Cost Center
                    string[] CCCodeList = null;
                    if (DTO.CCCodeList != null)
                    {
                        CCCodeList = DTO.CCCodeList.Split(',');
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            CCCodeList[i] = CCCodeList[i].Trim();
                        }
                    }
                    string[] CCNameList = null;
                    if (DTO.CCNameList != null)
                    {
                        CCNameList = DTO.CCNameList.Split(',');
                        for (int i = 0; i < CCNameList.Length; i++)
                        {
                            CCNameList[i] = CCNameList[i].Trim();
                        }
                    }
                    string[] SOLCodeList = null;
                    if (DTO.SOLCodeList != null)
                    {
                        SOLCodeList = DTO.SOLCodeList.Split(',');
                        for (int i = 0; i < SOLCodeList.Length; i++)
                        {
                            SOLCodeList[i] = SOLCodeList[i].Trim();
                        }
                    }
                    string[] SOLNameList = null;
                    if (DTO.SOLNameList != null)
                    {
                        SOLNameList = DTO.SOLNameList.Split(',');
                        for (int i = 0; i < SOLNameList.Length; i++)
                        {
                            SOLNameList[i] = SOLNameList[i].Trim();
                        }
                    }
                    string[] CCShareAllotmentList = null;
                    if (DTO.CCShareAllotmentList != null)
                    {
                        CCShareAllotmentList = DTO.CCShareAllotmentList.Split(',');
                        for (int i = 0; i < CCShareAllotmentList.Length; i++)
                        {
                            CCShareAllotmentList[i] = CCShareAllotmentList[i].Trim();
                        }
                    }
                    if (CCCodeList != null)
                    {
                        RMS.Models.DraftCostCenterInfo CC;
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            if (CCCodeList[i] != null && CCCodeList[i] != "")
                            {
                                CC = new RMS.Models.DraftCostCenterInfo();
                                CC.AgreementSLNo = AI.AgreementSLNo;
                                CC.CCCode = (CCCodeList == null) ? null : CCCodeList[i].ToString();
                                CC.CCName = (CCNameList == null) ? null : CCNameList[i].ToString();
                                CC.SOLCode = (SOLCodeList == null) ? null : SOLCodeList[i].ToString();
                                CC.SOLName = (SOLNameList == null) ? null : SOLNameList[i].ToString();
                                CC.CCShareAllotment = Convert.ToDouble(CCShareAllotmentList[i].ToString());
                                db.DraftCostCenterInfos.Add(CC);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Utility Information
                    string[] UtilityVendorCodeList = null;
                    if (DTO.UtilityVendorCodeList != null)
                    {
                        UtilityVendorCodeList = DTO.UtilityVendorCodeList.Split(',');
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            UtilityVendorCodeList[i] = UtilityVendorCodeList[i].Trim();
                        }
                    }
                    string[] UtilityLandlordNameList = null;
                    if (DTO.UtilityLandlordNameList != null)
                    {
                        UtilityLandlordNameList = DTO.UtilityLandlordNameList.Split(',');
                        for (int i = 0; i < UtilityLandlordNameList.Length; i++)
                        {
                            UtilityLandlordNameList[i] = UtilityLandlordNameList[i].Trim();
                        }
                    }
                    string[] UtilityModeOfPaymentList = null;
                    if (DTO.UtilityModeOfPaymentList != null)
                    {
                        UtilityModeOfPaymentList = DTO.UtilityModeOfPaymentList.Split(',');
                        for (int i = 0; i < UtilityModeOfPaymentList.Length; i++)
                        {
                            UtilityModeOfPaymentList[i] = UtilityModeOfPaymentList[i].Trim();
                        }
                    }

                    string[] ServiceChargePCList = null;
                    if (DTO.ServiceChargePCList != null)
                    {
                        ServiceChargePCList = DTO.ServiceChargePCList.Split(',');
                        for (int i = 0; i < ServiceChargePCList.Length; i++)
                        {
                            ServiceChargePCList[i] = ServiceChargePCList[i].Trim();
                        }
                    }
                    string[] ServiceChargeAmountList = null;
                    if (DTO.ServiceChargeAmountList != null)
                    {
                        ServiceChargeAmountList = DTO.ServiceChargeAmountList.Split(',');
                        for (int i = 0; i < ServiceChargeAmountList.Length; i++)
                        {
                            ServiceChargeAmountList[i] = ServiceChargeAmountList[i].Trim();
                        }
                    }

                    string[] OnlineTowerPCList = null;
                    if (DTO.OnlineTowerPCList != null)
                    {
                        OnlineTowerPCList = DTO.OnlineTowerPCList.Split(',');
                        for (int i = 0; i < OnlineTowerPCList.Length; i++)
                        {
                            OnlineTowerPCList[i] = OnlineTowerPCList[i].Trim();
                        }
                    }
                    string[] OnlineTowerAmountList = null;
                    if (DTO.OnlineTowerAmountList != null)
                    {
                        OnlineTowerAmountList = DTO.OnlineTowerAmountList.Split(',');
                        for (int i = 0; i < OnlineTowerAmountList.Length; i++)
                        {
                            OnlineTowerAmountList[i] = OnlineTowerAmountList[i].Trim();
                        }
                    }

                    string[] GeneratorSpacePCList = null;
                    if (DTO.GeneratorSpacePCList != null)
                    {
                        GeneratorSpacePCList = DTO.GeneratorSpacePCList.Split(',');
                        for (int i = 0; i < GeneratorSpacePCList.Length; i++)
                        {
                            GeneratorSpacePCList[i] = GeneratorSpacePCList[i].Trim();
                        }
                    }
                    string[] GeneratorSpaceAmountList = null;
                    if (DTO.GeneratorSpaceAmountList != null)
                    {
                        GeneratorSpaceAmountList = DTO.GeneratorSpaceAmountList.Split(',');
                        for (int i = 0; i < GeneratorSpaceAmountList.Length; i++)
                        {
                            GeneratorSpaceAmountList[i] = GeneratorSpaceAmountList[i].Trim();
                        }
                    }

                    string[] CarParkingPCList = null;
                    if (DTO.CarParkingPCList != null)
                    {
                        CarParkingPCList = DTO.CarParkingPCList.Split(',');
                        for (int i = 0; i < CarParkingPCList.Length; i++)
                        {
                            CarParkingPCList[i] = CarParkingPCList[i].Trim();
                        }
                    }
                    string[] CarParkingAmountList = null;
                    if (DTO.CarParkingAmountList != null)
                    {
                        CarParkingAmountList = DTO.CarParkingAmountList.Split(',');
                        for (int i = 0; i < CarParkingAmountList.Length; i++)
                        {
                            CarParkingAmountList[i] = CarParkingAmountList[i].Trim();
                        }
                    }
                    string[] UtilityTaxPCList = null;
                    if (DTO.UtilityTaxPCList != null)
                    {
                        UtilityTaxPCList = DTO.UtilityTaxPCList.Split(',');
                        for (int i = 0; i < UtilityTaxPCList.Length; i++)
                        {
                            UtilityTaxPCList[i] = UtilityTaxPCList[i].Trim();
                        }
                    }
                    string[] UtilityTaxAmountList = null;
                    if (DTO.UtilityTaxAmountList != null)
                    {
                        UtilityTaxAmountList = DTO.UtilityTaxAmountList.Split(',');
                        for (int i = 0; i < UtilityTaxAmountList.Length; i++)
                        {
                            UtilityTaxAmountList[i] = UtilityTaxAmountList[i].Trim();
                        }
                    }
                    string[] UtilityVATPCList = null;
                    if (DTO.UtilityVATPCList != null)
                    {
                        UtilityVATPCList = DTO.UtilityVATPCList.Split(',');
                        for (int i = 0; i < UtilityVATPCList.Length; i++)
                        {
                            UtilityVATPCList[i] = UtilityVATPCList[i].Trim();
                        }
                    }
                    string[] UtilityVATAmountList = null;
                    if (DTO.UtilityVATAmountList != null)
                    {
                        UtilityVATAmountList = DTO.UtilityVATAmountList.Split(',');
                        for (int i = 0; i < UtilityVATAmountList.Length; i++)
                        {
                            UtilityVATAmountList[i] = UtilityVATAmountList[i].Trim();
                        }
                    }
                    string[] UtilityAddressList = null;
                    if (DTO.UtilityAddressList != null)
                    {
                        UtilityAddressList = DTO.UtilityAddressList.Split(',');
                        for (int i = 0; i < UtilityAddressList.Length; i++)
                        {
                            UtilityAddressList[i] = UtilityAddressList[i].Trim();
                        }
                    }
                    string[] UtilityContactNoList = null;
                    if (DTO.UtilityContactNoList != null)
                    {
                        UtilityContactNoList = DTO.UtilityContactNoList.Split(',');
                        for (int i = 0; i < UtilityContactNoList.Length; i++)
                        {
                            UtilityContactNoList[i] = UtilityContactNoList[i].Trim();
                        }
                    }
                    string[] UtilityEmailList = null;
                    if (DTO.UtilityEmailList != null)
                    {
                        UtilityEmailList = DTO.UtilityEmailList.Split(',');
                        for (int i = 0; i < UtilityEmailList.Length; i++)
                        {
                            UtilityEmailList[i] = UtilityEmailList[i].Trim();
                        }
                    }
                    string[] UtilityACNoList = null;
                    if (DTO.UtilityACNoList != null)
                    {
                        UtilityACNoList = DTO.UtilityACNoList.Split(',');
                        for (int i = 0; i < UtilityACNoList.Length; i++)
                        {
                            UtilityACNoList[i] = UtilityACNoList[i].Trim();
                        }
                    }
                    string[] UtilityBankNameList = null;
                    if (DTO.UtilityBankNameList != null)
                    {
                        UtilityBankNameList = DTO.UtilityBankNameList.Split(',');
                        for (int i = 0; i < UtilityBankNameList.Length; i++)
                        {
                            UtilityBankNameList[i] = UtilityBankNameList[i].Trim();
                        }
                    }
                    string[] UtilityBranchNameList = null;
                    if (DTO.UtilityBranchNameList != null)
                    {
                        UtilityBranchNameList = DTO.UtilityBranchNameList.Split(',');
                        for (int i = 0; i < UtilityBranchNameList.Length; i++)
                        {
                            UtilityBranchNameList[i] = UtilityBranchNameList[i].Trim();
                        }
                    }
                    string[] UtilityRoutingNoList = null;
                    if (DTO.UtilityRoutingNoList != null)
                    {
                        UtilityRoutingNoList = DTO.UtilityRoutingNoList.Split(',');
                        for (int i = 0; i < UtilityRoutingNoList.Length; i++)
                        {
                            UtilityRoutingNoList[i] = UtilityRoutingNoList[i].Trim();
                        }
                    }
                    if (UtilityVendorCodeList != null)
                    {
                        RMS.Models.DraftUtilityInfo UI;
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            if (UtilityVendorCodeList[i] != null && UtilityVendorCodeList[i] != "")
                            {
                                UI = new RMS.Models.DraftUtilityInfo();
                                UI.AgreementSLNo = AI.AgreementSLNo;
                                UI.UtilityVendorCode = (UtilityVendorCodeList == null) ? null : UtilityVendorCodeList[i].ToString();
                                UI.UtilityLandlordName = (UtilityLandlordNameList == null) ? null : UtilityLandlordNameList[i].ToString();

                                if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Others; }

                                UI.ServiceChargePC = Convert.ToDouble(ServiceChargePCList[i].ToString());
                                UI.ServiceChargeAmount = Convert.ToDouble(ServiceChargeAmountList[i].ToString());

                                UI.OnlineTowerPC = Convert.ToDouble(OnlineTowerPCList[i].ToString());
                                UI.OnlineTowerAmount = Convert.ToDouble(OnlineTowerAmountList[i].ToString());

                                UI.GeneratorSpacePC = Convert.ToDouble(GeneratorSpacePCList[i].ToString());
                                UI.GeneratorSpaceAmount = Convert.ToDouble(GeneratorSpaceAmountList[i].ToString());

                                UI.CarParkingPC = Convert.ToDouble(CarParkingPCList[i].ToString());
                                UI.CarParkingAmount = Convert.ToDouble(CarParkingAmountList[i].ToString());

                                UI.TaxPC = Convert.ToDouble(UtilityTaxPCList[i].ToString());
                                UI.TaxAmount = Convert.ToDouble(UtilityTaxAmountList[i].ToString());
                                UI.VATPC = Convert.ToDouble(UtilityVATPCList[i].ToString());
                                UI.VATAmount = Convert.ToDouble(UtilityVATAmountList[i].ToString());
                                UI.UtilityAddress = (UtilityAddressList == null) ? null : UtilityAddressList[i].ToString();
                                UI.UtilityContactNo = (UtilityContactNoList == null) ? null : UtilityContactNoList[i].ToString();
                                UI.UtilityEmail = (UtilityEmailList == null) ? null : UtilityEmailList[i].ToString();
                                UI.UtilityACNo = (UtilityACNoList == null) ? null : UtilityACNoList[i].ToString();
                                UI.UtilityBankName = (UtilityBankNameList == null) ? null : UtilityBankNameList[i].ToString();
                                UI.UtilityBranchName = (UtilityBranchNameList == null) ? null : UtilityBranchNameList[i].ToString();
                                UI.UtilityRoutingNo = (UtilityRoutingNoList == null) ? null : UtilityRoutingNoList[i].ToString();
                                db.DraftUtilityInfos.Add(UI);
                                db.SaveChanges();
                            }
                        }
                    }
                    AlertMsg = "The draft agreement: " + AI.AgreementName + " has been created.";
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }


        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult ReCreate(RMS.Models.AgreementInfoDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    RMS.Models.AgreementInfo AI = new RMS.Models.AgreementInfo();
                    DTOBasic dtoBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    string LoginUserID = (string)Session["LoginUserID"];
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    //==Check available xRenewalAgreementSLNo
                    if (db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xRenewalAgreementSLNo && (x.IsRenewal == true || x.IsModified == true)).Any() == true)
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                    //==Save to Agreement Info Table
                    var CodeInfo = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xRenewalAgreementSLNo).Select(x => new { x.AgreementCode, x.AgreementVersion }).SingleOrDefault();
                    AI.AgreementType = AgreementType.Renewal;
                    AI.AgreementCode = CodeInfo.AgreementCode;
                    AI.AgreementVersion = CodeInfo.AgreementVersion + 1;
                    AI.AliasCode = AI.AgreementCode + "-R" + AI.AgreementVersion;
                    AI.xRenewalAgreementSLNo = DTO.xRenewalAgreementSLNo;
                    //==Basic Info
                    AI.PremiseTypeSLNo = DTO.PremiseTypeSLNo;
                    AI.PremiseName = DTO.PremiseName;
                    AI.PremiseAddress = DTO.PremiseAddress;
                    AI.ClusterGroup = DTO.ClusterGroup;
                    AI.ConcernBranch = DTO.ConcernBranch;
                    AI.InspectorName = DTO.InspectorName;
                    AI.InspectorContactNo = DTO.InspectorContactNo;
                    //==Agreement Info
                    AI.AgreementName = DTO.AgreementName;
                    AI.AgreementStartDate = DateTime.ParseExact(DTO.AgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    AI.AgreementEndDate = DateTime.ParseExact(DTO.AgreementEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    AI.AgreementPeriod = DTO.AgreementPeriod;
                    AI.RenewalFrequency = AI.AgreementPeriod;
                    AI.RentDueDay = DTO.RentDueDay;
                    AI.UOM = DTO.UOM;
                    AI.TotalArea = DTO.TotalArea;
                    AI.CostPerUnit = DTO.CostPerUnit;
                    AI.TotalRentAmount = DTO.TotalRentAmount;
                    AI.SecurityDepositAmount = DTO.SecurityDepositAmount;
                    AI.AdvanceAmount = DTO.AdvanceAmount;
                    AI.AdvanceAdjustmentPeriod = DTO.AdvanceAdjustmentPeriod;
                    AI.AdvanceAdjustmentAmount = DTO.AdvanceAdjustmentAmount;
                    AI.TaxPercentage = DTO.TaxPercentage;
                    AI.TaxAmount = DTO.TaxAmount;
                    AI.VATPercentage = DTO.VATPercentage;
                    AI.VATAmount = DTO.VATAmount;
                    AI.NetRentAmount = AI.TotalRentAmount - AI.AdvanceAdjustmentAmount;
                    AI.AgreementStatus = AgreementStatus.Created;
                    AI.AgreementText = null;
                    AI.Status = dtoBasic.active;
                    AI.UserSLNo = LoginUserSLNo;
                    AI.EntryDate = DateTime.Now;
                    AI.IsDeleted = false;
                    AI.ReviewFrequency = DTO.ReviewFrequency;
                    AI.ReviewPercentage = DTO.ReviewPercentage;
                    AI.TaxType = DTO.TaxType;
                    AI.VatType = DTO.VatType;
                    AI.ServiceCharge = DTO.ServiceCharge;
                    AI.OnlineTower = DTO.OnlineTower;
                    AI.GeneratorSpace = DTO.GeneratorSpace;
                    AI.CarParking = DTO.CarParking;
                    //==Control Data
                    AI.CashGLCode = DTO.CashGLCode;
                    AI.BankGLCode = DTO.BankGLCode;
                    AI.AdvanceGLCode = DTO.AdvanceGLCode;
                    AI.AdvanceAdjustmentGLCode = DTO.AdvanceAdjustmentGLCode;
                    AI.RentGLCode = DTO.RentGLCode;
                    AI.ServiceChargeGLCode = DTO.ServiceChargeGLCode;
                    AI.TaxGLCode = DTO.TaxGLCode;
                    AI.VATGLCode = DTO.VATGLCode;
                    AI.ProvisionGLTax = DTO.ProvisionGLTax;
                    AI.ProvisionGLAP = DTO.ProvisionGLAP;
                    AI.RTGSGL = DTO.RTGSGL;
                    AI.EFTNGL = DTO.EFTNGL;
                    AI.PayOrderGL = DTO.PayOrderGL;
                    AI.IBBPaymentGL = DTO.IBBPaymentGL;
                    AI.CityBrokerageGL = DTO.CityBrokerageGL;
                    AI.CityCapitalGL = DTO.CityCapitalGL;
                    AI.OthersGL = DTO.OthersGL;
                    AI.Special = DTO.Special;
                    //=====
                    AI.PremiseAddressBangla = DTO.PremiseAddressBangla;
                    AI.AreaStatus = DTO.AreaStatus;
                    AI.RegionalOffice = DTO.RegionalOffice;
                    AI.PrimarySOL = DTO.PrimarySOL;
                    AI.AttachedControl = DTO.AttachedControl;
                    AI.ControllerOfficeDistance = DTO.ControllerOfficeDistance;
                    AI.RoutingNumber = DTO.RoutingNumber;
                    AI.Division = DTO.Division;
                    AI.District = DTO.District;
                    AI.Upazila = DTO.Upazila;
                    AI.Thana = DTO.Thana;
                    AI.ThanaCode = DTO.ThanaCode;
                    AI.Pourasabha = DTO.Pourasabha;
                    AI.PourasabhaType = DTO.PourasabhaType;
                    AI.UnionName = DTO.UnionName;
                    AI.WardNo = DTO.WardNo;
                    AI.PremisesTypeforAccounts = DTO.PremisesTypeforAccounts;
                    AI.ParentAgreementCode = DTO.ParentAgreementCode;
                    AI.ElectricityLoad = DTO.ElectricityLoad;
                    AI.ElectricityProvidedBy = DTO.ElectricityProvidedBy;
                    AI.AITBourneBy = DTO.AITBourneBy;
                    AI.CommercialPermission = DTO.CommercialPermission;
                    AI.BuildingPlan = DTO.BuildingPlan;
                    AI.PremisesSituatedFloor = DTO.PremisesSituatedFloor;
                    AI.BangladeshBankApproval = DTO.BangladeshBankApproval;
                    AI.BangladeshBankReference = DTO.BangladeshBankReference;
                    AI.ITTowerRentClause = DTO.ITTowerRentClause;
                    AI.TerminationClause = DTO.TerminationClause;
                    AI.TerminationNoticePeriod = DTO.TerminationNoticePeriod;
                    if (DTO.PremisesOpeningDate != null)
                    {
                        AI.PremisesOpeningDate = DateTime.ParseExact(DTO.PremisesOpeningDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.PremisesOpeningDate = null;
                    }
                    if (DTO.DocumentDate != null)
                    {
                        AI.DocumentDate = DateTime.ParseExact(DTO.DocumentDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.DocumentDate = null;
                    }
                    AI.Remarks = DTO.Remarks;
                    AI.AgreementRemarks = DTO.AgreementRemarks;
                    AI.AdvanceRemarks = DTO.AdvanceRemarks;
                    AI.ReviewRemarks = DTO.ReviewRemarks;
                    AI.LLRemarks = DTO.LLRemarks;
                    AI.CCRemarks = DTO.CCRemarks;
                    AI.UtilityRemarks = DTO.UtilityRemarks;
                    AI.ControlDataRemarks = DTO.ControlDataRemarks;

                    AI.BorrowingRate = DTO.BorrowingRate;
                    AI.PaymentMethod = DTO.PaymentMethod;
                    AI.IsIFRSEnable = DTO.IsIFRSEnable;
                    AI.CalculationMethod = DTO.CalculationMethod;
                    AI.WithHoldingCode = DTO.WithHoldingCode;
                    AI.AdditionalExpense = DTO.AdditionalExpense;
                    AI.InitialDirectCost = DTO.InitialDirectCost;
                    AI.DismantlingCost = DTO.DismantlingCost;
                    AI.CarParkingNo = DTO.CarParkingNo;
                    AI.WaterBillType = DTO.WaterBillType;
                    AI.WaterBillAmount = DTO.WaterBillAmount;
                    if (DTO.IFRSEffectiveDate != null && DTO.IsIFRSEnable == true)
                    {
                        AI.IFRSEffectiveDate = DateTime.ParseExact(DTO.IFRSEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.IFRSEffectiveDate = null;
                    }
                    AI.CorporateTaxRate = DTO.CorporateTaxRate;
                    //=====
                    db.AgreementInfos.Add(AI);
                    db.SaveChanges();
                    //==Update xRenewalAgreement Info
                    RMS.Models.AgreementInfo xAI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xRenewalAgreementSLNo).SingleOrDefault();
                    xAI.IsRenewal = true;
                    xAI.yRenewalAgreementSLNo = AI.AgreementSLNo;
                    db.Entry(xAI).State = EntityState.Modified;
                    db.SaveChanges();
                    //==Space Information
                    string[] SpaceTypeList = null;
                    if (DTO.SpaceTypeList != null)
                    {
                        SpaceTypeList = DTO.SpaceTypeList.Split(',');
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            SpaceTypeList[i] = SpaceTypeList[i].Trim();
                        }
                    }
                    string[] SpaceAreaList = null;
                    if (DTO.SpaceAreaList != null)
                    {
                        SpaceAreaList = DTO.SpaceAreaList.Split(',');
                        for (int i = 0; i < SpaceAreaList.Length; i++)
                        {
                            SpaceAreaList[i] = SpaceAreaList[i].Trim();
                        }
                    }
                    string[] SpaceRateList = null;
                    if (DTO.SpaceRateList != null)
                    {
                        SpaceRateList = DTO.SpaceRateList.Split(',');
                        for (int i = 0; i < SpaceRateList.Length; i++)
                        {
                            SpaceRateList[i] = SpaceRateList[i].Trim();
                        }
                    }
                    string[] SpaceRentList = null;
                    if (DTO.SpaceRentList != null)
                    {
                        SpaceRentList = DTO.SpaceRentList.Split(',');
                        for (int i = 0; i < SpaceRentList.Length; i++)
                        {
                            SpaceRentList[i] = SpaceRentList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdvanceList = null;
                    if (DTO.SpaceTotalAdvanceList != null)
                    {
                        SpaceTotalAdvanceList = DTO.SpaceTotalAdvanceList.Split(',');
                        for (int i = 0; i < SpaceTotalAdvanceList.Length; i++)
                        {
                            SpaceTotalAdvanceList[i] = SpaceTotalAdvanceList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdjustmentList = null;
                    if (DTO.SpaceTotalAdjustmentList != null)
                    {
                        SpaceTotalAdjustmentList = DTO.SpaceTotalAdjustmentList.Split(',');
                        for (int i = 0; i < SpaceTotalAdjustmentList.Length; i++)
                        {
                            SpaceTotalAdjustmentList[i] = SpaceTotalAdjustmentList[i].Trim();
                        }
                    }
                    string[] SpaceRemarksList = null;
                    if (DTO.SpaceRemarksList != null)
                    {
                        SpaceRemarksList = DTO.SpaceRemarksList.Split(',');
                        for (int i = 0; i < SpaceRemarksList.Length; i++)
                        {
                            SpaceRemarksList[i] = SpaceRemarksList[i].Trim();
                        }
                    }
                    if (SpaceTypeList != null)
                    {
                        RMS.Models.SpaceInfo SpaceInfo;
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            if (SpaceTypeList[i] != null && SpaceTypeList[i] != "")
                            {
                                SpaceInfo = new RMS.Models.SpaceInfo();
                                SpaceInfo.AgreementSLNo = AI.AgreementSLNo;
                                SpaceInfo.SpaceType = (SpaceTypeList == null) ? null : SpaceTypeList[i].ToString();
                                SpaceInfo.SpaceArea = Convert.ToDouble(SpaceAreaList[i].ToString());
                                SpaceInfo.SpaceRate = Convert.ToDouble(SpaceRateList[i].ToString());
                                SpaceInfo.SpaceRent = Convert.ToDouble(SpaceRentList[i].ToString());
                                SpaceInfo.SpaceTotalAdvance = Convert.ToDouble(SpaceTotalAdvanceList[i].ToString());
                                SpaceInfo.SpaceTotalAdjustment = Convert.ToDouble(SpaceTotalAdjustmentList[i].ToString());
                                SpaceInfo.SpaceRemarks = (SpaceRemarksList == null) ? null : SpaceRemarksList[i].ToString();
                                db.SpaceInfos.Add(SpaceInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Advance Information
                    string[] AdvanceNoList = null;
                    if (DTO.AdvanceNoList != null)
                    {
                        AdvanceNoList = DTO.AdvanceNoList.Split(',');
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            AdvanceNoList[i] = AdvanceNoList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotPeriodList = null;
                    if (DTO.AdvanceSlotPeriodList != null)
                    {
                        AdvanceSlotPeriodList = DTO.AdvanceSlotPeriodList.Split(',');
                        for (int i = 0; i < AdvanceSlotPeriodList.Length; i++)
                        {
                            AdvanceSlotPeriodList[i] = AdvanceSlotPeriodList[i].Trim();
                        }
                    }
                    string[] AdvanceStartDateList = null;
                    if (DTO.AdvanceStartDateList != null)
                    {
                        AdvanceStartDateList = DTO.AdvanceStartDateList.Split(',');
                        for (int i = 0; i < AdvanceStartDateList.Length; i++)
                        {
                            AdvanceStartDateList[i] = AdvanceStartDateList[i].Trim();
                        }
                    }
                    string[] AdvanceEndDateList = null;
                    if (DTO.AdvanceEndDateList != null)
                    {
                        AdvanceEndDateList = DTO.AdvanceEndDateList.Split(',');
                        for (int i = 0; i < AdvanceEndDateList.Length; i++)
                        {
                            AdvanceEndDateList[i] = AdvanceEndDateList[i].Trim();
                        }
                    }
                    string[] AdvanceNoteList = null;
                    if (DTO.AdvanceNoteList != null)
                    {
                        AdvanceNoteList = DTO.AdvanceNoteList.Split(',');
                        for (int i = 0; i < AdvanceNoteList.Length; i++)
                        {
                            AdvanceNoteList[i] = AdvanceNoteList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotAmountList = null;
                    if (DTO.AdvanceSlotAmountList != null)
                    {
                        AdvanceSlotAmountList = DTO.AdvanceSlotAmountList.Split(',');
                        for (int i = 0; i < AdvanceSlotAmountList.Length; i++)
                        {
                            AdvanceSlotAmountList[i] = AdvanceSlotAmountList[i].Trim();
                        }
                    }
                    if (AdvanceNoList != null)
                    {
                        RMS.Models.AdvanceInfo AdvInfo;
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            if (AdvanceNoList[i] != null && AdvanceNoList[i] != "")
                            {
                                AdvInfo = new RMS.Models.AdvanceInfo();
                                AdvInfo.AgreementSLNo = AI.AgreementSLNo;
                                AdvInfo.AdvanceNo = Convert.ToInt32(AdvanceNoList[i].ToString());
                                AdvInfo.AdvanceSlotPeriod = Convert.ToInt32(AdvanceSlotPeriodList[i].ToString());
                                AdvInfo.StartDate = DateTime.ParseExact(AdvanceStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.EndDate = DateTime.ParseExact(AdvanceEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.AdvanceSlotAmount = Convert.ToDouble(AdvanceSlotAmountList[i].ToString());
                                AdvInfo.AdvanceNote = (AdvanceNoteList == null) ? null : AdvanceNoteList[i].ToString();
                                db.AdvanceInfos.Add(AdvInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Review Info
                    string[] ReviewNoList = null;
                    if (DTO.ReviewNoList != null)
                    {
                        ReviewNoList = DTO.ReviewNoList.Split(',');
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            ReviewNoList[i] = ReviewNoList[i].Trim();
                        }
                    }
                    string[] ReviewStartDateList = null;
                    if (DTO.ReviewStartDateList != null)
                    {
                        ReviewStartDateList = DTO.ReviewStartDateList.Split(',');
                        for (int i = 0; i < ReviewStartDateList.Length; i++)
                        {
                            ReviewStartDateList[i] = ReviewStartDateList[i].Trim();
                        }
                    }
                    string[] ReviewEndDateList = null;
                    if (DTO.ReviewEndDateList != null)
                    {
                        ReviewEndDateList = DTO.ReviewEndDateList.Split(',');
                        for (int i = 0; i < ReviewEndDateList.Length; i++)
                        {
                            ReviewEndDateList[i] = ReviewEndDateList[i].Trim();
                        }
                    }
                    string[] ReviewPeriodList = null;
                    if (DTO.ReviewPeriodList != null)
                    {
                        ReviewPeriodList = DTO.ReviewPeriodList.Split(',');
                        for (int i = 0; i < ReviewPeriodList.Length; i++)
                        {
                            ReviewPeriodList[i] = ReviewPeriodList[i].Trim();
                        }
                    }
                    string[] ReviewIncreaseAmountList = null;
                    if (DTO.ReviewIncreaseAmountList != null)
                    {
                        ReviewIncreaseAmountList = DTO.ReviewIncreaseAmountList.Split(',');
                        for (int i = 0; i < ReviewIncreaseAmountList.Length; i++)
                        {
                            ReviewIncreaseAmountList[i] = ReviewIncreaseAmountList[i].Trim();
                        }
                    }
                    string[] ReviewIncreasePercentageList = null;
                    if (DTO.ReviewIncreasePercentageList != null)
                    {
                        ReviewIncreasePercentageList = DTO.ReviewIncreasePercentageList.Split(',');
                        for (int i = 0; i < ReviewIncreasePercentageList.Length; i++)
                        {
                            ReviewIncreasePercentageList[i] = ReviewIncreasePercentageList[i].Trim();
                        }
                    }
                    string[] ReviewNoteList = null;
                    if (DTO.ReviewNoteList != null)
                    {
                        ReviewNoteList = DTO.ReviewNoteList.Split(',');
                        for (int i = 0; i < ReviewNoteList.Length; i++)
                        {
                            ReviewNoteList[i] = ReviewNoteList[i].Trim();
                        }
                    }
                    if (ReviewNoList != null)
                    {
                        RMS.Models.ReviewInfo RI;
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            if (ReviewNoList[i] != null && ReviewNoList[i] != "")
                            {
                                RI = new RMS.Models.ReviewInfo();
                                RI.AgreementSLNo = AI.AgreementSLNo;
                                RI.ReviewNo = Convert.ToInt32(ReviewNoList[i].ToString());
                                RI.Period = Convert.ToInt32(ReviewPeriodList[i].ToString());
                                RI.StartDate = DateTime.ParseExact(ReviewStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                RI.EndDate = DateTime.ParseExact(ReviewEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                RI.IncreaseAmount = Convert.ToDouble(ReviewIncreaseAmountList[i].ToString());
                                RI.IncreasePercentage = Convert.ToDouble(ReviewIncreasePercentageList[i].ToString());
                                RI.ReviewNote = (ReviewNoteList == null) ? null : ReviewNoteList[i].ToString();
                                db.ReviewInfos.Add(RI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Landlord Information
                    string[] VendorCodeList = null;
                    if (DTO.VendorCodeList != null)
                    {
                        VendorCodeList = DTO.VendorCodeList.Split(',');
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            VendorCodeList[i] = VendorCodeList[i].Trim();
                        }
                    }
                    string[] LandlordNameList = null;
                    if (DTO.LandlordNameList != null)
                    {
                        LandlordNameList = DTO.LandlordNameList.Split(',');
                        for (int i = 0; i < LandlordNameList.Length; i++)
                        {
                            LandlordNameList[i] = LandlordNameList[i].Trim();
                        }
                    }
                    string[] ModeOfPaymentList = null;
                    if (DTO.ModeOfPaymentList != null)
                    {
                        ModeOfPaymentList = DTO.ModeOfPaymentList.Split(',');
                        for (int i = 0; i < ModeOfPaymentList.Length; i++)
                        {
                            ModeOfPaymentList[i] = ModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] VendorAdvancePCList = null;
                    if (DTO.VendorAdvancePCList != null)
                    {
                        VendorAdvancePCList = DTO.VendorAdvancePCList.Split(',');
                        for (int i = 0; i < VendorAdvancePCList.Length; i++)
                        {
                            VendorAdvancePCList[i] = VendorAdvancePCList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAmountList = null;
                    if (DTO.VendorAdvanceAmountList != null)
                    {
                        VendorAdvanceAmountList = DTO.VendorAdvanceAmountList.Split(',');
                        for (int i = 0; i < VendorAdvanceAmountList.Length; i++)
                        {
                            VendorAdvanceAmountList[i] = VendorAdvanceAmountList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAdjustmentPCList = null;
                    if (DTO.VendorAdvanceAdjustmentPCList != null)
                    {
                        VendorAdvanceAdjustmentPCList = DTO.VendorAdvanceAdjustmentPCList.Split(',');
                        for (int i = 0; i < VendorAdvanceAdjustmentPCList.Length; i++)
                        {
                            VendorAdvanceAdjustmentPCList[i] = VendorAdvanceAdjustmentPCList[i].Trim();
                        }
                    }
                    //string[] VendorAdvanceAdjustmentAmountList = null;
                    //if (DTO.VendorAdvanceAdjustmentAmountList != null)
                    //{
                    //    VendorAdvanceAdjustmentAmountList = DTO.VendorAdvanceAdjustmentAmountList.Split(',');
                    //    for (int i = 0; i < VendorAdvanceAdjustmentAmountList.Length; i++)
                    //    {
                    //        VendorAdvanceAdjustmentAmountList[i] = VendorAdvanceAdjustmentAmountList[i].Trim();
                    //    }
                    //}
                    string[] VendorTaxPCList = null;
                    if (DTO.VendorTaxPCList != null)
                    {
                        VendorTaxPCList = DTO.VendorTaxPCList.Split(',');
                        for (int i = 0; i < VendorTaxPCList.Length; i++)
                        {
                            VendorTaxPCList[i] = VendorTaxPCList[i].Trim();
                        }
                    }
                    string[] VendorTaxAmountList = null;
                    if (DTO.VendorTaxAmountList != null)
                    {
                        VendorTaxAmountList = DTO.VendorTaxAmountList.Split(',');
                        for (int i = 0; i < VendorTaxAmountList.Length; i++)
                        {
                            VendorTaxAmountList[i] = VendorTaxAmountList[i].Trim();
                        }
                    }
                    string[] VendorVATPCList = null;
                    if (DTO.VendorVATPCList != null)
                    {
                        VendorVATPCList = DTO.VendorVATPCList.Split(',');
                        for (int i = 0; i < VendorVATPCList.Length; i++)
                        {
                            VendorVATPCList[i] = VendorVATPCList[i].Trim();
                        }
                    }
                    string[] VendorVATAmountList = null;
                    if (DTO.VendorVATAmountList != null)
                    {
                        VendorVATAmountList = DTO.VendorVATAmountList.Split(',');
                        for (int i = 0; i < VendorVATAmountList.Length; i++)
                        {
                            VendorVATAmountList[i] = VendorVATAmountList[i].Trim();
                        }
                    }
                    string[] VendorRentPCList = null;
                    if (DTO.VendorRentPCList != null)
                    {
                        VendorRentPCList = DTO.VendorRentPCList.Split(',');
                        for (int i = 0; i < VendorRentPCList.Length; i++)
                        {
                            VendorRentPCList[i] = VendorRentPCList[i].Trim();
                        }
                    }
                    //string[] VendorRentAmountList = null;
                    //if (DTO.VendorRentAmountList != null)
                    //{
                    //    VendorRentAmountList = DTO.VendorRentAmountList.Split(',');
                    //    for (int i = 0; i < VendorRentAmountList.Length; i++)
                    //    {
                    //        VendorRentAmountList[i] = VendorRentAmountList[i].Trim();
                    //    }
                    //}
                    string[] AddressList = null;
                    if (DTO.LLAddressList != null)
                    {
                        AddressList = DTO.LLAddressList.Split(',');
                        for (int i = 0; i < AddressList.Length; i++)
                        {
                            AddressList[i] = AddressList[i].Trim();
                        }
                    }
                    string[] ContactNoList = null;
                    if (DTO.LLContactNoList != null)
                    {
                        ContactNoList = DTO.LLContactNoList.Split(',');
                        for (int i = 0; i < ContactNoList.Length; i++)
                        {
                            ContactNoList[i] = ContactNoList[i].Trim();
                        }
                    }
                    string[] EmailList = null;
                    if (DTO.LLEmailList != null)
                    {
                        EmailList = DTO.LLEmailList.Split(',');
                        for (int i = 0; i < EmailList.Length; i++)
                        {
                            EmailList[i] = EmailList[i].Trim();
                        }
                    }
                    string[] ACNoList = null;
                    if (DTO.ACNoList != null)
                    {
                        ACNoList = DTO.ACNoList.Split(',');
                        for (int i = 0; i < ACNoList.Length; i++)
                        {
                            ACNoList[i] = ACNoList[i].Trim();
                        }
                    }
                    string[] BankNameList = null;
                    if (DTO.BankNameList != null)
                    {
                        BankNameList = DTO.BankNameList.Split(',');
                        for (int i = 0; i < BankNameList.Length; i++)
                        {
                            BankNameList[i] = BankNameList[i].Trim();
                        }
                    }
                    string[] BranchNameList = null;
                    if (DTO.BranchNameList != null)
                    {
                        BranchNameList = DTO.BranchNameList.Split(',');
                        for (int i = 0; i < BranchNameList.Length; i++)
                        {
                            BranchNameList[i] = BranchNameList[i].Trim();
                        }
                    }
                    string[] RoutingNoList = null;
                    if (DTO.RoutingNoList != null)
                    {
                        RoutingNoList = DTO.RoutingNoList.Split(',');
                        for (int i = 0; i < RoutingNoList.Length; i++)
                        {
                            RoutingNoList[i] = RoutingNoList[i].Trim();
                        }
                    }
                    RMS.Models.LandlordInfo LI;
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    for (int i = 0; i < VendorCodeList.Length; i++)
                    {
                        if (VendorCodeList[i] != null && VendorCodeList[i] != "")
                        {
                            LI = new RMS.Models.LandlordInfo();
                            LI.AgreementSLNo = AI.AgreementSLNo;
                            LI.VendorCode = (VendorCodeList == null) ? null : VendorCodeList[i].ToString();
                            LI.LandlordName = (LandlordNameList == null) ? null : LandlordNameList[i].ToString();
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { LI.ModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { LI.ModeOfPayment = ModeOfPaymentLocation.RTGS; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { LI.ModeOfPayment = ModeOfPaymentLocation.EFTN; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { LI.ModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { LI.ModeOfPayment = ModeOfPaymentLocation.Cash; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { LI.ModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { LI.ModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { LI.ModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { LI.ModeOfPayment = ModeOfPaymentLocation.Others; }
                            LI.AdvancePC = Convert.ToDouble(VendorAdvancePCList[i].ToString());
                            LI.AdvanceAdjustmentPC = Convert.ToDouble(VendorAdvanceAdjustmentPCList[i].ToString());
                            LI.TaxPC = Convert.ToDouble(VendorTaxPCList[i].ToString());
                            LI.VATPC = Convert.ToDouble(VendorVATPCList[i].ToString());
                            LI.RentPC = Convert.ToDouble(VendorRentPCList[i].ToString());
                            //==PC Amount
                            LI.AdvanceAmount = (AI.AdvanceAmount * LI.AdvancePC) / 100;
                            LI.TaxAmount = (AI.TaxAmount * LI.TaxPC) / 100;
                            LI.VATAmount = (AI.VATAmount * LI.VATPC) / 100;
                            //==
                            LI.LLAddress = (AddressList == null) ? null : AddressList[i].ToString();
                            LI.LLContactNo = (ContactNoList == null) ? null : ContactNoList[i].ToString();
                            LI.LLEmail = (EmailList == null) ? null : EmailList[i].ToString();
                            LI.ACNo = (ACNoList == null) ? null : ACNoList[i].ToString();
                            LI.BankName = (BankNameList == null) ? null : BankNameList[i].ToString();
                            LI.BranchName = (BranchNameList == null) ? null : BranchNameList[i].ToString();
                            LI.RoutingNo = (RoutingNoList == null) ? null : RoutingNoList[i].ToString();
                            db.LandlordInfos.Add(LI);
                            db.SaveChanges();
                        }
                    }
                    //==Cost Center
                    string[] CCCodeList = null;
                    if (DTO.CCCodeList != null)
                    {
                        CCCodeList = DTO.CCCodeList.Split(',');
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            CCCodeList[i] = CCCodeList[i].Trim();
                        }
                    }
                    string[] CCNameList = null;
                    if (DTO.CCNameList != null)
                    {
                        CCNameList = DTO.CCNameList.Split(',');
                        for (int i = 0; i < CCNameList.Length; i++)
                        {
                            CCNameList[i] = CCNameList[i].Trim();
                        }
                    }
                    string[] SOLCodeList = null;
                    if (DTO.SOLCodeList != null)
                    {
                        SOLCodeList = DTO.SOLCodeList.Split(',');
                        for (int i = 0; i < SOLCodeList.Length; i++)
                        {
                            SOLCodeList[i] = SOLCodeList[i].Trim();
                        }
                    }
                    string[] SOLNameList = null;
                    if (DTO.SOLNameList != null)
                    {
                        SOLNameList = DTO.SOLNameList.Split(',');
                        for (int i = 0; i < SOLNameList.Length; i++)
                        {
                            SOLNameList[i] = SOLNameList[i].Trim();
                        }
                    }
                    string[] CCShareAllotmentList = null;
                    if (DTO.CCShareAllotmentList != null)
                    {
                        CCShareAllotmentList = DTO.CCShareAllotmentList.Split(',');
                        for (int i = 0; i < CCShareAllotmentList.Length; i++)
                        {
                            CCShareAllotmentList[i] = CCShareAllotmentList[i].Trim();
                        }
                    }
                    RMS.Models.CostCenterInfo CC;
                    for (int i = 0; i < CCCodeList.Length; i++)
                    {
                        if (CCCodeList[i] != null && CCCodeList[i] != "")
                        {
                            CC = new RMS.Models.CostCenterInfo();
                            CC.AgreementSLNo = AI.AgreementSLNo;
                            CC.CCCode = (CCCodeList == null) ? null : CCCodeList[i].ToString();
                            CC.CCName = (CCNameList == null) ? null : CCNameList[i].ToString();
                            CC.SOLCode = (SOLCodeList == null) ? null : SOLCodeList[i].ToString();
                            CC.SOLName = (SOLNameList == null) ? null : SOLNameList[i].ToString();
                            CC.CCShareAllotment = Convert.ToDouble(CCShareAllotmentList[i].ToString());
                            db.CostCenterInfos.Add(CC);
                            db.SaveChanges();
                        }
                    }
                    //==Utility Information
                    string[] UtilityVendorCodeList = null;
                    if (DTO.UtilityVendorCodeList != null)
                    {
                        UtilityVendorCodeList = DTO.UtilityVendorCodeList.Split(',');
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            UtilityVendorCodeList[i] = UtilityVendorCodeList[i].Trim();
                        }
                    }
                    string[] UtilityLandlordNameList = null;
                    if (DTO.UtilityLandlordNameList != null)
                    {
                        UtilityLandlordNameList = DTO.UtilityLandlordNameList.Split(',');
                        for (int i = 0; i < UtilityLandlordNameList.Length; i++)
                        {
                            UtilityLandlordNameList[i] = UtilityLandlordNameList[i].Trim();
                        }
                    }
                    string[] UtilityModeOfPaymentList = null;
                    if (DTO.UtilityModeOfPaymentList != null)
                    {
                        UtilityModeOfPaymentList = DTO.UtilityModeOfPaymentList.Split(',');
                        for (int i = 0; i < UtilityModeOfPaymentList.Length; i++)
                        {
                            UtilityModeOfPaymentList[i] = UtilityModeOfPaymentList[i].Trim();
                        }
                    }

                    string[] ServiceChargePCList = null;
                    if (DTO.ServiceChargePCList != null)
                    {
                        ServiceChargePCList = DTO.ServiceChargePCList.Split(',');
                        for (int i = 0; i < ServiceChargePCList.Length; i++)
                        {
                            ServiceChargePCList[i] = ServiceChargePCList[i].Trim();
                        }
                    }
                    string[] ServiceChargeAmountList = null;
                    if (DTO.ServiceChargeAmountList != null)
                    {
                        ServiceChargeAmountList = DTO.ServiceChargeAmountList.Split(',');
                        for (int i = 0; i < ServiceChargeAmountList.Length; i++)
                        {
                            ServiceChargeAmountList[i] = ServiceChargeAmountList[i].Trim();
                        }
                    }

                    string[] OnlineTowerPCList = null;
                    if (DTO.OnlineTowerPCList != null)
                    {
                        OnlineTowerPCList = DTO.OnlineTowerPCList.Split(',');
                        for (int i = 0; i < OnlineTowerPCList.Length; i++)
                        {
                            OnlineTowerPCList[i] = OnlineTowerPCList[i].Trim();
                        }
                    }
                    string[] OnlineTowerAmountList = null;
                    if (DTO.OnlineTowerAmountList != null)
                    {
                        OnlineTowerAmountList = DTO.OnlineTowerAmountList.Split(',');
                        for (int i = 0; i < OnlineTowerAmountList.Length; i++)
                        {
                            OnlineTowerAmountList[i] = OnlineTowerAmountList[i].Trim();
                        }
                    }

                    string[] GeneratorSpacePCList = null;
                    if (DTO.GeneratorSpacePCList != null)
                    {
                        GeneratorSpacePCList = DTO.GeneratorSpacePCList.Split(',');
                        for (int i = 0; i < GeneratorSpacePCList.Length; i++)
                        {
                            GeneratorSpacePCList[i] = GeneratorSpacePCList[i].Trim();
                        }
                    }
                    string[] GeneratorSpaceAmountList = null;
                    if (DTO.GeneratorSpaceAmountList != null)
                    {
                        GeneratorSpaceAmountList = DTO.GeneratorSpaceAmountList.Split(',');
                        for (int i = 0; i < GeneratorSpaceAmountList.Length; i++)
                        {
                            GeneratorSpaceAmountList[i] = GeneratorSpaceAmountList[i].Trim();
                        }
                    }
                    string[] CarParkingPCList = null;
                    if (DTO.CarParkingPCList != null)
                    {
                        CarParkingPCList = DTO.CarParkingPCList.Split(',');
                        for (int i = 0; i < CarParkingPCList.Length; i++)
                        {
                            CarParkingPCList[i] = CarParkingPCList[i].Trim();
                        }
                    }
                    string[] CarParkingAmountList = null;
                    if (DTO.CarParkingAmountList != null)
                    {
                        CarParkingAmountList = DTO.CarParkingAmountList.Split(',');
                        for (int i = 0; i < CarParkingAmountList.Length; i++)
                        {
                            CarParkingAmountList[i] = CarParkingAmountList[i].Trim();
                        }
                    }
                    string[] UtilityTaxPCList = null;
                    if (DTO.UtilityTaxPCList != null)
                    {
                        UtilityTaxPCList = DTO.UtilityTaxPCList.Split(',');
                        for (int i = 0; i < UtilityTaxPCList.Length; i++)
                        {
                            UtilityTaxPCList[i] = UtilityTaxPCList[i].Trim();
                        }
                    }
                    string[] UtilityTaxAmountList = null;
                    if (DTO.UtilityTaxAmountList != null)
                    {
                        UtilityTaxAmountList = DTO.UtilityTaxAmountList.Split(',');
                        for (int i = 0; i < UtilityTaxAmountList.Length; i++)
                        {
                            UtilityTaxAmountList[i] = UtilityTaxAmountList[i].Trim();
                        }
                    }
                    string[] UtilityVATPCList = null;
                    if (DTO.UtilityVATPCList != null)
                    {
                        UtilityVATPCList = DTO.UtilityVATPCList.Split(',');
                        for (int i = 0; i < UtilityVATPCList.Length; i++)
                        {
                            UtilityVATPCList[i] = UtilityVATPCList[i].Trim();
                        }
                    }
                    string[] UtilityVATAmountList = null;
                    if (DTO.UtilityVATAmountList != null)
                    {
                        UtilityVATAmountList = DTO.UtilityVATAmountList.Split(',');
                        for (int i = 0; i < UtilityVATAmountList.Length; i++)
                        {
                            UtilityVATAmountList[i] = UtilityVATAmountList[i].Trim();
                        }
                    }
                    string[] UtilityAddressList = null;
                    if (DTO.UtilityAddressList != null)
                    {
                        UtilityAddressList = DTO.UtilityAddressList.Split(',');
                        for (int i = 0; i < UtilityAddressList.Length; i++)
                        {
                            UtilityAddressList[i] = UtilityAddressList[i].Trim();
                        }
                    }
                    string[] UtilityContactNoList = null;
                    if (DTO.UtilityContactNoList != null)
                    {
                        UtilityContactNoList = DTO.UtilityContactNoList.Split(',');
                        for (int i = 0; i < UtilityContactNoList.Length; i++)
                        {
                            UtilityContactNoList[i] = UtilityContactNoList[i].Trim();
                        }
                    }
                    string[] UtilityEmailList = null;
                    if (DTO.UtilityEmailList != null)
                    {
                        UtilityEmailList = DTO.UtilityEmailList.Split(',');
                        for (int i = 0; i < UtilityEmailList.Length; i++)
                        {
                            UtilityEmailList[i] = UtilityEmailList[i].Trim();
                        }
                    }
                    string[] UtilityACNoList = null;
                    if (DTO.UtilityACNoList != null)
                    {
                        UtilityACNoList = DTO.UtilityACNoList.Split(',');
                        for (int i = 0; i < UtilityACNoList.Length; i++)
                        {
                            UtilityACNoList[i] = UtilityACNoList[i].Trim();
                        }
                    }
                    string[] UtilityBankNameList = null;
                    if (DTO.UtilityBankNameList != null)
                    {
                        UtilityBankNameList = DTO.UtilityBankNameList.Split(',');
                        for (int i = 0; i < UtilityBankNameList.Length; i++)
                        {
                            UtilityBankNameList[i] = UtilityBankNameList[i].Trim();
                        }
                    }
                    string[] UtilityBranchNameList = null;
                    if (DTO.UtilityBranchNameList != null)
                    {
                        UtilityBranchNameList = DTO.UtilityBranchNameList.Split(',');
                        for (int i = 0; i < UtilityBranchNameList.Length; i++)
                        {
                            UtilityBranchNameList[i] = UtilityBranchNameList[i].Trim();
                        }
                    }
                    string[] UtilityRoutingNoList = null;
                    if (DTO.UtilityRoutingNoList != null)
                    {
                        UtilityRoutingNoList = DTO.UtilityRoutingNoList.Split(',');
                        for (int i = 0; i < UtilityRoutingNoList.Length; i++)
                        {
                            UtilityRoutingNoList[i] = UtilityRoutingNoList[i].Trim();
                        }
                    }
                    if (UtilityVendorCodeList != null)
                    {
                        RMS.Models.UtilityInfo UI;
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            if (UtilityVendorCodeList[i] != null && UtilityVendorCodeList[i] != "")
                            {
                                UI = new RMS.Models.UtilityInfo();
                                UI.AgreementSLNo = AI.AgreementSLNo;
                                UI.UtilityVendorCode = (UtilityVendorCodeList == null) ? null : UtilityVendorCodeList[i].ToString();
                                UI.UtilityLandlordName = (UtilityLandlordNameList == null) ? null : UtilityLandlordNameList[i].ToString();

                                if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Others; }

                                UI.ServiceChargePC = Convert.ToDouble(ServiceChargePCList[i].ToString());
                                UI.ServiceChargeAmount = Convert.ToDouble(ServiceChargeAmountList[i].ToString());

                                UI.OnlineTowerPC = Convert.ToDouble(OnlineTowerPCList[i].ToString());
                                UI.OnlineTowerAmount = Convert.ToDouble(OnlineTowerAmountList[i].ToString());

                                UI.GeneratorSpacePC = Convert.ToDouble(GeneratorSpacePCList[i].ToString());
                                UI.GeneratorSpaceAmount = Convert.ToDouble(GeneratorSpaceAmountList[i].ToString());

                                UI.CarParkingPC = Convert.ToDouble(CarParkingPCList[i].ToString());
                                UI.CarParkingAmount = Convert.ToDouble(CarParkingAmountList[i].ToString());

                                UI.TaxPC = Convert.ToDouble(UtilityTaxPCList[i].ToString());
                                UI.TaxAmount = Convert.ToDouble(UtilityTaxAmountList[i].ToString());
                                UI.VATPC = Convert.ToDouble(UtilityVATPCList[i].ToString());
                                UI.VATAmount = Convert.ToDouble(UtilityVATAmountList[i].ToString());
                                UI.UtilityAddress = (UtilityAddressList == null) ? null : UtilityAddressList[i].ToString();
                                UI.UtilityContactNo = (UtilityContactNoList == null) ? null : UtilityContactNoList[i].ToString();
                                UI.UtilityEmail = (UtilityEmailList == null) ? null : UtilityEmailList[i].ToString();
                                UI.UtilityACNo = (UtilityACNoList == null) ? null : UtilityACNoList[i].ToString();
                                UI.UtilityBankName = (UtilityBankNameList == null) ? null : UtilityBankNameList[i].ToString();
                                UI.UtilityBranchName = (UtilityBranchNameList == null) ? null : UtilityBranchNameList[i].ToString();
                                UI.UtilityRoutingNo = (UtilityRoutingNoList == null) ? null : UtilityRoutingNoList[i].ToString();
                                db.UtilityInfos.Add(UI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Attach Documents
                    if (DTO.files != null)
                    {
                        RMS.Models.FileUploadInfo FU;
                        foreach (var file in DTO.files)
                        {
                            //Save file content goes here
                            if (file != null && file.ContentLength > 0)
                            {
                                //==
                                if (db.FileUploadInfos.Any(x => x.AgreementSLNo == AI.AgreementSLNo && x.FileName == file.FileName) == false)
                                {
                                    FU = new RMS.Models.FileUploadInfo();
                                    FU.AgreementSLNo = AI.AgreementSLNo;
                                    FU.FileName = file.FileName;
                                    FU.FilePath = "Content/FileUpload/" + AI.AliasCode + "/" + file.FileName;
                                    db.FileUploadInfos.Add(FU);
                                    db.SaveChanges();
                                }
                                //==
                                var originalDirectory = new DirectoryInfo(string.Format("{0}Content\\FileUpload\\", Server.MapPath(@"\")));
                                string pathString = Path.Combine(originalDirectory.ToString(), AI.AliasCode);
                                if (Directory.Exists(pathString) == false)
                                {
                                    System.IO.Directory.CreateDirectory(pathString);
                                }
                                var path = string.Format("{0}\\{1}", pathString, file.FileName);
                                file.SaveAs(path);
                            }
                        }
                    }
                    //===Delete Existing Draft
                    //int DraftAgreementSLNo = db.DraftAgreementInfos.Where(x => x.AgreementType == AgreementType.Renewal && x.UserSLNo == LoginUserSLNo).Select(x => x.AgreementSLNo).SingleOrDefault();
                    //if (DraftAgreementSLNo != 0)
                    //{
                    //    //===Delete Existing Draft Advance Info
                    //    db.DraftAdvanceInfos.RemoveRange(db.DraftAdvanceInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Review Info
                    //    db.DraftReviewInfos.RemoveRange(db.DraftReviewInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Landlord Info
                    //    db.DraftLandlordInfos.RemoveRange(db.DraftLandlordInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Cost Center Info
                    //    db.DraftCostCenterInfos.RemoveRange(db.DraftCostCenterInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Utility Info
                    //    db.DraftUtilityInfos.RemoveRange(db.DraftUtilityInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Agreement Info
                    //    db.DraftAgreementInfos.RemoveRange(db.DraftAgreementInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //}
                    //==
                    AlertMsg = "The renewal agreement: " + AI.AgreementName + " has been created.";
                    return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ReCreateAttach(RMS.Models.AgreementInfoDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    RMS.Models.AgreementInfo AI = new RMS.Models.AgreementInfo();
                    DTOBasic dtoBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    string LoginUserID = (string)Session["LoginUserID"];
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    //==Check available xRenewalAgreementSLNo
                    if (db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xRenewalAgreementSLNo && (x.IsRenewal == true || x.IsModified == true)).Any() == true)
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                    //==Save to Agreement Info Table
                    var CodeInfo = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xRenewalAgreementSLNo).Select(x => new { x.AgreementCode, x.AgreementVersion }).SingleOrDefault();
                    AI.AgreementType = AgreementType.Renewal;
                    AI.AgreementCode = CodeInfo.AgreementCode;
                    AI.AgreementVersion = CodeInfo.AgreementVersion + 1;
                    AI.AliasCode = AI.AgreementCode + "-R" + AI.AgreementVersion;
                    AI.xRenewalAgreementSLNo = DTO.xRenewalAgreementSLNo;
                    //==Basic Info
                    AI.PremiseTypeSLNo = DTO.PremiseTypeSLNo;
                    AI.PremiseName = DTO.PremiseName;
                    AI.PremiseAddress = DTO.PremiseAddress;
                    AI.ClusterGroup = DTO.ClusterGroup;
                    AI.ConcernBranch = DTO.ConcernBranch;
                    AI.InspectorName = DTO.InspectorName;
                    AI.InspectorContactNo = DTO.InspectorContactNo;
                    //==Agreement Info
                    AI.AgreementName = DTO.AgreementName;
                    AI.AgreementStartDate = DateTime.ParseExact(DTO.AgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    AI.AgreementEndDate = DateTime.ParseExact(DTO.AgreementEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    AI.AgreementPeriod = DTO.AgreementPeriod;
                    AI.RenewalFrequency = AI.AgreementPeriod;
                    AI.RentDueDay = DTO.RentDueDay;
                    AI.UOM = DTO.UOM;
                    AI.TotalArea = DTO.TotalArea;
                    AI.CostPerUnit = DTO.CostPerUnit;
                    AI.TotalRentAmount = DTO.TotalRentAmount;
                    AI.SecurityDepositAmount = DTO.SecurityDepositAmount;
                    AI.AdvanceAmount = DTO.AdvanceAmount;
                    AI.AdvanceAdjustmentPeriod = DTO.AdvanceAdjustmentPeriod;
                    AI.AdvanceAdjustmentAmount = DTO.AdvanceAdjustmentAmount;
                    AI.TaxPercentage = DTO.TaxPercentage;
                    AI.TaxAmount = DTO.TaxAmount;
                    AI.VATPercentage = DTO.VATPercentage;
                    AI.VATAmount = DTO.VATAmount;
                    AI.NetRentAmount = AI.TotalRentAmount - AI.AdvanceAdjustmentAmount;
                    AI.AgreementStatus = AgreementStatus.Created;
                    AI.AgreementText = null;
                    AI.Status = dtoBasic.active;
                    AI.UserSLNo = LoginUserSLNo;
                    AI.EntryDate = DateTime.Now;
                    AI.IsDeleted = false;
                    AI.ReviewFrequency = DTO.ReviewFrequency;
                    AI.ReviewPercentage = DTO.ReviewPercentage;
                    AI.TaxType = DTO.TaxType;
                    AI.VatType = DTO.VatType;
                    AI.ServiceCharge = DTO.ServiceCharge;
                    AI.OnlineTower = DTO.OnlineTower;
                    AI.GeneratorSpace = DTO.GeneratorSpace;
                    AI.CarParking = DTO.CarParking;
                    //==Control Data
                    AI.CashGLCode = DTO.CashGLCode;
                    AI.BankGLCode = DTO.BankGLCode;
                    AI.AdvanceGLCode = DTO.AdvanceGLCode;
                    AI.AdvanceAdjustmentGLCode = DTO.AdvanceAdjustmentGLCode;
                    AI.RentGLCode = DTO.RentGLCode;
                    AI.ServiceChargeGLCode = DTO.ServiceChargeGLCode;
                    AI.TaxGLCode = DTO.TaxGLCode;
                    AI.VATGLCode = DTO.VATGLCode;
                    AI.ProvisionGLTax = DTO.ProvisionGLTax;
                    AI.ProvisionGLAP = DTO.ProvisionGLAP;
                    AI.RTGSGL = DTO.RTGSGL;
                    AI.EFTNGL = DTO.EFTNGL;
                    AI.PayOrderGL = DTO.PayOrderGL;
                    AI.IBBPaymentGL = DTO.IBBPaymentGL;
                    AI.CityBrokerageGL = DTO.CityBrokerageGL;
                    AI.CityCapitalGL = DTO.CityCapitalGL;
                    AI.OthersGL = DTO.OthersGL;
                    AI.Special = DTO.Special;
                    //=====
                    AI.PremiseAddressBangla = DTO.PremiseAddressBangla;
                    AI.AreaStatus = DTO.AreaStatus;
                    AI.RegionalOffice = DTO.RegionalOffice;
                    AI.PrimarySOL = DTO.PrimarySOL;
                    AI.AttachedControl = DTO.AttachedControl;
                    AI.ControllerOfficeDistance = DTO.ControllerOfficeDistance;
                    AI.RoutingNumber = DTO.RoutingNumber;
                    AI.Division = DTO.Division;
                    AI.District = DTO.District;
                    AI.Upazila = DTO.Upazila;
                    AI.Thana = DTO.Thana;
                    AI.ThanaCode = DTO.ThanaCode;
                    AI.Pourasabha = DTO.Pourasabha;
                    AI.PourasabhaType = DTO.PourasabhaType;
                    AI.UnionName = DTO.UnionName;
                    AI.WardNo = DTO.WardNo;
                    AI.PremisesTypeforAccounts = DTO.PremisesTypeforAccounts;
                    AI.ParentAgreementCode = DTO.ParentAgreementCode;
                    AI.ElectricityLoad = DTO.ElectricityLoad;
                    AI.ElectricityProvidedBy = DTO.ElectricityProvidedBy;
                    AI.AITBourneBy = DTO.AITBourneBy;
                    AI.CommercialPermission = DTO.CommercialPermission;
                    AI.BuildingPlan = DTO.BuildingPlan;
                    AI.PremisesSituatedFloor = DTO.PremisesSituatedFloor;
                    AI.BangladeshBankApproval = DTO.BangladeshBankApproval;
                    AI.BangladeshBankReference = DTO.BangladeshBankReference;
                    AI.ITTowerRentClause = DTO.ITTowerRentClause;
                    AI.TerminationClause = DTO.TerminationClause;
                    AI.TerminationNoticePeriod = DTO.TerminationNoticePeriod;
                    if (DTO.PremisesOpeningDate != null)
                    {
                        AI.PremisesOpeningDate = DateTime.ParseExact(DTO.PremisesOpeningDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.PremisesOpeningDate = null;
                    }
                    if (DTO.DocumentDate != null)
                    {
                        AI.DocumentDate = DateTime.ParseExact(DTO.DocumentDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.DocumentDate = null;
                    }
                    AI.Remarks = DTO.Remarks;
                    AI.AgreementRemarks = DTO.AgreementRemarks;
                    AI.AdvanceRemarks = DTO.AdvanceRemarks;
                    AI.ReviewRemarks = DTO.ReviewRemarks;
                    AI.LLRemarks = DTO.LLRemarks;
                    AI.CCRemarks = DTO.CCRemarks;
                    AI.UtilityRemarks = DTO.UtilityRemarks;
                    AI.ControlDataRemarks = DTO.ControlDataRemarks;

                    AI.BorrowingRate = DTO.BorrowingRate;
                    AI.PaymentMethod = DTO.PaymentMethod;
                    AI.IsIFRSEnable = DTO.IsIFRSEnable;
                    AI.CalculationMethod = DTO.CalculationMethod;
                    AI.WithHoldingCode = DTO.WithHoldingCode;
                    AI.AdditionalExpense = DTO.AdditionalExpense;
                    AI.InitialDirectCost = DTO.InitialDirectCost;
                    AI.DismantlingCost = DTO.DismantlingCost;
                    AI.CarParkingNo = DTO.CarParkingNo;
                    AI.WaterBillType = DTO.WaterBillType;
                    AI.WaterBillAmount = DTO.WaterBillAmount;
                    if (DTO.IFRSEffectiveDate != null && DTO.IsIFRSEnable == true)
                    {
                        AI.IFRSEffectiveDate = DateTime.ParseExact(DTO.IFRSEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.IFRSEffectiveDate = null;
                    }
                    AI.CorporateTaxRate = DTO.CorporateTaxRate;
                    //=====
                    db.AgreementInfos.Add(AI);
                    db.SaveChanges();
                    //==Update xRenewalAgreement Info
                    RMS.Models.AgreementInfo xAI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xRenewalAgreementSLNo).SingleOrDefault();
                    xAI.IsRenewal = true;
                    xAI.yRenewalAgreementSLNo = AI.AgreementSLNo;
                    db.Entry(xAI).State = EntityState.Modified;
                    db.SaveChanges();
                    //==Space Information
                    string[] SpaceTypeList = null;
                    if (DTO.SpaceTypeList != null)
                    {
                        SpaceTypeList = DTO.SpaceTypeList.Split(',');
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            SpaceTypeList[i] = SpaceTypeList[i].Trim();
                        }
                    }
                    string[] SpaceAreaList = null;
                    if (DTO.SpaceAreaList != null)
                    {
                        SpaceAreaList = DTO.SpaceAreaList.Split(',');
                        for (int i = 0; i < SpaceAreaList.Length; i++)
                        {
                            SpaceAreaList[i] = SpaceAreaList[i].Trim();
                        }
                    }
                    string[] SpaceRateList = null;
                    if (DTO.SpaceRateList != null)
                    {
                        SpaceRateList = DTO.SpaceRateList.Split(',');
                        for (int i = 0; i < SpaceRateList.Length; i++)
                        {
                            SpaceRateList[i] = SpaceRateList[i].Trim();
                        }
                    }
                    string[] SpaceRentList = null;
                    if (DTO.SpaceRentList != null)
                    {
                        SpaceRentList = DTO.SpaceRentList.Split(',');
                        for (int i = 0; i < SpaceRentList.Length; i++)
                        {
                            SpaceRentList[i] = SpaceRentList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdvanceList = null;
                    if (DTO.SpaceTotalAdvanceList != null)
                    {
                        SpaceTotalAdvanceList = DTO.SpaceTotalAdvanceList.Split(',');
                        for (int i = 0; i < SpaceTotalAdvanceList.Length; i++)
                        {
                            SpaceTotalAdvanceList[i] = SpaceTotalAdvanceList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdjustmentList = null;
                    if (DTO.SpaceTotalAdjustmentList != null)
                    {
                        SpaceTotalAdjustmentList = DTO.SpaceTotalAdjustmentList.Split(',');
                        for (int i = 0; i < SpaceTotalAdjustmentList.Length; i++)
                        {
                            SpaceTotalAdjustmentList[i] = SpaceTotalAdjustmentList[i].Trim();
                        }
                    }
                    string[] SpaceRemarksList = null;
                    if (DTO.SpaceRemarksList != null)
                    {
                        SpaceRemarksList = DTO.SpaceRemarksList.Split(',');
                        for (int i = 0; i < SpaceRemarksList.Length; i++)
                        {
                            SpaceRemarksList[i] = SpaceRemarksList[i].Trim();
                        }
                    }
                    if (SpaceTypeList != null)
                    {
                        RMS.Models.SpaceInfo SpaceInfo;
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            if (SpaceTypeList[i] != null && SpaceTypeList[i] != "")
                            {
                                SpaceInfo = new RMS.Models.SpaceInfo();
                                SpaceInfo.AgreementSLNo = AI.AgreementSLNo;
                                SpaceInfo.SpaceType = (SpaceTypeList == null) ? null : SpaceTypeList[i].ToString();
                                SpaceInfo.SpaceArea = Convert.ToDouble(SpaceAreaList[i].ToString());
                                SpaceInfo.SpaceRate = Convert.ToDouble(SpaceRateList[i].ToString());
                                SpaceInfo.SpaceRent = Convert.ToDouble(SpaceRentList[i].ToString());
                                SpaceInfo.SpaceTotalAdvance = Convert.ToDouble(SpaceTotalAdvanceList[i].ToString());
                                SpaceInfo.SpaceTotalAdjustment = Convert.ToDouble(SpaceTotalAdjustmentList[i].ToString());
                                SpaceInfo.SpaceRemarks = (SpaceRemarksList == null) ? null : SpaceRemarksList[i].ToString();
                                db.SpaceInfos.Add(SpaceInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Advance Information
                    string[] AdvanceNoList = null;
                    if (DTO.AdvanceNoList != null)
                    {
                        AdvanceNoList = DTO.AdvanceNoList.Split(',');
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            AdvanceNoList[i] = AdvanceNoList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotPeriodList = null;
                    if (DTO.AdvanceSlotPeriodList != null)
                    {
                        AdvanceSlotPeriodList = DTO.AdvanceSlotPeriodList.Split(',');
                        for (int i = 0; i < AdvanceSlotPeriodList.Length; i++)
                        {
                            AdvanceSlotPeriodList[i] = AdvanceSlotPeriodList[i].Trim();
                        }
                    }
                    string[] AdvanceStartDateList = null;
                    if (DTO.AdvanceStartDateList != null)
                    {
                        AdvanceStartDateList = DTO.AdvanceStartDateList.Split(',');
                        for (int i = 0; i < AdvanceStartDateList.Length; i++)
                        {
                            AdvanceStartDateList[i] = AdvanceStartDateList[i].Trim();
                        }
                    }
                    string[] AdvanceEndDateList = null;
                    if (DTO.AdvanceEndDateList != null)
                    {
                        AdvanceEndDateList = DTO.AdvanceEndDateList.Split(',');
                        for (int i = 0; i < AdvanceEndDateList.Length; i++)
                        {
                            AdvanceEndDateList[i] = AdvanceEndDateList[i].Trim();
                        }
                    }
                    string[] AdvanceNoteList = null;
                    if (DTO.AdvanceNoteList != null)
                    {
                        AdvanceNoteList = DTO.AdvanceNoteList.Split(',');
                        for (int i = 0; i < AdvanceNoteList.Length; i++)
                        {
                            AdvanceNoteList[i] = AdvanceNoteList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotAmountList = null;
                    if (DTO.AdvanceSlotAmountList != null)
                    {
                        AdvanceSlotAmountList = DTO.AdvanceSlotAmountList.Split(',');
                        for (int i = 0; i < AdvanceSlotAmountList.Length; i++)
                        {
                            AdvanceSlotAmountList[i] = AdvanceSlotAmountList[i].Trim();
                        }
                    }
                    if (AdvanceNoList != null)
                    {
                        RMS.Models.AdvanceInfo AdvInfo;
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            if (AdvanceNoList[i] != null && AdvanceNoList[i] != "")
                            {
                                AdvInfo = new RMS.Models.AdvanceInfo();
                                AdvInfo.AgreementSLNo = AI.AgreementSLNo;
                                AdvInfo.AdvanceNo = Convert.ToInt32(AdvanceNoList[i].ToString());
                                AdvInfo.AdvanceSlotPeriod = Convert.ToInt32(AdvanceSlotPeriodList[i].ToString());
                                AdvInfo.StartDate = DateTime.ParseExact(AdvanceStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.EndDate = DateTime.ParseExact(AdvanceEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.AdvanceSlotAmount = Convert.ToDouble(AdvanceSlotAmountList[i].ToString());
                                AdvInfo.AdvanceNote = (AdvanceNoteList == null) ? null : AdvanceNoteList[i].ToString();
                                db.AdvanceInfos.Add(AdvInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Review Info
                    string[] ReviewNoList = null;
                    if (DTO.ReviewNoList != null)
                    {
                        ReviewNoList = DTO.ReviewNoList.Split(',');
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            ReviewNoList[i] = ReviewNoList[i].Trim();
                        }
                    }
                    string[] ReviewStartDateList = null;
                    if (DTO.ReviewStartDateList != null)
                    {
                        ReviewStartDateList = DTO.ReviewStartDateList.Split(',');
                        for (int i = 0; i < ReviewStartDateList.Length; i++)
                        {
                            ReviewStartDateList[i] = ReviewStartDateList[i].Trim();
                        }
                    }
                    string[] ReviewEndDateList = null;
                    if (DTO.ReviewEndDateList != null)
                    {
                        ReviewEndDateList = DTO.ReviewEndDateList.Split(',');
                        for (int i = 0; i < ReviewEndDateList.Length; i++)
                        {
                            ReviewEndDateList[i] = ReviewEndDateList[i].Trim();
                        }
                    }
                    string[] ReviewPeriodList = null;
                    if (DTO.ReviewPeriodList != null)
                    {
                        ReviewPeriodList = DTO.ReviewPeriodList.Split(',');
                        for (int i = 0; i < ReviewPeriodList.Length; i++)
                        {
                            ReviewPeriodList[i] = ReviewPeriodList[i].Trim();
                        }
                    }
                    string[] ReviewIncreaseAmountList = null;
                    if (DTO.ReviewIncreaseAmountList != null)
                    {
                        ReviewIncreaseAmountList = DTO.ReviewIncreaseAmountList.Split(',');
                        for (int i = 0; i < ReviewIncreaseAmountList.Length; i++)
                        {
                            ReviewIncreaseAmountList[i] = ReviewIncreaseAmountList[i].Trim();
                        }
                    }
                    string[] ReviewIncreasePercentageList = null;
                    if (DTO.ReviewIncreasePercentageList != null)
                    {
                        ReviewIncreasePercentageList = DTO.ReviewIncreasePercentageList.Split(',');
                        for (int i = 0; i < ReviewIncreasePercentageList.Length; i++)
                        {
                            ReviewIncreasePercentageList[i] = ReviewIncreasePercentageList[i].Trim();
                        }
                    }
                    string[] ReviewNoteList = null;
                    if (DTO.ReviewNoteList != null)
                    {
                        ReviewNoteList = DTO.ReviewNoteList.Split(',');
                        for (int i = 0; i < ReviewNoteList.Length; i++)
                        {
                            ReviewNoteList[i] = ReviewNoteList[i].Trim();
                        }
                    }
                    if (ReviewNoList != null)
                    {
                        RMS.Models.ReviewInfo RI;
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            if (ReviewNoList[i] != null && ReviewNoList[i] != "")
                            {
                                RI = new RMS.Models.ReviewInfo();
                                RI.AgreementSLNo = AI.AgreementSLNo;
                                RI.ReviewNo = Convert.ToInt32(ReviewNoList[i].ToString());
                                RI.Period = Convert.ToInt32(ReviewPeriodList[i].ToString());
                                RI.StartDate = DateTime.ParseExact(ReviewStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                RI.EndDate = DateTime.ParseExact(ReviewEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                RI.IncreaseAmount = Convert.ToDouble(ReviewIncreaseAmountList[i].ToString());
                                RI.IncreasePercentage = Convert.ToDouble(ReviewIncreasePercentageList[i].ToString());
                                RI.ReviewNote = (ReviewNoteList == null) ? null : ReviewNoteList[i].ToString();
                                db.ReviewInfos.Add(RI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Landlord Information
                    string[] VendorCodeList = null;
                    if (DTO.VendorCodeList != null)
                    {
                        VendorCodeList = DTO.VendorCodeList.Split(',');
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            VendorCodeList[i] = VendorCodeList[i].Trim();
                        }
                    }
                    string[] LandlordNameList = null;
                    if (DTO.LandlordNameList != null)
                    {
                        LandlordNameList = DTO.LandlordNameList.Split(',');
                        for (int i = 0; i < LandlordNameList.Length; i++)
                        {
                            LandlordNameList[i] = LandlordNameList[i].Trim();
                        }
                    }
                    string[] ModeOfPaymentList = null;
                    if (DTO.ModeOfPaymentList != null)
                    {
                        ModeOfPaymentList = DTO.ModeOfPaymentList.Split(',');
                        for (int i = 0; i < ModeOfPaymentList.Length; i++)
                        {
                            ModeOfPaymentList[i] = ModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] VendorAdvancePCList = null;
                    if (DTO.VendorAdvancePCList != null)
                    {
                        VendorAdvancePCList = DTO.VendorAdvancePCList.Split(',');
                        for (int i = 0; i < VendorAdvancePCList.Length; i++)
                        {
                            VendorAdvancePCList[i] = VendorAdvancePCList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAmountList = null;
                    if (DTO.VendorAdvanceAmountList != null)
                    {
                        VendorAdvanceAmountList = DTO.VendorAdvanceAmountList.Split(',');
                        for (int i = 0; i < VendorAdvanceAmountList.Length; i++)
                        {
                            VendorAdvanceAmountList[i] = VendorAdvanceAmountList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAdjustmentPCList = null;
                    if (DTO.VendorAdvanceAdjustmentPCList != null)
                    {
                        VendorAdvanceAdjustmentPCList = DTO.VendorAdvanceAdjustmentPCList.Split(',');
                        for (int i = 0; i < VendorAdvanceAdjustmentPCList.Length; i++)
                        {
                            VendorAdvanceAdjustmentPCList[i] = VendorAdvanceAdjustmentPCList[i].Trim();
                        }
                    }
                    //string[] VendorAdvanceAdjustmentAmountList = null;
                    //if (DTO.VendorAdvanceAdjustmentAmountList != null)
                    //{
                    //    VendorAdvanceAdjustmentAmountList = DTO.VendorAdvanceAdjustmentAmountList.Split(',');
                    //    for (int i = 0; i < VendorAdvanceAdjustmentAmountList.Length; i++)
                    //    {
                    //        VendorAdvanceAdjustmentAmountList[i] = VendorAdvanceAdjustmentAmountList[i].Trim();
                    //    }
                    //}
                    string[] VendorTaxPCList = null;
                    if (DTO.VendorTaxPCList != null)
                    {
                        VendorTaxPCList = DTO.VendorTaxPCList.Split(',');
                        for (int i = 0; i < VendorTaxPCList.Length; i++)
                        {
                            VendorTaxPCList[i] = VendorTaxPCList[i].Trim();
                        }
                    }
                    string[] VendorTaxAmountList = null;
                    if (DTO.VendorTaxAmountList != null)
                    {
                        VendorTaxAmountList = DTO.VendorTaxAmountList.Split(',');
                        for (int i = 0; i < VendorTaxAmountList.Length; i++)
                        {
                            VendorTaxAmountList[i] = VendorTaxAmountList[i].Trim();
                        }
                    }
                    string[] VendorVATPCList = null;
                    if (DTO.VendorVATPCList != null)
                    {
                        VendorVATPCList = DTO.VendorVATPCList.Split(',');
                        for (int i = 0; i < VendorVATPCList.Length; i++)
                        {
                            VendorVATPCList[i] = VendorVATPCList[i].Trim();
                        }
                    }
                    string[] VendorVATAmountList = null;
                    if (DTO.VendorVATAmountList != null)
                    {
                        VendorVATAmountList = DTO.VendorVATAmountList.Split(',');
                        for (int i = 0; i < VendorVATAmountList.Length; i++)
                        {
                            VendorVATAmountList[i] = VendorVATAmountList[i].Trim();
                        }
                    }
                    string[] VendorRentPCList = null;
                    if (DTO.VendorRentPCList != null)
                    {
                        VendorRentPCList = DTO.VendorRentPCList.Split(',');
                        for (int i = 0; i < VendorRentPCList.Length; i++)
                        {
                            VendorRentPCList[i] = VendorRentPCList[i].Trim();
                        }
                    }
                    //string[] VendorRentAmountList = null;
                    //if (DTO.VendorRentAmountList != null)
                    //{
                    //    VendorRentAmountList = DTO.VendorRentAmountList.Split(',');
                    //    for (int i = 0; i < VendorRentAmountList.Length; i++)
                    //    {
                    //        VendorRentAmountList[i] = VendorRentAmountList[i].Trim();
                    //    }
                    //}
                    string[] AddressList = null;
                    if (DTO.LLAddressList != null)
                    {
                        AddressList = DTO.LLAddressList.Split(',');
                        for (int i = 0; i < AddressList.Length; i++)
                        {
                            AddressList[i] = AddressList[i].Trim();
                        }
                    }
                    string[] ContactNoList = null;
                    if (DTO.LLContactNoList != null)
                    {
                        ContactNoList = DTO.LLContactNoList.Split(',');
                        for (int i = 0; i < ContactNoList.Length; i++)
                        {
                            ContactNoList[i] = ContactNoList[i].Trim();
                        }
                    }
                    string[] EmailList = null;
                    if (DTO.LLEmailList != null)
                    {
                        EmailList = DTO.LLEmailList.Split(',');
                        for (int i = 0; i < EmailList.Length; i++)
                        {
                            EmailList[i] = EmailList[i].Trim();
                        }
                    }
                    string[] ACNoList = null;
                    if (DTO.ACNoList != null)
                    {
                        ACNoList = DTO.ACNoList.Split(',');
                        for (int i = 0; i < ACNoList.Length; i++)
                        {
                            ACNoList[i] = ACNoList[i].Trim();
                        }
                    }
                    string[] BankNameList = null;
                    if (DTO.BankNameList != null)
                    {
                        BankNameList = DTO.BankNameList.Split(',');
                        for (int i = 0; i < BankNameList.Length; i++)
                        {
                            BankNameList[i] = BankNameList[i].Trim();
                        }
                    }
                    string[] BranchNameList = null;
                    if (DTO.BranchNameList != null)
                    {
                        BranchNameList = DTO.BranchNameList.Split(',');
                        for (int i = 0; i < BranchNameList.Length; i++)
                        {
                            BranchNameList[i] = BranchNameList[i].Trim();
                        }
                    }
                    string[] RoutingNoList = null;
                    if (DTO.RoutingNoList != null)
                    {
                        RoutingNoList = DTO.RoutingNoList.Split(',');
                        for (int i = 0; i < RoutingNoList.Length; i++)
                        {
                            RoutingNoList[i] = RoutingNoList[i].Trim();
                        }
                    }
                    RMS.Models.LandlordInfo LI;
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    for (int i = 0; i < VendorCodeList.Length; i++)
                    {
                        if (VendorCodeList[i] != null && VendorCodeList[i] != "")
                        {
                            LI = new RMS.Models.LandlordInfo();
                            LI.AgreementSLNo = AI.AgreementSLNo;
                            LI.VendorCode = (VendorCodeList == null) ? null : VendorCodeList[i].ToString();
                            LI.LandlordName = (LandlordNameList == null) ? null : LandlordNameList[i].ToString();
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { LI.ModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { LI.ModeOfPayment = ModeOfPaymentLocation.RTGS; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { LI.ModeOfPayment = ModeOfPaymentLocation.EFTN; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { LI.ModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { LI.ModeOfPayment = ModeOfPaymentLocation.Cash; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { LI.ModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { LI.ModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { LI.ModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { LI.ModeOfPayment = ModeOfPaymentLocation.Others; }
                            LI.AdvancePC = Convert.ToDouble(VendorAdvancePCList[i].ToString());
                            LI.AdvanceAdjustmentPC = Convert.ToDouble(VendorAdvanceAdjustmentPCList[i].ToString());
                            LI.TaxPC = Convert.ToDouble(VendorTaxPCList[i].ToString());
                            LI.VATPC = Convert.ToDouble(VendorVATPCList[i].ToString());
                            LI.RentPC = Convert.ToDouble(VendorRentPCList[i].ToString());
                            //==PC Amount
                            LI.AdvanceAmount = (AI.AdvanceAmount * LI.AdvancePC) / 100;
                            LI.TaxAmount = (AI.TaxAmount * LI.TaxPC) / 100;
                            LI.VATAmount = (AI.VATAmount * LI.VATPC) / 100;
                            //==
                            LI.LLAddress = (AddressList == null) ? null : AddressList[i].ToString();
                            LI.LLContactNo = (ContactNoList == null) ? null : ContactNoList[i].ToString();
                            LI.LLEmail = (EmailList == null) ? null : EmailList[i].ToString();
                            LI.ACNo = (ACNoList == null) ? null : ACNoList[i].ToString();
                            LI.BankName = (BankNameList == null) ? null : BankNameList[i].ToString();
                            LI.BranchName = (BranchNameList == null) ? null : BranchNameList[i].ToString();
                            LI.RoutingNo = (RoutingNoList == null) ? null : RoutingNoList[i].ToString();
                            db.LandlordInfos.Add(LI);
                            db.SaveChanges();
                        }
                    }
                    //==Cost Center
                    string[] CCCodeList = null;
                    if (DTO.CCCodeList != null)
                    {
                        CCCodeList = DTO.CCCodeList.Split(',');
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            CCCodeList[i] = CCCodeList[i].Trim();
                        }
                    }
                    string[] CCNameList = null;
                    if (DTO.CCNameList != null)
                    {
                        CCNameList = DTO.CCNameList.Split(',');
                        for (int i = 0; i < CCNameList.Length; i++)
                        {
                            CCNameList[i] = CCNameList[i].Trim();
                        }
                    }
                    string[] SOLCodeList = null;
                    if (DTO.SOLCodeList != null)
                    {
                        SOLCodeList = DTO.SOLCodeList.Split(',');
                        for (int i = 0; i < SOLCodeList.Length; i++)
                        {
                            SOLCodeList[i] = SOLCodeList[i].Trim();
                        }
                    }
                    string[] SOLNameList = null;
                    if (DTO.SOLNameList != null)
                    {
                        SOLNameList = DTO.SOLNameList.Split(',');
                        for (int i = 0; i < SOLNameList.Length; i++)
                        {
                            SOLNameList[i] = SOLNameList[i].Trim();
                        }
                    }
                    string[] CCShareAllotmentList = null;
                    if (DTO.CCShareAllotmentList != null)
                    {
                        CCShareAllotmentList = DTO.CCShareAllotmentList.Split(',');
                        for (int i = 0; i < CCShareAllotmentList.Length; i++)
                        {
                            CCShareAllotmentList[i] = CCShareAllotmentList[i].Trim();
                        }
                    }
                    RMS.Models.CostCenterInfo CC;
                    for (int i = 0; i < CCCodeList.Length; i++)
                    {
                        if (CCCodeList[i] != null && CCCodeList[i] != "")
                        {
                            CC = new RMS.Models.CostCenterInfo();
                            CC.AgreementSLNo = AI.AgreementSLNo;
                            CC.CCCode = (CCCodeList == null) ? null : CCCodeList[i].ToString();
                            CC.CCName = (CCNameList == null) ? null : CCNameList[i].ToString();
                            CC.SOLCode = (SOLCodeList == null) ? null : SOLCodeList[i].ToString();
                            CC.SOLName = (SOLNameList == null) ? null : SOLNameList[i].ToString();
                            CC.CCShareAllotment = Convert.ToDouble(CCShareAllotmentList[i].ToString());
                            db.CostCenterInfos.Add(CC);
                            db.SaveChanges();
                        }
                    }
                    //==Utility Information
                    string[] UtilityVendorCodeList = null;
                    if (DTO.UtilityVendorCodeList != null)
                    {
                        UtilityVendorCodeList = DTO.UtilityVendorCodeList.Split(',');
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            UtilityVendorCodeList[i] = UtilityVendorCodeList[i].Trim();
                        }
                    }
                    string[] UtilityLandlordNameList = null;
                    if (DTO.UtilityLandlordNameList != null)
                    {
                        UtilityLandlordNameList = DTO.UtilityLandlordNameList.Split(',');
                        for (int i = 0; i < UtilityLandlordNameList.Length; i++)
                        {
                            UtilityLandlordNameList[i] = UtilityLandlordNameList[i].Trim();
                        }
                    }
                    string[] UtilityModeOfPaymentList = null;
                    if (DTO.UtilityModeOfPaymentList != null)
                    {
                        UtilityModeOfPaymentList = DTO.UtilityModeOfPaymentList.Split(',');
                        for (int i = 0; i < UtilityModeOfPaymentList.Length; i++)
                        {
                            UtilityModeOfPaymentList[i] = UtilityModeOfPaymentList[i].Trim();
                        }
                    }

                    string[] ServiceChargePCList = null;
                    if (DTO.ServiceChargePCList != null)
                    {
                        ServiceChargePCList = DTO.ServiceChargePCList.Split(',');
                        for (int i = 0; i < ServiceChargePCList.Length; i++)
                        {
                            ServiceChargePCList[i] = ServiceChargePCList[i].Trim();
                        }
                    }
                    string[] ServiceChargeAmountList = null;
                    if (DTO.ServiceChargeAmountList != null)
                    {
                        ServiceChargeAmountList = DTO.ServiceChargeAmountList.Split(',');
                        for (int i = 0; i < ServiceChargeAmountList.Length; i++)
                        {
                            ServiceChargeAmountList[i] = ServiceChargeAmountList[i].Trim();
                        }
                    }

                    string[] OnlineTowerPCList = null;
                    if (DTO.OnlineTowerPCList != null)
                    {
                        OnlineTowerPCList = DTO.OnlineTowerPCList.Split(',');
                        for (int i = 0; i < OnlineTowerPCList.Length; i++)
                        {
                            OnlineTowerPCList[i] = OnlineTowerPCList[i].Trim();
                        }
                    }
                    string[] OnlineTowerAmountList = null;
                    if (DTO.OnlineTowerAmountList != null)
                    {
                        OnlineTowerAmountList = DTO.OnlineTowerAmountList.Split(',');
                        for (int i = 0; i < OnlineTowerAmountList.Length; i++)
                        {
                            OnlineTowerAmountList[i] = OnlineTowerAmountList[i].Trim();
                        }
                    }

                    string[] GeneratorSpacePCList = null;
                    if (DTO.GeneratorSpacePCList != null)
                    {
                        GeneratorSpacePCList = DTO.GeneratorSpacePCList.Split(',');
                        for (int i = 0; i < GeneratorSpacePCList.Length; i++)
                        {
                            GeneratorSpacePCList[i] = GeneratorSpacePCList[i].Trim();
                        }
                    }
                    string[] GeneratorSpaceAmountList = null;
                    if (DTO.GeneratorSpaceAmountList != null)
                    {
                        GeneratorSpaceAmountList = DTO.GeneratorSpaceAmountList.Split(',');
                        for (int i = 0; i < GeneratorSpaceAmountList.Length; i++)
                        {
                            GeneratorSpaceAmountList[i] = GeneratorSpaceAmountList[i].Trim();
                        }
                    }
                    string[] CarParkingPCList = null;
                    if (DTO.CarParkingPCList != null)
                    {
                        CarParkingPCList = DTO.CarParkingPCList.Split(',');
                        for (int i = 0; i < CarParkingPCList.Length; i++)
                        {
                            CarParkingPCList[i] = CarParkingPCList[i].Trim();
                        }
                    }
                    string[] CarParkingAmountList = null;
                    if (DTO.CarParkingAmountList != null)
                    {
                        CarParkingAmountList = DTO.CarParkingAmountList.Split(',');
                        for (int i = 0; i < CarParkingAmountList.Length; i++)
                        {
                            CarParkingAmountList[i] = CarParkingAmountList[i].Trim();
                        }
                    }
                    string[] UtilityTaxPCList = null;
                    if (DTO.UtilityTaxPCList != null)
                    {
                        UtilityTaxPCList = DTO.UtilityTaxPCList.Split(',');
                        for (int i = 0; i < UtilityTaxPCList.Length; i++)
                        {
                            UtilityTaxPCList[i] = UtilityTaxPCList[i].Trim();
                        }
                    }
                    string[] UtilityTaxAmountList = null;
                    if (DTO.UtilityTaxAmountList != null)
                    {
                        UtilityTaxAmountList = DTO.UtilityTaxAmountList.Split(',');
                        for (int i = 0; i < UtilityTaxAmountList.Length; i++)
                        {
                            UtilityTaxAmountList[i] = UtilityTaxAmountList[i].Trim();
                        }
                    }
                    string[] UtilityVATPCList = null;
                    if (DTO.UtilityVATPCList != null)
                    {
                        UtilityVATPCList = DTO.UtilityVATPCList.Split(',');
                        for (int i = 0; i < UtilityVATPCList.Length; i++)
                        {
                            UtilityVATPCList[i] = UtilityVATPCList[i].Trim();
                        }
                    }
                    string[] UtilityVATAmountList = null;
                    if (DTO.UtilityVATAmountList != null)
                    {
                        UtilityVATAmountList = DTO.UtilityVATAmountList.Split(',');
                        for (int i = 0; i < UtilityVATAmountList.Length; i++)
                        {
                            UtilityVATAmountList[i] = UtilityVATAmountList[i].Trim();
                        }
                    }
                    string[] UtilityAddressList = null;
                    if (DTO.UtilityAddressList != null)
                    {
                        UtilityAddressList = DTO.UtilityAddressList.Split(',');
                        for (int i = 0; i < UtilityAddressList.Length; i++)
                        {
                            UtilityAddressList[i] = UtilityAddressList[i].Trim();
                        }
                    }
                    string[] UtilityContactNoList = null;
                    if (DTO.UtilityContactNoList != null)
                    {
                        UtilityContactNoList = DTO.UtilityContactNoList.Split(',');
                        for (int i = 0; i < UtilityContactNoList.Length; i++)
                        {
                            UtilityContactNoList[i] = UtilityContactNoList[i].Trim();
                        }
                    }
                    string[] UtilityEmailList = null;
                    if (DTO.UtilityEmailList != null)
                    {
                        UtilityEmailList = DTO.UtilityEmailList.Split(',');
                        for (int i = 0; i < UtilityEmailList.Length; i++)
                        {
                            UtilityEmailList[i] = UtilityEmailList[i].Trim();
                        }
                    }
                    string[] UtilityACNoList = null;
                    if (DTO.UtilityACNoList != null)
                    {
                        UtilityACNoList = DTO.UtilityACNoList.Split(',');
                        for (int i = 0; i < UtilityACNoList.Length; i++)
                        {
                            UtilityACNoList[i] = UtilityACNoList[i].Trim();
                        }
                    }
                    string[] UtilityBankNameList = null;
                    if (DTO.UtilityBankNameList != null)
                    {
                        UtilityBankNameList = DTO.UtilityBankNameList.Split(',');
                        for (int i = 0; i < UtilityBankNameList.Length; i++)
                        {
                            UtilityBankNameList[i] = UtilityBankNameList[i].Trim();
                        }
                    }
                    string[] UtilityBranchNameList = null;
                    if (DTO.UtilityBranchNameList != null)
                    {
                        UtilityBranchNameList = DTO.UtilityBranchNameList.Split(',');
                        for (int i = 0; i < UtilityBranchNameList.Length; i++)
                        {
                            UtilityBranchNameList[i] = UtilityBranchNameList[i].Trim();
                        }
                    }
                    string[] UtilityRoutingNoList = null;
                    if (DTO.UtilityRoutingNoList != null)
                    {
                        UtilityRoutingNoList = DTO.UtilityRoutingNoList.Split(',');
                        for (int i = 0; i < UtilityRoutingNoList.Length; i++)
                        {
                            UtilityRoutingNoList[i] = UtilityRoutingNoList[i].Trim();
                        }
                    }
                    if (UtilityVendorCodeList != null)
                    {
                        RMS.Models.UtilityInfo UI;
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            if (UtilityVendorCodeList[i] != null && UtilityVendorCodeList[i] != "")
                            {
                                UI = new RMS.Models.UtilityInfo();
                                UI.AgreementSLNo = AI.AgreementSLNo;
                                UI.UtilityVendorCode = (UtilityVendorCodeList == null) ? null : UtilityVendorCodeList[i].ToString();
                                UI.UtilityLandlordName = (UtilityLandlordNameList == null) ? null : UtilityLandlordNameList[i].ToString();

                                if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Others; }

                                UI.ServiceChargePC = Convert.ToDouble(ServiceChargePCList[i].ToString());
                                UI.ServiceChargeAmount = Convert.ToDouble(ServiceChargeAmountList[i].ToString());

                                UI.OnlineTowerPC = Convert.ToDouble(OnlineTowerPCList[i].ToString());
                                UI.OnlineTowerAmount = Convert.ToDouble(OnlineTowerAmountList[i].ToString());

                                UI.GeneratorSpacePC = Convert.ToDouble(GeneratorSpacePCList[i].ToString());
                                UI.GeneratorSpaceAmount = Convert.ToDouble(GeneratorSpaceAmountList[i].ToString());

                                UI.CarParkingPC = Convert.ToDouble(CarParkingPCList[i].ToString());
                                UI.CarParkingAmount = Convert.ToDouble(CarParkingAmountList[i].ToString());

                                UI.TaxPC = Convert.ToDouble(UtilityTaxPCList[i].ToString());
                                UI.TaxAmount = Convert.ToDouble(UtilityTaxAmountList[i].ToString());
                                UI.VATPC = Convert.ToDouble(UtilityVATPCList[i].ToString());
                                UI.VATAmount = Convert.ToDouble(UtilityVATAmountList[i].ToString());
                                UI.UtilityAddress = (UtilityAddressList == null) ? null : UtilityAddressList[i].ToString();
                                UI.UtilityContactNo = (UtilityContactNoList == null) ? null : UtilityContactNoList[i].ToString();
                                UI.UtilityEmail = (UtilityEmailList == null) ? null : UtilityEmailList[i].ToString();
                                UI.UtilityACNo = (UtilityACNoList == null) ? null : UtilityACNoList[i].ToString();
                                UI.UtilityBankName = (UtilityBankNameList == null) ? null : UtilityBankNameList[i].ToString();
                                UI.UtilityBranchName = (UtilityBranchNameList == null) ? null : UtilityBranchNameList[i].ToString();
                                UI.UtilityRoutingNo = (UtilityRoutingNoList == null) ? null : UtilityRoutingNoList[i].ToString();
                                db.UtilityInfos.Add(UI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Attach Documents
                    if (DTO.files != null)
                    {
                        RMS.Models.FileUploadInfo FU;
                        foreach (var file in DTO.files)
                        {
                            //Save file content goes here
                            if (file != null && file.ContentLength > 0)
                            {
                                //==
                                if (db.FileUploadInfos.Any(x => x.AgreementSLNo == AI.AgreementSLNo && x.FileName == file.FileName) == false)
                                {
                                    FU = new RMS.Models.FileUploadInfo();
                                    FU.AgreementSLNo = AI.AgreementSLNo;
                                    FU.FileName = file.FileName;
                                    FU.FilePath = "Content/FileUpload/" + AI.AliasCode + "/" + file.FileName;
                                    db.FileUploadInfos.Add(FU);
                                    db.SaveChanges();
                                }
                                //==
                                var originalDirectory = new DirectoryInfo(string.Format("{0}Content\\FileUpload\\", Server.MapPath(@"\")));
                                string pathString = Path.Combine(originalDirectory.ToString(), AI.AliasCode);
                                if (Directory.Exists(pathString) == false)
                                {
                                    System.IO.Directory.CreateDirectory(pathString);
                                }
                                var path = string.Format("{0}\\{1}", pathString, file.FileName);
                                file.SaveAs(path);
                            }
                        }
                    }
                    //===Delete Existing Draft
                    //int DraftAgreementSLNo = db.DraftAgreementInfos.Where(x => x.AgreementType == AgreementType.Renewal && x.UserSLNo == LoginUserSLNo).Select(x => x.AgreementSLNo).SingleOrDefault();
                    //if (DraftAgreementSLNo != 0)
                    //{
                    //    //===Delete Existing Draft Advance Info
                    //    db.DraftAdvanceInfos.RemoveRange(db.DraftAdvanceInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Review Info
                    //    db.DraftReviewInfos.RemoveRange(db.DraftReviewInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Landlord Info
                    //    db.DraftLandlordInfos.RemoveRange(db.DraftLandlordInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Cost Center Info
                    //    db.DraftCostCenterInfos.RemoveRange(db.DraftCostCenterInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Utility Info
                    //    db.DraftUtilityInfos.RemoveRange(db.DraftUtilityInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Agreement Info
                    //    db.DraftAgreementInfos.RemoveRange(db.DraftAgreementInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //}
                    //==
                    AlertMsg = "The renewal agreement: " + AI.AgreementName + " has been created.";
                    return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }


        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult ModCreate(RMS.Models.AgreementInfoDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    RMS.Models.AgreementInfo AI = new RMS.Models.AgreementInfo();
                    DTOBasic dtoBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    string LoginUserID = (string)Session["LoginUserID"];
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    //==Check available xRenewalAgreementSLNo
                    if (db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xModifiedAgreementSLNo && (x.IsRenewal == true || x.IsModified == true)).Any() == true)
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                    //==Save to Agreement Info Table
                    var CodeInfo = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xModifiedAgreementSLNo).Select(x => new { x.AgreementCode, x.AgreementVersion }).SingleOrDefault();
                    AI.AgreementType = AgreementType.Modified;
                    AI.AgreementCode = CodeInfo.AgreementCode;
                    AI.AgreementVersion = CodeInfo.AgreementVersion + 1;
                    AI.AliasCode = AI.AgreementCode + "-M" + AI.AgreementVersion;
                    AI.xModifiedAgreementSLNo = DTO.xModifiedAgreementSLNo;
                    //==Basic Info
                    AI.PremiseTypeSLNo = DTO.PremiseTypeSLNo;
                    AI.PremiseName = DTO.PremiseName;
                    AI.PremiseAddress = DTO.PremiseAddress;
                    AI.ClusterGroup = DTO.ClusterGroup;
                    AI.ConcernBranch = DTO.ConcernBranch;
                    AI.InspectorName = DTO.InspectorName;
                    AI.InspectorContactNo = DTO.InspectorContactNo;
                    //==Agreement Info
                    AI.AgreementName = DTO.AgreementName;
                    AI.AgreementStartDate = DateTime.ParseExact(DTO.AgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    AI.AgreementEndDate = DateTime.ParseExact(DTO.AgreementEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    AI.AgreementPeriod = DTO.AgreementPeriod;
                    AI.RenewalFrequency = AI.AgreementPeriod;
                    AI.RentDueDay = DTO.RentDueDay;
                    AI.UOM = DTO.UOM;
                    AI.TotalArea = DTO.TotalArea;
                    AI.CostPerUnit = DTO.CostPerUnit;
                    AI.TotalRentAmount = DTO.TotalRentAmount;
                    AI.SecurityDepositAmount = DTO.SecurityDepositAmount;
                    AI.AdvanceAmount = DTO.AdvanceAmount;
                    AI.AdditionalAdvanceAmount = DTO.AdditionalAdvanceAmount;
                    AI.AdvanceAdjustmentPeriod = DTO.AdvanceAdjustmentPeriod;
                    AI.AdvanceAdjustmentAmount = DTO.AdvanceAdjustmentAmount;
                    AI.TaxPercentage = DTO.TaxPercentage;
                    AI.TaxAmount = DTO.TaxAmount;
                    AI.VATPercentage = DTO.VATPercentage;
                    AI.VATAmount = DTO.VATAmount;
                    AI.NetRentAmount = AI.TotalRentAmount - AI.AdvanceAdjustmentAmount;
                    AI.AgreementStatus = AgreementStatus.Created;
                    AI.AgreementText = null;
                    AI.Status = dtoBasic.active;
                    AI.UserSLNo = LoginUserSLNo;
                    AI.EntryDate = DateTime.Now;
                    AI.IsDeleted = false;
                    AI.ReviewFrequency = DTO.ReviewFrequency;
                    AI.ReviewPercentage = DTO.ReviewPercentage;
                    AI.TaxType = DTO.TaxType;
                    AI.VatType = DTO.VatType;
                    AI.ServiceCharge = DTO.ServiceCharge;
                    AI.OnlineTower = DTO.OnlineTower;
                    AI.GeneratorSpace = DTO.GeneratorSpace;
                    AI.CarParking = DTO.CarParking;
                    //==Control Data
                    AI.CashGLCode = DTO.CashGLCode;
                    AI.BankGLCode = DTO.BankGLCode;
                    AI.AdvanceGLCode = DTO.AdvanceGLCode;
                    AI.AdvanceAdjustmentGLCode = DTO.AdvanceAdjustmentGLCode;
                    AI.RentGLCode = DTO.RentGLCode;
                    AI.ServiceChargeGLCode = DTO.ServiceChargeGLCode;
                    AI.TaxGLCode = DTO.TaxGLCode;
                    AI.VATGLCode = DTO.VATGLCode;
                    AI.ProvisionGLTax = DTO.ProvisionGLTax;
                    AI.ProvisionGLAP = DTO.ProvisionGLAP;
                    AI.RTGSGL = DTO.RTGSGL;
                    AI.EFTNGL = DTO.EFTNGL;
                    AI.PayOrderGL = DTO.PayOrderGL;
                    AI.IBBPaymentGL = DTO.IBBPaymentGL;
                    AI.CityBrokerageGL = DTO.CityBrokerageGL;
                    AI.CityCapitalGL = DTO.CityCapitalGL;
                    AI.OthersGL = DTO.OthersGL;
                    //=====
                    AI.PremiseAddressBangla = DTO.PremiseAddressBangla;
                    AI.AreaStatus = DTO.AreaStatus;
                    AI.RegionalOffice = DTO.RegionalOffice;
                    AI.PrimarySOL = DTO.PrimarySOL;
                    AI.AttachedControl = DTO.AttachedControl;
                    AI.ControllerOfficeDistance = DTO.ControllerOfficeDistance;
                    AI.RoutingNumber = DTO.RoutingNumber;
                    AI.Division = DTO.Division;
                    AI.District = DTO.District;
                    AI.Upazila = DTO.Upazila;
                    AI.Thana = DTO.Thana;
                    AI.ThanaCode = DTO.ThanaCode;
                    AI.Pourasabha = DTO.Pourasabha;
                    AI.PourasabhaType = DTO.PourasabhaType;
                    AI.UnionName = DTO.UnionName;
                    AI.WardNo = DTO.WardNo;
                    AI.PremisesTypeforAccounts = DTO.PremisesTypeforAccounts;
                    AI.ParentAgreementCode = DTO.ParentAgreementCode;
                    AI.ElectricityLoad = DTO.ElectricityLoad;
                    AI.ElectricityProvidedBy = DTO.ElectricityProvidedBy;
                    AI.AITBourneBy = DTO.AITBourneBy;
                    AI.CommercialPermission = DTO.CommercialPermission;
                    AI.BuildingPlan = DTO.BuildingPlan;
                    AI.PremisesSituatedFloor = DTO.PremisesSituatedFloor;
                    AI.BangladeshBankApproval = DTO.BangladeshBankApproval;
                    AI.BangladeshBankReference = DTO.BangladeshBankReference;
                    AI.ITTowerRentClause = DTO.ITTowerRentClause;
                    AI.TerminationClause = DTO.TerminationClause;
                    AI.TerminationNoticePeriod = DTO.TerminationNoticePeriod;
                    if (DTO.PremisesOpeningDate != null)
                    {
                        AI.PremisesOpeningDate = DateTime.ParseExact(DTO.PremisesOpeningDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.PremisesOpeningDate = null;
                    }
                    if (DTO.DocumentDate != null)
                    {
                        AI.DocumentDate = DateTime.ParseExact(DTO.DocumentDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.DocumentDate = null;
                    }
                    AI.Remarks = DTO.Remarks;
                    AI.AgreementRemarks = DTO.AgreementRemarks;
                    AI.AdvanceRemarks = DTO.AdvanceRemarks;
                    AI.ReviewRemarks = DTO.ReviewRemarks;
                    AI.LLRemarks = DTO.LLRemarks;
                    AI.CCRemarks = DTO.CCRemarks;
                    AI.UtilityRemarks = DTO.UtilityRemarks;
                    AI.ControlDataRemarks = DTO.ControlDataRemarks;

                    AI.BorrowingRate = DTO.BorrowingRate;
                    AI.PaymentMethod = DTO.PaymentMethod;
                    AI.IsIFRSEnable = DTO.IsIFRSEnable;
                    AI.CalculationMethod = DTO.CalculationMethod;
                    AI.WithHoldingCode = DTO.WithHoldingCode;
                    AI.AdditionalExpense = DTO.AdditionalExpense;
                    AI.InitialDirectCost = DTO.InitialDirectCost;
                    AI.DismantlingCost = DTO.DismantlingCost;
                    AI.CarParkingNo = DTO.CarParkingNo;
                    AI.WaterBillType = DTO.WaterBillType;
                    AI.WaterBillAmount = DTO.WaterBillAmount;
                    if (DTO.IFRSEffectiveDate != null && DTO.IsIFRSEnable == true)
                    {
                        AI.IFRSEffectiveDate = DateTime.ParseExact(DTO.IFRSEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.IFRSEffectiveDate = null;
                    }
                    AI.CorporateTaxRate = DTO.CorporateTaxRate;
                    //=====
                    db.AgreementInfos.Add(AI);
                    db.SaveChanges();
                    //==Update xModifiedAgreement Info
                    RMS.Models.AgreementInfo xAI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xModifiedAgreementSLNo).SingleOrDefault();
                    xAI.IsModified = true;
                    xAI.IsBlock = true;
                    xAI.BlockDate = DateTime.Now;
                    xAI.BlockUserSLNo = AI.UserSLNo;
                    xAI.yModifiedAgreementSLNo = AI.AgreementSLNo;
                    db.Entry(xAI).State = EntityState.Modified;
                    db.SaveChanges();
                    //==Space Information
                    string[] SpaceTypeList = null;
                    if (DTO.SpaceTypeList != null)
                    {
                        SpaceTypeList = DTO.SpaceTypeList.Split(',');
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            SpaceTypeList[i] = SpaceTypeList[i].Trim();
                        }
                    }
                    string[] SpaceAreaList = null;
                    if (DTO.SpaceAreaList != null)
                    {
                        SpaceAreaList = DTO.SpaceAreaList.Split(',');
                        for (int i = 0; i < SpaceAreaList.Length; i++)
                        {
                            SpaceAreaList[i] = SpaceAreaList[i].Trim();
                        }
                    }
                    string[] SpaceRateList = null;
                    if (DTO.SpaceRateList != null)
                    {
                        SpaceRateList = DTO.SpaceRateList.Split(',');
                        for (int i = 0; i < SpaceRateList.Length; i++)
                        {
                            SpaceRateList[i] = SpaceRateList[i].Trim();
                        }
                    }
                    string[] SpaceRentList = null;
                    if (DTO.SpaceRentList != null)
                    {
                        SpaceRentList = DTO.SpaceRentList.Split(',');
                        for (int i = 0; i < SpaceRentList.Length; i++)
                        {
                            SpaceRentList[i] = SpaceRentList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdvanceList = null;
                    if (DTO.SpaceTotalAdvanceList != null)
                    {
                        SpaceTotalAdvanceList = DTO.SpaceTotalAdvanceList.Split(',');
                        for (int i = 0; i < SpaceTotalAdvanceList.Length; i++)
                        {
                            SpaceTotalAdvanceList[i] = SpaceTotalAdvanceList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdjustmentList = null;
                    if (DTO.SpaceTotalAdjustmentList != null)
                    {
                        SpaceTotalAdjustmentList = DTO.SpaceTotalAdjustmentList.Split(',');
                        for (int i = 0; i < SpaceTotalAdjustmentList.Length; i++)
                        {
                            SpaceTotalAdjustmentList[i] = SpaceTotalAdjustmentList[i].Trim();
                        }
                    }
                    string[] SpaceRemarksList = null;
                    if (DTO.SpaceRemarksList != null)
                    {
                        SpaceRemarksList = DTO.SpaceRemarksList.Split(',');
                        for (int i = 0; i < SpaceRemarksList.Length; i++)
                        {
                            SpaceRemarksList[i] = SpaceRemarksList[i].Trim();
                        }
                    }
                    if (SpaceTypeList != null)
                    {
                        RMS.Models.SpaceInfo SpaceInfo;
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            if (SpaceTypeList[i] != null && SpaceTypeList[i] != "")
                            {
                                SpaceInfo = new RMS.Models.SpaceInfo();
                                SpaceInfo.AgreementSLNo = AI.AgreementSLNo;
                                SpaceInfo.SpaceType = (SpaceTypeList == null) ? null : SpaceTypeList[i].ToString();
                                SpaceInfo.SpaceArea = Convert.ToDouble(SpaceAreaList[i].ToString());
                                SpaceInfo.SpaceRate = Convert.ToDouble(SpaceRateList[i].ToString());
                                SpaceInfo.SpaceRent = Convert.ToDouble(SpaceRentList[i].ToString());
                                SpaceInfo.SpaceTotalAdvance = Convert.ToDouble(SpaceTotalAdvanceList[i].ToString());
                                SpaceInfo.SpaceTotalAdjustment = Convert.ToDouble(SpaceTotalAdjustmentList[i].ToString());
                                SpaceInfo.SpaceRemarks = (SpaceRemarksList == null) ? null : SpaceRemarksList[i].ToString();
                                db.SpaceInfos.Add(SpaceInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Advance Information
                    string[] AdvanceNoList = null;
                    if (DTO.AdvanceNoList != null)
                    {
                        AdvanceNoList = DTO.AdvanceNoList.Split(',');
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            AdvanceNoList[i] = AdvanceNoList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotPeriodList = null;
                    if (DTO.AdvanceSlotPeriodList != null)
                    {
                        AdvanceSlotPeriodList = DTO.AdvanceSlotPeriodList.Split(',');
                        for (int i = 0; i < AdvanceSlotPeriodList.Length; i++)
                        {
                            AdvanceSlotPeriodList[i] = AdvanceSlotPeriodList[i].Trim();
                        }
                    }
                    string[] AdvanceStartDateList = null;
                    if (DTO.AdvanceStartDateList != null)
                    {
                        AdvanceStartDateList = DTO.AdvanceStartDateList.Split(',');
                        for (int i = 0; i < AdvanceStartDateList.Length; i++)
                        {
                            AdvanceStartDateList[i] = AdvanceStartDateList[i].Trim();
                        }
                    }
                    string[] AdvanceEndDateList = null;
                    if (DTO.AdvanceEndDateList != null)
                    {
                        AdvanceEndDateList = DTO.AdvanceEndDateList.Split(',');
                        for (int i = 0; i < AdvanceEndDateList.Length; i++)
                        {
                            AdvanceEndDateList[i] = AdvanceEndDateList[i].Trim();
                        }
                    }
                    string[] AdvanceNoteList = null;
                    if (DTO.AdvanceNoteList != null)
                    {
                        AdvanceNoteList = DTO.AdvanceNoteList.Split(',');
                        for (int i = 0; i < AdvanceNoteList.Length; i++)
                        {
                            AdvanceNoteList[i] = AdvanceNoteList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotAmountList = null;
                    if (DTO.AdvanceSlotAmountList != null)
                    {
                        AdvanceSlotAmountList = DTO.AdvanceSlotAmountList.Split(',');
                        for (int i = 0; i < AdvanceSlotAmountList.Length; i++)
                        {
                            AdvanceSlotAmountList[i] = AdvanceSlotAmountList[i].Trim();
                        }
                    }
                    if (AdvanceNoList != null)
                    {
                        RMS.Models.AdvanceInfo AdvInfo;
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            if (AdvanceNoList[i] != null && AdvanceNoList[i] != "")
                            {
                                AdvInfo = new RMS.Models.AdvanceInfo();
                                AdvInfo.AgreementSLNo = AI.AgreementSLNo;
                                AdvInfo.AdvanceNo = Convert.ToInt32(AdvanceNoList[i].ToString());
                                AdvInfo.AdvanceSlotPeriod = Convert.ToInt32(AdvanceSlotPeriodList[i].ToString());
                                AdvInfo.StartDate = DateTime.ParseExact(AdvanceStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.EndDate = DateTime.ParseExact(AdvanceEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.AdvanceSlotAmount = Convert.ToDouble(AdvanceSlotAmountList[i].ToString());
                                AdvInfo.AdvanceNote = (AdvanceNoteList == null) ? null : AdvanceNoteList[i].ToString();
                                db.AdvanceInfos.Add(AdvInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Review Info
                    string[] ReviewNoList = null;
                    if (DTO.ReviewNoList != null)
                    {
                        ReviewNoList = DTO.ReviewNoList.Split(',');
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            ReviewNoList[i] = ReviewNoList[i].Trim();
                        }
                    }
                    string[] ReviewStartDateList = null;
                    if (DTO.ReviewStartDateList != null)
                    {
                        ReviewStartDateList = DTO.ReviewStartDateList.Split(',');
                        for (int i = 0; i < ReviewStartDateList.Length; i++)
                        {
                            ReviewStartDateList[i] = ReviewStartDateList[i].Trim();
                        }
                    }
                    string[] ReviewEndDateList = null;
                    if (DTO.ReviewEndDateList != null)
                    {
                        ReviewEndDateList = DTO.ReviewEndDateList.Split(',');
                        for (int i = 0; i < ReviewEndDateList.Length; i++)
                        {
                            ReviewEndDateList[i] = ReviewEndDateList[i].Trim();
                        }
                    }
                    string[] ReviewPeriodList = null;
                    if (DTO.ReviewPeriodList != null)
                    {
                        ReviewPeriodList = DTO.ReviewPeriodList.Split(',');
                        for (int i = 0; i < ReviewPeriodList.Length; i++)
                        {
                            ReviewPeriodList[i] = ReviewPeriodList[i].Trim();
                        }
                    }
                    string[] ReviewIncreaseAmountList = null;
                    if (DTO.ReviewIncreaseAmountList != null)
                    {
                        ReviewIncreaseAmountList = DTO.ReviewIncreaseAmountList.Split(',');
                        for (int i = 0; i < ReviewIncreaseAmountList.Length; i++)
                        {
                            ReviewIncreaseAmountList[i] = ReviewIncreaseAmountList[i].Trim();
                        }
                    }
                    string[] ReviewIncreasePercentageList = null;
                    if (DTO.ReviewIncreasePercentageList != null)
                    {
                        ReviewIncreasePercentageList = DTO.ReviewIncreasePercentageList.Split(',');
                        for (int i = 0; i < ReviewIncreasePercentageList.Length; i++)
                        {
                            ReviewIncreasePercentageList[i] = ReviewIncreasePercentageList[i].Trim();
                        }
                    }
                    string[] ReviewNoteList = null;
                    if (DTO.ReviewNoteList != null)
                    {
                        ReviewNoteList = DTO.ReviewNoteList.Split(',');
                        for (int i = 0; i < ReviewNoteList.Length; i++)
                        {
                            ReviewNoteList[i] = ReviewNoteList[i].Trim();
                        }
                    }
                    if (ReviewNoList != null)
                    {
                        RMS.Models.ReviewInfo RI;
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            if (ReviewNoList[i] != null && ReviewNoList[i] != "")
                            {
                                RI = new RMS.Models.ReviewInfo();
                                RI.AgreementSLNo = AI.AgreementSLNo;
                                RI.ReviewNo = Convert.ToInt32(ReviewNoList[i].ToString());
                                RI.Period = Convert.ToInt32(ReviewPeriodList[i].ToString());
                                RI.StartDate = DateTime.ParseExact(ReviewStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                RI.EndDate = DateTime.ParseExact(ReviewEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                //RI.StartDate = DateTime.Parse(ReviewStartDateList[i]);
                                //RI.EndDate = DateTime.Parse(ReviewEndDateList[i]);
                                RI.IncreaseAmount = Convert.ToDouble(ReviewIncreaseAmountList[i].ToString());
                                RI.IncreasePercentage = Convert.ToDouble(ReviewIncreasePercentageList[i].ToString());
                                RI.ReviewNote = (ReviewNoteList == null) ? null : ReviewNoteList[i].ToString();
                                db.ReviewInfos.Add(RI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Landlord Information
                    string[] VendorCodeList = null;
                    if (DTO.VendorCodeList != null)
                    {
                        VendorCodeList = DTO.VendorCodeList.Split(',');
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            VendorCodeList[i] = VendorCodeList[i].Trim();
                        }
                    }
                    string[] LandlordNameList = null;
                    if (DTO.LandlordNameList != null)
                    {
                        LandlordNameList = DTO.LandlordNameList.Split(',');
                        for (int i = 0; i < LandlordNameList.Length; i++)
                        {
                            LandlordNameList[i] = LandlordNameList[i].Trim();
                        }
                    }
                    string[] ModeOfPaymentList = null;
                    if (DTO.ModeOfPaymentList != null)
                    {
                        ModeOfPaymentList = DTO.ModeOfPaymentList.Split(',');
                        for (int i = 0; i < ModeOfPaymentList.Length; i++)
                        {
                            ModeOfPaymentList[i] = ModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] VendorAdvancePCList = null;
                    if (DTO.VendorAdvancePCList != null)
                    {
                        VendorAdvancePCList = DTO.VendorAdvancePCList.Split(',');
                        for (int i = 0; i < VendorAdvancePCList.Length; i++)
                        {
                            VendorAdvancePCList[i] = VendorAdvancePCList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAmountList = null;
                    if (DTO.VendorAdvanceAmountList != null)
                    {
                        VendorAdvanceAmountList = DTO.VendorAdvanceAmountList.Split(',');
                        for (int i = 0; i < VendorAdvanceAmountList.Length; i++)
                        {
                            VendorAdvanceAmountList[i] = VendorAdvanceAmountList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAdjustmentPCList = null;
                    if (DTO.VendorAdvanceAdjustmentPCList != null)
                    {
                        VendorAdvanceAdjustmentPCList = DTO.VendorAdvanceAdjustmentPCList.Split(',');
                        for (int i = 0; i < VendorAdvanceAdjustmentPCList.Length; i++)
                        {
                            VendorAdvanceAdjustmentPCList[i] = VendorAdvanceAdjustmentPCList[i].Trim();
                        }
                    }
                    //string[] VendorAdvanceAdjustmentAmountList = null;
                    //if (DTO.VendorAdvanceAdjustmentAmountList != null)
                    //{
                    //    VendorAdvanceAdjustmentAmountList = DTO.VendorAdvanceAdjustmentAmountList.Split(',');
                    //    for (int i = 0; i < VendorAdvanceAdjustmentAmountList.Length; i++)
                    //    {
                    //        VendorAdvanceAdjustmentAmountList[i] = VendorAdvanceAdjustmentAmountList[i].Trim();
                    //    }
                    //}
                    string[] VendorTaxPCList = null;
                    if (DTO.VendorTaxPCList != null)
                    {
                        VendorTaxPCList = DTO.VendorTaxPCList.Split(',');
                        for (int i = 0; i < VendorTaxPCList.Length; i++)
                        {
                            VendorTaxPCList[i] = VendorTaxPCList[i].Trim();
                        }
                    }
                    string[] VendorTaxAmountList = null;
                    if (DTO.VendorTaxAmountList != null)
                    {
                        VendorTaxAmountList = DTO.VendorTaxAmountList.Split(',');
                        for (int i = 0; i < VendorTaxAmountList.Length; i++)
                        {
                            VendorTaxAmountList[i] = VendorTaxAmountList[i].Trim();
                        }
                    }
                    string[] VendorVATPCList = null;
                    if (DTO.VendorVATPCList != null)
                    {
                        VendorVATPCList = DTO.VendorVATPCList.Split(',');
                        for (int i = 0; i < VendorVATPCList.Length; i++)
                        {
                            VendorVATPCList[i] = VendorVATPCList[i].Trim();
                        }
                    }
                    string[] VendorVATAmountList = null;
                    if (DTO.VendorVATAmountList != null)
                    {
                        VendorVATAmountList = DTO.VendorVATAmountList.Split(',');
                        for (int i = 0; i < VendorVATAmountList.Length; i++)
                        {
                            VendorVATAmountList[i] = VendorVATAmountList[i].Trim();
                        }
                    }
                    string[] VendorRentPCList = null;
                    if (DTO.VendorRentPCList != null)
                    {
                        VendorRentPCList = DTO.VendorRentPCList.Split(',');
                        for (int i = 0; i < VendorRentPCList.Length; i++)
                        {
                            VendorRentPCList[i] = VendorRentPCList[i].Trim();
                        }
                    }
                    //string[] VendorRentAmountList = null;
                    //if (DTO.VendorRentAmountList != null)
                    //{
                    //    VendorRentAmountList = DTO.VendorRentAmountList.Split(',');
                    //    for (int i = 0; i < VendorRentAmountList.Length; i++)
                    //    {
                    //        VendorRentAmountList[i] = VendorRentAmountList[i].Trim();
                    //    }
                    //}
                    string[] AddressList = null;
                    if (DTO.LLAddressList != null)
                    {
                        AddressList = DTO.LLAddressList.Split(',');
                        for (int i = 0; i < AddressList.Length; i++)
                        {
                            AddressList[i] = AddressList[i].Trim();
                        }
                    }
                    string[] ContactNoList = null;
                    if (DTO.LLContactNoList != null)
                    {
                        ContactNoList = DTO.LLContactNoList.Split(',');
                        for (int i = 0; i < ContactNoList.Length; i++)
                        {
                            ContactNoList[i] = ContactNoList[i].Trim();
                        }
                    }
                    string[] EmailList = null;
                    if (DTO.LLEmailList != null)
                    {
                        EmailList = DTO.LLEmailList.Split(',');
                        for (int i = 0; i < EmailList.Length; i++)
                        {
                            EmailList[i] = EmailList[i].Trim();
                        }
                    }
                    string[] ACNoList = null;
                    if (DTO.ACNoList != null)
                    {
                        ACNoList = DTO.ACNoList.Split(',');
                        for (int i = 0; i < ACNoList.Length; i++)
                        {
                            ACNoList[i] = ACNoList[i].Trim();
                        }
                    }
                    string[] BankNameList = null;
                    if (DTO.BankNameList != null)
                    {
                        BankNameList = DTO.BankNameList.Split(',');
                        for (int i = 0; i < BankNameList.Length; i++)
                        {
                            BankNameList[i] = BankNameList[i].Trim();
                        }
                    }
                    string[] BranchNameList = null;
                    if (DTO.BranchNameList != null)
                    {
                        BranchNameList = DTO.BranchNameList.Split(',');
                        for (int i = 0; i < BranchNameList.Length; i++)
                        {
                            BranchNameList[i] = BranchNameList[i].Trim();
                        }
                    }
                    string[] RoutingNoList = null;
                    if (DTO.RoutingNoList != null)
                    {
                        RoutingNoList = DTO.RoutingNoList.Split(',');
                        for (int i = 0; i < RoutingNoList.Length; i++)
                        {
                            RoutingNoList[i] = RoutingNoList[i].Trim();
                        }
                    }
                    RMS.Models.LandlordInfo LI;
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    for (int i = 0; i < VendorCodeList.Length; i++)
                    {
                        if (VendorCodeList[i] != null && VendorCodeList[i] != "")
                        {
                            LI = new RMS.Models.LandlordInfo();
                            LI.AgreementSLNo = AI.AgreementSLNo;
                            LI.VendorCode = (VendorCodeList == null) ? null : VendorCodeList[i].ToString();
                            LI.LandlordName = (LandlordNameList == null) ? null : LandlordNameList[i].ToString();
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { LI.ModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { LI.ModeOfPayment = ModeOfPaymentLocation.RTGS; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { LI.ModeOfPayment = ModeOfPaymentLocation.EFTN; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { LI.ModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { LI.ModeOfPayment = ModeOfPaymentLocation.Cash; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { LI.ModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { LI.ModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { LI.ModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { LI.ModeOfPayment = ModeOfPaymentLocation.Others; }
                            LI.AdvancePC = Convert.ToDouble(VendorAdvancePCList[i].ToString());
                            LI.AdvanceAdjustmentPC = Convert.ToDouble(VendorAdvanceAdjustmentPCList[i].ToString());
                            LI.TaxPC = Convert.ToDouble(VendorTaxPCList[i].ToString());
                            LI.VATPC = Convert.ToDouble(VendorVATPCList[i].ToString());
                            LI.RentPC = Convert.ToDouble(VendorRentPCList[i].ToString());
                            //==PC Amount
                            LI.AdvanceAmount = ((AI.AdvanceAmount + AI.AdditionalAdvanceAmount) * LI.AdvancePC) / 100;
                            LI.TaxAmount = (AI.TaxAmount * LI.TaxPC) / 100;
                            LI.VATAmount = (AI.VATAmount * LI.VATPC) / 100;
                            //==
                            LI.LLAddress = (AddressList == null) ? null : AddressList[i].ToString();
                            LI.LLContactNo = (ContactNoList == null) ? null : ContactNoList[i].ToString();
                            LI.LLEmail = (EmailList == null) ? null : EmailList[i].ToString();
                            LI.ACNo = (ACNoList == null) ? null : ACNoList[i].ToString();
                            LI.BankName = (BankNameList == null) ? null : BankNameList[i].ToString();
                            LI.BranchName = (BranchNameList == null) ? null : BranchNameList[i].ToString();
                            LI.RoutingNo = (RoutingNoList == null) ? null : RoutingNoList[i].ToString();
                            db.LandlordInfos.Add(LI);
                            db.SaveChanges();
                        }
                    }
                    //==Cost Center
                    string[] CCCodeList = null;
                    if (DTO.CCCodeList != null)
                    {
                        CCCodeList = DTO.CCCodeList.Split(',');
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            CCCodeList[i] = CCCodeList[i].Trim();
                        }
                    }
                    string[] CCNameList = null;
                    if (DTO.CCNameList != null)
                    {
                        CCNameList = DTO.CCNameList.Split(',');
                        for (int i = 0; i < CCNameList.Length; i++)
                        {
                            CCNameList[i] = CCNameList[i].Trim();
                        }
                    }
                    string[] SOLCodeList = null;
                    if (DTO.SOLCodeList != null)
                    {
                        SOLCodeList = DTO.SOLCodeList.Split(',');
                        for (int i = 0; i < SOLCodeList.Length; i++)
                        {
                            SOLCodeList[i] = SOLCodeList[i].Trim();
                        }
                    }
                    string[] SOLNameList = null;
                    if (DTO.SOLNameList != null)
                    {
                        SOLNameList = DTO.SOLNameList.Split(',');
                        for (int i = 0; i < SOLNameList.Length; i++)
                        {
                            SOLNameList[i] = SOLNameList[i].Trim();
                        }
                    }
                    string[] CCShareAllotmentList = null;
                    if (DTO.CCShareAllotmentList != null)
                    {
                        CCShareAllotmentList = DTO.CCShareAllotmentList.Split(',');
                        for (int i = 0; i < CCShareAllotmentList.Length; i++)
                        {
                            CCShareAllotmentList[i] = CCShareAllotmentList[i].Trim();
                        }
                    }
                    RMS.Models.CostCenterInfo CC;
                    for (int i = 0; i < CCCodeList.Length; i++)
                    {
                        if (CCCodeList[i] != null && CCCodeList[i] != "")
                        {
                            CC = new RMS.Models.CostCenterInfo();
                            CC.AgreementSLNo = AI.AgreementSLNo;
                            CC.CCCode = (CCCodeList == null) ? null : CCCodeList[i].ToString();
                            CC.CCName = (CCNameList == null) ? null : CCNameList[i].ToString();
                            CC.SOLCode = (SOLCodeList == null) ? null : SOLCodeList[i].ToString();
                            CC.SOLName = (SOLNameList == null) ? null : SOLNameList[i].ToString();
                            CC.CCShareAllotment = Convert.ToDouble(CCShareAllotmentList[i].ToString());
                            db.CostCenterInfos.Add(CC);
                            db.SaveChanges();
                        }
                    }
                    //==Utility Information
                    string[] UtilityVendorCodeList = null;
                    if (DTO.UtilityVendorCodeList != null)
                    {
                        UtilityVendorCodeList = DTO.UtilityVendorCodeList.Split(',');
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            UtilityVendorCodeList[i] = UtilityVendorCodeList[i].Trim();
                        }
                    }
                    string[] UtilityLandlordNameList = null;
                    if (DTO.UtilityLandlordNameList != null)
                    {
                        UtilityLandlordNameList = DTO.UtilityLandlordNameList.Split(',');
                        for (int i = 0; i < UtilityLandlordNameList.Length; i++)
                        {
                            UtilityLandlordNameList[i] = UtilityLandlordNameList[i].Trim();
                        }
                    }
                    string[] UtilityModeOfPaymentList = null;
                    if (DTO.UtilityModeOfPaymentList != null)
                    {
                        UtilityModeOfPaymentList = DTO.UtilityModeOfPaymentList.Split(',');
                        for (int i = 0; i < UtilityModeOfPaymentList.Length; i++)
                        {
                            UtilityModeOfPaymentList[i] = UtilityModeOfPaymentList[i].Trim();
                        }
                    }

                    string[] ServiceChargePCList = null;
                    if (DTO.ServiceChargePCList != null)
                    {
                        ServiceChargePCList = DTO.ServiceChargePCList.Split(',');
                        for (int i = 0; i < ServiceChargePCList.Length; i++)
                        {
                            ServiceChargePCList[i] = ServiceChargePCList[i].Trim();
                        }
                    }
                    string[] ServiceChargeAmountList = null;
                    if (DTO.ServiceChargeAmountList != null)
                    {
                        ServiceChargeAmountList = DTO.ServiceChargeAmountList.Split(',');
                        for (int i = 0; i < ServiceChargeAmountList.Length; i++)
                        {
                            ServiceChargeAmountList[i] = ServiceChargeAmountList[i].Trim();
                        }
                    }

                    string[] OnlineTowerPCList = null;
                    if (DTO.OnlineTowerPCList != null)
                    {
                        OnlineTowerPCList = DTO.OnlineTowerPCList.Split(',');
                        for (int i = 0; i < OnlineTowerPCList.Length; i++)
                        {
                            OnlineTowerPCList[i] = OnlineTowerPCList[i].Trim();
                        }
                    }
                    string[] OnlineTowerAmountList = null;
                    if (DTO.OnlineTowerAmountList != null)
                    {
                        OnlineTowerAmountList = DTO.OnlineTowerAmountList.Split(',');
                        for (int i = 0; i < OnlineTowerAmountList.Length; i++)
                        {
                            OnlineTowerAmountList[i] = OnlineTowerAmountList[i].Trim();
                        }
                    }

                    string[] GeneratorSpacePCList = null;
                    if (DTO.GeneratorSpacePCList != null)
                    {
                        GeneratorSpacePCList = DTO.GeneratorSpacePCList.Split(',');
                        for (int i = 0; i < GeneratorSpacePCList.Length; i++)
                        {
                            GeneratorSpacePCList[i] = GeneratorSpacePCList[i].Trim();
                        }
                    }
                    string[] GeneratorSpaceAmountList = null;
                    if (DTO.GeneratorSpaceAmountList != null)
                    {
                        GeneratorSpaceAmountList = DTO.GeneratorSpaceAmountList.Split(',');
                        for (int i = 0; i < GeneratorSpaceAmountList.Length; i++)
                        {
                            GeneratorSpaceAmountList[i] = GeneratorSpaceAmountList[i].Trim();
                        }
                    }
                    string[] CarParkingPCList = null;
                    if (DTO.CarParkingPCList != null)
                    {
                        CarParkingPCList = DTO.CarParkingPCList.Split(',');
                        for (int i = 0; i < CarParkingPCList.Length; i++)
                        {
                            CarParkingPCList[i] = CarParkingPCList[i].Trim();
                        }
                    }
                    string[] CarParkingAmountList = null;
                    if (DTO.CarParkingAmountList != null)
                    {
                        CarParkingAmountList = DTO.CarParkingAmountList.Split(',');
                        for (int i = 0; i < CarParkingAmountList.Length; i++)
                        {
                            CarParkingAmountList[i] = CarParkingAmountList[i].Trim();
                        }
                    }
                    string[] UtilityTaxPCList = null;
                    if (DTO.UtilityTaxPCList != null)
                    {
                        UtilityTaxPCList = DTO.UtilityTaxPCList.Split(',');
                        for (int i = 0; i < UtilityTaxPCList.Length; i++)
                        {
                            UtilityTaxPCList[i] = UtilityTaxPCList[i].Trim();
                        }
                    }
                    string[] UtilityTaxAmountList = null;
                    if (DTO.UtilityTaxAmountList != null)
                    {
                        UtilityTaxAmountList = DTO.UtilityTaxAmountList.Split(',');
                        for (int i = 0; i < UtilityTaxAmountList.Length; i++)
                        {
                            UtilityTaxAmountList[i] = UtilityTaxAmountList[i].Trim();
                        }
                    }
                    string[] UtilityVATPCList = null;
                    if (DTO.UtilityVATPCList != null)
                    {
                        UtilityVATPCList = DTO.UtilityVATPCList.Split(',');
                        for (int i = 0; i < UtilityVATPCList.Length; i++)
                        {
                            UtilityVATPCList[i] = UtilityVATPCList[i].Trim();
                        }
                    }
                    string[] UtilityVATAmountList = null;
                    if (DTO.UtilityVATAmountList != null)
                    {
                        UtilityVATAmountList = DTO.UtilityVATAmountList.Split(',');
                        for (int i = 0; i < UtilityVATAmountList.Length; i++)
                        {
                            UtilityVATAmountList[i] = UtilityVATAmountList[i].Trim();
                        }
                    }
                    string[] UtilityAddressList = null;
                    if (DTO.UtilityAddressList != null)
                    {
                        UtilityAddressList = DTO.UtilityAddressList.Split(',');
                        for (int i = 0; i < UtilityAddressList.Length; i++)
                        {
                            UtilityAddressList[i] = UtilityAddressList[i].Trim();
                        }
                    }
                    string[] UtilityContactNoList = null;
                    if (DTO.UtilityContactNoList != null)
                    {
                        UtilityContactNoList = DTO.UtilityContactNoList.Split(',');
                        for (int i = 0; i < UtilityContactNoList.Length; i++)
                        {
                            UtilityContactNoList[i] = UtilityContactNoList[i].Trim();
                        }
                    }
                    string[] UtilityEmailList = null;
                    if (DTO.UtilityEmailList != null)
                    {
                        UtilityEmailList = DTO.UtilityEmailList.Split(',');
                        for (int i = 0; i < UtilityEmailList.Length; i++)
                        {
                            UtilityEmailList[i] = UtilityEmailList[i].Trim();
                        }
                    }
                    string[] UtilityACNoList = null;
                    if (DTO.UtilityACNoList != null)
                    {
                        UtilityACNoList = DTO.UtilityACNoList.Split(',');
                        for (int i = 0; i < UtilityACNoList.Length; i++)
                        {
                            UtilityACNoList[i] = UtilityACNoList[i].Trim();
                        }
                    }
                    string[] UtilityBankNameList = null;
                    if (DTO.UtilityBankNameList != null)
                    {
                        UtilityBankNameList = DTO.UtilityBankNameList.Split(',');
                        for (int i = 0; i < UtilityBankNameList.Length; i++)
                        {
                            UtilityBankNameList[i] = UtilityBankNameList[i].Trim();
                        }
                    }
                    string[] UtilityBranchNameList = null;
                    if (DTO.UtilityBranchNameList != null)
                    {
                        UtilityBranchNameList = DTO.UtilityBranchNameList.Split(',');
                        for (int i = 0; i < UtilityBranchNameList.Length; i++)
                        {
                            UtilityBranchNameList[i] = UtilityBranchNameList[i].Trim();
                        }
                    }
                    string[] UtilityRoutingNoList = null;
                    if (DTO.UtilityRoutingNoList != null)
                    {
                        UtilityRoutingNoList = DTO.UtilityRoutingNoList.Split(',');
                        for (int i = 0; i < UtilityRoutingNoList.Length; i++)
                        {
                            UtilityRoutingNoList[i] = UtilityRoutingNoList[i].Trim();
                        }
                    }
                    if (UtilityVendorCodeList != null)
                    {
                        RMS.Models.UtilityInfo UI;
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            if (UtilityVendorCodeList[i] != null && UtilityVendorCodeList[i] != "")
                            {
                                UI = new RMS.Models.UtilityInfo();
                                UI.AgreementSLNo = AI.AgreementSLNo;
                                UI.UtilityVendorCode = (UtilityVendorCodeList == null) ? null : UtilityVendorCodeList[i].ToString();
                                UI.UtilityLandlordName = (UtilityLandlordNameList == null) ? null : UtilityLandlordNameList[i].ToString();

                                if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Others; }

                                UI.ServiceChargePC = Convert.ToDouble(ServiceChargePCList[i].ToString());
                                UI.ServiceChargeAmount = Convert.ToDouble(ServiceChargeAmountList[i].ToString());

                                UI.OnlineTowerPC = Convert.ToDouble(OnlineTowerPCList[i].ToString());
                                UI.OnlineTowerAmount = Convert.ToDouble(OnlineTowerAmountList[i].ToString());

                                UI.GeneratorSpacePC = Convert.ToDouble(GeneratorSpacePCList[i].ToString());
                                UI.GeneratorSpaceAmount = Convert.ToDouble(GeneratorSpaceAmountList[i].ToString());

                                UI.CarParkingPC = Convert.ToDouble(CarParkingPCList[i].ToString());
                                UI.CarParkingAmount = Convert.ToDouble(CarParkingAmountList[i].ToString());

                                UI.TaxPC = Convert.ToDouble(UtilityTaxPCList[i].ToString());
                                UI.TaxAmount = Convert.ToDouble(UtilityTaxAmountList[i].ToString());
                                UI.VATPC = Convert.ToDouble(UtilityVATPCList[i].ToString());
                                UI.VATAmount = Convert.ToDouble(UtilityVATAmountList[i].ToString());
                                UI.UtilityAddress = (UtilityAddressList == null) ? null : UtilityAddressList[i].ToString();
                                UI.UtilityContactNo = (UtilityContactNoList == null) ? null : UtilityContactNoList[i].ToString();
                                UI.UtilityEmail = (UtilityEmailList == null) ? null : UtilityEmailList[i].ToString();
                                UI.UtilityACNo = (UtilityACNoList == null) ? null : UtilityACNoList[i].ToString();
                                UI.UtilityBankName = (UtilityBankNameList == null) ? null : UtilityBankNameList[i].ToString();
                                UI.UtilityBranchName = (UtilityBranchNameList == null) ? null : UtilityBranchNameList[i].ToString();
                                UI.UtilityRoutingNo = (UtilityRoutingNoList == null) ? null : UtilityRoutingNoList[i].ToString();
                                db.UtilityInfos.Add(UI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Attach Documents
                    if (DTO.files != null)
                    {
                        RMS.Models.FileUploadInfo FU;
                        foreach (var file in DTO.files)
                        {
                            //Save file content goes here
                            if (file != null && file.ContentLength > 0)
                            {
                                //==
                                if (db.FileUploadInfos.Any(x => x.AgreementSLNo == AI.AgreementSLNo && x.FileName == file.FileName) == false)
                                {
                                    FU = new RMS.Models.FileUploadInfo();
                                    FU.AgreementSLNo = AI.AgreementSLNo;
                                    FU.FileName = file.FileName;
                                    FU.FilePath = "Content/FileUpload/" + AI.AliasCode + "/" + file.FileName;
                                    db.FileUploadInfos.Add(FU);
                                    db.SaveChanges();
                                }
                                //==
                                var originalDirectory = new DirectoryInfo(string.Format("{0}Content\\FileUpload\\", Server.MapPath(@"\")));
                                string pathString = Path.Combine(originalDirectory.ToString(), AI.AliasCode);
                                if (Directory.Exists(pathString) == false)
                                {
                                    System.IO.Directory.CreateDirectory(pathString);
                                }
                                var path = string.Format("{0}\\{1}", pathString, file.FileName);
                                file.SaveAs(path);
                            }
                        }
                    }
                    //===Delete Existing Draft Review Info
                    //int DraftAgreementSLNo = db.DraftAgreementInfos.Where(x => x.AgreementType == AgreementType.Modified && x.UserSLNo == LoginUserSLNo).Select(x => x.AgreementSLNo).SingleOrDefault();
                    //if (DraftAgreementSLNo != 0)
                    //{
                    //    //===Delete Existing Draft Advance Info
                    //    db.DraftAdvanceInfos.RemoveRange(db.DraftAdvanceInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Review Info
                    //    db.DraftReviewInfos.RemoveRange(db.DraftReviewInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Landlord Info
                    //    db.DraftLandlordInfos.RemoveRange(db.DraftLandlordInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Cost Center Info
                    //    db.DraftCostCenterInfos.RemoveRange(db.DraftCostCenterInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Utility Info
                    //    db.DraftUtilityInfos.RemoveRange(db.DraftUtilityInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Agreement Info
                    //    db.DraftAgreementInfos.RemoveRange(db.DraftAgreementInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //}
                    //==
                    AlertMsg = "The modified agreement: " + AI.AgreementName + " has been created.";
                    return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ModCreateAttach(RMS.Models.AgreementInfoDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    RMS.Models.AgreementInfo AI = new RMS.Models.AgreementInfo();
                    DTOBasic dtoBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    string LoginUserID = (string)Session["LoginUserID"];
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    //==Check available xRenewalAgreementSLNo
                    if (db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xModifiedAgreementSLNo && (x.IsRenewal == true || x.IsModified == true)).Any() == true)
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                    //==Save to Agreement Info Table
                    var CodeInfo = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xModifiedAgreementSLNo).Select(x => new { x.AgreementCode, x.AgreementVersion }).SingleOrDefault();
                    AI.AgreementType = AgreementType.Modified;
                    AI.AgreementCode = CodeInfo.AgreementCode;
                    AI.AgreementVersion = CodeInfo.AgreementVersion + 1;
                    AI.AliasCode = AI.AgreementCode + "-M" + AI.AgreementVersion;
                    AI.xModifiedAgreementSLNo = DTO.xModifiedAgreementSLNo;
                    //==Basic Info
                    AI.PremiseTypeSLNo = DTO.PremiseTypeSLNo;
                    AI.PremiseName = DTO.PremiseName;
                    AI.PremiseAddress = DTO.PremiseAddress;
                    AI.ClusterGroup = DTO.ClusterGroup;
                    AI.ConcernBranch = DTO.ConcernBranch;
                    AI.InspectorName = DTO.InspectorName;
                    AI.InspectorContactNo = DTO.InspectorContactNo;
                    //==Agreement Info
                    AI.AgreementName = DTO.AgreementName;
                    AI.AgreementStartDate = DateTime.ParseExact(DTO.AgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    AI.AgreementEndDate = DateTime.ParseExact(DTO.AgreementEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    AI.AgreementPeriod = DTO.AgreementPeriod;
                    AI.RenewalFrequency = AI.AgreementPeriod;
                    AI.RentDueDay = DTO.RentDueDay;
                    AI.UOM = DTO.UOM;
                    AI.TotalArea = DTO.TotalArea;
                    AI.CostPerUnit = DTO.CostPerUnit;
                    AI.TotalRentAmount = DTO.TotalRentAmount;
                    AI.SecurityDepositAmount = DTO.SecurityDepositAmount;
                    AI.AdvanceAmount = DTO.AdvanceAmount;
                    AI.AdditionalAdvanceAmount = DTO.AdditionalAdvanceAmount;
                    AI.AdvanceAdjustmentPeriod = DTO.AdvanceAdjustmentPeriod;
                    AI.AdvanceAdjustmentAmount = DTO.AdvanceAdjustmentAmount;
                    AI.TaxPercentage = DTO.TaxPercentage;
                    AI.TaxAmount = DTO.TaxAmount;
                    AI.VATPercentage = DTO.VATPercentage;
                    AI.VATAmount = DTO.VATAmount;
                    AI.NetRentAmount = AI.TotalRentAmount - AI.AdvanceAdjustmentAmount;
                    AI.AgreementStatus = AgreementStatus.Created;
                    AI.AgreementText = null;
                    AI.Status = dtoBasic.active;
                    AI.UserSLNo = LoginUserSLNo;
                    AI.EntryDate = DateTime.Now;
                    AI.IsDeleted = false;
                    AI.ReviewFrequency = DTO.ReviewFrequency;
                    AI.ReviewPercentage = DTO.ReviewPercentage;
                    AI.TaxType = DTO.TaxType;
                    AI.VatType = DTO.VatType;
                    AI.ServiceCharge = DTO.ServiceCharge;
                    AI.OnlineTower = DTO.OnlineTower;
                    AI.GeneratorSpace = DTO.GeneratorSpace;
                    AI.CarParking = DTO.CarParking;
                    //==Control Data
                    AI.CashGLCode = DTO.CashGLCode;
                    AI.BankGLCode = DTO.BankGLCode;
                    AI.AdvanceGLCode = DTO.AdvanceGLCode;
                    AI.AdvanceAdjustmentGLCode = DTO.AdvanceAdjustmentGLCode;
                    AI.RentGLCode = DTO.RentGLCode;
                    AI.ServiceChargeGLCode = DTO.ServiceChargeGLCode;
                    AI.TaxGLCode = DTO.TaxGLCode;
                    AI.VATGLCode = DTO.VATGLCode;
                    AI.ProvisionGLTax = DTO.ProvisionGLTax;
                    AI.ProvisionGLAP = DTO.ProvisionGLAP;
                    AI.RTGSGL = DTO.RTGSGL;
                    AI.EFTNGL = DTO.EFTNGL;
                    AI.PayOrderGL = DTO.PayOrderGL;
                    AI.IBBPaymentGL = DTO.IBBPaymentGL;
                    AI.CityBrokerageGL = DTO.CityBrokerageGL;
                    AI.CityCapitalGL = DTO.CityCapitalGL;
                    AI.OthersGL = DTO.OthersGL;
                    //=====
                    AI.PremiseAddressBangla = DTO.PremiseAddressBangla;
                    AI.AreaStatus = DTO.AreaStatus;
                    AI.RegionalOffice = DTO.RegionalOffice;
                    AI.PrimarySOL = DTO.PrimarySOL;
                    AI.AttachedControl = DTO.AttachedControl;
                    AI.ControllerOfficeDistance = DTO.ControllerOfficeDistance;
                    AI.RoutingNumber = DTO.RoutingNumber;
                    AI.Division = DTO.Division;
                    AI.District = DTO.District;
                    AI.Upazila = DTO.Upazila;
                    AI.Thana = DTO.Thana;
                    AI.ThanaCode = DTO.ThanaCode;
                    AI.Pourasabha = DTO.Pourasabha;
                    AI.PourasabhaType = DTO.PourasabhaType;
                    AI.UnionName = DTO.UnionName;
                    AI.WardNo = DTO.WardNo;
                    AI.PremisesTypeforAccounts = DTO.PremisesTypeforAccounts;
                    AI.ParentAgreementCode = DTO.ParentAgreementCode;
                    AI.ElectricityLoad = DTO.ElectricityLoad;
                    AI.ElectricityProvidedBy = DTO.ElectricityProvidedBy;
                    AI.AITBourneBy = DTO.AITBourneBy;
                    AI.CommercialPermission = DTO.CommercialPermission;
                    AI.BuildingPlan = DTO.BuildingPlan;
                    AI.PremisesSituatedFloor = DTO.PremisesSituatedFloor;
                    AI.BangladeshBankApproval = DTO.BangladeshBankApproval;
                    AI.BangladeshBankReference = DTO.BangladeshBankReference;
                    AI.ITTowerRentClause = DTO.ITTowerRentClause;
                    AI.TerminationClause = DTO.TerminationClause;
                    AI.TerminationNoticePeriod = DTO.TerminationNoticePeriod;
                    if (DTO.PremisesOpeningDate != null)
                    {
                        AI.PremisesOpeningDate = DateTime.ParseExact(DTO.PremisesOpeningDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.PremisesOpeningDate = null;
                    }
                    if (DTO.DocumentDate != null)
                    {
                        AI.DocumentDate = DateTime.ParseExact(DTO.DocumentDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.DocumentDate = null;
                    }
                    AI.Remarks = DTO.Remarks;
                    AI.AgreementRemarks = DTO.AgreementRemarks;
                    AI.AdvanceRemarks = DTO.AdvanceRemarks;
                    AI.ReviewRemarks = DTO.ReviewRemarks;
                    AI.LLRemarks = DTO.LLRemarks;
                    AI.CCRemarks = DTO.CCRemarks;
                    AI.UtilityRemarks = DTO.UtilityRemarks;
                    AI.ControlDataRemarks = DTO.ControlDataRemarks;

                    AI.BorrowingRate = DTO.BorrowingRate;
                    AI.PaymentMethod = DTO.PaymentMethod;
                    AI.IsIFRSEnable = DTO.IsIFRSEnable;
                    AI.CalculationMethod = DTO.CalculationMethod;
                    AI.WithHoldingCode = DTO.WithHoldingCode;
                    AI.AdditionalExpense = DTO.AdditionalExpense;
                    AI.InitialDirectCost = DTO.InitialDirectCost;
                    AI.DismantlingCost = DTO.DismantlingCost;
                    AI.CarParkingNo = DTO.CarParkingNo;
                    AI.WaterBillType = DTO.WaterBillType;
                    AI.WaterBillAmount = DTO.WaterBillAmount;
                    if (DTO.IFRSEffectiveDate != null && DTO.IsIFRSEnable == true)
                    {
                        AI.IFRSEffectiveDate = DateTime.ParseExact(DTO.IFRSEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.IFRSEffectiveDate = null;
                    }
                    AI.CorporateTaxRate = DTO.CorporateTaxRate;
                    //=====
                    db.AgreementInfos.Add(AI);
                    db.SaveChanges();
                    //==Update yModifiedAgreement Info
                    RMS.Models.AgreementInfo xAI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xModifiedAgreementSLNo).SingleOrDefault();
                    xAI.IsModified = true;
                    xAI.IsBlock = true;
                    xAI.BlockDate = DateTime.Now;
                    xAI.BlockUserSLNo = AI.UserSLNo;
                    xAI.yModifiedAgreementSLNo = AI.AgreementSLNo;
                    db.Entry(xAI).State = EntityState.Modified;
                    db.SaveChanges();
                    //==Space Information
                    string[] SpaceTypeList = null;
                    if (DTO.SpaceTypeList != null)
                    {
                        SpaceTypeList = DTO.SpaceTypeList.Split(',');
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            SpaceTypeList[i] = SpaceTypeList[i].Trim();
                        }
                    }
                    string[] SpaceAreaList = null;
                    if (DTO.SpaceAreaList != null)
                    {
                        SpaceAreaList = DTO.SpaceAreaList.Split(',');
                        for (int i = 0; i < SpaceAreaList.Length; i++)
                        {
                            SpaceAreaList[i] = SpaceAreaList[i].Trim();
                        }
                    }
                    string[] SpaceRateList = null;
                    if (DTO.SpaceRateList != null)
                    {
                        SpaceRateList = DTO.SpaceRateList.Split(',');
                        for (int i = 0; i < SpaceRateList.Length; i++)
                        {
                            SpaceRateList[i] = SpaceRateList[i].Trim();
                        }
                    }
                    string[] SpaceRentList = null;
                    if (DTO.SpaceRentList != null)
                    {
                        SpaceRentList = DTO.SpaceRentList.Split(',');
                        for (int i = 0; i < SpaceRentList.Length; i++)
                        {
                            SpaceRentList[i] = SpaceRentList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdvanceList = null;
                    if (DTO.SpaceTotalAdvanceList != null)
                    {
                        SpaceTotalAdvanceList = DTO.SpaceTotalAdvanceList.Split(',');
                        for (int i = 0; i < SpaceTotalAdvanceList.Length; i++)
                        {
                            SpaceTotalAdvanceList[i] = SpaceTotalAdvanceList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdjustmentList = null;
                    if (DTO.SpaceTotalAdjustmentList != null)
                    {
                        SpaceTotalAdjustmentList = DTO.SpaceTotalAdjustmentList.Split(',');
                        for (int i = 0; i < SpaceTotalAdjustmentList.Length; i++)
                        {
                            SpaceTotalAdjustmentList[i] = SpaceTotalAdjustmentList[i].Trim();
                        }
                    }
                    string[] SpaceRemarksList = null;
                    if (DTO.SpaceRemarksList != null)
                    {
                        SpaceRemarksList = DTO.SpaceRemarksList.Split(',');
                        for (int i = 0; i < SpaceRemarksList.Length; i++)
                        {
                            SpaceRemarksList[i] = SpaceRemarksList[i].Trim();
                        }
                    }
                    if (SpaceTypeList != null)
                    {
                        RMS.Models.SpaceInfo SpaceInfo;
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            if (SpaceTypeList[i] != null && SpaceTypeList[i] != "")
                            {
                                SpaceInfo = new RMS.Models.SpaceInfo();
                                SpaceInfo.AgreementSLNo = AI.AgreementSLNo;
                                SpaceInfo.SpaceType = (SpaceTypeList == null) ? null : SpaceTypeList[i].ToString();
                                SpaceInfo.SpaceArea = Convert.ToDouble(SpaceAreaList[i].ToString());
                                SpaceInfo.SpaceRate = Convert.ToDouble(SpaceRateList[i].ToString());
                                SpaceInfo.SpaceRent = Convert.ToDouble(SpaceRentList[i].ToString());
                                SpaceInfo.SpaceTotalAdvance = Convert.ToDouble(SpaceTotalAdvanceList[i].ToString());
                                SpaceInfo.SpaceTotalAdjustment = Convert.ToDouble(SpaceTotalAdjustmentList[i].ToString());
                                SpaceInfo.SpaceRemarks = (SpaceRemarksList == null) ? null : SpaceRemarksList[i].ToString();
                                db.SpaceInfos.Add(SpaceInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Advance Information
                    string[] AdvanceNoList = null;
                    if (DTO.AdvanceNoList != null)
                    {
                        AdvanceNoList = DTO.AdvanceNoList.Split(',');
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            AdvanceNoList[i] = AdvanceNoList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotPeriodList = null;
                    if (DTO.AdvanceSlotPeriodList != null)
                    {
                        AdvanceSlotPeriodList = DTO.AdvanceSlotPeriodList.Split(',');
                        for (int i = 0; i < AdvanceSlotPeriodList.Length; i++)
                        {
                            AdvanceSlotPeriodList[i] = AdvanceSlotPeriodList[i].Trim();
                        }
                    }
                    string[] AdvanceStartDateList = null;
                    if (DTO.AdvanceStartDateList != null)
                    {
                        AdvanceStartDateList = DTO.AdvanceStartDateList.Split(',');
                        for (int i = 0; i < AdvanceStartDateList.Length; i++)
                        {
                            AdvanceStartDateList[i] = AdvanceStartDateList[i].Trim();
                        }
                    }
                    string[] AdvanceEndDateList = null;
                    if (DTO.AdvanceEndDateList != null)
                    {
                        AdvanceEndDateList = DTO.AdvanceEndDateList.Split(',');
                        for (int i = 0; i < AdvanceEndDateList.Length; i++)
                        {
                            AdvanceEndDateList[i] = AdvanceEndDateList[i].Trim();
                        }
                    }
                    string[] AdvanceNoteList = null;
                    if (DTO.AdvanceNoteList != null)
                    {
                        AdvanceNoteList = DTO.AdvanceNoteList.Split(',');
                        for (int i = 0; i < AdvanceNoteList.Length; i++)
                        {
                            AdvanceNoteList[i] = AdvanceNoteList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotAmountList = null;
                    if (DTO.AdvanceSlotAmountList != null)
                    {
                        AdvanceSlotAmountList = DTO.AdvanceSlotAmountList.Split(',');
                        for (int i = 0; i < AdvanceSlotAmountList.Length; i++)
                        {
                            AdvanceSlotAmountList[i] = AdvanceSlotAmountList[i].Trim();
                        }
                    }
                    if (AdvanceNoList != null)
                    {
                        RMS.Models.AdvanceInfo AdvInfo;
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            if (AdvanceNoList[i] != null && AdvanceNoList[i] != "")
                            {
                                AdvInfo = new RMS.Models.AdvanceInfo();
                                AdvInfo.AgreementSLNo = AI.AgreementSLNo;
                                AdvInfo.AdvanceNo = Convert.ToInt32(AdvanceNoList[i].ToString());
                                AdvInfo.AdvanceSlotPeriod = Convert.ToInt32(AdvanceSlotPeriodList[i].ToString());
                                AdvInfo.StartDate = DateTime.ParseExact(AdvanceStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.EndDate = DateTime.ParseExact(AdvanceEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.AdvanceSlotAmount = Convert.ToDouble(AdvanceSlotAmountList[i].ToString());
                                AdvInfo.AdvanceNote = (AdvanceNoteList == null) ? null : AdvanceNoteList[i].ToString();
                                db.AdvanceInfos.Add(AdvInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Review Info
                    string[] ReviewNoList = null;
                    if (DTO.ReviewNoList != null)
                    {
                        ReviewNoList = DTO.ReviewNoList.Split(',');
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            ReviewNoList[i] = ReviewNoList[i].Trim();
                        }
                    }
                    string[] ReviewStartDateList = null;
                    if (DTO.ReviewStartDateList != null)
                    {
                        ReviewStartDateList = DTO.ReviewStartDateList.Split(',');
                        for (int i = 0; i < ReviewStartDateList.Length; i++)
                        {
                            ReviewStartDateList[i] = ReviewStartDateList[i].Trim();
                        }
                    }
                    string[] ReviewEndDateList = null;
                    if (DTO.ReviewEndDateList != null)
                    {
                        ReviewEndDateList = DTO.ReviewEndDateList.Split(',');
                        for (int i = 0; i < ReviewEndDateList.Length; i++)
                        {
                            ReviewEndDateList[i] = ReviewEndDateList[i].Trim();
                        }
                    }
                    string[] ReviewPeriodList = null;
                    if (DTO.ReviewPeriodList != null)
                    {
                        ReviewPeriodList = DTO.ReviewPeriodList.Split(',');
                        for (int i = 0; i < ReviewPeriodList.Length; i++)
                        {
                            ReviewPeriodList[i] = ReviewPeriodList[i].Trim();
                        }
                    }
                    string[] ReviewIncreaseAmountList = null;
                    if (DTO.ReviewIncreaseAmountList != null)
                    {
                        ReviewIncreaseAmountList = DTO.ReviewIncreaseAmountList.Split(',');
                        for (int i = 0; i < ReviewIncreaseAmountList.Length; i++)
                        {
                            ReviewIncreaseAmountList[i] = ReviewIncreaseAmountList[i].Trim();
                        }
                    }
                    string[] ReviewIncreasePercentageList = null;
                    if (DTO.ReviewIncreasePercentageList != null)
                    {
                        ReviewIncreasePercentageList = DTO.ReviewIncreasePercentageList.Split(',');
                        for (int i = 0; i < ReviewIncreasePercentageList.Length; i++)
                        {
                            ReviewIncreasePercentageList[i] = ReviewIncreasePercentageList[i].Trim();
                        }
                    }
                    string[] ReviewNoteList = null;
                    if (DTO.ReviewNoteList != null)
                    {
                        ReviewNoteList = DTO.ReviewNoteList.Split(',');
                        for (int i = 0; i < ReviewNoteList.Length; i++)
                        {
                            ReviewNoteList[i] = ReviewNoteList[i].Trim();
                        }
                    }
                    if (ReviewNoList != null)
                    {
                        RMS.Models.ReviewInfo RI;
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            if (ReviewNoList[i] != null && ReviewNoList[i] != "")
                            {
                                RI = new RMS.Models.ReviewInfo();
                                RI.AgreementSLNo = AI.AgreementSLNo;
                                RI.ReviewNo = Convert.ToInt32(ReviewNoList[i].ToString());
                                RI.Period = Convert.ToInt32(ReviewPeriodList[i].ToString());
                                RI.StartDate = DateTime.ParseExact(ReviewStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                RI.EndDate = DateTime.ParseExact(ReviewEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                //RI.StartDate = DateTime.Parse(ReviewStartDateList[i]);
                                //RI.EndDate = DateTime.Parse(ReviewEndDateList[i]);
                                RI.IncreaseAmount = Convert.ToDouble(ReviewIncreaseAmountList[i].ToString());
                                RI.IncreasePercentage = Convert.ToDouble(ReviewIncreasePercentageList[i].ToString());
                                RI.ReviewNote = (ReviewNoteList == null) ? null : ReviewNoteList[i].ToString();
                                db.ReviewInfos.Add(RI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Landlord Information
                    string[] VendorCodeList = null;
                    if (DTO.VendorCodeList != null)
                    {
                        VendorCodeList = DTO.VendorCodeList.Split(',');
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            VendorCodeList[i] = VendorCodeList[i].Trim();
                        }
                    }
                    string[] LandlordNameList = null;
                    if (DTO.LandlordNameList != null)
                    {
                        LandlordNameList = DTO.LandlordNameList.Split(',');
                        for (int i = 0; i < LandlordNameList.Length; i++)
                        {
                            LandlordNameList[i] = LandlordNameList[i].Trim();
                        }
                    }
                    string[] ModeOfPaymentList = null;
                    if (DTO.ModeOfPaymentList != null)
                    {
                        ModeOfPaymentList = DTO.ModeOfPaymentList.Split(',');
                        for (int i = 0; i < ModeOfPaymentList.Length; i++)
                        {
                            ModeOfPaymentList[i] = ModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] VendorAdvancePCList = null;
                    if (DTO.VendorAdvancePCList != null)
                    {
                        VendorAdvancePCList = DTO.VendorAdvancePCList.Split(',');
                        for (int i = 0; i < VendorAdvancePCList.Length; i++)
                        {
                            VendorAdvancePCList[i] = VendorAdvancePCList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAmountList = null;
                    if (DTO.VendorAdvanceAmountList != null)
                    {
                        VendorAdvanceAmountList = DTO.VendorAdvanceAmountList.Split(',');
                        for (int i = 0; i < VendorAdvanceAmountList.Length; i++)
                        {
                            VendorAdvanceAmountList[i] = VendorAdvanceAmountList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAdjustmentPCList = null;
                    if (DTO.VendorAdvanceAdjustmentPCList != null)
                    {
                        VendorAdvanceAdjustmentPCList = DTO.VendorAdvanceAdjustmentPCList.Split(',');
                        for (int i = 0; i < VendorAdvanceAdjustmentPCList.Length; i++)
                        {
                            VendorAdvanceAdjustmentPCList[i] = VendorAdvanceAdjustmentPCList[i].Trim();
                        }
                    }
                    //string[] VendorAdvanceAdjustmentAmountList = null;
                    //if (DTO.VendorAdvanceAdjustmentAmountList != null)
                    //{
                    //    VendorAdvanceAdjustmentAmountList = DTO.VendorAdvanceAdjustmentAmountList.Split(',');
                    //    for (int i = 0; i < VendorAdvanceAdjustmentAmountList.Length; i++)
                    //    {
                    //        VendorAdvanceAdjustmentAmountList[i] = VendorAdvanceAdjustmentAmountList[i].Trim();
                    //    }
                    //}
                    string[] VendorTaxPCList = null;
                    if (DTO.VendorTaxPCList != null)
                    {
                        VendorTaxPCList = DTO.VendorTaxPCList.Split(',');
                        for (int i = 0; i < VendorTaxPCList.Length; i++)
                        {
                            VendorTaxPCList[i] = VendorTaxPCList[i].Trim();
                        }
                    }
                    string[] VendorTaxAmountList = null;
                    if (DTO.VendorTaxAmountList != null)
                    {
                        VendorTaxAmountList = DTO.VendorTaxAmountList.Split(',');
                        for (int i = 0; i < VendorTaxAmountList.Length; i++)
                        {
                            VendorTaxAmountList[i] = VendorTaxAmountList[i].Trim();
                        }
                    }
                    string[] VendorVATPCList = null;
                    if (DTO.VendorVATPCList != null)
                    {
                        VendorVATPCList = DTO.VendorVATPCList.Split(',');
                        for (int i = 0; i < VendorVATPCList.Length; i++)
                        {
                            VendorVATPCList[i] = VendorVATPCList[i].Trim();
                        }
                    }
                    string[] VendorVATAmountList = null;
                    if (DTO.VendorVATAmountList != null)
                    {
                        VendorVATAmountList = DTO.VendorVATAmountList.Split(',');
                        for (int i = 0; i < VendorVATAmountList.Length; i++)
                        {
                            VendorVATAmountList[i] = VendorVATAmountList[i].Trim();
                        }
                    }
                    string[] VendorRentPCList = null;
                    if (DTO.VendorRentPCList != null)
                    {
                        VendorRentPCList = DTO.VendorRentPCList.Split(',');
                        for (int i = 0; i < VendorRentPCList.Length; i++)
                        {
                            VendorRentPCList[i] = VendorRentPCList[i].Trim();
                        }
                    }
                    //string[] VendorRentAmountList = null;
                    //if (DTO.VendorRentAmountList != null)
                    //{
                    //    VendorRentAmountList = DTO.VendorRentAmountList.Split(',');
                    //    for (int i = 0; i < VendorRentAmountList.Length; i++)
                    //    {
                    //        VendorRentAmountList[i] = VendorRentAmountList[i].Trim();
                    //    }
                    //}
                    string[] AddressList = null;
                    if (DTO.LLAddressList != null)
                    {
                        AddressList = DTO.LLAddressList.Split(',');
                        for (int i = 0; i < AddressList.Length; i++)
                        {
                            AddressList[i] = AddressList[i].Trim();
                        }
                    }
                    string[] ContactNoList = null;
                    if (DTO.LLContactNoList != null)
                    {
                        ContactNoList = DTO.LLContactNoList.Split(',');
                        for (int i = 0; i < ContactNoList.Length; i++)
                        {
                            ContactNoList[i] = ContactNoList[i].Trim();
                        }
                    }
                    string[] EmailList = null;
                    if (DTO.LLEmailList != null)
                    {
                        EmailList = DTO.LLEmailList.Split(',');
                        for (int i = 0; i < EmailList.Length; i++)
                        {
                            EmailList[i] = EmailList[i].Trim();
                        }
                    }
                    string[] ACNoList = null;
                    if (DTO.ACNoList != null)
                    {
                        ACNoList = DTO.ACNoList.Split(',');
                        for (int i = 0; i < ACNoList.Length; i++)
                        {
                            ACNoList[i] = ACNoList[i].Trim();
                        }
                    }
                    string[] BankNameList = null;
                    if (DTO.BankNameList != null)
                    {
                        BankNameList = DTO.BankNameList.Split(',');
                        for (int i = 0; i < BankNameList.Length; i++)
                        {
                            BankNameList[i] = BankNameList[i].Trim();
                        }
                    }
                    string[] BranchNameList = null;
                    if (DTO.BranchNameList != null)
                    {
                        BranchNameList = DTO.BranchNameList.Split(',');
                        for (int i = 0; i < BranchNameList.Length; i++)
                        {
                            BranchNameList[i] = BranchNameList[i].Trim();
                        }
                    }
                    string[] RoutingNoList = null;
                    if (DTO.RoutingNoList != null)
                    {
                        RoutingNoList = DTO.RoutingNoList.Split(',');
                        for (int i = 0; i < RoutingNoList.Length; i++)
                        {
                            RoutingNoList[i] = RoutingNoList[i].Trim();
                        }
                    }
                    RMS.Models.LandlordInfo LI;
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    for (int i = 0; i < VendorCodeList.Length; i++)
                    {
                        if (VendorCodeList[i] != null && VendorCodeList[i] != "")
                        {
                            LI = new RMS.Models.LandlordInfo();
                            LI.AgreementSLNo = AI.AgreementSLNo;
                            LI.VendorCode = (VendorCodeList == null) ? null : VendorCodeList[i].ToString();
                            LI.LandlordName = (LandlordNameList == null) ? null : LandlordNameList[i].ToString();
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { LI.ModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { LI.ModeOfPayment = ModeOfPaymentLocation.RTGS; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { LI.ModeOfPayment = ModeOfPaymentLocation.EFTN; }
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { LI.ModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { LI.ModeOfPayment = ModeOfPaymentLocation.Cash; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { LI.ModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { LI.ModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { LI.ModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { LI.ModeOfPayment = ModeOfPaymentLocation.Others; }
                            LI.AdvancePC = Convert.ToDouble(VendorAdvancePCList[i].ToString());
                            LI.AdvanceAdjustmentPC = Convert.ToDouble(VendorAdvanceAdjustmentPCList[i].ToString());
                            LI.TaxPC = Convert.ToDouble(VendorTaxPCList[i].ToString());
                            LI.VATPC = Convert.ToDouble(VendorVATPCList[i].ToString());
                            LI.RentPC = Convert.ToDouble(VendorRentPCList[i].ToString());
                            //==PC Amount
                            LI.AdvanceAmount = ((AI.AdvanceAmount + AI.AdditionalAdvanceAmount) * LI.AdvancePC) / 100;
                            LI.TaxAmount = (AI.TaxAmount * LI.TaxPC) / 100;
                            LI.VATAmount = (AI.VATAmount * LI.VATPC) / 100;
                            //==
                            LI.LLAddress = (AddressList == null) ? null : AddressList[i].ToString();
                            LI.LLContactNo = (ContactNoList == null) ? null : ContactNoList[i].ToString();
                            LI.LLEmail = (EmailList == null) ? null : EmailList[i].ToString();
                            LI.ACNo = (ACNoList == null) ? null : ACNoList[i].ToString();
                            LI.BankName = (BankNameList == null) ? null : BankNameList[i].ToString();
                            LI.BranchName = (BranchNameList == null) ? null : BranchNameList[i].ToString();
                            LI.RoutingNo = (RoutingNoList == null) ? null : RoutingNoList[i].ToString();
                            db.LandlordInfos.Add(LI);
                            db.SaveChanges();
                        }
                    }
                    //==Cost Center
                    string[] CCCodeList = null;
                    if (DTO.CCCodeList != null)
                    {
                        CCCodeList = DTO.CCCodeList.Split(',');
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            CCCodeList[i] = CCCodeList[i].Trim();
                        }
                    }
                    string[] CCNameList = null;
                    if (DTO.CCNameList != null)
                    {
                        CCNameList = DTO.CCNameList.Split(',');
                        for (int i = 0; i < CCNameList.Length; i++)
                        {
                            CCNameList[i] = CCNameList[i].Trim();
                        }
                    }
                    string[] SOLCodeList = null;
                    if (DTO.SOLCodeList != null)
                    {
                        SOLCodeList = DTO.SOLCodeList.Split(',');
                        for (int i = 0; i < SOLCodeList.Length; i++)
                        {
                            SOLCodeList[i] = SOLCodeList[i].Trim();
                        }
                    }
                    string[] SOLNameList = null;
                    if (DTO.SOLNameList != null)
                    {
                        SOLNameList = DTO.SOLNameList.Split(',');
                        for (int i = 0; i < SOLNameList.Length; i++)
                        {
                            SOLNameList[i] = SOLNameList[i].Trim();
                        }
                    }
                    string[] CCShareAllotmentList = null;
                    if (DTO.CCShareAllotmentList != null)
                    {
                        CCShareAllotmentList = DTO.CCShareAllotmentList.Split(',');
                        for (int i = 0; i < CCShareAllotmentList.Length; i++)
                        {
                            CCShareAllotmentList[i] = CCShareAllotmentList[i].Trim();
                        }
                    }
                    RMS.Models.CostCenterInfo CC;
                    for (int i = 0; i < CCCodeList.Length; i++)
                    {
                        if (CCCodeList[i] != null && CCCodeList[i] != "")
                        {
                            CC = new RMS.Models.CostCenterInfo();
                            CC.AgreementSLNo = AI.AgreementSLNo;
                            CC.CCCode = (CCCodeList == null) ? null : CCCodeList[i].ToString();
                            CC.CCName = (CCNameList == null) ? null : CCNameList[i].ToString();
                            CC.SOLCode = (SOLCodeList == null) ? null : SOLCodeList[i].ToString();
                            CC.SOLName = (SOLNameList == null) ? null : SOLNameList[i].ToString();
                            CC.CCShareAllotment = Convert.ToDouble(CCShareAllotmentList[i].ToString());
                            db.CostCenterInfos.Add(CC);
                            db.SaveChanges();
                        }
                    }
                    //==Utility Information
                    string[] UtilityVendorCodeList = null;
                    if (DTO.UtilityVendorCodeList != null)
                    {
                        UtilityVendorCodeList = DTO.UtilityVendorCodeList.Split(',');
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            UtilityVendorCodeList[i] = UtilityVendorCodeList[i].Trim();
                        }
                    }
                    string[] UtilityLandlordNameList = null;
                    if (DTO.UtilityLandlordNameList != null)
                    {
                        UtilityLandlordNameList = DTO.UtilityLandlordNameList.Split(',');
                        for (int i = 0; i < UtilityLandlordNameList.Length; i++)
                        {
                            UtilityLandlordNameList[i] = UtilityLandlordNameList[i].Trim();
                        }
                    }
                    string[] UtilityModeOfPaymentList = null;
                    if (DTO.UtilityModeOfPaymentList != null)
                    {
                        UtilityModeOfPaymentList = DTO.UtilityModeOfPaymentList.Split(',');
                        for (int i = 0; i < UtilityModeOfPaymentList.Length; i++)
                        {
                            UtilityModeOfPaymentList[i] = UtilityModeOfPaymentList[i].Trim();
                        }
                    }

                    string[] ServiceChargePCList = null;
                    if (DTO.ServiceChargePCList != null)
                    {
                        ServiceChargePCList = DTO.ServiceChargePCList.Split(',');
                        for (int i = 0; i < ServiceChargePCList.Length; i++)
                        {
                            ServiceChargePCList[i] = ServiceChargePCList[i].Trim();
                        }
                    }
                    string[] ServiceChargeAmountList = null;
                    if (DTO.ServiceChargeAmountList != null)
                    {
                        ServiceChargeAmountList = DTO.ServiceChargeAmountList.Split(',');
                        for (int i = 0; i < ServiceChargeAmountList.Length; i++)
                        {
                            ServiceChargeAmountList[i] = ServiceChargeAmountList[i].Trim();
                        }
                    }

                    string[] OnlineTowerPCList = null;
                    if (DTO.OnlineTowerPCList != null)
                    {
                        OnlineTowerPCList = DTO.OnlineTowerPCList.Split(',');
                        for (int i = 0; i < OnlineTowerPCList.Length; i++)
                        {
                            OnlineTowerPCList[i] = OnlineTowerPCList[i].Trim();
                        }
                    }
                    string[] OnlineTowerAmountList = null;
                    if (DTO.OnlineTowerAmountList != null)
                    {
                        OnlineTowerAmountList = DTO.OnlineTowerAmountList.Split(',');
                        for (int i = 0; i < OnlineTowerAmountList.Length; i++)
                        {
                            OnlineTowerAmountList[i] = OnlineTowerAmountList[i].Trim();
                        }
                    }

                    string[] GeneratorSpacePCList = null;
                    if (DTO.GeneratorSpacePCList != null)
                    {
                        GeneratorSpacePCList = DTO.GeneratorSpacePCList.Split(',');
                        for (int i = 0; i < GeneratorSpacePCList.Length; i++)
                        {
                            GeneratorSpacePCList[i] = GeneratorSpacePCList[i].Trim();
                        }
                    }
                    string[] GeneratorSpaceAmountList = null;
                    if (DTO.GeneratorSpaceAmountList != null)
                    {
                        GeneratorSpaceAmountList = DTO.GeneratorSpaceAmountList.Split(',');
                        for (int i = 0; i < GeneratorSpaceAmountList.Length; i++)
                        {
                            GeneratorSpaceAmountList[i] = GeneratorSpaceAmountList[i].Trim();
                        }
                    }
                    string[] CarParkingPCList = null;
                    if (DTO.CarParkingPCList != null)
                    {
                        CarParkingPCList = DTO.CarParkingPCList.Split(',');
                        for (int i = 0; i < CarParkingPCList.Length; i++)
                        {
                            CarParkingPCList[i] = CarParkingPCList[i].Trim();
                        }
                    }
                    string[] CarParkingAmountList = null;
                    if (DTO.CarParkingAmountList != null)
                    {
                        CarParkingAmountList = DTO.CarParkingAmountList.Split(',');
                        for (int i = 0; i < CarParkingAmountList.Length; i++)
                        {
                            CarParkingAmountList[i] = CarParkingAmountList[i].Trim();
                        }
                    }
                    string[] UtilityTaxPCList = null;
                    if (DTO.UtilityTaxPCList != null)
                    {
                        UtilityTaxPCList = DTO.UtilityTaxPCList.Split(',');
                        for (int i = 0; i < UtilityTaxPCList.Length; i++)
                        {
                            UtilityTaxPCList[i] = UtilityTaxPCList[i].Trim();
                        }
                    }
                    string[] UtilityTaxAmountList = null;
                    if (DTO.UtilityTaxAmountList != null)
                    {
                        UtilityTaxAmountList = DTO.UtilityTaxAmountList.Split(',');
                        for (int i = 0; i < UtilityTaxAmountList.Length; i++)
                        {
                            UtilityTaxAmountList[i] = UtilityTaxAmountList[i].Trim();
                        }
                    }
                    string[] UtilityVATPCList = null;
                    if (DTO.UtilityVATPCList != null)
                    {
                        UtilityVATPCList = DTO.UtilityVATPCList.Split(',');
                        for (int i = 0; i < UtilityVATPCList.Length; i++)
                        {
                            UtilityVATPCList[i] = UtilityVATPCList[i].Trim();
                        }
                    }
                    string[] UtilityVATAmountList = null;
                    if (DTO.UtilityVATAmountList != null)
                    {
                        UtilityVATAmountList = DTO.UtilityVATAmountList.Split(',');
                        for (int i = 0; i < UtilityVATAmountList.Length; i++)
                        {
                            UtilityVATAmountList[i] = UtilityVATAmountList[i].Trim();
                        }
                    }
                    string[] UtilityAddressList = null;
                    if (DTO.UtilityAddressList != null)
                    {
                        UtilityAddressList = DTO.UtilityAddressList.Split(',');
                        for (int i = 0; i < UtilityAddressList.Length; i++)
                        {
                            UtilityAddressList[i] = UtilityAddressList[i].Trim();
                        }
                    }
                    string[] UtilityContactNoList = null;
                    if (DTO.UtilityContactNoList != null)
                    {
                        UtilityContactNoList = DTO.UtilityContactNoList.Split(',');
                        for (int i = 0; i < UtilityContactNoList.Length; i++)
                        {
                            UtilityContactNoList[i] = UtilityContactNoList[i].Trim();
                        }
                    }
                    string[] UtilityEmailList = null;
                    if (DTO.UtilityEmailList != null)
                    {
                        UtilityEmailList = DTO.UtilityEmailList.Split(',');
                        for (int i = 0; i < UtilityEmailList.Length; i++)
                        {
                            UtilityEmailList[i] = UtilityEmailList[i].Trim();
                        }
                    }
                    string[] UtilityACNoList = null;
                    if (DTO.UtilityACNoList != null)
                    {
                        UtilityACNoList = DTO.UtilityACNoList.Split(',');
                        for (int i = 0; i < UtilityACNoList.Length; i++)
                        {
                            UtilityACNoList[i] = UtilityACNoList[i].Trim();
                        }
                    }
                    string[] UtilityBankNameList = null;
                    if (DTO.UtilityBankNameList != null)
                    {
                        UtilityBankNameList = DTO.UtilityBankNameList.Split(',');
                        for (int i = 0; i < UtilityBankNameList.Length; i++)
                        {
                            UtilityBankNameList[i] = UtilityBankNameList[i].Trim();
                        }
                    }
                    string[] UtilityBranchNameList = null;
                    if (DTO.UtilityBranchNameList != null)
                    {
                        UtilityBranchNameList = DTO.UtilityBranchNameList.Split(',');
                        for (int i = 0; i < UtilityBranchNameList.Length; i++)
                        {
                            UtilityBranchNameList[i] = UtilityBranchNameList[i].Trim();
                        }
                    }
                    string[] UtilityRoutingNoList = null;
                    if (DTO.UtilityRoutingNoList != null)
                    {
                        UtilityRoutingNoList = DTO.UtilityRoutingNoList.Split(',');
                        for (int i = 0; i < UtilityRoutingNoList.Length; i++)
                        {
                            UtilityRoutingNoList[i] = UtilityRoutingNoList[i].Trim();
                        }
                    }
                    if (UtilityVendorCodeList != null)
                    {
                        RMS.Models.UtilityInfo UI;
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            if (UtilityVendorCodeList[i] != null && UtilityVendorCodeList[i] != "")
                            {
                                UI = new RMS.Models.UtilityInfo();
                                UI.AgreementSLNo = AI.AgreementSLNo;
                                UI.UtilityVendorCode = (UtilityVendorCodeList == null) ? null : UtilityVendorCodeList[i].ToString();
                                UI.UtilityLandlordName = (UtilityLandlordNameList == null) ? null : UtilityLandlordNameList[i].ToString();

                                if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Others; }

                                UI.ServiceChargePC = Convert.ToDouble(ServiceChargePCList[i].ToString());
                                UI.ServiceChargeAmount = Convert.ToDouble(ServiceChargeAmountList[i].ToString());

                                UI.OnlineTowerPC = Convert.ToDouble(OnlineTowerPCList[i].ToString());
                                UI.OnlineTowerAmount = Convert.ToDouble(OnlineTowerAmountList[i].ToString());

                                UI.GeneratorSpacePC = Convert.ToDouble(GeneratorSpacePCList[i].ToString());
                                UI.GeneratorSpaceAmount = Convert.ToDouble(GeneratorSpaceAmountList[i].ToString());

                                UI.CarParkingPC = Convert.ToDouble(CarParkingPCList[i].ToString());
                                UI.CarParkingAmount = Convert.ToDouble(CarParkingAmountList[i].ToString());

                                UI.TaxPC = Convert.ToDouble(UtilityTaxPCList[i].ToString());
                                UI.TaxAmount = Convert.ToDouble(UtilityTaxAmountList[i].ToString());
                                UI.VATPC = Convert.ToDouble(UtilityVATPCList[i].ToString());
                                UI.VATAmount = Convert.ToDouble(UtilityVATAmountList[i].ToString());
                                UI.UtilityAddress = (UtilityAddressList == null) ? null : UtilityAddressList[i].ToString();
                                UI.UtilityContactNo = (UtilityContactNoList == null) ? null : UtilityContactNoList[i].ToString();
                                UI.UtilityEmail = (UtilityEmailList == null) ? null : UtilityEmailList[i].ToString();
                                UI.UtilityACNo = (UtilityACNoList == null) ? null : UtilityACNoList[i].ToString();
                                UI.UtilityBankName = (UtilityBankNameList == null) ? null : UtilityBankNameList[i].ToString();
                                UI.UtilityBranchName = (UtilityBranchNameList == null) ? null : UtilityBranchNameList[i].ToString();
                                UI.UtilityRoutingNo = (UtilityRoutingNoList == null) ? null : UtilityRoutingNoList[i].ToString();
                                db.UtilityInfos.Add(UI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Attach Documents
                    if (DTO.files != null)
                    {
                        RMS.Models.FileUploadInfo FU;
                        foreach (var file in DTO.files)
                        {
                            //Save file content goes here
                            if (file != null && file.ContentLength > 0)
                            {
                                //==
                                if (db.FileUploadInfos.Any(x => x.AgreementSLNo == AI.AgreementSLNo && x.FileName == file.FileName) == false)
                                {
                                    FU = new RMS.Models.FileUploadInfo();
                                    FU.AgreementSLNo = AI.AgreementSLNo;
                                    FU.FileName = file.FileName;
                                    FU.FilePath = "Content/FileUpload/" + AI.AliasCode + "/" + file.FileName;
                                    db.FileUploadInfos.Add(FU);
                                    db.SaveChanges();
                                }
                                //==
                                var originalDirectory = new DirectoryInfo(string.Format("{0}Content\\FileUpload\\", Server.MapPath(@"\")));
                                string pathString = Path.Combine(originalDirectory.ToString(), AI.AliasCode);
                                if (Directory.Exists(pathString) == false)
                                {
                                    System.IO.Directory.CreateDirectory(pathString);
                                }
                                var path = string.Format("{0}\\{1}", pathString, file.FileName);
                                file.SaveAs(path);
                            }
                        }
                    }
                    //===Delete Existing Draft Review Info
                    //int DraftAgreementSLNo = db.DraftAgreementInfos.Where(x => x.AgreementType == AgreementType.Modified && x.UserSLNo == LoginUserSLNo).Select(x => x.AgreementSLNo).SingleOrDefault();
                    //if (DraftAgreementSLNo != 0)
                    //{
                    //    //===Delete Existing Draft Advance Info
                    //    db.DraftAdvanceInfos.RemoveRange(db.DraftAdvanceInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Review Info
                    //    db.DraftReviewInfos.RemoveRange(db.DraftReviewInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Landlord Info
                    //    db.DraftLandlordInfos.RemoveRange(db.DraftLandlordInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Cost Center Info
                    //    db.DraftCostCenterInfos.RemoveRange(db.DraftCostCenterInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Utility Info
                    //    db.DraftUtilityInfos.RemoveRange(db.DraftUtilityInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //    //===Delete Existing Draft Agreement Info
                    //    db.DraftAgreementInfos.RemoveRange(db.DraftAgreementInfos.Where(x => x.AgreementSLNo == DraftAgreementSLNo));
                    //    db.SaveChanges();
                    //}
                    //==
                    AlertMsg = "The modified agreement: " + AI.AgreementName + " has been created.";
                    return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }


        [HttpGet]
        public ActionResult RedirectEdit(int AgreementSLNo)
        {
            TempData.Remove("AgreementSLNo");
            TempData.Add("AgreementSLNo", AgreementSLNo);
            return RedirectToAction("Edit");
        }

        [HttpGet]
        public ActionResult Edit()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strAgreementSLNo = TempData["AgreementSLNo"];
                    if (strAgreementSLNo == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int AgreementSLNo = Convert.ToInt32(strAgreementSLNo);
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    DTOBasic DTOBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.URLPath = "AgreementInfo/RedirectAgreementIndex?ViewID=2";
                    //==Water Bill Type meter reading
                    IList<SelectListItem> WaterBillTypeList = new List<SelectListItem>();
                    WaterBillTypeList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Meter Reading", Value = "Meter Reading" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Fixed Value", Value = "Fixed Value" });
                    SelectList WaterBillTypeStatus = new SelectList(WaterBillTypeList, "Value", "Text");
                    ViewBag.WaterBillTypeList = WaterBillTypeStatus;
                    //======Lookup
                    var lstLookup = db.Lookups
                        .Where(x => (x.GroupName == "Cost Center" || x.GroupName == "SOL" || x.GroupName == "Bank" || x.GroupName == "Regional Office"
                        || x.GroupName == "Division" || x.GroupName == "District" || x.GroupName == "Upazila" || x.GroupName == "Thana"
                        || x.GroupName == "Premises Type for Accounts" || x.GroupName == "Sub Premises Type" || x.GroupName == "Payment Method") &&
                        x.Status == DTOBasic.active && x.IsDeleted == false).ToList();
                    //==Bank Info
                    ViewBag.BankInfoList = lstLookup.Where(x => x.GroupName == "Bank").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==CC Info
                    ViewBag.CCInfoList = lstLookup.Where(x => x.GroupName == "Cost Center").Select(x => new { CCSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==SOL Info
                    ViewBag.SOLInfoList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { SOLSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premise Type
                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();
                    //==Area Status
                    IList<SelectListItem> AreaStatusList = new List<SelectListItem>();
                    AreaStatusList.Add(new SelectListItem { Text = "Select Area Status", Value = "0" });
                    AreaStatusList.Add(new SelectListItem { Text = "Urban", Value = "Urban" });
                    AreaStatusList.Add(new SelectListItem { Text = "Rural", Value = "Rural" });
                    SelectList AreaStatus = new SelectList(AreaStatusList, "Value", "Text");
                    ViewBag.AreaStatusList = AreaStatus;
                    //==Regional Office 
                    ViewBag.RegionalOfficeList = lstLookup.Where(x => x.GroupName == "Regional Office").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Primary SOL 
                    ViewBag.PrimarySOLList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Attached Control
                    ViewBag.AttachedControlList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Division
                    ViewBag.DivisionList = lstLookup.Where(x => x.GroupName == "Division").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==District
                    ViewBag.DistrictList = lstLookup.Where(x => x.GroupName == "District").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Upazila
                    ViewBag.UpazilaList = lstLookup.Where(x => x.GroupName == "Upazila").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Thana
                    ViewBag.ThanaList = lstLookup.Where(x => x.GroupName == "Thana").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premises Type for Accounts
                    ViewBag.PremisesTypeforAccountsList = lstLookup.Where(x => x.GroupName == "Premises Type for Accounts").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Provided By
                    IList<SelectListItem> ProvidedByList = new List<SelectListItem>();
                    ProvidedByList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    ProvidedByList.Add(new SelectListItem { Text = "Company", Value = "1" });
                    ProvidedByList.Add(new SelectListItem { Text = "Landlord", Value = "2" });
                    ProvidedByList.Add(new SelectListItem { Text = "Others", Value = "3" });
                    SelectList ProvidedByStatus = new SelectList(ProvidedByList, "Value", "Text");
                    ViewBag.ProvidedByList = ProvidedByStatus;
                    //==Yes No
                    IList<SelectListItem> YesNoList = new List<SelectListItem>();
                    YesNoList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    YesNoList.Add(new SelectListItem { Text = "Yes", Value = "1" });
                    YesNoList.Add(new SelectListItem { Text = "No", Value = "2" });
                    SelectList YesNoStatus = new SelectList(YesNoList, "Value", "Text");
                    ViewBag.YesNoList = YesNoStatus;
                    //==Sub Premises Type
                    ViewBag.SubPremisesTypeList = lstLookup.Where(x => x.GroupName == "Sub Premises Type").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Payment Method
                    ViewBag.PaymentMethodList = lstLookup.Where(x => x.GroupName == "Payment Method").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Calculation Method
                    IList<SelectListItem> CalculationMethodList = new List<SelectListItem>();
                    CalculationMethodList.Add(new SelectListItem { Text = "Current Month", Value = "Current Month" });
                    CalculationMethodList.Add(new SelectListItem { Text = "Following Month", Value = "Following Month" });
                    SelectList CalculationMethod = new SelectList(CalculationMethodList, "Value", "Text");
                    ViewBag.CalculationMethodList = CalculationMethod;
                    //======Lookup
                    //==UOM
                    IList<SelectListItem> UOMList = new List<SelectListItem>();
                    UOMList.Add(new SelectListItem { Text = "Select Unit of Measurement", Value = "0" });
                    UOMList.Add(new SelectListItem { Text = "Square Feet", Value = "1" });
                    UOMList.Add(new SelectListItem { Text = "Square Meter", Value = "2" });
                    SelectList UOM = new SelectList(UOMList, "Value", "Text");
                    ViewBag.UOMList = UOM;
                    //==Tax Type
                    IList<SelectListItem> TaxTypeList = new List<SelectListItem>();
                    //TaxTypeList.Add(new SelectListItem { Text = "Select Tax Type", Value = "0" });
                    TaxTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList TaxType = new SelectList(TaxTypeList, "Value", "Text");
                    ViewBag.TaxTypeList = TaxType;
                    //==Vat Type
                    IList<SelectListItem> VatTypeList = new List<SelectListItem>();
                    //VatTypeList.Add(new SelectListItem { Text = "Select VAT Type", Value = "0" });
                    VatTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    VatTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    VatTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList VatType = new SelectList(VatTypeList, "Value", "Text");
                    ViewBag.VatTypeList = VatType;
                    //==Mode of Payment
                    IList<SelectListItem> ModeOfPaymentList = new List<SelectListItem>();
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Select Mode of Payment", Value = "0" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Account Transfer", Value = "Account Transfer" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "RTGS", Value = "RTGS" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "EFTN", Value = "EFTN" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Pay Order", Value = "Pay Order" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Cash", Value = "Cash" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "IBB Payment", Value = "IBB Payment" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Brokerage", Value = "City Brokerage" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Capital", Value = "City Capital" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Others", Value = "Others" });
                    SelectList ModeOfPayment = new SelectList(ModeOfPaymentList, "Value", "Text");
                    ViewBag.ModeOfPaymentList = ModeOfPayment;
                    //==Advance No
                    IList<SelectListItem> AdvanceNoList = new List<SelectListItem>();
                    AdvanceNoList.Add(new SelectListItem { Text = "Select Advance No", Value = "0" });
                    AdvanceNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    AdvanceNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    AdvanceNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    AdvanceNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    AdvanceNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    AdvanceNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    AdvanceNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    AdvanceNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    AdvanceNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    AdvanceNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList AdvanceNo = new SelectList(AdvanceNoList, "Value", "Text");
                    ViewBag.AdvanceNoList = AdvanceNo;
                    //==Review No
                    IList<SelectListItem> ReviewNoList = new List<SelectListItem>();
                    ReviewNoList.Add(new SelectListItem { Text = "Select Enhancement No", Value = "0" });
                    ReviewNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    ReviewNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    ReviewNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    ReviewNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    ReviewNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    ReviewNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    ReviewNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    ReviewNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    ReviewNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    ReviewNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList ReviewNo = new SelectList(ReviewNoList, "Value", "Text");
                    ViewBag.ReviewNoList = ReviewNo;
                    //==Space Info
                    List<RMS.Models.SpaceInfoDTO> lstSpace = new List<RMS.Models.SpaceInfoDTO>();
                    var querySpace = from SP in db.SpaceInfos
                                     where SP.AgreementSLNo == AgreementSLNo
                                     orderby SP.SpaceSLNo ascending
                                     select new
                                     {
                                         SP.SpaceType,
                                         SP.SpaceArea,
                                         SP.SpaceRate,
                                         SP.SpaceRent,
                                         SP.SpaceTotalAdvance,
                                         SP.SpaceTotalAdjustment,
                                         SP.SpaceRemarks,
                                     };
                    lstSpace = querySpace.AsEnumerable().Select(x => new RMS.Models.SpaceInfoDTO
                    {
                        SpaceType = x.SpaceType,
                        SpaceArea = x.SpaceArea,
                        SpaceRate = x.SpaceRate,
                        SpaceRent = x.SpaceRent,
                        SpaceTotalAdvance = x.SpaceTotalAdvance,
                        SpaceTotalAdjustment = x.SpaceTotalAdjustment,
                        SpaceRemarks = x.SpaceRemarks,
                    }).ToList();
                    if (lstSpace.Count > 0)
                    {
                        for (int i = 0; i < lstSpace.Count; i++)
                        {
                            lstSpace[i].SpaceRowNumber = "_" + (i + 1).ToString();
                            lstSpace[i].SpaceftrCount = lstSpace.Count;
                        }
                    }
                    ViewBag.lstSpace = lstSpace;
                    //==Advance Info
                    List<RMS.Models.AdvanceInfoDTO> lstAdvance = new List<RMS.Models.AdvanceInfoDTO>();
                    var queryAdvance = from Adv in db.AdvanceInfos
                                       where Adv.AgreementSLNo == AgreementSLNo
                                       orderby Adv.AdvanceSLNo ascending
                                       select new
                                       {
                                           Adv.AdvanceNo,
                                           Adv.AdvanceSlotPeriod,
                                           Adv.StartDate,
                                           Adv.EndDate,
                                           Adv.AdvanceNote,
                                           Adv.AdvanceSlotAmount,
                                       };
                    lstAdvance = queryAdvance.AsEnumerable().Select(x => new RMS.Models.AdvanceInfoDTO
                    {
                        AdvanceNo = x.AdvanceNo,
                        AdvanceSlotPeriod = x.AdvanceSlotPeriod,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        AdvanceNote = x.AdvanceNote,
                        AdvanceSlotAmount = x.AdvanceSlotAmount,
                    }).ToList();
                    if (lstAdvance.Count > 0)
                    {
                        for (int i = 0; i < lstAdvance.Count; i++)
                        {
                            lstAdvance[i].AdvanceRowNumber = "_" + (i + 1).ToString();
                            lstAdvance[i].AdvanceftrCount = lstAdvance.Count;
                        }
                    }
                    ViewBag.lstAdvance = lstAdvance;
                    //==Review Info
                    List<RMS.Models.ReviewInfoDTO> lstReview = new List<RMS.Models.ReviewInfoDTO>();
                    var queryReview = from RI in db.ReviewInfos
                                      where RI.AgreementSLNo == AgreementSLNo
                                      orderby RI.ReviewSLNo ascending
                                      select new
                                      {
                                          RI.ReviewNo,
                                          RI.StartDate,
                                          RI.EndDate,
                                          RI.Period,
                                          RI.IncreaseAmount,
                                          RI.IncreasePercentage,
                                          RI.ReviewNote,
                                      };
                    lstReview = queryReview.AsEnumerable().Select(x => new RMS.Models.ReviewInfoDTO
                    {
                        ReviewNo = x.ReviewNo,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        Period = x.Period,
                        IncreaseAmount = x.IncreaseAmount,
                        IncreasePercentage = x.IncreasePercentage,
                        ReviewNote = x.ReviewNote,
                    }).ToList();
                    if (lstReview.Count > 0)
                    {
                        for (int i = 0; i < lstReview.Count; i++)
                        {
                            lstReview[i].ReviewRowNumber = "_" + (i + 1).ToString();
                            lstReview[i].ReviewftrCount = lstReview.Count;
                        }
                    }
                    ViewBag.lstReview = lstReview;
                    //==Landlord Information
                    List<RMS.Models.LandlordInfoDTO> lstLandlord = new List<RMS.Models.LandlordInfoDTO>();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    var queryLandlord = from LI in db.LandlordInfos
                                        where LI.AgreementSLNo == AgreementSLNo && LI.IsOld == false
                                        orderby LI.LandlordSLNo ascending
                                        select new
                                        {
                                            //==Landlord Info
                                            LI.LandlordSLNo,
                                            LI.AgreementSLNo,
                                            LI.VendorCode,
                                            LI.LandlordName,
                                            LI.ModeOfPayment,
                                            LI.AdvancePC,
                                            LI.AdvanceAmount,
                                            LI.AdvanceAdjustmentPC,
                                            LI.AdvanceAdjustmentAmount,
                                            LI.TaxPC,
                                            LI.TaxAmount,
                                            LI.VATPC,
                                            LI.VATAmount,
                                            LI.RentPC,
                                            LI.RentAmount,
                                            LI.LLAddress,
                                            LI.LLContactNo,
                                            LI.LLEmail,
                                            LI.ACNo,
                                            LI.BankName,
                                            LI.BranchName,
                                            LI.RoutingNo,
                                        };
                    lstLandlord = queryLandlord.AsEnumerable().Select(x => new RMS.Models.LandlordInfoDTO
                    {
                        LandlordSLNo = x.AgreementSLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        VendorCode = x.VendorCode,
                        LandlordName = x.LandlordName,
                        ModeOfPayment = x.ModeOfPayment,
                        VendorAdvancePC = x.AdvancePC,
                        VendorAdvanceAmount = x.AdvanceAmount,
                        VendorAdvanceAdjustmentPC = x.AdvanceAdjustmentPC,
                        VendorAdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        VendorTaxPC = x.TaxPC,
                        VendorTaxAmount = x.TaxAmount,
                        VendorVATPC = x.VATPC,
                        VendorVATAmount = x.VATAmount,
                        VendorRentPC = x.RentPC,
                        VendorRentAmount = x.RentAmount,
                        LLAddress = x.LLAddress,
                        LLContactNo = x.LLContactNo,
                        LLEmail = x.LLEmail,
                        ACNo = x.ACNo,
                        BankName = x.BankName,
                        BranchName = x.BranchName,
                        RoutingNo = x.RoutingNo,
                    }).ToList();
                    if (lstLandlord.Count > 0)
                    {
                        for (int i = 0; i < lstLandlord.Count; i++)
                        {
                            lstLandlord[i].LIRowNumber = "_" + (i + 1).ToString();
                            lstLandlord[i].LIftrCount = lstLandlord.Count;
                            if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.RTGS) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.EFTN) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Cash) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Others) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstLandlord = lstLandlord;
                    //==Cost Allocation
                    List<RMS.Models.CostCenterInfoDTO> lstCC = new List<RMS.Models.CostCenterInfoDTO>();
                    var queryCC = from CC in db.CostCenterInfos
                                  where CC.AgreementSLNo == AgreementSLNo && CC.IsOld == false
                                  orderby CC.CCSLNo ascending
                                  select new
                                  {
                                      CC.CCCode,
                                      CC.CCName,
                                      CC.SOLCode,
                                      CC.SOLName,
                                      CC.CCShareAllotment,
                                      CC.CCText,
                                  };
                    lstCC = queryCC.AsEnumerable().Select(x => new RMS.Models.CostCenterInfoDTO
                    {
                        CCCode = x.CCCode,
                        CCName = x.CCName,
                        SOLCode = x.SOLCode,
                        SOLName = x.SOLName,
                        CCShareAllotment = x.CCShareAllotment,
                        CCText = x.CCText,
                    }).ToList();
                    if (lstCC.Count > 0)
                    {
                        for (int i = 0; i < lstCC.Count; i++)
                        {
                            lstCC[i].CCRowNumber = "_" + (i + 1).ToString();
                            lstCC[i].CCftrCount = lstCC.Count;
                        }
                    }
                    ViewBag.lstCC = lstCC;
                    //==Utility Information
                    List<RMS.Models.UtilityInfoDTO> lstUtility = new List<RMS.Models.UtilityInfoDTO>();
                    var queryUtility = from UI in db.UtilityInfos
                                       where UI.AgreementSLNo == AgreementSLNo && UI.IsOld == false
                                       orderby UI.UtilitySLNo ascending
                                       select new
                                       {
                                           //==Landlord Info
                                           UI.UtilitySLNo,
                                           UI.AgreementSLNo,
                                           UI.UtilityVendorCode,
                                           UI.UtilityLandlordName,
                                           UI.UtilityModeOfPayment,
                                           UI.ServiceChargePC,
                                           UI.ServiceChargeAmount,
                                           UI.OnlineTowerPC,
                                           UI.OnlineTowerAmount,
                                           UI.GeneratorSpacePC,
                                           UI.GeneratorSpaceAmount,
                                           UI.CarParkingPC,
                                           UI.CarParkingAmount,
                                           UI.TaxPC,
                                           UI.TaxAmount,
                                           UI.VATPC,
                                           UI.VATAmount,
                                           UI.UtilityAddress,
                                           UI.UtilityContactNo,
                                           UI.UtilityEmail,
                                           UI.UtilityACNo,
                                           UI.UtilityBankName,
                                           UI.UtilityBranchName,
                                           UI.UtilityRoutingNo,
                                       };
                    lstUtility = queryUtility.AsEnumerable().Select(x => new RMS.Models.UtilityInfoDTO
                    {
                        UtilitySLNo = x.UtilitySLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        UtilityVendorCode = x.UtilityVendorCode,
                        UtilityLandlordName = x.UtilityLandlordName,
                        UtilityModeOfPayment = x.UtilityModeOfPayment,
                        ServiceChargePC = x.ServiceChargePC,
                        ServiceChargeAmount = x.ServiceChargeAmount,
                        OnlineTowerPC = x.OnlineTowerPC,
                        OnlineTowerAmount = x.OnlineTowerAmount,
                        GeneratorSpacePC = x.GeneratorSpacePC,
                        GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                        CarParkingPC = x.CarParkingPC,
                        CarParkingAmount = x.CarParkingAmount,
                        UtilityTaxPC = x.TaxPC,
                        UtilityTaxAmount = x.TaxAmount,
                        UtilityVATPC = x.VATPC,
                        UtilityVATAmount = x.VATAmount,
                        UtilityAddress = x.UtilityAddress,
                        UtilityContactNo = x.UtilityContactNo,
                        UtilityEmail = x.UtilityEmail,
                        UtilityACNo = x.UtilityACNo,
                        UtilityBankName = x.UtilityBankName,
                        UtilityBranchName = x.UtilityBranchName,
                        UtilityRoutingNo = x.UtilityRoutingNo,
                    }).ToList();
                    if (lstUtility.Count > 0)
                    {
                        for (int i = 0; i < lstUtility.Count; i++)
                        {
                            lstUtility[i].UtilityRowNumber = "_" + (i + 1).ToString();
                            lstUtility[i].UtilityftrCount = lstUtility.Count;
                            if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.RTGS) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.EFTN) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Cash) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Others) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstUtility = lstUtility;
                    //==Attach Documents
                    List<RMS.Models.FileUploadInfoDTO> lstFU = new List<RMS.Models.FileUploadInfoDTO>();
                    var queryFU = from FU in db.FileUploadInfos
                                  where FU.AgreementSLNo == AgreementSLNo
                                  orderby FU.SLNo ascending
                                  select new
                                  {
                                      FU.SLNo,
                                      FU.FileName,
                                  };
                    lstFU = queryFU.AsEnumerable().Select(x => new RMS.Models.FileUploadInfoDTO
                    {
                        SLNo = x.SLNo,
                        FileName = x.FileName,
                    }).ToList();
                    if (lstFU.Count > 0)
                    {
                        for (int i = 0; i < lstFU.Count; i++)
                        {
                            lstFU[i].FURowNumber = "_" + (i + 1).ToString();
                            lstFU[i].FUftrCount = lstFU.Count;
                        }
                    }
                    ViewBag.lstFU = lstFU;
                    //==Agreement Info
                    List<RMS.Models.AgreementInfoDTO> lstAgreement = new List<RMS.Models.AgreementInfoDTO>();
                    var query = from AI in db.AgreementInfos
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                where AI.AgreementSLNo == AgreementSLNo
                                select new
                                {
                                    AI.AgreementSLNo,
                                    //==Basic Info
                                    AI.PremiseTypeSLNo,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.PremiseAddress,
                                    AI.ConcernBranch,
                                    AI.InspectorName,
                                    AI.InspectorContactNo,
                                    AI.ClusterGroup,
                                    //==Agreement Info
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.AgreementStartDate,
                                    AI.AgreementEndDate,
                                    AI.AgreementPeriod,
                                    AI.RenewalFrequency,
                                    AI.RentDueDay,
                                    AI.UOM,
                                    AI.TotalArea,
                                    AI.CostPerUnit,
                                    AI.TotalRentAmount,
                                    AI.SecurityDepositAmount,
                                    AI.AdvanceAmount,
                                    AI.AdvanceAdjustmentPeriod,
                                    AI.AdvanceAdjustmentAmount,
                                    AI.TaxPercentage,
                                    RentTaxAmount = AI.TaxAmount,
                                    AI.VATPercentage,
                                    RentVATAMount = AI.VATAmount,
                                    AI.ServiceCharge,
                                    AI.OnlineTower,
                                    AI.GeneratorSpace,
                                    AI.CarParking,
                                    AI.NetRentAmount,
                                    AI.AgreementStatus,
                                    AI.AgreementText,
                                    AI.Status,
                                    AI.UserSLNo,
                                    AI.EntryDate,
                                    AI.IsDeleted,
                                    S.StatusName,
                                    AI.ReviewFrequency,
                                    AI.ReviewPercentage,
                                    AI.TaxType,
                                    AI.VatType,
                                    //==Control Data
                                    AI.CashGLCode,
                                    AI.BankGLCode,
                                    AI.AdvanceGLCode,
                                    AI.AdvanceAdjustmentGLCode,
                                    AI.RentGLCode,
                                    AI.ServiceChargeGLCode,
                                    AI.TaxGLCode,
                                    AI.VATGLCode,
                                    AI.ProvisionGLTax,
                                    AI.ProvisionGLAP,
                                    AI.RTGSGL,
                                    AI.EFTNGL,
                                    AI.PayOrderGL,
                                    AI.IBBPaymentGL,
                                    AI.CityBrokerageGL,
                                    AI.CityCapitalGL,
                                    AI.OthersGL,
                                    //====
                                    AI.PremiseAddressBangla,
                                    AI.AreaStatus,
                                    AI.RegionalOffice,
                                    AI.PrimarySOL,
                                    AI.AttachedControl,
                                    AI.ControllerOfficeDistance,
                                    AI.RoutingNumber,
                                    AI.Division,
                                    AI.District,
                                    AI.Upazila,
                                    AI.Thana,
                                    AI.ThanaCode,
                                    AI.Pourasabha,
                                    AI.PourasabhaType,
                                    AI.UnionName,
                                    AI.WardNo,
                                    AI.PremisesTypeforAccounts,
                                    AI.ParentAgreementCode,
                                    AI.ElectricityLoad,
                                    AI.ElectricityProvidedBy,
                                    AI.AITBourneBy,
                                    AI.CommercialPermission,
                                    AI.BuildingPlan,
                                    AI.PremisesSituatedFloor,
                                    AI.BangladeshBankApproval,
                                    AI.BangladeshBankReference,
                                    AI.ITTowerRentClause,
                                    AI.TerminationClause,
                                    AI.TerminationNoticePeriod,
                                    AI.PremisesOpeningDate,
                                    AI.DocumentDate,
                                    AI.Remarks,
                                    AI.AgreementRemarks,
                                    AI.AdvanceRemarks,
                                    AI.ReviewRemarks,
                                    AI.LLRemarks,
                                    AI.CCRemarks,
                                    AI.UtilityRemarks,
                                    AI.ControlDataRemarks,
                                    //====
                                    AI.BorrowingRate,
                                    AI.PaymentMethod,
                                    AI.IsIFRSEnable,
                                    AI.CalculationMethod,
                                    AI.WithHoldingCode,
                                    AI.AdditionalExpense,
                                    AI.InitialDirectCost,
                                    AI.DismantlingCost,
                                    AI.CarParkingNo,
                                    AI.WaterBillType,
                                    AI.WaterBillAmount,
                                    AI.IFRSEffectiveDate,
                                    AI.CorporateTaxRate,
                                };
                    lstAgreement = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        //==Basic Info
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        ConcernBranch = x.ConcernBranch,
                        InspectorName = x.InspectorName,
                        InspectorContactNo = x.InspectorContactNo,
                        ClusterGroup = x.ClusterGroup,
                        //==Agreement Info
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        RenewalFrequency = x.RenewalFrequency,
                        RentDueDay = x.RentDueDay,
                        UOM = x.UOM,
                        TotalArea = x.TotalArea,
                        CostPerUnit = x.CostPerUnit,
                        RentAmount = x.TotalArea * x.CostPerUnit,
                        TotalRentAmount = x.TotalRentAmount,
                        SecurityDepositAmount = x.SecurityDepositAmount,
                        AdvanceAmount = x.AdvanceAmount,
                        AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                        AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        TaxPercentage = x.TaxPercentage,
                        TaxAmount = x.RentTaxAmount,
                        VATPercentage = x.VATPercentage,
                        VATAmount = x.RentVATAMount,
                        ServiceCharge = x.ServiceCharge,
                        OnlineTower = x.OnlineTower,
                        GeneratorSpace = x.GeneratorSpace,
                        CarParking = x.CarParking,
                        NetRentAmount = x.NetRentAmount,
                        AgreementStatus = x.AgreementStatus,
                        AgreementText = x.AgreementText,
                        Status = x.Status,
                        UserSLNo = x.UserSLNo,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        IsDeleted = x.IsDeleted,
                        StatusName = x.StatusName,
                        ReviewFrequency = x.ReviewFrequency,
                        ReviewPercentage = x.ReviewPercentage,
                        TaxType = x.TaxType,
                        xTaxType = x.TaxType,
                        VatType = x.VatType,
                        //==Control Data
                        CashGLCode = x.CashGLCode,
                        BankGLCode = x.BankGLCode,
                        AdvanceGLCode = x.AdvanceGLCode,
                        AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                        RentGLCode = x.RentGLCode,
                        ServiceChargeGLCode = x.ServiceChargeGLCode,
                        TaxGLCode = x.TaxGLCode,
                        VATGLCode = x.VATGLCode,
                        ProvisionGLTax = x.ProvisionGLTax,
                        ProvisionGLAP = x.ProvisionGLAP,
                        RTGSGL = x.RTGSGL,
                        EFTNGL = x.EFTNGL,
                        PayOrderGL = x.PayOrderGL,
                        IBBPaymentGL = x.IBBPaymentGL,
                        CityBrokerageGL = x.CityBrokerageGL,
                        CityCapitalGL = x.CityCapitalGL,
                        OthersGL = x.OthersGL,
                        SpaceftrCount = lstSpace.Count(),
                        RIftrCount = lstReview.Count(),
                        LIftrCount = lstLandlord.Count(),
                        CCftrCount = lstCC.Count(),
                        UIftrCount = lstUtility.Count(),
                        //======
                        PremiseAddressBangla = x.PremiseAddressBangla,
                        AreaStatus = x.AreaStatus,
                        RegionalOffice = x.RegionalOffice,
                        PrimarySOL = x.PrimarySOL,
                        AttachedControl = x.AttachedControl,
                        ControllerOfficeDistance = x.ControllerOfficeDistance,
                        RoutingNumber = x.RoutingNumber,
                        Division = x.Division,
                        District = x.District,
                        Upazila = x.Upazila,
                        Thana = x.Thana,
                        ThanaCode = x.ThanaCode,
                        Pourasabha = x.Pourasabha,
                        PourasabhaType = x.PourasabhaType,
                        UnionName = x.UnionName,
                        WardNo = x.WardNo,
                        PremisesTypeforAccounts = x.PremisesTypeforAccounts,
                        ParentAgreementCode = x.ParentAgreementCode,
                        ElectricityLoad = x.ElectricityLoad,
                        ElectricityProvidedBy = x.ElectricityProvidedBy,
                        AITBourneBy = x.AITBourneBy,
                        CommercialPermission = x.CommercialPermission,
                        BuildingPlan = x.BuildingPlan,
                        PremisesSituatedFloor = x.PremisesSituatedFloor,
                        BangladeshBankApproval = x.BangladeshBankApproval,
                        BangladeshBankReference = x.BangladeshBankReference,
                        ITTowerRentClause = x.ITTowerRentClause,
                        TerminationClause = x.TerminationClause,
                        TerminationNoticePeriod = x.TerminationNoticePeriod,
                        PremisesOpeningDate = x.PremisesOpeningDate?.ToString("dd/MM/yyyy"),
                        DocumentDate = x.DocumentDate?.ToString("dd/MM/yyyy"),
                        Remarks = x.Remarks,
                        AgreementRemarks = x.AgreementRemarks,
                        AdvanceRemarks = x.AdvanceRemarks,
                        ReviewRemarks = x.ReviewRemarks,
                        LLRemarks = x.LLRemarks,
                        CCRemarks = x.CCRemarks,
                        UtilityRemarks = x.UtilityRemarks,
                        ControlDataRemarks = x.ControlDataRemarks,
                        //======
                        BorrowingRate = x.BorrowingRate,
                        PaymentMethod = x.PaymentMethod,
                        IsIFRSEnable = x.IsIFRSEnable,
                        CalculationMethod = x.CalculationMethod,
                        WithHoldingCode = x.WithHoldingCode,
                        AdditionalExpense = x.AdditionalExpense,
                        InitialDirectCost = x.InitialDirectCost,
                        DismantlingCost = x.DismantlingCost,
                        CarParkingNo = x.CarParkingNo,
                        WaterBillType = x.WaterBillType,
                        WaterBillAmount = x.WaterBillAmount,
                        IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        CorporateTaxRate = x.CorporateTaxRate,
                    }).ToList();
                    return View(AgreementInfoPath.Edit, lstAgreement);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectCopyProfile(int AgreementSLNo)
        {
            TempData.Remove("AgreementSLNo");
            TempData.Add("AgreementSLNo", AgreementSLNo);
            return RedirectToAction("CreateCopyProfile");
        }

        [HttpGet]
        public ActionResult CreateCopyProfile()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strAgreementSLNo = TempData["AgreementSLNo"];
                    if (strAgreementSLNo == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int AgreementSLNo = Convert.ToInt32(strAgreementSLNo);
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    DTOBasic DTOBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.URLPath = "AgreementInfo/RedirectAgreementIndex?ViewID=1";
                    //==Water Bill Type meter reading
                    IList<SelectListItem> WaterBillTypeList = new List<SelectListItem>();
                    WaterBillTypeList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Meter Reading", Value = "Meter Reading" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Fixed Value", Value = "Fixed Value" });
                    SelectList WaterBillTypeStatus = new SelectList(WaterBillTypeList, "Value", "Text");
                    ViewBag.WaterBillTypeList = WaterBillTypeStatus;
                    //======Lookup
                    var lstLookup = db.Lookups
                        .Where(x => (x.GroupName == "Cost Center" || x.GroupName == "SOL" || x.GroupName == "Bank" || x.GroupName == "Regional Office"
                        || x.GroupName == "Division" || x.GroupName == "District" || x.GroupName == "Upazila" || x.GroupName == "Thana"
                        || x.GroupName == "Premises Type for Accounts" || x.GroupName == "Sub Premises Type" || x.GroupName == "Payment Method") &&
                        x.Status == DTOBasic.active && x.IsDeleted == false).ToList();
                    //==Bank Info
                    ViewBag.BankInfoList = lstLookup.Where(x => x.GroupName == "Bank").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==CC Info
                    ViewBag.CCInfoList = lstLookup.Where(x => x.GroupName == "Cost Center").Select(x => new { CCSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==SOL Info
                    ViewBag.SOLInfoList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { SOLSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premise Type
                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();
                    //==Area Status
                    IList<SelectListItem> AreaStatusList = new List<SelectListItem>();
                    AreaStatusList.Add(new SelectListItem { Text = "Select Area Status", Value = "0" });
                    AreaStatusList.Add(new SelectListItem { Text = "Urban", Value = "Urban" });
                    AreaStatusList.Add(new SelectListItem { Text = "Rural", Value = "Rural" });
                    SelectList AreaStatus = new SelectList(AreaStatusList, "Value", "Text");
                    ViewBag.AreaStatusList = AreaStatus;
                    //==Regional Office 
                    ViewBag.RegionalOfficeList = lstLookup.Where(x => x.GroupName == "Regional Office").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Primary SOL 
                    ViewBag.PrimarySOLList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Attached Control
                    ViewBag.AttachedControlList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Division
                    ViewBag.DivisionList = lstLookup.Where(x => x.GroupName == "Division").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==District
                    ViewBag.DistrictList = lstLookup.Where(x => x.GroupName == "District").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Upazila
                    ViewBag.UpazilaList = lstLookup.Where(x => x.GroupName == "Upazila").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Thana
                    ViewBag.ThanaList = lstLookup.Where(x => x.GroupName == "Thana").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premises Type for Accounts
                    ViewBag.PremisesTypeforAccountsList = lstLookup.Where(x => x.GroupName == "Premises Type for Accounts").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Provided By
                    IList<SelectListItem> ProvidedByList = new List<SelectListItem>();
                    ProvidedByList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    ProvidedByList.Add(new SelectListItem { Text = "Company", Value = "1" });
                    ProvidedByList.Add(new SelectListItem { Text = "Landlord", Value = "2" });
                    ProvidedByList.Add(new SelectListItem { Text = "Others", Value = "3" });
                    SelectList ProvidedByStatus = new SelectList(ProvidedByList, "Value", "Text");
                    ViewBag.ProvidedByList = ProvidedByStatus;
                    //==Yes No
                    IList<SelectListItem> YesNoList = new List<SelectListItem>();
                    YesNoList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    YesNoList.Add(new SelectListItem { Text = "Yes", Value = "1" });
                    YesNoList.Add(new SelectListItem { Text = "No", Value = "2" });
                    SelectList YesNoStatus = new SelectList(YesNoList, "Value", "Text");
                    ViewBag.YesNoList = YesNoStatus;
                    //==Sub Premises Type
                    ViewBag.SubPremisesTypeList = lstLookup.Where(x => x.GroupName == "Sub Premises Type").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Payment Method
                    ViewBag.PaymentMethodList = lstLookup.Where(x => x.GroupName == "Payment Method").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Calculation Method
                    IList<SelectListItem> CalculationMethodList = new List<SelectListItem>();
                    CalculationMethodList.Add(new SelectListItem { Text = "Current Month", Value = "Current Month" });
                    CalculationMethodList.Add(new SelectListItem { Text = "Following Month", Value = "Following Month" });
                    SelectList CalculationMethod = new SelectList(CalculationMethodList, "Value", "Text");
                    ViewBag.CalculationMethodList = CalculationMethod;
                    //======Lookup
                    //==UOM
                    IList<SelectListItem> UOMList = new List<SelectListItem>();
                    UOMList.Add(new SelectListItem { Text = "Select Unit of Measurement", Value = "0" });
                    UOMList.Add(new SelectListItem { Text = "Square Feet", Value = "1" });
                    UOMList.Add(new SelectListItem { Text = "Square Meter", Value = "2" });
                    SelectList UOM = new SelectList(UOMList, "Value", "Text");
                    ViewBag.UOMList = UOM;
                    //==Tax Type
                    IList<SelectListItem> TaxTypeList = new List<SelectListItem>();
                    //TaxTypeList.Add(new SelectListItem { Text = "Select Tax Type", Value = "0" });
                    TaxTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList TaxType = new SelectList(TaxTypeList, "Value", "Text");
                    ViewBag.TaxTypeList = TaxType;
                    //==Vat Type
                    IList<SelectListItem> VatTypeList = new List<SelectListItem>();
                    //VatTypeList.Add(new SelectListItem { Text = "Select VAT Type", Value = "0" });
                    VatTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    VatTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    VatTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList VatType = new SelectList(VatTypeList, "Value", "Text");
                    ViewBag.VatTypeList = VatType;
                    //==Mode of Payment
                    IList<SelectListItem> ModeOfPaymentList = new List<SelectListItem>();
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Select Mode of Payment", Value = "0" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Account Transfer", Value = "Account Transfer" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "RTGS", Value = "RTGS" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "EFTN", Value = "EFTN" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Pay Order", Value = "Pay Order" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Cash", Value = "Cash" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "IBB Payment", Value = "IBB Payment" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Brokerage", Value = "City Brokerage" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Capital", Value = "City Capital" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Others", Value = "Others" });
                    SelectList ModeOfPayment = new SelectList(ModeOfPaymentList, "Value", "Text");
                    ViewBag.ModeOfPaymentList = ModeOfPayment;
                    //==Advance No
                    IList<SelectListItem> AdvanceNoList = new List<SelectListItem>();
                    AdvanceNoList.Add(new SelectListItem { Text = "Select Advance No", Value = "0" });
                    AdvanceNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    AdvanceNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    AdvanceNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    AdvanceNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    AdvanceNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    AdvanceNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    AdvanceNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    AdvanceNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    AdvanceNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    AdvanceNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList AdvanceNo = new SelectList(AdvanceNoList, "Value", "Text");
                    ViewBag.AdvanceNoList = AdvanceNo;
                    //==Review No
                    IList<SelectListItem> ReviewNoList = new List<SelectListItem>();
                    ReviewNoList.Add(new SelectListItem { Text = "Select Enhancement No", Value = "0" });
                    ReviewNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    ReviewNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    ReviewNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    ReviewNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    ReviewNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    ReviewNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    ReviewNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    ReviewNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    ReviewNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    ReviewNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList ReviewNo = new SelectList(ReviewNoList, "Value", "Text");
                    ViewBag.ReviewNoList = ReviewNo;
                    //==Space Info
                    List<RMS.Models.SpaceInfoDTO> lstSpace = new List<RMS.Models.SpaceInfoDTO>();
                    var querySpace = from SP in db.SpaceInfos
                                     where SP.AgreementSLNo == AgreementSLNo
                                     orderby SP.SpaceSLNo ascending
                                     select new
                                     {
                                         SP.SpaceType,
                                         SP.SpaceArea,
                                         SP.SpaceRate,
                                         SP.SpaceRent,
                                         SP.SpaceTotalAdvance,
                                         SP.SpaceTotalAdjustment,
                                         SP.SpaceRemarks,
                                     };
                    lstSpace = querySpace.AsEnumerable().Select(x => new RMS.Models.SpaceInfoDTO
                    {
                        SpaceType = x.SpaceType,
                        SpaceArea = x.SpaceArea,
                        SpaceRate = x.SpaceRate,
                        SpaceRent = x.SpaceRent,
                        SpaceTotalAdvance = x.SpaceTotalAdvance,
                        SpaceTotalAdjustment = x.SpaceTotalAdjustment,
                        SpaceRemarks = x.SpaceRemarks,
                    }).ToList();
                    if (lstSpace.Count > 0)
                    {
                        for (int i = 0; i < lstSpace.Count; i++)
                        {
                            lstSpace[i].SpaceRowNumber = "_" + (i + 1).ToString();
                            lstSpace[i].SpaceftrCount = lstSpace.Count;
                        }
                    }
                    ViewBag.lstSpace = lstSpace;
                    //==Advance Info
                    List<RMS.Models.AdvanceInfoDTO> lstAdvance = new List<RMS.Models.AdvanceInfoDTO>();
                    var queryAdvance = from Adv in db.AdvanceInfos
                                       where Adv.AgreementSLNo == AgreementSLNo
                                       orderby Adv.AdvanceSLNo ascending
                                       select new
                                       {
                                           Adv.AdvanceNo,
                                           Adv.AdvanceSlotPeriod,
                                           Adv.StartDate,
                                           Adv.EndDate,
                                           Adv.AdvanceNote,
                                           Adv.AdvanceSlotAmount,
                                       };
                    lstAdvance = queryAdvance.AsEnumerable().Select(x => new RMS.Models.AdvanceInfoDTO
                    {
                        AdvanceNo = x.AdvanceNo,
                        AdvanceSlotPeriod = x.AdvanceSlotPeriod,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        AdvanceNote = x.AdvanceNote,
                        AdvanceSlotAmount = x.AdvanceSlotAmount,
                    }).ToList();
                    if (lstAdvance.Count > 0)
                    {
                        for (int i = 0; i < lstAdvance.Count; i++)
                        {
                            lstAdvance[i].AdvanceRowNumber = "_" + (i + 1).ToString();
                            lstAdvance[i].AdvanceftrCount = lstAdvance.Count;
                        }
                    }
                    ViewBag.lstAdvance = lstAdvance;
                    //==Review Info
                    List<RMS.Models.ReviewInfoDTO> lstReview = new List<RMS.Models.ReviewInfoDTO>();
                    var queryReview = from RI in db.ReviewInfos
                                      where RI.AgreementSLNo == AgreementSLNo
                                      orderby RI.ReviewSLNo ascending
                                      select new
                                      {
                                          RI.ReviewNo,
                                          RI.StartDate,
                                          RI.EndDate,
                                          RI.Period,
                                          RI.IncreaseAmount,
                                          RI.IncreasePercentage,
                                          RI.ReviewNote,
                                      };
                    lstReview = queryReview.AsEnumerable().Select(x => new RMS.Models.ReviewInfoDTO
                    {
                        ReviewNo = x.ReviewNo,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        Period = x.Period,
                        IncreaseAmount = x.IncreaseAmount,
                        IncreasePercentage = x.IncreasePercentage,
                        ReviewNote = x.ReviewNote,
                    }).ToList();
                    if (lstReview.Count > 0)
                    {
                        for (int i = 0; i < lstReview.Count; i++)
                        {
                            lstReview[i].ReviewRowNumber = "_" + (i + 1).ToString();
                            lstReview[i].ReviewftrCount = lstReview.Count;
                        }
                    }
                    ViewBag.lstReview = lstReview;
                    //==Landlord Information
                    List<RMS.Models.LandlordInfoDTO> lstLandlord = new List<RMS.Models.LandlordInfoDTO>();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    var queryLandlord = from LI in db.LandlordInfos
                                        where LI.AgreementSLNo == AgreementSLNo && LI.IsOld == false
                                        orderby LI.LandlordSLNo ascending
                                        select new
                                        {
                                            //==Landlord Info
                                            LI.LandlordSLNo,
                                            LI.AgreementSLNo,
                                            LI.VendorCode,
                                            LI.LandlordName,
                                            LI.ModeOfPayment,
                                            LI.AdvancePC,
                                            LI.AdvanceAmount,
                                            LI.AdvanceAdjustmentPC,
                                            LI.AdvanceAdjustmentAmount,
                                            LI.TaxPC,
                                            LI.TaxAmount,
                                            LI.VATPC,
                                            LI.VATAmount,
                                            LI.RentPC,
                                            LI.RentAmount,
                                            LI.LLAddress,
                                            LI.LLContactNo,
                                            LI.LLEmail,
                                            LI.ACNo,
                                            LI.BankName,
                                            LI.BranchName,
                                            LI.RoutingNo,
                                        };
                    lstLandlord = queryLandlord.AsEnumerable().Select(x => new RMS.Models.LandlordInfoDTO
                    {
                        LandlordSLNo = x.AgreementSLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        VendorCode = x.VendorCode,
                        LandlordName = x.LandlordName,
                        ModeOfPayment = x.ModeOfPayment,
                        VendorAdvancePC = x.AdvancePC,
                        VendorAdvanceAmount = x.AdvanceAmount,
                        VendorAdvanceAdjustmentPC = x.AdvanceAdjustmentPC,
                        VendorAdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        VendorTaxPC = x.TaxPC,
                        VendorTaxAmount = x.TaxAmount,
                        VendorVATPC = x.VATPC,
                        VendorVATAmount = x.VATAmount,
                        VendorRentPC = x.RentPC,
                        VendorRentAmount = x.RentAmount,
                        LLAddress = x.LLAddress,
                        LLContactNo = x.LLContactNo,
                        LLEmail = x.LLEmail,
                        ACNo = x.ACNo,
                        BankName = x.BankName,
                        BranchName = x.BranchName,
                        RoutingNo = x.RoutingNo,
                    }).ToList();
                    if (lstLandlord.Count > 0)
                    {
                        for (int i = 0; i < lstLandlord.Count; i++)
                        {
                            lstLandlord[i].LIRowNumber = "_" + (i + 1).ToString();
                            lstLandlord[i].LIftrCount = lstLandlord.Count;
                            if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.RTGS) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.EFTN) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Cash) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Others) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstLandlord = lstLandlord;
                    //==Cost Allocation
                    List<RMS.Models.CostCenterInfoDTO> lstCC = new List<RMS.Models.CostCenterInfoDTO>();
                    var queryCC = from CC in db.CostCenterInfos
                                  where CC.AgreementSLNo == AgreementSLNo && CC.IsOld == false
                                  orderby CC.CCSLNo ascending
                                  select new
                                  {
                                      CC.CCCode,
                                      CC.CCName,
                                      CC.SOLCode,
                                      CC.SOLName,
                                      CC.CCShareAllotment,
                                      CC.CCText,
                                  };
                    lstCC = queryCC.AsEnumerable().Select(x => new RMS.Models.CostCenterInfoDTO
                    {
                        CCCode = x.CCCode,
                        CCName = x.CCName,
                        SOLCode = x.SOLCode,
                        SOLName = x.SOLName,
                        CCShareAllotment = x.CCShareAllotment,
                        CCText = x.CCText,
                    }).ToList();
                    if (lstCC.Count > 0)
                    {
                        for (int i = 0; i < lstCC.Count; i++)
                        {
                            lstCC[i].CCRowNumber = "_" + (i + 1).ToString();
                            lstCC[i].CCftrCount = lstCC.Count;
                        }
                    }
                    ViewBag.lstCC = lstCC;
                    //==Utility Information
                    List<RMS.Models.UtilityInfoDTO> lstUtility = new List<RMS.Models.UtilityInfoDTO>();
                    var queryUtility = from UI in db.UtilityInfos
                                       where UI.AgreementSLNo == AgreementSLNo && UI.IsOld == false
                                       orderby UI.UtilitySLNo ascending
                                       select new
                                       {
                                           //==Landlord Info
                                           UI.UtilitySLNo,
                                           UI.AgreementSLNo,
                                           UI.UtilityVendorCode,
                                           UI.UtilityLandlordName,
                                           UI.UtilityModeOfPayment,
                                           UI.ServiceChargePC,
                                           UI.ServiceChargeAmount,
                                           UI.OnlineTowerPC,
                                           UI.OnlineTowerAmount,
                                           UI.GeneratorSpacePC,
                                           UI.GeneratorSpaceAmount,
                                           UI.CarParkingPC,
                                           UI.CarParkingAmount,
                                           UI.TaxPC,
                                           UI.TaxAmount,
                                           UI.VATPC,
                                           UI.VATAmount,
                                           UI.UtilityAddress,
                                           UI.UtilityContactNo,
                                           UI.UtilityEmail,
                                           UI.UtilityACNo,
                                           UI.UtilityBankName,
                                           UI.UtilityBranchName,
                                           UI.UtilityRoutingNo,
                                       };
                    lstUtility = queryUtility.AsEnumerable().Select(x => new RMS.Models.UtilityInfoDTO
                    {
                        UtilitySLNo = x.UtilitySLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        UtilityVendorCode = x.UtilityVendorCode,
                        UtilityLandlordName = x.UtilityLandlordName,
                        UtilityModeOfPayment = x.UtilityModeOfPayment,
                        ServiceChargePC = x.ServiceChargePC,
                        ServiceChargeAmount = x.ServiceChargeAmount,
                        OnlineTowerPC = x.OnlineTowerPC,
                        OnlineTowerAmount = x.OnlineTowerAmount,
                        GeneratorSpacePC = x.GeneratorSpacePC,
                        GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                        CarParkingPC = x.CarParkingPC,
                        CarParkingAmount = x.CarParkingAmount,
                        UtilityTaxPC = x.TaxPC,
                        UtilityTaxAmount = x.TaxAmount,
                        UtilityVATPC = x.VATPC,
                        UtilityVATAmount = x.VATAmount,
                        UtilityAddress = x.UtilityAddress,
                        UtilityContactNo = x.UtilityContactNo,
                        UtilityEmail = x.UtilityEmail,
                        UtilityACNo = x.UtilityACNo,
                        UtilityBankName = x.UtilityBankName,
                        UtilityBranchName = x.UtilityBranchName,
                        UtilityRoutingNo = x.UtilityRoutingNo,
                    }).ToList();
                    if (lstUtility.Count > 0)
                    {
                        for (int i = 0; i < lstUtility.Count; i++)
                        {
                            lstUtility[i].UtilityRowNumber = "_" + (i + 1).ToString();
                            lstUtility[i].UtilityftrCount = lstUtility.Count;
                            if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.RTGS) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.EFTN) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Cash) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Others) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstUtility = lstUtility;
                    //==Attach Documents
                    List<RMS.Models.FileUploadInfoDTO> lstFU = new List<RMS.Models.FileUploadInfoDTO>();
                    var queryFU = from FU in db.FileUploadInfos
                                  where FU.AgreementSLNo == AgreementSLNo
                                  orderby FU.SLNo ascending
                                  select new
                                  {
                                      FU.SLNo,
                                      FU.FileName,
                                  };
                    lstFU = queryFU.AsEnumerable().Select(x => new RMS.Models.FileUploadInfoDTO
                    {
                        SLNo = x.SLNo,
                        FileName = x.FileName,
                    }).ToList();
                    if (lstFU.Count > 0)
                    {
                        for (int i = 0; i < lstFU.Count; i++)
                        {
                            lstFU[i].FURowNumber = "_" + (i + 1).ToString();
                            lstFU[i].FUftrCount = lstFU.Count;
                        }
                    }
                    ViewBag.lstFU = lstFU;
                    //==Agreement Info
                    List<RMS.Models.AgreementInfoDTO> lstAgreement = new List<RMS.Models.AgreementInfoDTO>();
                    var query = from AI in db.AgreementInfos
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                where AI.AgreementSLNo == AgreementSLNo
                                select new
                                {
                                    AI.AgreementSLNo,
                                    //==Basic Info
                                    AI.PremiseTypeSLNo,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.PremiseAddress,
                                    AI.ConcernBranch,
                                    AI.InspectorName,
                                    AI.InspectorContactNo,
                                    AI.ClusterGroup,
                                    //==Agreement Info
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.AgreementStartDate,
                                    AI.AgreementEndDate,
                                    AI.AgreementPeriod,
                                    AI.RenewalFrequency,
                                    AI.RentDueDay,
                                    AI.UOM,
                                    AI.TotalArea,
                                    AI.CostPerUnit,
                                    AI.TotalRentAmount,
                                    AI.SecurityDepositAmount,
                                    AI.AdvanceAmount,
                                    AI.AdvanceAdjustmentPeriod,
                                    AI.AdvanceAdjustmentAmount,
                                    AI.TaxPercentage,
                                    RentTaxAmount = AI.TaxAmount,
                                    AI.VATPercentage,
                                    RentVATAMount = AI.VATAmount,
                                    AI.ServiceCharge,
                                    AI.OnlineTower,
                                    AI.GeneratorSpace,
                                    AI.CarParking,
                                    AI.NetRentAmount,
                                    AI.AgreementStatus,
                                    AI.AgreementText,
                                    AI.Status,
                                    AI.UserSLNo,
                                    AI.EntryDate,
                                    AI.IsDeleted,
                                    S.StatusName,
                                    AI.ReviewFrequency,
                                    AI.ReviewPercentage,
                                    AI.TaxType,
                                    AI.VatType,
                                    //==Control Data
                                    AI.CashGLCode,
                                    AI.BankGLCode,
                                    AI.AdvanceGLCode,
                                    AI.AdvanceAdjustmentGLCode,
                                    AI.RentGLCode,
                                    AI.ServiceChargeGLCode,
                                    AI.TaxGLCode,
                                    AI.VATGLCode,
                                    AI.ProvisionGLTax,
                                    AI.ProvisionGLAP,
                                    AI.RTGSGL,
                                    AI.EFTNGL,
                                    AI.PayOrderGL,
                                    AI.IBBPaymentGL,
                                    AI.CityBrokerageGL,
                                    AI.CityCapitalGL,
                                    AI.OthersGL,
                                    //====
                                    AI.PremiseAddressBangla,
                                    AI.AreaStatus,
                                    AI.RegionalOffice,
                                    AI.PrimarySOL,
                                    AI.AttachedControl,
                                    AI.ControllerOfficeDistance,
                                    AI.RoutingNumber,
                                    AI.Division,
                                    AI.District,
                                    AI.Upazila,
                                    AI.Thana,
                                    AI.ThanaCode,
                                    AI.Pourasabha,
                                    AI.PourasabhaType,
                                    AI.UnionName,
                                    AI.WardNo,
                                    AI.PremisesTypeforAccounts,
                                    AI.ParentAgreementCode,
                                    AI.ElectricityLoad,
                                    AI.ElectricityProvidedBy,
                                    AI.AITBourneBy,
                                    AI.CommercialPermission,
                                    AI.BuildingPlan,
                                    AI.PremisesSituatedFloor,
                                    AI.BangladeshBankApproval,
                                    AI.BangladeshBankReference,
                                    AI.ITTowerRentClause,
                                    AI.TerminationClause,
                                    AI.TerminationNoticePeriod,
                                    AI.PremisesOpeningDate,
                                    AI.DocumentDate,
                                    AI.Remarks,
                                    AI.AgreementRemarks,
                                    AI.AdvanceRemarks,
                                    AI.ReviewRemarks,
                                    AI.LLRemarks,
                                    AI.CCRemarks,
                                    AI.UtilityRemarks,
                                    AI.ControlDataRemarks,
                                    //====
                                    AI.BorrowingRate,
                                    AI.PaymentMethod,
                                    AI.IsIFRSEnable,
                                    AI.CalculationMethod,
                                    AI.WithHoldingCode,
                                    AI.AdditionalExpense,
                                    AI.InitialDirectCost,
                                    AI.DismantlingCost,
                                    AI.CarParkingNo,
                                    AI.WaterBillType,
                                    AI.WaterBillAmount,
                                    AI.IFRSEffectiveDate,
                                    AI.CorporateTaxRate,
                                };
                    lstAgreement = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        //==Basic Info
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        ConcernBranch = x.ConcernBranch,
                        InspectorName = x.InspectorName,
                        InspectorContactNo = x.InspectorContactNo,
                        ClusterGroup = x.ClusterGroup,
                        //==Agreement Info
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        RenewalFrequency = x.RenewalFrequency,
                        RentDueDay = x.RentDueDay,
                        UOM = x.UOM,
                        TotalArea = x.TotalArea,
                        CostPerUnit = x.CostPerUnit,
                        RentAmount = x.TotalArea * x.CostPerUnit,
                        TotalRentAmount = x.TotalRentAmount,
                        SecurityDepositAmount = x.SecurityDepositAmount,
                        AdvanceAmount = x.AdvanceAmount,
                        AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                        AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        TaxPercentage = x.TaxPercentage,
                        TaxAmount = x.RentTaxAmount,
                        VATPercentage = x.VATPercentage,
                        VATAmount = x.RentVATAMount,
                        ServiceCharge = x.ServiceCharge,
                        OnlineTower = x.OnlineTower,
                        GeneratorSpace = x.GeneratorSpace,
                        CarParking = x.CarParking,
                        NetRentAmount = x.NetRentAmount,
                        AgreementStatus = x.AgreementStatus,
                        AgreementText = x.AgreementText,
                        Status = x.Status,
                        UserSLNo = x.UserSLNo,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        IsDeleted = x.IsDeleted,
                        StatusName = x.StatusName,
                        ReviewFrequency = x.ReviewFrequency,
                        ReviewPercentage = x.ReviewPercentage,
                        TaxType = x.TaxType,
                        xTaxType = x.TaxType,
                        VatType = x.VatType,
                        //==Control Data
                        CashGLCode = x.CashGLCode,
                        BankGLCode = x.BankGLCode,
                        AdvanceGLCode = x.AdvanceGLCode,
                        AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                        RentGLCode = x.RentGLCode,
                        ServiceChargeGLCode = x.ServiceChargeGLCode,
                        TaxGLCode = x.TaxGLCode,
                        VATGLCode = x.VATGLCode,
                        ProvisionGLTax = x.ProvisionGLTax,
                        ProvisionGLAP = x.ProvisionGLAP,
                        RTGSGL = x.RTGSGL,
                        EFTNGL = x.EFTNGL,
                        PayOrderGL = x.PayOrderGL,
                        IBBPaymentGL = x.IBBPaymentGL,
                        CityBrokerageGL = x.CityBrokerageGL,
                        CityCapitalGL = x.CityCapitalGL,
                        OthersGL = x.OthersGL,
                        //======
                        PremiseAddressBangla = x.PremiseAddressBangla,
                        AreaStatus = x.AreaStatus,
                        RegionalOffice = x.RegionalOffice,
                        PrimarySOL = x.PrimarySOL,
                        AttachedControl = x.AttachedControl,
                        ControllerOfficeDistance = x.ControllerOfficeDistance,
                        RoutingNumber = x.RoutingNumber,
                        Division = x.Division,
                        District = x.District,
                        Upazila = x.Upazila,
                        Thana = x.Thana,
                        ThanaCode = x.ThanaCode,
                        Pourasabha = x.Pourasabha,
                        PourasabhaType = x.PourasabhaType,
                        UnionName = x.UnionName,
                        WardNo = x.WardNo,
                        PremisesTypeforAccounts = x.PremisesTypeforAccounts,
                        ParentAgreementCode = x.ParentAgreementCode,
                        ElectricityLoad = x.ElectricityLoad,
                        ElectricityProvidedBy = x.ElectricityProvidedBy,
                        AITBourneBy = x.AITBourneBy,
                        CommercialPermission = x.CommercialPermission,
                        BuildingPlan = x.BuildingPlan,
                        PremisesSituatedFloor = x.PremisesSituatedFloor,
                        BangladeshBankApproval = x.BangladeshBankApproval,
                        BangladeshBankReference = x.BangladeshBankReference,
                        ITTowerRentClause = x.ITTowerRentClause,
                        TerminationClause = x.TerminationClause,
                        TerminationNoticePeriod = x.TerminationNoticePeriod,
                        PremisesOpeningDate = x.PremisesOpeningDate?.ToString("dd/MM/yyyy"),
                        DocumentDate = x.DocumentDate?.ToString("dd/MM/yyyy"),
                        Remarks = x.Remarks,
                        AgreementRemarks = x.AgreementRemarks,
                        AdvanceRemarks = x.AdvanceRemarks,
                        ReviewRemarks = x.ReviewRemarks,
                        LLRemarks = x.LLRemarks,
                        CCRemarks = x.CCRemarks,
                        UtilityRemarks = x.UtilityRemarks,
                        ControlDataRemarks = x.ControlDataRemarks,
                        BorrowingRate = x.BorrowingRate,
                        PaymentMethod = x.PaymentMethod,
                        IsIFRSEnable = x.IsIFRSEnable,
                        CalculationMethod = x.CalculationMethod,
                        WithHoldingCode = x.WithHoldingCode,
                        AdditionalExpense = x.AdditionalExpense,
                        InitialDirectCost = x.InitialDirectCost,
                        DismantlingCost = x.DismantlingCost,
                        CarParkingNo = x.CarParkingNo,
                        WaterBillType = x.WaterBillType,
                        WaterBillAmount = x.WaterBillAmount,
                        IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        CorporateTaxRate = x.CorporateTaxRate,
                        //======
                        SpaceftrCount = lstSpace.Count(),
                        RIftrCount = lstReview.Count(),
                        LIftrCount = lstLandlord.Count(),
                        CCftrCount = lstCC.Count(),
                        UIftrCount = lstUtility.Count(),
                    }).ToList();
                    return View(AgreementInfoPath.CreateCopyProfile, lstAgreement);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectDraftEdit(int AgreementSLNo)
        {
            TempData.Remove("AgreementSLNo");
            TempData.Add("AgreementSLNo", AgreementSLNo);
            return RedirectToAction("DraftEdit");
        }

        [HttpGet]
        public ActionResult DraftEdit()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strAgreementSLNo = TempData["AgreementSLNo"];
                    if (strAgreementSLNo == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int AgreementSLNo = Convert.ToInt32(strAgreementSLNo);
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    DTOBasic DTOBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.URLPath = "AgreementInfo/RedirectAgreementIndex?ViewID=0";
                    //==Water Bill Type meter reading
                    IList<SelectListItem> WaterBillTypeList = new List<SelectListItem>();
                    WaterBillTypeList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Meter Reading", Value = "Meter Reading" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Fixed Value", Value = "Fixed Value" });
                    SelectList WaterBillTypeStatus = new SelectList(WaterBillTypeList, "Value", "Text");
                    ViewBag.WaterBillTypeList = WaterBillTypeStatus;
                    //======Lookup
                    var lstLookup = db.Lookups
                        .Where(x => (x.GroupName == "Cost Center" || x.GroupName == "SOL" || x.GroupName == "Bank" || x.GroupName == "Regional Office"
                        || x.GroupName == "Division" || x.GroupName == "District" || x.GroupName == "Upazila" || x.GroupName == "Thana"
                        || x.GroupName == "Premises Type for Accounts" || x.GroupName == "Sub Premises Type" || x.GroupName == "Payment Method") &&
                        x.Status == DTOBasic.active && x.IsDeleted == false).ToList();
                    //==Bank Info
                    ViewBag.BankInfoList = lstLookup.Where(x => x.GroupName == "Bank").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==CC Info
                    ViewBag.CCInfoList = lstLookup.Where(x => x.GroupName == "Cost Center").Select(x => new { CCSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==SOL Info
                    ViewBag.SOLInfoList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { SOLSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premise Type
                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();
                    //==Area Status
                    IList<SelectListItem> AreaStatusList = new List<SelectListItem>();
                    AreaStatusList.Add(new SelectListItem { Text = "Select Area Status", Value = "0" });
                    AreaStatusList.Add(new SelectListItem { Text = "Urban", Value = "Urban" });
                    AreaStatusList.Add(new SelectListItem { Text = "Rural", Value = "Rural" });
                    SelectList AreaStatus = new SelectList(AreaStatusList, "Value", "Text");
                    ViewBag.AreaStatusList = AreaStatus;
                    //==Regional Office 
                    ViewBag.RegionalOfficeList = lstLookup.Where(x => x.GroupName == "Regional Office").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Primary SOL 
                    ViewBag.PrimarySOLList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Attached Control
                    ViewBag.AttachedControlList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Division
                    ViewBag.DivisionList = lstLookup.Where(x => x.GroupName == "Division").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==District
                    ViewBag.DistrictList = lstLookup.Where(x => x.GroupName == "District").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Upazila
                    ViewBag.UpazilaList = lstLookup.Where(x => x.GroupName == "Upazila").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Thana
                    ViewBag.ThanaList = lstLookup.Where(x => x.GroupName == "Thana").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premises Type for Accounts
                    ViewBag.PremisesTypeforAccountsList = lstLookup.Where(x => x.GroupName == "Premises Type for Accounts").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Provided By
                    IList<SelectListItem> ProvidedByList = new List<SelectListItem>();
                    ProvidedByList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    ProvidedByList.Add(new SelectListItem { Text = "Company", Value = "1" });
                    ProvidedByList.Add(new SelectListItem { Text = "Landlord", Value = "2" });
                    ProvidedByList.Add(new SelectListItem { Text = "Others", Value = "3" });
                    SelectList ProvidedByStatus = new SelectList(ProvidedByList, "Value", "Text");
                    ViewBag.ProvidedByList = ProvidedByStatus;
                    //==Yes No
                    IList<SelectListItem> YesNoList = new List<SelectListItem>();
                    YesNoList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    YesNoList.Add(new SelectListItem { Text = "Yes", Value = "1" });
                    YesNoList.Add(new SelectListItem { Text = "No", Value = "2" });
                    SelectList YesNoStatus = new SelectList(YesNoList, "Value", "Text");
                    ViewBag.YesNoList = YesNoStatus;
                    //==Sub Premises Type
                    ViewBag.SubPremisesTypeList = lstLookup.Where(x => x.GroupName == "Sub Premises Type").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Payment Method
                    ViewBag.PaymentMethodList = lstLookup.Where(x => x.GroupName == "Payment Method").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Calculation Method
                    IList<SelectListItem> CalculationMethodList = new List<SelectListItem>();
                    CalculationMethodList.Add(new SelectListItem { Text = "Current Month", Value = "Current Month" });
                    CalculationMethodList.Add(new SelectListItem { Text = "Following Month", Value = "Following Month" });
                    SelectList CalculationMethod = new SelectList(CalculationMethodList, "Value", "Text");
                    ViewBag.CalculationMethodList = CalculationMethod;
                    //======Lookup
                    //==UOM
                    IList<SelectListItem> UOMList = new List<SelectListItem>();
                    UOMList.Add(new SelectListItem { Text = "Select Unit of Measurement", Value = "0" });
                    UOMList.Add(new SelectListItem { Text = "Square Feet", Value = "1" });
                    UOMList.Add(new SelectListItem { Text = "Square Meter", Value = "2" });
                    SelectList UOM = new SelectList(UOMList, "Value", "Text");
                    ViewBag.UOMList = UOM;
                    //==Tax Type
                    IList<SelectListItem> TaxTypeList = new List<SelectListItem>();
                    //TaxTypeList.Add(new SelectListItem { Text = "Select Tax Type", Value = "0" });
                    TaxTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList TaxType = new SelectList(TaxTypeList, "Value", "Text");
                    ViewBag.TaxTypeList = TaxType;
                    //==Vat Type
                    IList<SelectListItem> VatTypeList = new List<SelectListItem>();
                    //VatTypeList.Add(new SelectListItem { Text = "Select VAT Type", Value = "0" });
                    VatTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    VatTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    VatTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList VatType = new SelectList(VatTypeList, "Value", "Text");
                    ViewBag.VatTypeList = VatType;
                    //==Mode of Payment
                    IList<SelectListItem> ModeOfPaymentList = new List<SelectListItem>();
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Select Mode of Payment", Value = "0" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Account Transfer", Value = "Account Transfer" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "RTGS", Value = "RTGS" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "EFTN", Value = "EFTN" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Pay Order", Value = "Pay Order" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Cash", Value = "Cash" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "IBB Payment", Value = "IBB Payment" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Brokerage", Value = "City Brokerage" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Capital", Value = "City Capital" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Others", Value = "Others" });
                    SelectList ModeOfPayment = new SelectList(ModeOfPaymentList, "Value", "Text");
                    ViewBag.ModeOfPaymentList = ModeOfPayment;
                    //==Advance No
                    IList<SelectListItem> AdvanceNoList = new List<SelectListItem>();
                    AdvanceNoList.Add(new SelectListItem { Text = "Select Advance No", Value = "0" });
                    AdvanceNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    AdvanceNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    AdvanceNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    AdvanceNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    AdvanceNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    AdvanceNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    AdvanceNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    AdvanceNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    AdvanceNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    AdvanceNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList AdvanceNo = new SelectList(AdvanceNoList, "Value", "Text");
                    ViewBag.AdvanceNoList = AdvanceNo;
                    //==Review No
                    IList<SelectListItem> ReviewNoList = new List<SelectListItem>();
                    ReviewNoList.Add(new SelectListItem { Text = "Select Enhancement No", Value = "0" });
                    ReviewNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    ReviewNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    ReviewNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    ReviewNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    ReviewNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    ReviewNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    ReviewNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    ReviewNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    ReviewNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    ReviewNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList ReviewNo = new SelectList(ReviewNoList, "Value", "Text");
                    ViewBag.ReviewNoList = ReviewNo;
                    //==Space Info
                    List<RMS.Models.SpaceInfoDTO> lstSpace = new List<RMS.Models.SpaceInfoDTO>();
                    var querySpace = from SP in db.DraftSpaceInfos
                                     where SP.AgreementSLNo == AgreementSLNo
                                     orderby SP.SpaceSLNo ascending
                                     select new
                                     {
                                         SP.SpaceType,
                                         SP.SpaceArea,
                                         SP.SpaceRate,
                                         SP.SpaceRent,
                                         SP.SpaceTotalAdvance,
                                         SP.SpaceTotalAdjustment,
                                         SP.SpaceRemarks,
                                     };
                    lstSpace = querySpace.AsEnumerable().Select(x => new RMS.Models.SpaceInfoDTO
                    {
                        SpaceType = x.SpaceType,
                        SpaceArea = x.SpaceArea,
                        SpaceRate = x.SpaceRate,
                        SpaceRent = x.SpaceRent,
                        SpaceTotalAdvance = x.SpaceTotalAdvance,
                        SpaceTotalAdjustment = x.SpaceTotalAdjustment,
                        SpaceRemarks = x.SpaceRemarks,
                    }).ToList();
                    if (lstSpace.Count > 0)
                    {
                        for (int i = 0; i < lstSpace.Count; i++)
                        {
                            lstSpace[i].SpaceRowNumber = "_" + (i + 1).ToString();
                            lstSpace[i].SpaceftrCount = lstSpace.Count;
                        }
                    }
                    ViewBag.lstSpace = lstSpace;
                    //==Advance Info
                    List<RMS.Models.AdvanceInfoDTO> lstAdvance = new List<RMS.Models.AdvanceInfoDTO>();
                    var queryAdvance = from Adv in db.DraftAdvanceInfos
                                       where Adv.AgreementSLNo == AgreementSLNo
                                       orderby Adv.AdvanceSLNo ascending
                                       select new
                                       {
                                           Adv.AdvanceNo,
                                           Adv.AdvanceSlotPeriod,
                                           Adv.StartDate,
                                           Adv.EndDate,
                                           Adv.AdvanceNote,
                                           Adv.AdvanceSlotAmount,
                                       };
                    lstAdvance = queryAdvance.AsEnumerable().Select(x => new RMS.Models.AdvanceInfoDTO
                    {
                        AdvanceNo = x.AdvanceNo,
                        AdvanceSlotPeriod = x.AdvanceSlotPeriod,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        AdvanceNote = x.AdvanceNote,
                        AdvanceSlotAmount = x.AdvanceSlotAmount,
                    }).ToList();
                    if (lstAdvance.Count > 0)
                    {
                        for (int i = 0; i < lstAdvance.Count; i++)
                        {
                            lstAdvance[i].AdvanceRowNumber = "_" + (i + 1).ToString();
                            lstAdvance[i].AdvanceftrCount = lstAdvance.Count;
                        }
                    }
                    ViewBag.lstAdvance = lstAdvance;
                    //==Review Info
                    List<RMS.Models.ReviewInfoDTO> lstReview = new List<RMS.Models.ReviewInfoDTO>();
                    var queryReview = from RI in db.DraftReviewInfos
                                      where RI.AgreementSLNo == AgreementSLNo
                                      orderby RI.ReviewSLNo ascending
                                      select new
                                      {
                                          RI.ReviewNo,
                                          RI.StartDate,
                                          RI.EndDate,
                                          RI.Period,
                                          RI.IncreaseAmount,
                                          RI.IncreasePercentage,
                                          RI.ReviewNote,
                                      };
                    lstReview = queryReview.AsEnumerable().Select(x => new RMS.Models.ReviewInfoDTO
                    {
                        ReviewNo = x.ReviewNo,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        Period = x.Period,
                        IncreaseAmount = x.IncreaseAmount,
                        IncreasePercentage = x.IncreasePercentage,
                        ReviewNote = x.ReviewNote,
                    }).ToList();
                    if (lstReview.Count > 0)
                    {
                        for (int i = 0; i < lstReview.Count; i++)
                        {
                            lstReview[i].ReviewRowNumber = "_" + (i + 1).ToString();
                            lstReview[i].ReviewftrCount = lstReview.Count;
                        }
                    }
                    ViewBag.lstReview = lstReview;
                    //==Landlord Information
                    List<RMS.Models.LandlordInfoDTO> lstLandlord = new List<RMS.Models.LandlordInfoDTO>();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    var queryLandlord = from LI in db.DraftLandlordInfos
                                        where LI.AgreementSLNo == AgreementSLNo
                                        orderby LI.LandlordSLNo ascending
                                        select new
                                        {
                                            //==Landlord Info
                                            LI.LandlordSLNo,
                                            LI.AgreementSLNo,
                                            LI.VendorCode,
                                            LI.LandlordName,
                                            LI.ModeOfPayment,
                                            LI.AdvancePC,
                                            LI.AdvanceAmount,
                                            LI.AdvanceAdjustmentPC,
                                            LI.AdvanceAdjustmentAmount,
                                            LI.TaxPC,
                                            LI.TaxAmount,
                                            LI.VATPC,
                                            LI.VATAmount,
                                            LI.RentPC,
                                            LI.RentAmount,
                                            LI.LLAddress,
                                            LI.LLContactNo,
                                            LI.LLEmail,
                                            LI.ACNo,
                                            LI.BankName,
                                            LI.BranchName,
                                            LI.RoutingNo,
                                        };
                    lstLandlord = queryLandlord.AsEnumerable().Select(x => new RMS.Models.LandlordInfoDTO
                    {
                        LandlordSLNo = x.AgreementSLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        VendorCode = x.VendorCode,
                        LandlordName = x.LandlordName,
                        ModeOfPayment = x.ModeOfPayment,
                        VendorAdvancePC = x.AdvancePC,
                        VendorAdvanceAmount = x.AdvanceAmount,
                        VendorAdvanceAdjustmentPC = x.AdvanceAdjustmentPC,
                        VendorAdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        VendorTaxPC = x.TaxPC,
                        VendorTaxAmount = x.TaxAmount,
                        VendorVATPC = x.VATPC,
                        VendorVATAmount = x.VATAmount,
                        VendorRentPC = x.RentPC,
                        VendorRentAmount = x.RentAmount,
                        LLAddress = x.LLAddress,
                        LLContactNo = x.LLContactNo,
                        LLEmail = x.LLEmail,
                        ACNo = x.ACNo,
                        BankName = x.BankName,
                        BranchName = x.BranchName,
                        RoutingNo = x.RoutingNo,
                    }).ToList();
                    if (lstLandlord.Count > 0)
                    {
                        for (int i = 0; i < lstLandlord.Count; i++)
                        {
                            lstLandlord[i].LIRowNumber = "_" + (i + 1).ToString();
                            lstLandlord[i].LIftrCount = lstLandlord.Count;
                            if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.RTGS) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.EFTN) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Cash) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Others) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstLandlord = lstLandlord;
                    //==Cost Allocation
                    List<RMS.Models.CostCenterInfoDTO> lstCC = new List<RMS.Models.CostCenterInfoDTO>();
                    var queryCC = from CC in db.DraftCostCenterInfos
                                  where CC.AgreementSLNo == AgreementSLNo
                                  orderby CC.CCSLNo ascending
                                  select new
                                  {
                                      CC.CCCode,
                                      CC.CCName,
                                      CC.SOLCode,
                                      CC.SOLName,
                                      CC.CCShareAllotment,
                                      CC.CCText,
                                  };
                    lstCC = queryCC.AsEnumerable().Select(x => new RMS.Models.CostCenterInfoDTO
                    {
                        CCCode = x.CCCode,
                        CCName = x.CCName,
                        SOLCode = x.SOLCode,
                        SOLName = x.SOLName,
                        CCShareAllotment = x.CCShareAllotment,
                        CCText = x.CCText,
                    }).ToList();
                    if (lstCC.Count > 0)
                    {
                        for (int i = 0; i < lstCC.Count; i++)
                        {
                            lstCC[i].CCRowNumber = "_" + (i + 1).ToString();
                            lstCC[i].CCftrCount = lstCC.Count;
                        }
                    }
                    ViewBag.lstCC = lstCC;
                    //==Utility Information
                    List<RMS.Models.UtilityInfoDTO> lstUtility = new List<RMS.Models.UtilityInfoDTO>();
                    var queryUtility = from UI in db.DraftUtilityInfos
                                       where UI.AgreementSLNo == AgreementSLNo
                                       orderby UI.UtilitySLNo ascending
                                       select new
                                       {
                                           //==Landlord Info
                                           UI.UtilitySLNo,
                                           UI.AgreementSLNo,
                                           UI.UtilityVendorCode,
                                           UI.UtilityLandlordName,
                                           UI.UtilityModeOfPayment,
                                           UI.ServiceChargePC,
                                           UI.ServiceChargeAmount,
                                           UI.OnlineTowerPC,
                                           UI.OnlineTowerAmount,
                                           UI.GeneratorSpacePC,
                                           UI.GeneratorSpaceAmount,
                                           UI.CarParkingPC,
                                           UI.CarParkingAmount,
                                           UI.TaxPC,
                                           UI.TaxAmount,
                                           UI.VATPC,
                                           UI.VATAmount,
                                           UI.UtilityAddress,
                                           UI.UtilityContactNo,
                                           UI.UtilityEmail,
                                           UI.UtilityACNo,
                                           UI.UtilityBankName,
                                           UI.UtilityBranchName,
                                           UI.UtilityRoutingNo,
                                       };
                    lstUtility = queryUtility.AsEnumerable().Select(x => new RMS.Models.UtilityInfoDTO
                    {
                        UtilitySLNo = x.UtilitySLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        UtilityVendorCode = x.UtilityVendorCode,
                        UtilityLandlordName = x.UtilityLandlordName,
                        UtilityModeOfPayment = x.UtilityModeOfPayment,
                        ServiceChargePC = x.ServiceChargePC,
                        ServiceChargeAmount = x.ServiceChargeAmount,
                        OnlineTowerPC = x.OnlineTowerPC,
                        OnlineTowerAmount = x.OnlineTowerAmount,
                        GeneratorSpacePC = x.GeneratorSpacePC,
                        GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                        CarParkingPC = x.CarParkingPC,
                        CarParkingAmount = x.CarParkingAmount,
                        UtilityTaxPC = x.TaxPC,
                        UtilityTaxAmount = x.TaxAmount,
                        UtilityVATPC = x.VATPC,
                        UtilityVATAmount = x.VATAmount,
                        UtilityAddress = x.UtilityAddress,
                        UtilityContactNo = x.UtilityContactNo,
                        UtilityEmail = x.UtilityEmail,
                        UtilityACNo = x.UtilityACNo,
                        UtilityBankName = x.UtilityBankName,
                        UtilityBranchName = x.UtilityBranchName,
                        UtilityRoutingNo = x.UtilityRoutingNo,
                    }).ToList();
                    if (lstUtility.Count > 0)
                    {
                        for (int i = 0; i < lstUtility.Count; i++)
                        {
                            lstUtility[i].UtilityRowNumber = "_" + (i + 1).ToString();
                            lstUtility[i].UtilityftrCount = lstUtility.Count;
                            if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.RTGS) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.EFTN) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Cash) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Others) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstUtility = lstUtility;
                    //==Draft Agreement Info
                    List<RMS.Models.AgreementInfoDTO> lstAgreement = new List<RMS.Models.AgreementInfoDTO>();
                    var query = from AI in db.DraftAgreementInfos
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                where AI.AgreementSLNo == AgreementSLNo
                                select new
                                {
                                    AI.AgreementSLNo,
                                    //==Basic Info
                                    AI.PremiseTypeSLNo,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.PremiseAddress,
                                    AI.ConcernBranch,
                                    AI.InspectorName,
                                    AI.InspectorContactNo,
                                    AI.ClusterGroup,
                                    //==Agreement Info
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.AgreementStartDate,
                                    AI.AgreementEndDate,
                                    AI.AgreementPeriod,
                                    AI.RenewalFrequency,
                                    AI.RentDueDay,
                                    AI.UOM,
                                    AI.TotalArea,
                                    AI.CostPerUnit,
                                    AI.TotalRentAmount,
                                    AI.SecurityDepositAmount,
                                    AI.AdvanceAmount,
                                    AI.AdvanceAdjustmentPeriod,
                                    AI.AdvanceAdjustmentAmount,
                                    AI.TaxPercentage,
                                    RentTaxAmount = AI.TaxAmount,
                                    AI.VATPercentage,
                                    RentVATAMount = AI.VATAmount,
                                    AI.ServiceCharge,
                                    AI.OnlineTower,
                                    AI.GeneratorSpace,
                                    AI.CarParking,
                                    AI.NetRentAmount,
                                    AI.AgreementStatus,
                                    AI.AgreementText,
                                    AI.Status,
                                    AI.UserSLNo,
                                    AI.EntryDate,
                                    AI.IsDeleted,
                                    S.StatusName,
                                    AI.ReviewFrequency,
                                    AI.ReviewPercentage,
                                    AI.TaxType,
                                    AI.VatType,
                                    //==Control Data
                                    AI.CashGLCode,
                                    AI.BankGLCode,
                                    AI.AdvanceGLCode,
                                    AI.AdvanceAdjustmentGLCode,
                                    AI.RentGLCode,
                                    AI.ServiceChargeGLCode,
                                    AI.TaxGLCode,
                                    AI.VATGLCode,
                                    AI.ProvisionGLTax,
                                    AI.ProvisionGLAP,
                                    AI.RTGSGL,
                                    AI.EFTNGL,
                                    AI.PayOrderGL,
                                    AI.IBBPaymentGL,
                                    AI.CityBrokerageGL,
                                    AI.CityCapitalGL,
                                    AI.OthersGL,
                                    //====
                                    AI.PremiseAddressBangla,
                                    AI.AreaStatus,
                                    AI.RegionalOffice,
                                    AI.PrimarySOL,
                                    AI.AttachedControl,
                                    AI.ControllerOfficeDistance,
                                    AI.RoutingNumber,
                                    AI.Division,
                                    AI.District,
                                    AI.Upazila,
                                    AI.Thana,
                                    AI.ThanaCode,
                                    AI.Pourasabha,
                                    AI.PourasabhaType,
                                    AI.UnionName,
                                    AI.WardNo,
                                    AI.PremisesTypeforAccounts,
                                    AI.ParentAgreementCode,
                                    AI.ElectricityLoad,
                                    AI.ElectricityProvidedBy,
                                    AI.AITBourneBy,
                                    AI.CommercialPermission,
                                    AI.BuildingPlan,
                                    AI.PremisesSituatedFloor,
                                    AI.BangladeshBankApproval,
                                    AI.BangladeshBankReference,
                                    AI.ITTowerRentClause,
                                    AI.TerminationClause,
                                    AI.TerminationNoticePeriod,
                                    AI.PremisesOpeningDate,
                                    AI.DocumentDate,
                                    AI.Remarks,
                                    AI.AgreementRemarks,
                                    AI.AdvanceRemarks,
                                    AI.ReviewRemarks,
                                    AI.LLRemarks,
                                    AI.CCRemarks,
                                    AI.UtilityRemarks,
                                    AI.ControlDataRemarks,
                                    //====
                                    AI.BorrowingRate,
                                    AI.PaymentMethod,
                                    AI.IsIFRSEnable,
                                    AI.CalculationMethod,
                                    AI.WithHoldingCode,
                                    AI.AdditionalExpense,
                                    AI.InitialDirectCost,
                                    AI.DismantlingCost,
                                    AI.CarParkingNo,
                                    AI.WaterBillType,
                                    AI.WaterBillAmount,
                                    AI.IFRSEffectiveDate,
                                    AI.CorporateTaxRate,
                                };
                    lstAgreement = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        //==Basic Info
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        ConcernBranch = x.ConcernBranch,
                        InspectorName = x.InspectorName,
                        InspectorContactNo = x.InspectorContactNo,
                        ClusterGroup = x.ClusterGroup,
                        //==Agreement Info
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        RenewalFrequency = x.RenewalFrequency,
                        RentDueDay = x.RentDueDay,
                        UOM = x.UOM,
                        TotalArea = x.TotalArea,
                        CostPerUnit = x.CostPerUnit,
                        RentAmount = x.TotalArea * x.CostPerUnit,
                        TotalRentAmount = x.TotalRentAmount,
                        SecurityDepositAmount = x.SecurityDepositAmount,
                        AdvanceAmount = x.AdvanceAmount,
                        AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                        AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        TaxPercentage = x.TaxPercentage,
                        TaxAmount = x.RentTaxAmount,
                        VATPercentage = x.VATPercentage,
                        VATAmount = x.RentVATAMount,
                        ServiceCharge = x.ServiceCharge,
                        OnlineTower = x.OnlineTower,
                        GeneratorSpace = x.GeneratorSpace,
                        CarParking = x.CarParking,
                        NetRentAmount = x.NetRentAmount,
                        AgreementStatus = x.AgreementStatus,
                        AgreementText = x.AgreementText,
                        Status = x.Status,
                        UserSLNo = x.UserSLNo,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        IsDeleted = x.IsDeleted,
                        StatusName = x.StatusName,
                        ReviewFrequency = x.ReviewFrequency,
                        ReviewPercentage = x.ReviewPercentage,
                        TaxType = x.TaxType,
                        xTaxType = x.TaxType,
                        VatType = x.VatType,
                        //==Control Data
                        CashGLCode = x.CashGLCode,
                        BankGLCode = x.BankGLCode,
                        AdvanceGLCode = x.AdvanceGLCode,
                        AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                        RentGLCode = x.RentGLCode,
                        ServiceChargeGLCode = x.ServiceChargeGLCode,
                        TaxGLCode = x.TaxGLCode,
                        VATGLCode = x.VATGLCode,
                        ProvisionGLTax = x.ProvisionGLTax,
                        ProvisionGLAP = x.ProvisionGLAP,
                        RTGSGL = x.RTGSGL,
                        EFTNGL = x.EFTNGL,
                        PayOrderGL = x.PayOrderGL,
                        IBBPaymentGL = x.IBBPaymentGL,
                        CityBrokerageGL = x.CityBrokerageGL,
                        CityCapitalGL = x.CityCapitalGL,
                        OthersGL = x.OthersGL,
                        SpaceftrCount = lstSpace.Count(),
                        RIftrCount = lstReview.Count(),
                        LIftrCount = lstLandlord.Count(),
                        CCftrCount = lstCC.Count(),
                        UIftrCount = lstUtility.Count(),
                        //======
                        PremiseAddressBangla = x.PremiseAddressBangla,
                        AreaStatus = x.AreaStatus,
                        RegionalOffice = x.RegionalOffice,
                        PrimarySOL = x.PrimarySOL,
                        AttachedControl = x.AttachedControl,
                        ControllerOfficeDistance = x.ControllerOfficeDistance,
                        RoutingNumber = x.RoutingNumber,
                        Division = x.Division,
                        District = x.District,
                        Upazila = x.Upazila,
                        Thana = x.Thana,
                        ThanaCode = x.ThanaCode,
                        Pourasabha = x.Pourasabha,
                        PourasabhaType = x.PourasabhaType,
                        UnionName = x.UnionName,
                        WardNo = x.WardNo,
                        PremisesTypeforAccounts = x.PremisesTypeforAccounts,
                        ParentAgreementCode = x.ParentAgreementCode,
                        ElectricityLoad = x.ElectricityLoad,
                        ElectricityProvidedBy = x.ElectricityProvidedBy,
                        AITBourneBy = x.AITBourneBy,
                        CommercialPermission = x.CommercialPermission,
                        BuildingPlan = x.BuildingPlan,
                        PremisesSituatedFloor = x.PremisesSituatedFloor,
                        BangladeshBankApproval = x.BangladeshBankApproval,
                        BangladeshBankReference = x.BangladeshBankReference,
                        ITTowerRentClause = x.ITTowerRentClause,
                        TerminationClause = x.TerminationClause,
                        TerminationNoticePeriod = x.TerminationNoticePeriod,
                        PremisesOpeningDate = x.PremisesOpeningDate?.ToString("dd/MM/yyyy"),
                        DocumentDate = x.DocumentDate?.ToString("dd/MM/yyyy"),
                        Remarks = x.Remarks,
                        AgreementRemarks = x.AgreementRemarks,
                        AdvanceRemarks = x.AdvanceRemarks,
                        ReviewRemarks = x.ReviewRemarks,
                        LLRemarks = x.LLRemarks,
                        CCRemarks = x.CCRemarks,
                        UtilityRemarks = x.UtilityRemarks,
                        ControlDataRemarks = x.ControlDataRemarks,
                        //======
                        BorrowingRate = x.BorrowingRate,
                        PaymentMethod = x.PaymentMethod,
                        IsIFRSEnable = x.IsIFRSEnable,
                        CalculationMethod = x.CalculationMethod,
                        WithHoldingCode = x.WithHoldingCode,
                        AdditionalExpense = x.AdditionalExpense,
                        InitialDirectCost = x.InitialDirectCost,
                        DismantlingCost = x.DismantlingCost,
                        CarParkingNo = x.CarParkingNo,
                        WaterBillType = x.WaterBillType,
                        WaterBillAmount = x.WaterBillAmount,
                        IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        CorporateTaxRate = x.CorporateTaxRate,
                    }).ToList();
                    return View(AgreementInfoPath.DraftEdit, lstAgreement);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }


        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult Edit(RMS.Models.AgreementInfoDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = (string)Session["LoginUserID"];
                    RMS.Models.AgreementInfo AI = new RMS.Models.AgreementInfo();
                    AI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).SingleOrDefault();
                    //==Basic Info
                    AI.PremiseTypeSLNo = DTO.PremiseTypeSLNo;
                    AI.PremiseName = DTO.PremiseName;
                    AI.PremiseAddress = DTO.PremiseAddress;
                    AI.ConcernBranch = DTO.ConcernBranch;
                    AI.InspectorName = DTO.InspectorName;
                    AI.InspectorContactNo = DTO.InspectorContactNo;
                    AI.ClusterGroup = DTO.ClusterGroup;
                    //==Agreement Status Wise Update
                    AI.RentDueDay = DTO.RentDueDay;
                    if (AI.AgreementStatus == 1)
                    {
                        //==Agreement Info
                        AI.AgreementName = DTO.AgreementName;
                        AI.AgreementStartDate = DateTime.ParseExact(DTO.AgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        AI.AgreementEndDate = DateTime.ParseExact(DTO.AgreementEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        AI.AgreementPeriod = DTO.AgreementPeriod;
                        AI.RenewalFrequency = AI.AgreementPeriod;
                        AI.UOM = DTO.UOM;
                        AI.TotalArea = DTO.TotalArea;
                        AI.CostPerUnit = DTO.CostPerUnit;
                        AI.TotalRentAmount = DTO.TotalRentAmount;
                        AI.SecurityDepositAmount = DTO.SecurityDepositAmount;
                        AI.AdvanceAmount = DTO.AdvanceAmount;
                        AI.AdvanceAdjustmentPeriod = DTO.AdvanceAdjustmentPeriod;
                        AI.AdvanceAdjustmentAmount = DTO.AdvanceAdjustmentAmount;
                        AI.TaxPercentage = DTO.TaxPercentage;
                        AI.TaxAmount = DTO.TaxAmount;
                        AI.VATPercentage = DTO.VATPercentage;
                        AI.VATAmount = DTO.VATAmount;
                        AI.NetRentAmount = AI.TotalRentAmount - AI.AdvanceAdjustmentAmount;
                        AI.AgreementText = DTO.AgreementText;
                        //AI.Status = DTO.Status;
                        AI.TaxType = DTO.TaxType;
                        AI.VatType = DTO.VatType;
                        AI.CalculationMethod = DTO.CalculationMethod;
                        AI.BorrowingRate = DTO.BorrowingRate;
                        AI.IsIFRSEnable = DTO.IsIFRSEnable;
                        if (DTO.IFRSEffectiveDate != null && DTO.IsIFRSEnable == true)
                        {
                            AI.IFRSEffectiveDate = DateTime.ParseExact(DTO.IFRSEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        }
                        else
                        {
                            AI.IFRSEffectiveDate = null;
                        }
                        AI.CorporateTaxRate = DTO.CorporateTaxRate;
                    }
                    //==Control Data
                    AI.CashGLCode = DTO.CashGLCode;
                    AI.BankGLCode = DTO.BankGLCode;
                    AI.AdvanceGLCode = DTO.AdvanceGLCode;
                    AI.AdvanceAdjustmentGLCode = DTO.AdvanceAdjustmentGLCode;
                    AI.RentGLCode = DTO.RentGLCode;
                    AI.ServiceChargeGLCode = DTO.ServiceChargeGLCode;
                    AI.TaxGLCode = DTO.TaxGLCode;
                    AI.VATGLCode = DTO.VATGLCode;
                    AI.ProvisionGLTax = DTO.ProvisionGLTax;
                    AI.ProvisionGLAP = DTO.ProvisionGLAP;
                    AI.RTGSGL = DTO.RTGSGL;
                    AI.EFTNGL = DTO.EFTNGL;
                    AI.PayOrderGL = DTO.PayOrderGL;
                    AI.IBBPaymentGL = DTO.IBBPaymentGL;
                    AI.CityBrokerageGL = DTO.CityBrokerageGL;
                    AI.CityCapitalGL = DTO.CityCapitalGL;
                    AI.OthersGL = DTO.OthersGL;
                    //if (DTO.Status == 0)
                    //{
                    //    AI.IsBlock = true;
                    //    AI.BlockDate = DateTime.Now;
                    //    AI.BlockUserSLNo = AI.UserSLNo;
                    //}
                    //else
                    //{
                    //    AI.IsBlock = false;
                    //    AI.BlockDate = null;
                    //    AI.BlockUserSLNo = null;
                    //}
                    AI.EditBy = (string)Session["LoginUserID"];
                    AI.EditDate = DateTime.Now;
                    AI.IsDeleted = false;
                    //==Utility Master Info
                    AI.ReviewFrequency = DTO.ReviewFrequency;
                    AI.ReviewPercentage = DTO.ReviewPercentage;
                    AI.ServiceCharge = DTO.ServiceCharge;
                    AI.OnlineTower = DTO.OnlineTower;
                    AI.GeneratorSpace = DTO.GeneratorSpace;
                    AI.CarParking = DTO.CarParking;
                    //=====
                    AI.PremiseAddressBangla = DTO.PremiseAddressBangla;
                    AI.AreaStatus = DTO.AreaStatus;
                    AI.RegionalOffice = DTO.RegionalOffice;
                    AI.PrimarySOL = DTO.PrimarySOL;
                    AI.AttachedControl = DTO.AttachedControl;
                    AI.ControllerOfficeDistance = DTO.ControllerOfficeDistance;
                    AI.RoutingNumber = DTO.RoutingNumber;
                    AI.Division = DTO.Division;
                    AI.District = DTO.District;
                    AI.Upazila = DTO.Upazila;
                    AI.Thana = DTO.Thana;
                    AI.ThanaCode = DTO.ThanaCode;
                    AI.Pourasabha = DTO.Pourasabha;
                    AI.PourasabhaType = DTO.PourasabhaType;
                    AI.UnionName = DTO.UnionName;
                    AI.WardNo = DTO.WardNo;
                    AI.PremisesTypeforAccounts = DTO.PremisesTypeforAccounts;
                    AI.ParentAgreementCode = DTO.ParentAgreementCode;
                    AI.ElectricityLoad = DTO.ElectricityLoad;
                    AI.ElectricityProvidedBy = DTO.ElectricityProvidedBy;
                    AI.AITBourneBy = DTO.AITBourneBy;
                    AI.CommercialPermission = DTO.CommercialPermission;
                    AI.BuildingPlan = DTO.BuildingPlan;
                    AI.PremisesSituatedFloor = DTO.PremisesSituatedFloor;
                    AI.BangladeshBankApproval = DTO.BangladeshBankApproval;
                    AI.BangladeshBankReference = DTO.BangladeshBankReference;
                    AI.ITTowerRentClause = DTO.ITTowerRentClause;
                    AI.TerminationClause = DTO.TerminationClause;
                    AI.TerminationNoticePeriod = DTO.TerminationNoticePeriod;
                    if (DTO.PremisesOpeningDate != null)
                    {
                        AI.PremisesOpeningDate = DateTime.ParseExact(DTO.PremisesOpeningDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.PremisesOpeningDate = null;
                    }
                    if (DTO.DocumentDate != null)
                    {
                        AI.DocumentDate = DateTime.ParseExact(DTO.DocumentDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.DocumentDate = null;
                    }
                    AI.Remarks = DTO.Remarks;
                    AI.AgreementRemarks = DTO.AgreementRemarks;
                    AI.AdvanceRemarks = DTO.AdvanceRemarks;
                    AI.ReviewRemarks = DTO.ReviewRemarks;
                    AI.LLRemarks = DTO.LLRemarks;
                    AI.CCRemarks = DTO.CCRemarks;
                    AI.UtilityRemarks = DTO.UtilityRemarks;
                    AI.ControlDataRemarks = DTO.ControlDataRemarks;

                    AI.PaymentMethod = DTO.PaymentMethod;
                    AI.WithHoldingCode = DTO.WithHoldingCode;
                    AI.AdditionalExpense = DTO.AdditionalExpense;
                    AI.InitialDirectCost = DTO.InitialDirectCost;
                    AI.DismantlingCost = DTO.DismantlingCost;
                    AI.CarParkingNo = DTO.CarParkingNo;
                    AI.WaterBillType = DTO.WaterBillType;
                    AI.WaterBillAmount = DTO.WaterBillAmount;
                    //=====
                    db.Entry(AI).State = EntityState.Modified;
                    db.SaveChanges();
                    //==Space Information
                    //===Delete Existing Space Info
                    db.SpaceInfos.RemoveRange(db.SpaceInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                    db.SaveChanges();
                    //==
                    string[] SpaceTypeList = null;
                    if (DTO.SpaceTypeList != null)
                    {
                        SpaceTypeList = DTO.SpaceTypeList.Split(',');
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            SpaceTypeList[i] = SpaceTypeList[i].Trim();
                        }
                    }
                    string[] SpaceAreaList = null;
                    if (DTO.SpaceAreaList != null)
                    {
                        SpaceAreaList = DTO.SpaceAreaList.Split(',');
                        for (int i = 0; i < SpaceAreaList.Length; i++)
                        {
                            SpaceAreaList[i] = SpaceAreaList[i].Trim();
                        }
                    }
                    string[] SpaceRateList = null;
                    if (DTO.SpaceRateList != null)
                    {
                        SpaceRateList = DTO.SpaceRateList.Split(',');
                        for (int i = 0; i < SpaceRateList.Length; i++)
                        {
                            SpaceRateList[i] = SpaceRateList[i].Trim();
                        }
                    }
                    string[] SpaceRentList = null;
                    if (DTO.SpaceRentList != null)
                    {
                        SpaceRentList = DTO.SpaceRentList.Split(',');
                        for (int i = 0; i < SpaceRentList.Length; i++)
                        {
                            SpaceRentList[i] = SpaceRentList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdvanceList = null;
                    if (DTO.SpaceTotalAdvanceList != null)
                    {
                        SpaceTotalAdvanceList = DTO.SpaceTotalAdvanceList.Split(',');
                        for (int i = 0; i < SpaceTotalAdvanceList.Length; i++)
                        {
                            SpaceTotalAdvanceList[i] = SpaceTotalAdvanceList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdjustmentList = null;
                    if (DTO.SpaceTotalAdjustmentList != null)
                    {
                        SpaceTotalAdjustmentList = DTO.SpaceTotalAdjustmentList.Split(',');
                        for (int i = 0; i < SpaceTotalAdjustmentList.Length; i++)
                        {
                            SpaceTotalAdjustmentList[i] = SpaceTotalAdjustmentList[i].Trim();
                        }
                    }
                    string[] SpaceRemarksList = null;
                    if (DTO.SpaceRemarksList != null)
                    {
                        SpaceRemarksList = DTO.SpaceRemarksList.Split(',');
                        for (int i = 0; i < SpaceRemarksList.Length; i++)
                        {
                            SpaceRemarksList[i] = SpaceRemarksList[i].Trim();
                        }
                    }
                    if (SpaceTypeList != null)
                    {
                        RMS.Models.SpaceInfo SpaceInfo;
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            if (SpaceTypeList[i] != null && SpaceTypeList[i] != "")
                            {
                                SpaceInfo = new RMS.Models.SpaceInfo();
                                SpaceInfo.AgreementSLNo = AI.AgreementSLNo;
                                SpaceInfo.SpaceType = (SpaceTypeList == null) ? null : SpaceTypeList[i].ToString();
                                SpaceInfo.SpaceArea = Convert.ToDouble(SpaceAreaList[i].ToString());
                                SpaceInfo.SpaceRate = Convert.ToDouble(SpaceRateList[i].ToString());
                                SpaceInfo.SpaceRent = Convert.ToDouble(SpaceRentList[i].ToString());
                                SpaceInfo.SpaceTotalAdvance = Convert.ToDouble(SpaceTotalAdvanceList[i].ToString());
                                SpaceInfo.SpaceTotalAdjustment = Convert.ToDouble(SpaceTotalAdjustmentList[i].ToString());
                                SpaceInfo.SpaceRemarks = (SpaceRemarksList == null) ? null : SpaceRemarksList[i].ToString();
                                db.SpaceInfos.Add(SpaceInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    if (AI.AgreementStatus == 1)
                    {
                        //==Advance Information
                        //===Delete Existing Advance Info
                        db.AdvanceInfos.RemoveRange(db.AdvanceInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                        //==
                        string[] AdvanceNoList = null;
                        if (DTO.AdvanceNoList != null)
                        {
                            AdvanceNoList = DTO.AdvanceNoList.Split(',');
                            for (int i = 0; i < AdvanceNoList.Length; i++)
                            {
                                AdvanceNoList[i] = AdvanceNoList[i].Trim();
                            }
                        }
                        string[] AdvanceSlotPeriodList = null;
                        if (DTO.AdvanceSlotPeriodList != null)
                        {
                            AdvanceSlotPeriodList = DTO.AdvanceSlotPeriodList.Split(',');
                            for (int i = 0; i < AdvanceSlotPeriodList.Length; i++)
                            {
                                AdvanceSlotPeriodList[i] = AdvanceSlotPeriodList[i].Trim();
                            }
                        }
                        string[] AdvanceStartDateList = null;
                        if (DTO.AdvanceStartDateList != null)
                        {
                            AdvanceStartDateList = DTO.AdvanceStartDateList.Split(',');
                            for (int i = 0; i < AdvanceStartDateList.Length; i++)
                            {
                                AdvanceStartDateList[i] = AdvanceStartDateList[i].Trim();
                            }
                        }
                        string[] AdvanceEndDateList = null;
                        if (DTO.AdvanceEndDateList != null)
                        {
                            AdvanceEndDateList = DTO.AdvanceEndDateList.Split(',');
                            for (int i = 0; i < AdvanceEndDateList.Length; i++)
                            {
                                AdvanceEndDateList[i] = AdvanceEndDateList[i].Trim();
                            }
                        }
                        string[] AdvanceNoteList = null;
                        if (DTO.AdvanceNoteList != null)
                        {
                            AdvanceNoteList = DTO.AdvanceNoteList.Split(',');
                            for (int i = 0; i < AdvanceNoteList.Length; i++)
                            {
                                AdvanceNoteList[i] = AdvanceNoteList[i].Trim();
                            }
                        }
                        string[] AdvanceSlotAmountList = null;
                        if (DTO.AdvanceSlotAmountList != null)
                        {
                            AdvanceSlotAmountList = DTO.AdvanceSlotAmountList.Split(',');
                            for (int i = 0; i < AdvanceSlotAmountList.Length; i++)
                            {
                                AdvanceSlotAmountList[i] = AdvanceSlotAmountList[i].Trim();
                            }
                        }
                        if (AdvanceNoList != null)
                        {
                            RMS.Models.AdvanceInfo AdvInfo;
                            for (int i = 0; i < AdvanceNoList.Length; i++)
                            {
                                if (AdvanceNoList[i] != null && AdvanceNoList[i] != "")
                                {
                                    AdvInfo = new RMS.Models.AdvanceInfo();
                                    AdvInfo.AgreementSLNo = AI.AgreementSLNo;
                                    AdvInfo.AdvanceNo = Convert.ToInt32(AdvanceNoList[i].ToString());
                                    AdvInfo.AdvanceSlotPeriod = Convert.ToInt32(AdvanceSlotPeriodList[i].ToString());
                                    AdvInfo.StartDate = DateTime.ParseExact(AdvanceStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    AdvInfo.EndDate = DateTime.ParseExact(AdvanceEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    AdvInfo.AdvanceSlotAmount = Convert.ToDouble(AdvanceSlotAmountList[i].ToString());
                                    AdvInfo.AdvanceNote = (AdvanceNoteList == null) ? null : AdvanceNoteList[i].ToString();
                                    db.AdvanceInfos.Add(AdvInfo);
                                    db.SaveChanges();
                                }
                            }
                        }
                        //==Review Info
                        //===Delete Existing Review Info
                        db.ReviewInfos.RemoveRange(db.ReviewInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                        //==
                        string[] ReviewNoList = null;
                        if (DTO.ReviewNoList != null)
                        {
                            ReviewNoList = DTO.ReviewNoList.Split(',');
                            for (int i = 0; i < ReviewNoList.Length; i++)
                            {
                                ReviewNoList[i] = ReviewNoList[i].Trim();
                            }
                        }
                        string[] ReviewStartDateList = null;
                        if (DTO.ReviewStartDateList != null)
                        {
                            ReviewStartDateList = DTO.ReviewStartDateList.Split(',');
                            for (int i = 0; i < ReviewStartDateList.Length; i++)
                            {
                                ReviewStartDateList[i] = ReviewStartDateList[i].Trim();
                            }
                        }
                        string[] ReviewEndDateList = null;
                        if (DTO.ReviewEndDateList != null)
                        {
                            ReviewEndDateList = DTO.ReviewEndDateList.Split(',');
                            for (int i = 0; i < ReviewEndDateList.Length; i++)
                            {
                                ReviewEndDateList[i] = ReviewEndDateList[i].Trim();
                            }
                        }
                        string[] ReviewPeriodList = null;
                        if (DTO.ReviewPeriodList != null)
                        {
                            ReviewPeriodList = DTO.ReviewPeriodList.Split(',');
                            for (int i = 0; i < ReviewPeriodList.Length; i++)
                            {
                                ReviewPeriodList[i] = ReviewPeriodList[i].Trim();
                            }
                        }
                        string[] ReviewIncreaseAmountList = null;
                        if (DTO.ReviewIncreaseAmountList != null)
                        {
                            ReviewIncreaseAmountList = DTO.ReviewIncreaseAmountList.Split(',');
                            for (int i = 0; i < ReviewIncreaseAmountList.Length; i++)
                            {
                                ReviewIncreaseAmountList[i] = ReviewIncreaseAmountList[i].Trim();
                            }
                        }
                        string[] ReviewIncreasePercentageList = null;
                        if (DTO.ReviewIncreasePercentageList != null)
                        {
                            ReviewIncreasePercentageList = DTO.ReviewIncreasePercentageList.Split(',');
                            for (int i = 0; i < ReviewIncreasePercentageList.Length; i++)
                            {
                                ReviewIncreasePercentageList[i] = ReviewIncreasePercentageList[i].Trim();
                            }
                        }
                        string[] ReviewNoteList = null;
                        if (DTO.ReviewNoteList != null)
                        {
                            ReviewNoteList = DTO.ReviewNoteList.Split(',');
                            for (int i = 0; i < ReviewNoteList.Length; i++)
                            {
                                ReviewNoteList[i] = ReviewNoteList[i].Trim();
                            }
                        }
                        if (ReviewNoList != null)
                        {
                            RMS.Models.ReviewInfo RI;
                            for (int i = 0; i < ReviewNoList.Length; i++)
                            {
                                if (ReviewNoList[i] != null && ReviewNoList[i] != "")
                                {
                                    RI = new RMS.Models.ReviewInfo();
                                    RI.AgreementSLNo = AI.AgreementSLNo;
                                    RI.ReviewNo = Convert.ToInt32(ReviewNoList[i].ToString());
                                    RI.Period = Convert.ToInt32(ReviewPeriodList[i].ToString());
                                    RI.StartDate = DateTime.ParseExact(ReviewStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    RI.EndDate = DateTime.ParseExact(ReviewEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    RI.IncreaseAmount = Convert.ToDouble(ReviewIncreaseAmountList[i].ToString());
                                    RI.IncreasePercentage = Convert.ToDouble(ReviewIncreasePercentageList[i].ToString());
                                    RI.ReviewNote = (ReviewNoteList == null) ? null : ReviewNoteList[i].ToString();
                                    db.ReviewInfos.Add(RI);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                    //==Landlord Information
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Landlord Info
                        db.LandlordInfos.RemoveRange(db.LandlordInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        //===Update Existing Landlord Info
                        List<RMS.Models.LandlordInfo> lstOldLandlord = db.LandlordInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstOldLandlord.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    string[] VendorCodeList = null;
                    if (DTO.VendorCodeList != null)
                    {
                        VendorCodeList = DTO.VendorCodeList.Split(',');
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            VendorCodeList[i] = VendorCodeList[i].Trim();
                        }
                    }
                    string[] LandlordNameList = null;
                    if (DTO.LandlordNameList != null)
                    {
                        LandlordNameList = DTO.LandlordNameList.Split(',');
                        for (int i = 0; i < LandlordNameList.Length; i++)
                        {
                            LandlordNameList[i] = LandlordNameList[i].Trim();
                        }
                    }
                    string[] ModeOfPaymentList = null;
                    if (DTO.ModeOfPaymentList != null)
                    {
                        ModeOfPaymentList = DTO.ModeOfPaymentList.Split(',');
                        for (int i = 0; i < ModeOfPaymentList.Length; i++)
                        {
                            ModeOfPaymentList[i] = ModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] VendorAdvancePCList = null;
                    if (DTO.VendorAdvancePCList != null)
                    {
                        VendorAdvancePCList = DTO.VendorAdvancePCList.Split(',');
                        for (int i = 0; i < VendorAdvancePCList.Length; i++)
                        {
                            VendorAdvancePCList[i] = VendorAdvancePCList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAmountList = null;
                    if (DTO.VendorAdvanceAmountList != null)
                    {
                        VendorAdvanceAmountList = DTO.VendorAdvanceAmountList.Split(',');
                        for (int i = 0; i < VendorAdvanceAmountList.Length; i++)
                        {
                            VendorAdvanceAmountList[i] = VendorAdvanceAmountList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAdjustmentPCList = null;
                    if (DTO.VendorAdvanceAdjustmentPCList != null)
                    {
                        VendorAdvanceAdjustmentPCList = DTO.VendorAdvanceAdjustmentPCList.Split(',');
                        for (int i = 0; i < VendorAdvanceAdjustmentPCList.Length; i++)
                        {
                            VendorAdvanceAdjustmentPCList[i] = VendorAdvanceAdjustmentPCList[i].Trim();
                        }
                    }
                    //string[] VendorAdvanceAdjustmentAmountList = null;
                    //if (DTO.VendorAdvanceAdjustmentAmountList != null)
                    //{
                    //    VendorAdvanceAdjustmentAmountList = DTO.VendorAdvanceAdjustmentAmountList.Split(',');
                    //    for (int i = 0; i < VendorAdvanceAdjustmentAmountList.Length; i++)
                    //    {
                    //        VendorAdvanceAdjustmentAmountList[i] = VendorAdvanceAdjustmentAmountList[i].Trim();
                    //    }
                    //}
                    string[] VendorTaxPCList = null;
                    if (DTO.VendorTaxPCList != null)
                    {
                        VendorTaxPCList = DTO.VendorTaxPCList.Split(',');
                        for (int i = 0; i < VendorTaxPCList.Length; i++)
                        {
                            VendorTaxPCList[i] = VendorTaxPCList[i].Trim();
                        }
                    }
                    string[] VendorTaxAmountList = null;
                    if (DTO.VendorTaxAmountList != null)
                    {
                        VendorTaxAmountList = DTO.VendorTaxAmountList.Split(',');
                        for (int i = 0; i < VendorTaxAmountList.Length; i++)
                        {
                            VendorTaxAmountList[i] = VendorTaxAmountList[i].Trim();
                        }
                    }
                    string[] VendorVATPCList = null;
                    if (DTO.VendorVATPCList != null)
                    {
                        VendorVATPCList = DTO.VendorVATPCList.Split(',');
                        for (int i = 0; i < VendorVATPCList.Length; i++)
                        {
                            VendorVATPCList[i] = VendorVATPCList[i].Trim();
                        }
                    }
                    string[] VendorVATAmountList = null;
                    if (DTO.VendorVATAmountList != null)
                    {
                        VendorVATAmountList = DTO.VendorVATAmountList.Split(',');
                        for (int i = 0; i < VendorVATAmountList.Length; i++)
                        {
                            VendorVATAmountList[i] = VendorVATAmountList[i].Trim();
                        }
                    }
                    string[] VendorRentPCList = null;
                    if (DTO.VendorRentPCList != null)
                    {
                        VendorRentPCList = DTO.VendorRentPCList.Split(',');
                        for (int i = 0; i < VendorRentPCList.Length; i++)
                        {
                            VendorRentPCList[i] = VendorRentPCList[i].Trim();
                        }
                    }
                    //string[] VendorRentAmountList = null;
                    //if (DTO.VendorRentAmountList != null)
                    //{
                    //    VendorRentAmountList = DTO.VendorRentAmountList.Split(',');
                    //    for (int i = 0; i < VendorRentAmountList.Length; i++)
                    //    {
                    //        VendorRentAmountList[i] = VendorRentAmountList[i].Trim();
                    //    }
                    //}
                    string[] AddressList = null;
                    if (DTO.LLAddressList != null)
                    {
                        AddressList = DTO.LLAddressList.Split(',');
                        for (int i = 0; i < AddressList.Length; i++)
                        {
                            AddressList[i] = AddressList[i].Trim();
                        }
                    }
                    string[] ContactNoList = null;
                    if (DTO.LLContactNoList != null)
                    {
                        ContactNoList = DTO.LLContactNoList.Split(',');
                        for (int i = 0; i < ContactNoList.Length; i++)
                        {
                            ContactNoList[i] = ContactNoList[i].Trim();
                        }
                    }
                    string[] EmailList = null;
                    if (DTO.LLEmailList != null)
                    {
                        EmailList = DTO.LLEmailList.Split(',');
                        for (int i = 0; i < EmailList.Length; i++)
                        {
                            EmailList[i] = EmailList[i].Trim();
                        }
                    }
                    string[] ACNoList = null;
                    if (DTO.ACNoList != null)
                    {
                        ACNoList = DTO.ACNoList.Split(',');
                        for (int i = 0; i < ACNoList.Length; i++)
                        {
                            ACNoList[i] = ACNoList[i].Trim();
                        }
                    }
                    string[] BankNameList = null;
                    if (DTO.BankNameList != null)
                    {
                        BankNameList = DTO.BankNameList.Split(',');
                        for (int i = 0; i < BankNameList.Length; i++)
                        {
                            BankNameList[i] = BankNameList[i].Trim();
                        }
                    }
                    string[] BranchNameList = null;
                    if (DTO.BranchNameList != null)
                    {
                        BranchNameList = DTO.BranchNameList.Split(',');
                        for (int i = 0; i < BranchNameList.Length; i++)
                        {
                            BranchNameList[i] = BranchNameList[i].Trim();
                        }
                    }
                    string[] RoutingNoList = null;
                    if (DTO.RoutingNoList != null)
                    {
                        RoutingNoList = DTO.RoutingNoList.Split(',');
                        for (int i = 0; i < RoutingNoList.Length; i++)
                        {
                            RoutingNoList[i] = RoutingNoList[i].Trim();
                        }
                    }
                    RMS.Models.LandlordInfo LInfo;
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    for (int i = 0; i < VendorCodeList.Length; i++)
                    {
                        if (VendorCodeList[i] != null && VendorCodeList[i] != "")
                        {
                            LInfo = new RMS.Models.LandlordInfo();
                            LInfo.AgreementSLNo = DTO.AgreementSLNo;
                            LInfo.VendorCode = (VendorCodeList == null) ? null : VendorCodeList[i].ToString();
                            LInfo.LandlordName = (LandlordNameList == null) ? null : LandlordNameList[i].ToString();
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { LInfo.ModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { LInfo.ModeOfPayment = ModeOfPaymentLocation.RTGS; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { LInfo.ModeOfPayment = ModeOfPaymentLocation.EFTN; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { LInfo.ModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { LInfo.ModeOfPayment = ModeOfPaymentLocation.Cash; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { LInfo.ModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { LInfo.ModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { LInfo.ModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { LInfo.ModeOfPayment = ModeOfPaymentLocation.Others; }
                            LInfo.AdvancePC = Convert.ToDouble(VendorAdvancePCList[i].ToString());
                            LInfo.AdvanceAdjustmentPC = Convert.ToDouble(VendorAdvanceAdjustmentPCList[i].ToString());
                            LInfo.TaxPC = Convert.ToDouble(VendorTaxPCList[i].ToString());
                            LInfo.VATPC = Convert.ToDouble(VendorVATPCList[i].ToString());
                            LInfo.RentPC = Convert.ToDouble(VendorRentPCList[i].ToString());
                            //==PC Amount
                            LInfo.AdvanceAmount = (AI.AdvanceAmount * LInfo.AdvancePC) / 100;
                            LInfo.TaxAmount = (AI.TaxAmount * LInfo.TaxPC) / 100;
                            LInfo.VATAmount = (AI.VATAmount * LInfo.VATPC) / 100;
                            //==
                            LInfo.LLAddress = (AddressList == null) ? null : AddressList[i].ToString();
                            LInfo.LLContactNo = (ContactNoList == null) ? null : ContactNoList[i].ToString();
                            LInfo.LLEmail = (EmailList == null) ? null : EmailList[i].ToString();
                            LInfo.ACNo = (ACNoList == null) ? null : ACNoList[i].ToString();
                            LInfo.BankName = (BankNameList == null) ? null : BankNameList[i].ToString();
                            LInfo.BranchName = (BranchNameList == null) ? null : BranchNameList[i].ToString();
                            LInfo.RoutingNo = (RoutingNoList == null) ? null : RoutingNoList[i].ToString();
                            db.LandlordInfos.Add(LInfo);
                            db.SaveChanges();
                        }
                    }
                    //==Cost Center
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Cost Center Info
                        db.CostCenterInfos.RemoveRange(db.CostCenterInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        List<RMS.Models.CostCenterInfo> lstCC = db.CostCenterInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstCC.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    //==Cost Center
                    string[] CCCodeList = null;
                    if (DTO.CCCodeList != null)
                    {
                        CCCodeList = DTO.CCCodeList.Split(',');
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            CCCodeList[i] = CCCodeList[i].Trim();
                        }
                    }
                    string[] CCNameList = null;
                    if (DTO.CCNameList != null)
                    {
                        CCNameList = DTO.CCNameList.Split(',');
                        for (int i = 0; i < CCNameList.Length; i++)
                        {
                            CCNameList[i] = CCNameList[i].Trim();
                        }
                    }
                    string[] SOLCodeList = null;
                    if (DTO.SOLCodeList != null)
                    {
                        SOLCodeList = DTO.SOLCodeList.Split(',');
                        for (int i = 0; i < SOLCodeList.Length; i++)
                        {
                            SOLCodeList[i] = SOLCodeList[i].Trim();
                        }
                    }
                    string[] SOLNameList = null;
                    if (DTO.SOLNameList != null)
                    {
                        SOLNameList = DTO.SOLNameList.Split(',');
                        for (int i = 0; i < SOLNameList.Length; i++)
                        {
                            SOLNameList[i] = SOLNameList[i].Trim();
                        }
                    }
                    string[] CCShareAllotmentList = null;
                    if (DTO.CCShareAllotmentList != null)
                    {
                        CCShareAllotmentList = DTO.CCShareAllotmentList.Split(',');
                        for (int i = 0; i < CCShareAllotmentList.Length; i++)
                        {
                            CCShareAllotmentList[i] = CCShareAllotmentList[i].Trim();
                        }
                    }
                    RMS.Models.CostCenterInfo CCinfo;
                    for (int i = 0; i < CCCodeList.Length; i++)
                    {
                        if (CCCodeList[i] != null && CCCodeList[i] != "")
                        {
                            CCinfo = new RMS.Models.CostCenterInfo();
                            CCinfo.AgreementSLNo = DTO.AgreementSLNo;
                            CCinfo.CCCode = (CCCodeList == null) ? null : CCCodeList[i].ToString();
                            CCinfo.CCName = (CCNameList == null) ? null : CCNameList[i].ToString();
                            CCinfo.SOLCode = (SOLCodeList == null) ? null : SOLCodeList[i].ToString();
                            CCinfo.SOLName = (SOLNameList == null) ? null : SOLNameList[i].ToString();
                            CCinfo.CCShareAllotment = Convert.ToDouble(CCShareAllotmentList[i].ToString());
                            db.CostCenterInfos.Add(CCinfo);
                            db.SaveChanges();
                        }
                    }
                    //==Utility Information
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Utility Info
                        db.UtilityInfos.RemoveRange(db.UtilityInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        List<RMS.Models.UtilityInfo> lstOldUtility = db.UtilityInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstOldUtility.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    string[] UtilityVendorCodeList = null;
                    if (DTO.UtilityVendorCodeList != null)
                    {
                        UtilityVendorCodeList = DTO.UtilityVendorCodeList.Split(',');
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            UtilityVendorCodeList[i] = UtilityVendorCodeList[i].Trim();
                        }
                    }
                    string[] UtilityLandlordNameList = null;
                    if (DTO.UtilityLandlordNameList != null)
                    {
                        UtilityLandlordNameList = DTO.UtilityLandlordNameList.Split(',');
                        for (int i = 0; i < UtilityLandlordNameList.Length; i++)
                        {
                            UtilityLandlordNameList[i] = UtilityLandlordNameList[i].Trim();
                        }
                    }
                    string[] UtilityModeOfPaymentList = null;
                    if (DTO.UtilityModeOfPaymentList != null)
                    {
                        UtilityModeOfPaymentList = DTO.UtilityModeOfPaymentList.Split(',');
                        for (int i = 0; i < UtilityModeOfPaymentList.Length; i++)
                        {
                            UtilityModeOfPaymentList[i] = UtilityModeOfPaymentList[i].Trim();
                        }
                    }

                    string[] ServiceChargePCList = null;
                    if (DTO.ServiceChargePCList != null)
                    {
                        ServiceChargePCList = DTO.ServiceChargePCList.Split(',');
                        for (int i = 0; i < ServiceChargePCList.Length; i++)
                        {
                            ServiceChargePCList[i] = ServiceChargePCList[i].Trim();
                        }
                    }
                    string[] ServiceChargeAmountList = null;
                    if (DTO.ServiceChargeAmountList != null)
                    {
                        ServiceChargeAmountList = DTO.ServiceChargeAmountList.Split(',');
                        for (int i = 0; i < ServiceChargeAmountList.Length; i++)
                        {
                            ServiceChargeAmountList[i] = ServiceChargeAmountList[i].Trim();
                        }
                    }

                    string[] OnlineTowerPCList = null;
                    if (DTO.OnlineTowerPCList != null)
                    {
                        OnlineTowerPCList = DTO.OnlineTowerPCList.Split(',');
                        for (int i = 0; i < OnlineTowerPCList.Length; i++)
                        {
                            OnlineTowerPCList[i] = OnlineTowerPCList[i].Trim();
                        }
                    }
                    string[] OnlineTowerAmountList = null;
                    if (DTO.OnlineTowerAmountList != null)
                    {
                        OnlineTowerAmountList = DTO.OnlineTowerAmountList.Split(',');
                        for (int i = 0; i < OnlineTowerAmountList.Length; i++)
                        {
                            OnlineTowerAmountList[i] = OnlineTowerAmountList[i].Trim();
                        }
                    }

                    string[] GeneratorSpacePCList = null;
                    if (DTO.GeneratorSpacePCList != null)
                    {
                        GeneratorSpacePCList = DTO.GeneratorSpacePCList.Split(',');
                        for (int i = 0; i < GeneratorSpacePCList.Length; i++)
                        {
                            GeneratorSpacePCList[i] = GeneratorSpacePCList[i].Trim();
                        }
                    }
                    string[] GeneratorSpaceAmountList = null;
                    if (DTO.GeneratorSpaceAmountList != null)
                    {
                        GeneratorSpaceAmountList = DTO.GeneratorSpaceAmountList.Split(',');
                        for (int i = 0; i < GeneratorSpaceAmountList.Length; i++)
                        {
                            GeneratorSpaceAmountList[i] = GeneratorSpaceAmountList[i].Trim();
                        }
                    }

                    string[] CarParkingPCList = null;
                    if (DTO.CarParkingPCList != null)
                    {
                        CarParkingPCList = DTO.CarParkingPCList.Split(',');
                        for (int i = 0; i < CarParkingPCList.Length; i++)
                        {
                            CarParkingPCList[i] = CarParkingPCList[i].Trim();
                        }
                    }
                    string[] CarParkingAmountList = null;
                    if (DTO.CarParkingAmountList != null)
                    {
                        CarParkingAmountList = DTO.CarParkingAmountList.Split(',');
                        for (int i = 0; i < CarParkingAmountList.Length; i++)
                        {
                            CarParkingAmountList[i] = CarParkingAmountList[i].Trim();
                        }
                    }
                    string[] UtilityTaxPCList = null;
                    if (DTO.UtilityTaxPCList != null)
                    {
                        UtilityTaxPCList = DTO.UtilityTaxPCList.Split(',');
                        for (int i = 0; i < UtilityTaxPCList.Length; i++)
                        {
                            UtilityTaxPCList[i] = UtilityTaxPCList[i].Trim();
                        }
                    }
                    string[] UtilityTaxAmountList = null;
                    if (DTO.UtilityTaxAmountList != null)
                    {
                        UtilityTaxAmountList = DTO.UtilityTaxAmountList.Split(',');
                        for (int i = 0; i < UtilityTaxAmountList.Length; i++)
                        {
                            UtilityTaxAmountList[i] = UtilityTaxAmountList[i].Trim();
                        }
                    }
                    string[] UtilityVATPCList = null;
                    if (DTO.UtilityVATPCList != null)
                    {
                        UtilityVATPCList = DTO.UtilityVATPCList.Split(',');
                        for (int i = 0; i < UtilityVATPCList.Length; i++)
                        {
                            UtilityVATPCList[i] = UtilityVATPCList[i].Trim();
                        }
                    }
                    string[] UtilityVATAmountList = null;
                    if (DTO.UtilityVATAmountList != null)
                    {
                        UtilityVATAmountList = DTO.UtilityVATAmountList.Split(',');
                        for (int i = 0; i < UtilityVATAmountList.Length; i++)
                        {
                            UtilityVATAmountList[i] = UtilityVATAmountList[i].Trim();
                        }
                    }
                    string[] UtilityAddressList = null;
                    if (DTO.UtilityAddressList != null)
                    {
                        UtilityAddressList = DTO.UtilityAddressList.Split(',');
                        for (int i = 0; i < UtilityAddressList.Length; i++)
                        {
                            UtilityAddressList[i] = UtilityAddressList[i].Trim();
                        }
                    }
                    string[] UtilityContactNoList = null;
                    if (DTO.UtilityContactNoList != null)
                    {
                        UtilityContactNoList = DTO.UtilityContactNoList.Split(',');
                        for (int i = 0; i < UtilityContactNoList.Length; i++)
                        {
                            UtilityContactNoList[i] = UtilityContactNoList[i].Trim();
                        }
                    }
                    string[] UtilityEmailList = null;
                    if (DTO.UtilityEmailList != null)
                    {
                        UtilityEmailList = DTO.UtilityEmailList.Split(',');
                        for (int i = 0; i < UtilityEmailList.Length; i++)
                        {
                            UtilityEmailList[i] = UtilityEmailList[i].Trim();
                        }
                    }
                    string[] UtilityACNoList = null;
                    if (DTO.UtilityACNoList != null)
                    {
                        UtilityACNoList = DTO.UtilityACNoList.Split(',');
                        for (int i = 0; i < UtilityACNoList.Length; i++)
                        {
                            UtilityACNoList[i] = UtilityACNoList[i].Trim();
                        }
                    }
                    string[] UtilityBankNameList = null;
                    if (DTO.UtilityBankNameList != null)
                    {
                        UtilityBankNameList = DTO.UtilityBankNameList.Split(',');
                        for (int i = 0; i < UtilityBankNameList.Length; i++)
                        {
                            UtilityBankNameList[i] = UtilityBankNameList[i].Trim();
                        }
                    }
                    string[] UtilityBranchNameList = null;
                    if (DTO.UtilityBranchNameList != null)
                    {
                        UtilityBranchNameList = DTO.UtilityBranchNameList.Split(',');
                        for (int i = 0; i < UtilityBranchNameList.Length; i++)
                        {
                            UtilityBranchNameList[i] = UtilityBranchNameList[i].Trim();
                        }
                    }
                    string[] UtilityRoutingNoList = null;
                    if (DTO.UtilityRoutingNoList != null)
                    {
                        UtilityRoutingNoList = DTO.UtilityRoutingNoList.Split(',');
                        for (int i = 0; i < UtilityRoutingNoList.Length; i++)
                        {
                            UtilityRoutingNoList[i] = UtilityRoutingNoList[i].Trim();
                        }
                    }
                    if (UtilityVendorCodeList != null)
                    {
                        RMS.Models.UtilityInfo UI;
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            if (UtilityVendorCodeList[i] != null && UtilityVendorCodeList[i] != "")
                            {
                                UI = new RMS.Models.UtilityInfo();
                                UI.AgreementSLNo = AI.AgreementSLNo;
                                UI.UtilityVendorCode = (UtilityVendorCodeList == null) ? null : UtilityVendorCodeList[i].ToString();
                                UI.UtilityLandlordName = (UtilityLandlordNameList == null) ? null : UtilityLandlordNameList[i].ToString();
                                if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Others; }

                                UI.ServiceChargePC = Convert.ToDouble(ServiceChargePCList[i].ToString());
                                UI.ServiceChargeAmount = Convert.ToDouble(ServiceChargeAmountList[i].ToString());

                                UI.OnlineTowerPC = Convert.ToDouble(OnlineTowerPCList[i].ToString());
                                UI.OnlineTowerAmount = Convert.ToDouble(OnlineTowerAmountList[i].ToString());

                                UI.GeneratorSpacePC = Convert.ToDouble(GeneratorSpacePCList[i].ToString());
                                UI.GeneratorSpaceAmount = Convert.ToDouble(GeneratorSpaceAmountList[i].ToString());

                                UI.CarParkingPC = Convert.ToDouble(CarParkingPCList[i].ToString());
                                UI.CarParkingAmount = Convert.ToDouble(CarParkingAmountList[i].ToString());

                                UI.TaxPC = Convert.ToDouble(UtilityTaxPCList[i].ToString());
                                UI.TaxAmount = Convert.ToDouble(UtilityTaxAmountList[i].ToString());
                                UI.VATPC = Convert.ToDouble(UtilityVATPCList[i].ToString());
                                UI.VATAmount = Convert.ToDouble(UtilityVATAmountList[i].ToString());
                                UI.UtilityAddress = (UtilityAddressList == null) ? null : UtilityAddressList[i].ToString();
                                UI.UtilityContactNo = (UtilityContactNoList == null) ? null : UtilityContactNoList[i].ToString();
                                UI.UtilityEmail = (UtilityEmailList == null) ? null : UtilityEmailList[i].ToString();
                                UI.UtilityACNo = (UtilityACNoList == null) ? null : UtilityACNoList[i].ToString();
                                UI.UtilityBankName = (UtilityBankNameList == null) ? null : UtilityBankNameList[i].ToString();
                                UI.UtilityBranchName = (UtilityBranchNameList == null) ? null : UtilityBranchNameList[i].ToString();
                                UI.UtilityRoutingNo = (UtilityRoutingNoList == null) ? null : UtilityRoutingNoList[i].ToString();
                                db.UtilityInfos.Add(UI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Attach Documents
                    string[] FUFileNameList = null;
                    if (DTO.FUFileNameList != null)
                    {
                        FUFileNameList = DTO.FUFileNameList.Split(',');
                        for (int i = 0; i < FUFileNameList.Length; i++)
                        {
                            FUFileNameList[i] = FUFileNameList[i].Trim();
                        }
                    }
                    var originalDirectory = new DirectoryInfo(string.Format("{0}Content\\FileUpload\\", Server.MapPath(@"\")));
                    string pathString = Path.Combine(originalDirectory.ToString(), AI.AliasCode);
                    if (DTO.FUFileNameList != null)
                    {
                        //==Delete physical file
                        var xlstFU = db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && !FUFileNameList.Contains(x.FileName)).ToList();
                        foreach (var item in xlstFU)
                        {
                            //==Delete File
                            FileInfo file = new FileInfo(string.Format("{0}\\{1}", pathString, item.FileName));
                            if (file.Exists)//check file exsit or not  
                            {
                                file.Delete();
                            }
                            else
                            {
                                //==Nothing
                            }
                        }
                        //==Delete Existing Attached File
                        db.FileUploadInfos.RemoveRange(db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && !FUFileNameList.Contains(x.FileName)));
                        db.SaveChanges();
                    }
                    else
                    {
                        //==Delete physical file
                        var xlstFU = db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        foreach (var item in xlstFU)
                        {
                            //==Delete File
                            FileInfo file = new FileInfo(string.Format("{0}\\{1}", pathString, item.FileName));
                            if (file.Exists)//check file exsit or not  
                            {
                                file.Delete();
                            }
                            else
                            {
                                //==Nothing
                            }
                        }
                        //==Delete Existing Attached File
                        db.FileUploadInfos.RemoveRange(db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    if (DTO.files != null)
                    {
                        RMS.Models.FileUploadInfo FU;
                        foreach (var file in DTO.files)
                        {
                            //Save file content goes here
                            if (file != null && file.ContentLength > 0)
                            {
                                //==table update
                                if (db.FileUploadInfos.Any(x => x.AgreementSLNo == AI.AgreementSLNo && x.FileName == file.FileName) == false)
                                {
                                    FU = new RMS.Models.FileUploadInfo();
                                    FU.AgreementSLNo = AI.AgreementSLNo;
                                    FU.FileName = file.FileName;
                                    FU.FilePath = "Content/FileUpload/" + AI.AliasCode + "/" + file.FileName;
                                    db.FileUploadInfos.Add(FU);
                                    db.SaveChanges();
                                }
                                //==Physical file save
                                bool isExists = System.IO.Directory.Exists(pathString);
                                if (!isExists)
                                    System.IO.Directory.CreateDirectory(pathString);
                                var path = string.Format("{0}\\{1}", pathString, file.FileName);
                                file.SaveAs(path);
                            }
                        }
                    }
                    //==Re-schedule Landlord, Cost Center, Utility if Agreement Activated
                    if (AI.AgreementStatus == 2)
                    {
                        //===Delete Existing Landlord Schedule
                        db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        db.SaveChanges();
                        //===Delete Existing Cost Center Schedule
                        db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        db.SaveChanges();
                        //===Delete Existing Utility Schedule
                        //db.UtilitySchedules.RemoveRange(db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        //db.SaveChanges();
                        //==Contract Rent Schedule
                        RMS.Models.ContractSchedule CS = new RMS.Models.ContractSchedule();
                        RMS.Models.LandlordSchedule LS = new RMS.Models.LandlordSchedule();
                        RMS.Models.CostCenterSchedule CCS = new RMS.Models.CostCenterSchedule();
                        //RMS.Models.UtilitySchedule US = new RMS.Models.UtilitySchedule();
                        RMS.Models.IFRSSchedule IFRS = new RMS.Models.IFRSSchedule();
                        List<RMS.Models.LandlordInfo> lstLandlords = db.LandlordInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        List<RMS.Models.CostCenterInfo> lstCostCenter = db.CostCenterInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        //List<RMS.Models.UtilityInfo> lstUtility = db.UtilityInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        List<RMS.Models.ReviewInfo> lstReviewInfo = db.ReviewInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).OrderBy(x => x.ReviewNo).ToList();
                        List<RMS.Models.AdvanceInfo> lstAdvanceInfo = db.AdvanceInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).OrderBy(x => x.AdvanceNo).ToList();
                        DateTime ScheduleDate = AI.AgreementStartDate;
                        //===xxx====
                        int LastMonthDaysCount = DateTime.DaysInMonth(AI.AgreementEndDate.Year, AI.AgreementEndDate.Month);
                        int ReviewMonthDaysCount = 0;
                        int MonthDays = 0;

                        double RentPerDay = 0;
                        double BeforeReviewAmount = 0;
                        double AfterReviewAmount = 0;
                        double NetCalcAmount = 0;
                        if (AI.ReviewFrequency < 1 && lstReviewInfo.Count == 0)
                        {
                            //==Without Review
                            for (int i = 1; i <= AI.AgreementPeriod; i++)
                            {
                                CS = new RMS.Models.ContractSchedule();
                                if (i != 1)
                                {
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                }
                                //==Contract Schedule
                                CS.ScheduleDate = ScheduleDate;
                                CS.AgreementSLNo = AI.AgreementSLNo;
                                CS.MonthNo = i;
                                CS.Year = CS.ScheduleDate.Year;
                                CS.Month = CS.ScheduleDate.ToString("MMMM");
                                CS.ReviewNo = 0;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                }
                                CS.CostPerUnit = AI.CostPerUnit;
                                CS.TotalRentAmount = AI.CostPerUnit * AI.TotalArea;
                                //==First Month
                                if (i == 1)
                                {
                                    //==Full Month
                                    if (ScheduleDate.Day != 1)
                                    {
                                        //==Fraction Date Rent Amount
                                        MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                        RentPerDay = CS.TotalRentAmount / MonthDays;
                                        CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                    }
                                }
                                //==Last Month
                                else if (i == AI.AgreementPeriod)
                                {
                                    //==Full Month
                                    if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                    {
                                        //==Fraction Date Rent Amount
                                        RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                        CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                    }
                                }
                                #region "Tax Type & VAT Type"
                                //1. Inclusive Inclusive
                                if (AI.TaxType == 1 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //2. Inclusive Exclusive
                                else if (AI.TaxType == 1 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //3. Inclusive Exempted
                                else if (AI.TaxType == 1 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //4. Exclusive Inclusive
                                else if (AI.TaxType == 2 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //5. Exclusive Exclusive
                                else if (AI.TaxType == 2 && AI.VatType == 2)
                                {
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //6. Exclusive Exempted
                                else if (AI.TaxType == 2 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //7. Exempted  Inclusive
                                else if (AI.TaxType == 3 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //8. Exempted  Exclusive
                                else if (AI.TaxType == 3 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //9. Exempted Exempted
                                else if (AI.TaxType == 3 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                #endregion
                                CS.UserSLNo = AI.UserSLNo;
                                CS.EntryDate = DateTime.Now;
                                //db.ContractSchedules.Add(CS);
                                //db.SaveChanges();
                                //==Landlord Schedule
                                foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                {
                                    LS = new RMS.Models.LandlordSchedule();
                                    LS.ScheduleDate = ScheduleDate;
                                    LS.AgreementSLNo = AI.AgreementSLNo;
                                    LS.LandlordSLNo = LI.LandlordSLNo;
                                    LS.MonthNo = i;
                                    LS.Year = CS.ScheduleDate.Year;
                                    LS.Month = CS.ScheduleDate.ToString("MMMM");
                                    LS.ReviewNo = 0;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                    }
                                    LS.CostPerUnit = AI.CostPerUnit;
                                    LS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    if (CS.TaxAmount > 0)
                                    {
                                        LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                    }
                                    //==
                                    LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - (LS.AdvanceAdjustmentAmount);
                                    LS.UserSLNo = AI.UserSLNo;
                                    LS.EntryDate = DateTime.Now;
                                    db.LandlordSchedules.Add(LS);
                                    db.SaveChanges();
                                }
                                //==Cost Allocation Schedule
                                foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                {
                                    CCS = new RMS.Models.CostCenterSchedule();
                                    CCS.ScheduleDate = ScheduleDate;
                                    CCS.AgreementSLNo = AI.AgreementSLNo;
                                    CCS.CCSLNo = CC.CCSLNo;
                                    CCS.MonthNo = i;
                                    CCS.Year = CS.ScheduleDate.Year;
                                    CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CCS.ReviewNo = 0;
                                    CCS.CostPerUnit = AI.CostPerUnit;
                                    CCS.TotalRentAmount = CS.TotalRentAmount;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                    }
                                    //==
                                    CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                    CCS.UserSLNo = AI.UserSLNo;
                                    CCS.EntryDate = DateTime.Now;
                                    db.CostCenterSchedules.Add(CCS);
                                    db.SaveChanges();
                                }
                            }
                        }
                        else if (AI.ReviewFrequency > 0)
                        {
                            //==Review Frequency (Repeated)
                            int ReviewCount = AI.ReviewFrequency + 1;
                            int ReviewNo = 0;
                            double NewCPU = AI.CostPerUnit;
                            for (int i = 1; i <= AI.AgreementPeriod; i++)
                            {
                                CS = new RMS.Models.ContractSchedule();
                                if (i != 1)
                                {
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                }
                                if (i <= AI.ReviewFrequency)
                                {
                                    //==Contract Schedule
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    CS.CostPerUnit = NewCPU;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    if (i == 1)
                                    {
                                        //==Full Month
                                        if (ScheduleDate.Day != 1)
                                        {
                                            //==Fraction Date Rent Amount
                                            MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                            RentPerDay = CS.TotalRentAmount / MonthDays;
                                            CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                        }
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                                else if (i == ReviewCount)
                                {
                                    //==Contract Schedule
                                    if (i != AI.AgreementPeriod)
                                    {
                                        ReviewNo = ReviewNo + 1;
                                    }
                                    ReviewCount = ReviewCount + AI.ReviewFrequency;
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    //==xx
                                    //==Last Month
                                    if (i == AI.AgreementPeriod)
                                    {
                                        CS.CostPerUnit = NewCPU;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        //==Full Month
                                        if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                            CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                        }
                                    }
                                    else
                                    {
                                        //==Fraction Month
                                        if (ScheduleDate.Day != 1)
                                        {
                                            //==Before Review Amount
                                            MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                            RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                            BeforeReviewAmount = (ScheduleDate.Day - 1) * RentPerDay;
                                            //==After Review Amount
                                            NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                            AfterReviewAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                            CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                        }
                                        else
                                        {
                                            NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    //==xx
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                                else
                                {
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    CS.CostPerUnit = NewCPU;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    //==Last Month
                                    if (i == AI.AgreementPeriod)
                                    {
                                        //==Full Month
                                        if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                            CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                        }
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                        else if (AI.ReviewFrequency < 1 && lstReviewInfo.Count > 0)
                        {
                            //==Review Declaration Wise
                            int MonthNo = 0;
                            int ReviewNo = 0;
                            double NewCPU = AI.CostPerUnit;
                            //==Review Wise
                            foreach (RMS.Models.ReviewInfo RI in lstReviewInfo)
                            {
                                ReviewNo = ReviewNo + 1;
                                if (RI.ReviewNo == 1)
                                {
                                    //==Schedule without Review
                                    int ReviewStartMonth = ((RI.StartDate.Year - AI.AgreementStartDate.Year) * 12 + RI.StartDate.Month - AI.AgreementStartDate.Month) + 1;
                                    for (int i = 1; i < ReviewStartMonth; i++)
                                    {
                                        MonthNo = MonthNo + 1;
                                        CS = new RMS.Models.ContractSchedule();
                                        if (i != 1)
                                        {
                                            ScheduleDate = ScheduleDate.AddMonths(1);
                                        }
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = 0;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        CS.CostPerUnit = AI.CostPerUnit;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        if (i == 1)
                                        {
                                            //==Full Month
                                            if (ScheduleDate.Day != 1)
                                            {
                                                //==Fraction Date Rent Amount
                                                MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                                RentPerDay = CS.TotalRentAmount / MonthDays;
                                                CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                            }
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = 0;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = AI.CostPerUnit;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = 0;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = AI.CostPerUnit;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                    //==Schedule with Review
                                    for (int i = 1; i <= RI.Period; i++)
                                    {
                                        MonthNo = MonthNo + 1;
                                        CS = new RMS.Models.ContractSchedule();
                                        ScheduleDate = ScheduleDate.AddMonths(1);
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        //==Fraction Month
                                        if (i == 1)
                                        {
                                            if (RI.StartDate.Day != 1)
                                            {
                                                //==Before Review Amount
                                                MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                                RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                                BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                                //==After Review Amount                                            
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                                AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                                CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                            }
                                            else
                                            {
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        //==Review Last Month
                                        else if (i == RI.Period)
                                        {
                                            ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                            //==Full Month
                                            if (RI.EndDate.Day != ReviewMonthDaysCount)
                                            {
                                                //==Fraction Date Rent Amount
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                                CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                            }
                                            else
                                            {
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = NewCPU;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = NewCPU;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    //==Schedule rest of the Review
                                    for (int i = 1; i <= RI.Period; i++)
                                    {
                                        CS = new RMS.Models.ContractSchedule();
                                        //==Conditions applicable for multiple enhancement slots are two enhancements in the same month
                                        if (i == 1 && ScheduleDate.Year == RI.StartDate.Year && ScheduleDate.Month == RI.StartDate.Month)
                                        {
                                            //===MonthNo wise Delete from Contract Schedule
                                            db.ContractSchedules.RemoveRange(db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //===MonthNo wise Delete from Landlord Schedule
                                            db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //===MonthNo wise Delete from Cost Center Schedule
                                            db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //==
                                        }
                                        else
                                        {
                                            MonthNo = MonthNo + 1;
                                            ScheduleDate = ScheduleDate.AddMonths(1);
                                        }
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        //==Fraction Month
                                        if (i == 1)
                                        {
                                            if (RI.StartDate.Day != 1)
                                            {
                                                //==Before Review Amount
                                                MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                                RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                                BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                                //==After Review Amount                                            
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                                AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                                CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                            }
                                            else
                                            {
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        //==Review Last Month
                                        else if (i == RI.Period)
                                        {
                                            ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                            //==Full Month
                                            if (RI.EndDate.Day != ReviewMonthDaysCount)
                                            {
                                                //==Fraction Date Rent Amount
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                                CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                            }
                                            else
                                            {
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = NewCPU;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = NewCPU;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                            }
                        }
                        #region Advance Adjustment
                        //==Advance Info Loop
                        DateTime AdvStartDate = DateTime.Now;
                        int AdvYear = 0;
                        string AdvMonthName = String.Empty;
                        double AdvAdjPerDay = 0;
                        double AdvAdjAmount = 0;
                        double AdvanceMonthDaysCount = 0;
                        foreach (RMS.Models.AdvanceInfo AdvInfo in lstAdvanceInfo)
                        {
                            AdvStartDate = AdvInfo.StartDate;
                            for (int i = 1; i <= AdvInfo.AdvanceSlotPeriod; i++)
                            {
                                if (i != 1)
                                {
                                    AdvStartDate = AdvStartDate.AddMonths(1);
                                }
                                AdvYear = AdvStartDate.Year;
                                AdvMonthName = AdvStartDate.ToString("MMMM");
                                AdvAdjAmount = AdvInfo.AdvanceSlotAmount;
                                //==Fraction Advance Adjustment
                                //==First Month
                                if (i == 1)
                                {
                                    if (AdvStartDate.Day != 1)
                                    {
                                        MonthDays = DateTime.DaysInMonth(AdvStartDate.Year, AdvStartDate.Month);
                                        //==Fraction Date Adv Adj Amount
                                        AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / MonthDays;
                                        AdvAdjAmount = ((MonthDays - AdvStartDate.Day) + 1) * AdvAdjPerDay;
                                    }
                                }
                                else
                                {
                                    //==Last Month
                                    if (i == AdvInfo.AdvanceSlotPeriod)
                                    {
                                        AdvanceMonthDaysCount = DateTime.DaysInMonth(AdvInfo.EndDate.Year, AdvInfo.EndDate.Month);
                                        if (AdvInfo.EndDate.Day != AdvanceMonthDaysCount)
                                        {
                                            //==Fraction Date Adv Adj Amount
                                            AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / AdvanceMonthDaysCount;
                                            AdvAdjAmount = AdvInfo.EndDate.Day * AdvAdjPerDay;
                                        }
                                    }
                                }
                                //==Advance Process Contract Schedule
                                RMS.Models.ContractSchedule GCS = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).SingleOrDefault();
                                GCS.AdvanceAdjustmentAmount = AdvAdjAmount;
                                GCS.NetRentAmount = GCS.NetRentAmount - GCS.AdvanceAdjustmentAmount;
                                //db.Entry(GCS).State = EntityState.Modified;
                                //db.SaveChanges();
                                //==Advance Process Landlord Schedule
                                List<RMS.Models.LandlordSchedule> lstGLS = db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                                foreach (RMS.Models.LandlordSchedule GLS in lstGLS)
                                {
                                    var GLandlordInfo = db.LandlordInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.LandlordSLNo == GLS.LandlordSLNo).Select(x => new { x.AdvanceAdjustmentPC, x.RentPC }).SingleOrDefault();
                                    GLS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * GLandlordInfo.AdvanceAdjustmentPC) / 100;
                                    GLS.NetRentAmount = GLS.NetRentAmount - GLS.AdvanceAdjustmentAmount;
                                    db.Entry(GLS).State = EntityState.Modified;
                                    db.SaveChanges();
                                }
                                //==Advance Process Cost Center Schedule
                                double CCSharePC = 0;
                                List<RMS.Models.CostCenterSchedule> lstGCCS = db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                                foreach (RMS.Models.CostCenterSchedule GCCS in lstGCCS)
                                {
                                    CCSharePC = db.CostCenterInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.CCSLNo == GCCS.CCSLNo).Select(x => x.CCShareAllotment).SingleOrDefault();
                                    GCCS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * CCSharePC) / 100;
                                    GCCS.NetRentAmount = GCCS.NetRentAmount - GCCS.AdvanceAdjustmentAmount;
                                    db.Entry(GCCS).State = EntityState.Modified;
                                    db.SaveChanges();
                                }
                            }
                        }
                        #endregion
                        #region Utility Schedule
                        //ScheduleDate = AI.AgreementStartDate.AddMonths(-1);
                        //for (int i = 1; i <= AI.AgreementPeriod; i++)
                        //{
                        //    ScheduleDate = ScheduleDate.AddMonths(1);
                        //    //==Utility Schedule
                        //    foreach (RMS.Models.UtilityInfo UI in lstUtility)
                        //    {
                        //        US = new RMS.Models.UtilitySchedule();
                        //        US.ScheduleDate = ScheduleDate;
                        //        US.AgreementSLNo = AI.AgreementSLNo;
                        //        US.UtilitySLNo = UI.UtilitySLNo;
                        //        US.MonthNo = i;
                        //        US.Year = US.ScheduleDate.Year;
                        //        US.Month = US.ScheduleDate.ToString("MMMM");
                        //        US.ServiceChargeAmount = UI.ServiceChargeAmount;
                        //        US.OnlineTowerAmount = UI.OnlineTowerAmount;
                        //        US.GeneratorSpaceAmount = UI.GeneratorSpaceAmount;
                        //        US.CarParkingAmount = UI.CarParkingAmount;
                        //        US.TaxAmount = UI.TaxAmount;
                        //        US.VATAmount = UI.VATAmount;
                        //        US.UserSLNo = AI.UserSLNo;
                        //        US.EntryDate = DateTime.Now;
                        //        db.UtilitySchedules.Add(US);
                        //        db.SaveChanges();
                        //    }
                        //}
                        #endregion
                        //==Remove the posted months from the new schedule
                        var ContractSchedules = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == true);
                        foreach (var item in ContractSchedules)
                        {
                            //===Delete
                            db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                            db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                        }
                        db.SaveChanges();
                        //var UtilitySchedules = db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == true);
                        //foreach (var item in UtilitySchedules)
                        //{
                        //    //===Delete
                        //    db.UtilitySchedules.RemoveRange(db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                        //}
                        //db.SaveChanges();
                        //==
                    } //==End
                    AlertMsg = "The agreement: " + AI.AgreementName + " has been updated.";
                    return Json(new { CheckStatus = true, AgreementCode = AI.AgreementCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EditAttach(RMS.Models.AgreementInfoDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = (string)Session["LoginUserID"];
                    RMS.Models.AgreementInfo AI = new RMS.Models.AgreementInfo();
                    AI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).SingleOrDefault();
                    //==Basic Info
                    AI.PremiseTypeSLNo = DTO.PremiseTypeSLNo;
                    AI.PremiseName = DTO.PremiseName;
                    AI.PremiseAddress = DTO.PremiseAddress;
                    AI.ConcernBranch = DTO.ConcernBranch;
                    AI.InspectorName = DTO.InspectorName;
                    AI.InspectorContactNo = DTO.InspectorContactNo;
                    AI.ClusterGroup = DTO.ClusterGroup;
                    //==Agreement Status Wise Update
                    AI.RentDueDay = DTO.RentDueDay;
                    if (AI.AgreementStatus == 1)
                    {
                        //==Agreement Info
                        AI.AgreementName = DTO.AgreementName;
                        AI.AgreementStartDate = DateTime.ParseExact(DTO.AgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        AI.AgreementEndDate = DateTime.ParseExact(DTO.AgreementEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        AI.AgreementPeriod = DTO.AgreementPeriod;
                        AI.RenewalFrequency = AI.AgreementPeriod;
                        AI.UOM = DTO.UOM;
                        AI.TotalArea = DTO.TotalArea;
                        AI.CostPerUnit = DTO.CostPerUnit;
                        AI.TotalRentAmount = DTO.TotalRentAmount;
                        AI.SecurityDepositAmount = DTO.SecurityDepositAmount;
                        AI.AdvanceAmount = DTO.AdvanceAmount;
                        AI.AdvanceAdjustmentPeriod = DTO.AdvanceAdjustmentPeriod;
                        AI.AdvanceAdjustmentAmount = DTO.AdvanceAdjustmentAmount;
                        AI.TaxPercentage = DTO.TaxPercentage;
                        AI.TaxAmount = DTO.TaxAmount;
                        AI.VATPercentage = DTO.VATPercentage;
                        AI.VATAmount = DTO.VATAmount;
                        AI.NetRentAmount = AI.TotalRentAmount - AI.AdvanceAdjustmentAmount;
                        AI.AgreementText = DTO.AgreementText;
                        //AI.Status = DTO.Status;
                        AI.TaxType = DTO.TaxType;
                        AI.VatType = DTO.VatType;
                        AI.CalculationMethod = DTO.CalculationMethod;
                        AI.BorrowingRate = DTO.BorrowingRate;
                        AI.IsIFRSEnable = DTO.IsIFRSEnable;
                        if (DTO.IFRSEffectiveDate != null && DTO.IsIFRSEnable == true)
                        {
                            AI.IFRSEffectiveDate = DateTime.ParseExact(DTO.IFRSEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        }
                        else
                        {
                            AI.IFRSEffectiveDate = null;
                        }
                        AI.CorporateTaxRate = DTO.CorporateTaxRate;
                    }
                    //==Control Data
                    AI.CashGLCode = DTO.CashGLCode;
                    AI.BankGLCode = DTO.BankGLCode;
                    AI.AdvanceGLCode = DTO.AdvanceGLCode;
                    AI.AdvanceAdjustmentGLCode = DTO.AdvanceAdjustmentGLCode;
                    AI.RentGLCode = DTO.RentGLCode;
                    AI.ServiceChargeGLCode = DTO.ServiceChargeGLCode;
                    AI.TaxGLCode = DTO.TaxGLCode;
                    AI.VATGLCode = DTO.VATGLCode;
                    AI.ProvisionGLTax = DTO.ProvisionGLTax;
                    AI.ProvisionGLAP = DTO.ProvisionGLAP;
                    AI.RTGSGL = DTO.RTGSGL;
                    AI.EFTNGL = DTO.EFTNGL;
                    AI.PayOrderGL = DTO.PayOrderGL;
                    AI.IBBPaymentGL = DTO.IBBPaymentGL;
                    AI.CityBrokerageGL = DTO.CityBrokerageGL;
                    AI.CityCapitalGL = DTO.CityCapitalGL;
                    AI.OthersGL = DTO.OthersGL;
                    //if (DTO.Status == 0)
                    //{
                    //    AI.IsBlock = true;
                    //    AI.BlockDate = DateTime.Now;
                    //    AI.BlockUserSLNo = AI.UserSLNo;
                    //}
                    //else
                    //{
                    //    AI.IsBlock = false;
                    //    AI.BlockDate = null;
                    //    AI.BlockUserSLNo = null;
                    //}
                    AI.EditBy = (string)Session["LoginUserID"];
                    AI.EditDate = DateTime.Now;
                    AI.IsDeleted = false;
                    //==Utility Master Info
                    AI.ReviewFrequency = DTO.ReviewFrequency;
                    AI.ReviewPercentage = DTO.ReviewPercentage;
                    AI.ServiceCharge = DTO.ServiceCharge;
                    AI.OnlineTower = DTO.OnlineTower;
                    AI.GeneratorSpace = DTO.GeneratorSpace;
                    AI.CarParking = DTO.CarParking;
                    //=====
                    AI.PremiseAddressBangla = DTO.PremiseAddressBangla;
                    AI.AreaStatus = DTO.AreaStatus;
                    AI.RegionalOffice = DTO.RegionalOffice;
                    AI.PrimarySOL = DTO.PrimarySOL;
                    AI.AttachedControl = DTO.AttachedControl;
                    AI.ControllerOfficeDistance = DTO.ControllerOfficeDistance;
                    AI.RoutingNumber = DTO.RoutingNumber;
                    AI.Division = DTO.Division;
                    AI.District = DTO.District;
                    AI.Upazila = DTO.Upazila;
                    AI.Thana = DTO.Thana;
                    AI.ThanaCode = DTO.ThanaCode;
                    AI.Pourasabha = DTO.Pourasabha;
                    AI.PourasabhaType = DTO.PourasabhaType;
                    AI.UnionName = DTO.UnionName;
                    AI.WardNo = DTO.WardNo;
                    AI.PremisesTypeforAccounts = DTO.PremisesTypeforAccounts;
                    AI.ParentAgreementCode = DTO.ParentAgreementCode;
                    AI.ElectricityLoad = DTO.ElectricityLoad;
                    AI.ElectricityProvidedBy = DTO.ElectricityProvidedBy;
                    AI.AITBourneBy = DTO.AITBourneBy;
                    AI.CommercialPermission = DTO.CommercialPermission;
                    AI.BuildingPlan = DTO.BuildingPlan;
                    AI.PremisesSituatedFloor = DTO.PremisesSituatedFloor;
                    AI.BangladeshBankApproval = DTO.BangladeshBankApproval;
                    AI.BangladeshBankReference = DTO.BangladeshBankReference;
                    AI.ITTowerRentClause = DTO.ITTowerRentClause;
                    AI.TerminationClause = DTO.TerminationClause;
                    AI.TerminationNoticePeriod = DTO.TerminationNoticePeriod;
                    if (DTO.PremisesOpeningDate != null)
                    {
                        AI.PremisesOpeningDate = DateTime.ParseExact(DTO.PremisesOpeningDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.PremisesOpeningDate = null;
                    }
                    if (DTO.DocumentDate != null)
                    {
                        AI.DocumentDate = DateTime.ParseExact(DTO.DocumentDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.DocumentDate = null;
                    }
                    AI.Remarks = DTO.Remarks;
                    AI.AgreementRemarks = DTO.AgreementRemarks;
                    AI.AdvanceRemarks = DTO.AdvanceRemarks;
                    AI.ReviewRemarks = DTO.ReviewRemarks;
                    AI.LLRemarks = DTO.LLRemarks;
                    AI.CCRemarks = DTO.CCRemarks;
                    AI.UtilityRemarks = DTO.UtilityRemarks;
                    AI.ControlDataRemarks = DTO.ControlDataRemarks;

                    AI.PaymentMethod = DTO.PaymentMethod;
                    AI.WithHoldingCode = DTO.WithHoldingCode;
                    AI.AdditionalExpense = DTO.AdditionalExpense;
                    AI.InitialDirectCost = DTO.InitialDirectCost;
                    AI.DismantlingCost = DTO.DismantlingCost;
                    AI.CarParkingNo = DTO.CarParkingNo;
                    AI.WaterBillType = DTO.WaterBillType;
                    AI.WaterBillAmount = DTO.WaterBillAmount;
                    //=====
                    db.Entry(AI).State = EntityState.Modified;
                    db.SaveChanges();
                    //==Space Information
                    //===Delete Existing Space Info
                    db.SpaceInfos.RemoveRange(db.SpaceInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                    db.SaveChanges();
                    //==
                    string[] SpaceTypeList = null;
                    if (DTO.SpaceTypeList != null)
                    {
                        SpaceTypeList = DTO.SpaceTypeList.Split(',');
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            SpaceTypeList[i] = SpaceTypeList[i].Trim();
                        }
                    }
                    string[] SpaceAreaList = null;
                    if (DTO.SpaceAreaList != null)
                    {
                        SpaceAreaList = DTO.SpaceAreaList.Split(',');
                        for (int i = 0; i < SpaceAreaList.Length; i++)
                        {
                            SpaceAreaList[i] = SpaceAreaList[i].Trim();
                        }
                    }
                    string[] SpaceRateList = null;
                    if (DTO.SpaceRateList != null)
                    {
                        SpaceRateList = DTO.SpaceRateList.Split(',');
                        for (int i = 0; i < SpaceRateList.Length; i++)
                        {
                            SpaceRateList[i] = SpaceRateList[i].Trim();
                        }
                    }
                    string[] SpaceRentList = null;
                    if (DTO.SpaceRentList != null)
                    {
                        SpaceRentList = DTO.SpaceRentList.Split(',');
                        for (int i = 0; i < SpaceRentList.Length; i++)
                        {
                            SpaceRentList[i] = SpaceRentList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdvanceList = null;
                    if (DTO.SpaceTotalAdvanceList != null)
                    {
                        SpaceTotalAdvanceList = DTO.SpaceTotalAdvanceList.Split(',');
                        for (int i = 0; i < SpaceTotalAdvanceList.Length; i++)
                        {
                            SpaceTotalAdvanceList[i] = SpaceTotalAdvanceList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdjustmentList = null;
                    if (DTO.SpaceTotalAdjustmentList != null)
                    {
                        SpaceTotalAdjustmentList = DTO.SpaceTotalAdjustmentList.Split(',');
                        for (int i = 0; i < SpaceTotalAdjustmentList.Length; i++)
                        {
                            SpaceTotalAdjustmentList[i] = SpaceTotalAdjustmentList[i].Trim();
                        }
                    }
                    string[] SpaceRemarksList = null;
                    if (DTO.SpaceRemarksList != null)
                    {
                        SpaceRemarksList = DTO.SpaceRemarksList.Split(',');
                        for (int i = 0; i < SpaceRemarksList.Length; i++)
                        {
                            SpaceRemarksList[i] = SpaceRemarksList[i].Trim();
                        }
                    }
                    if (SpaceTypeList != null)
                    {
                        RMS.Models.SpaceInfo SpaceInfo;
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            if (SpaceTypeList[i] != null && SpaceTypeList[i] != "")
                            {
                                SpaceInfo = new RMS.Models.SpaceInfo();
                                SpaceInfo.AgreementSLNo = AI.AgreementSLNo;
                                SpaceInfo.SpaceType = (SpaceTypeList == null) ? null : SpaceTypeList[i].ToString();
                                SpaceInfo.SpaceArea = Convert.ToDouble(SpaceAreaList[i].ToString());
                                SpaceInfo.SpaceRate = Convert.ToDouble(SpaceRateList[i].ToString());
                                SpaceInfo.SpaceRent = Convert.ToDouble(SpaceRentList[i].ToString());
                                SpaceInfo.SpaceTotalAdvance = Convert.ToDouble(SpaceTotalAdvanceList[i].ToString());
                                SpaceInfo.SpaceTotalAdjustment = Convert.ToDouble(SpaceTotalAdjustmentList[i].ToString());
                                SpaceInfo.SpaceRemarks = (SpaceRemarksList == null) ? null : SpaceRemarksList[i].ToString();
                                db.SpaceInfos.Add(SpaceInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    if (AI.AgreementStatus == 1)
                    {
                        //==Advance Information
                        //===Delete Existing Advance Info
                        db.AdvanceInfos.RemoveRange(db.AdvanceInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                        //==
                        string[] AdvanceNoList = null;
                        if (DTO.AdvanceNoList != null)
                        {
                            AdvanceNoList = DTO.AdvanceNoList.Split(',');
                            for (int i = 0; i < AdvanceNoList.Length; i++)
                            {
                                AdvanceNoList[i] = AdvanceNoList[i].Trim();
                            }
                        }
                        string[] AdvanceSlotPeriodList = null;
                        if (DTO.AdvanceSlotPeriodList != null)
                        {
                            AdvanceSlotPeriodList = DTO.AdvanceSlotPeriodList.Split(',');
                            for (int i = 0; i < AdvanceSlotPeriodList.Length; i++)
                            {
                                AdvanceSlotPeriodList[i] = AdvanceSlotPeriodList[i].Trim();
                            }
                        }
                        string[] AdvanceStartDateList = null;
                        if (DTO.AdvanceStartDateList != null)
                        {
                            AdvanceStartDateList = DTO.AdvanceStartDateList.Split(',');
                            for (int i = 0; i < AdvanceStartDateList.Length; i++)
                            {
                                AdvanceStartDateList[i] = AdvanceStartDateList[i].Trim();
                            }
                        }
                        string[] AdvanceEndDateList = null;
                        if (DTO.AdvanceEndDateList != null)
                        {
                            AdvanceEndDateList = DTO.AdvanceEndDateList.Split(',');
                            for (int i = 0; i < AdvanceEndDateList.Length; i++)
                            {
                                AdvanceEndDateList[i] = AdvanceEndDateList[i].Trim();
                            }
                        }
                        string[] AdvanceNoteList = null;
                        if (DTO.AdvanceNoteList != null)
                        {
                            AdvanceNoteList = DTO.AdvanceNoteList.Split(',');
                            for (int i = 0; i < AdvanceNoteList.Length; i++)
                            {
                                AdvanceNoteList[i] = AdvanceNoteList[i].Trim();
                            }
                        }
                        string[] AdvanceSlotAmountList = null;
                        if (DTO.AdvanceSlotAmountList != null)
                        {
                            AdvanceSlotAmountList = DTO.AdvanceSlotAmountList.Split(',');
                            for (int i = 0; i < AdvanceSlotAmountList.Length; i++)
                            {
                                AdvanceSlotAmountList[i] = AdvanceSlotAmountList[i].Trim();
                            }
                        }
                        if (AdvanceNoList != null)
                        {
                            RMS.Models.AdvanceInfo AdvInfo;
                            for (int i = 0; i < AdvanceNoList.Length; i++)
                            {
                                if (AdvanceNoList[i] != null && AdvanceNoList[i] != "")
                                {
                                    AdvInfo = new RMS.Models.AdvanceInfo();
                                    AdvInfo.AgreementSLNo = AI.AgreementSLNo;
                                    AdvInfo.AdvanceNo = Convert.ToInt32(AdvanceNoList[i].ToString());
                                    AdvInfo.AdvanceSlotPeriod = Convert.ToInt32(AdvanceSlotPeriodList[i].ToString());
                                    AdvInfo.StartDate = DateTime.ParseExact(AdvanceStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    AdvInfo.EndDate = DateTime.ParseExact(AdvanceEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    AdvInfo.AdvanceSlotAmount = Convert.ToDouble(AdvanceSlotAmountList[i].ToString());
                                    AdvInfo.AdvanceNote = (AdvanceNoteList == null) ? null : AdvanceNoteList[i].ToString();
                                    db.AdvanceInfos.Add(AdvInfo);
                                    db.SaveChanges();
                                }
                            }
                        }
                        //==Review Info
                        //===Delete Existing Review Info
                        db.ReviewInfos.RemoveRange(db.ReviewInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                        //==
                        string[] ReviewNoList = null;
                        if (DTO.ReviewNoList != null)
                        {
                            ReviewNoList = DTO.ReviewNoList.Split(',');
                            for (int i = 0; i < ReviewNoList.Length; i++)
                            {
                                ReviewNoList[i] = ReviewNoList[i].Trim();
                            }
                        }
                        string[] ReviewStartDateList = null;
                        if (DTO.ReviewStartDateList != null)
                        {
                            ReviewStartDateList = DTO.ReviewStartDateList.Split(',');
                            for (int i = 0; i < ReviewStartDateList.Length; i++)
                            {
                                ReviewStartDateList[i] = ReviewStartDateList[i].Trim();
                            }
                        }
                        string[] ReviewEndDateList = null;
                        if (DTO.ReviewEndDateList != null)
                        {
                            ReviewEndDateList = DTO.ReviewEndDateList.Split(',');
                            for (int i = 0; i < ReviewEndDateList.Length; i++)
                            {
                                ReviewEndDateList[i] = ReviewEndDateList[i].Trim();
                            }
                        }
                        string[] ReviewPeriodList = null;
                        if (DTO.ReviewPeriodList != null)
                        {
                            ReviewPeriodList = DTO.ReviewPeriodList.Split(',');
                            for (int i = 0; i < ReviewPeriodList.Length; i++)
                            {
                                ReviewPeriodList[i] = ReviewPeriodList[i].Trim();
                            }
                        }
                        string[] ReviewIncreaseAmountList = null;
                        if (DTO.ReviewIncreaseAmountList != null)
                        {
                            ReviewIncreaseAmountList = DTO.ReviewIncreaseAmountList.Split(',');
                            for (int i = 0; i < ReviewIncreaseAmountList.Length; i++)
                            {
                                ReviewIncreaseAmountList[i] = ReviewIncreaseAmountList[i].Trim();
                            }
                        }
                        string[] ReviewIncreasePercentageList = null;
                        if (DTO.ReviewIncreasePercentageList != null)
                        {
                            ReviewIncreasePercentageList = DTO.ReviewIncreasePercentageList.Split(',');
                            for (int i = 0; i < ReviewIncreasePercentageList.Length; i++)
                            {
                                ReviewIncreasePercentageList[i] = ReviewIncreasePercentageList[i].Trim();
                            }
                        }
                        string[] ReviewNoteList = null;
                        if (DTO.ReviewNoteList != null)
                        {
                            ReviewNoteList = DTO.ReviewNoteList.Split(',');
                            for (int i = 0; i < ReviewNoteList.Length; i++)
                            {
                                ReviewNoteList[i] = ReviewNoteList[i].Trim();
                            }
                        }
                        if (ReviewNoList != null)
                        {
                            RMS.Models.ReviewInfo RI;
                            for (int i = 0; i < ReviewNoList.Length; i++)
                            {
                                if (ReviewNoList[i] != null && ReviewNoList[i] != "")
                                {
                                    RI = new RMS.Models.ReviewInfo();
                                    RI.AgreementSLNo = AI.AgreementSLNo;
                                    RI.ReviewNo = Convert.ToInt32(ReviewNoList[i].ToString());
                                    RI.Period = Convert.ToInt32(ReviewPeriodList[i].ToString());
                                    RI.StartDate = DateTime.ParseExact(ReviewStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    RI.EndDate = DateTime.ParseExact(ReviewEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    RI.IncreaseAmount = Convert.ToDouble(ReviewIncreaseAmountList[i].ToString());
                                    RI.IncreasePercentage = Convert.ToDouble(ReviewIncreasePercentageList[i].ToString());
                                    RI.ReviewNote = (ReviewNoteList == null) ? null : ReviewNoteList[i].ToString();
                                    db.ReviewInfos.Add(RI);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                    //==Landlord Information
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Landlord Info
                        db.LandlordInfos.RemoveRange(db.LandlordInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        //===Update Existing Landlord Info
                        List<RMS.Models.LandlordInfo> lstOldLandlord = db.LandlordInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstOldLandlord.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    string[] VendorCodeList = null;
                    if (DTO.VendorCodeList != null)
                    {
                        VendorCodeList = DTO.VendorCodeList.Split(',');
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            VendorCodeList[i] = VendorCodeList[i].Trim();
                        }
                    }
                    string[] LandlordNameList = null;
                    if (DTO.LandlordNameList != null)
                    {
                        LandlordNameList = DTO.LandlordNameList.Split(',');
                        for (int i = 0; i < LandlordNameList.Length; i++)
                        {
                            LandlordNameList[i] = LandlordNameList[i].Trim();
                        }
                    }
                    string[] ModeOfPaymentList = null;
                    if (DTO.ModeOfPaymentList != null)
                    {
                        ModeOfPaymentList = DTO.ModeOfPaymentList.Split(',');
                        for (int i = 0; i < ModeOfPaymentList.Length; i++)
                        {
                            ModeOfPaymentList[i] = ModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] VendorAdvancePCList = null;
                    if (DTO.VendorAdvancePCList != null)
                    {
                        VendorAdvancePCList = DTO.VendorAdvancePCList.Split(',');
                        for (int i = 0; i < VendorAdvancePCList.Length; i++)
                        {
                            VendorAdvancePCList[i] = VendorAdvancePCList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAmountList = null;
                    if (DTO.VendorAdvanceAmountList != null)
                    {
                        VendorAdvanceAmountList = DTO.VendorAdvanceAmountList.Split(',');
                        for (int i = 0; i < VendorAdvanceAmountList.Length; i++)
                        {
                            VendorAdvanceAmountList[i] = VendorAdvanceAmountList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAdjustmentPCList = null;
                    if (DTO.VendorAdvanceAdjustmentPCList != null)
                    {
                        VendorAdvanceAdjustmentPCList = DTO.VendorAdvanceAdjustmentPCList.Split(',');
                        for (int i = 0; i < VendorAdvanceAdjustmentPCList.Length; i++)
                        {
                            VendorAdvanceAdjustmentPCList[i] = VendorAdvanceAdjustmentPCList[i].Trim();
                        }
                    }
                    //string[] VendorAdvanceAdjustmentAmountList = null;
                    //if (DTO.VendorAdvanceAdjustmentAmountList != null)
                    //{
                    //    VendorAdvanceAdjustmentAmountList = DTO.VendorAdvanceAdjustmentAmountList.Split(',');
                    //    for (int i = 0; i < VendorAdvanceAdjustmentAmountList.Length; i++)
                    //    {
                    //        VendorAdvanceAdjustmentAmountList[i] = VendorAdvanceAdjustmentAmountList[i].Trim();
                    //    }
                    //}
                    string[] VendorTaxPCList = null;
                    if (DTO.VendorTaxPCList != null)
                    {
                        VendorTaxPCList = DTO.VendorTaxPCList.Split(',');
                        for (int i = 0; i < VendorTaxPCList.Length; i++)
                        {
                            VendorTaxPCList[i] = VendorTaxPCList[i].Trim();
                        }
                    }
                    string[] VendorTaxAmountList = null;
                    if (DTO.VendorTaxAmountList != null)
                    {
                        VendorTaxAmountList = DTO.VendorTaxAmountList.Split(',');
                        for (int i = 0; i < VendorTaxAmountList.Length; i++)
                        {
                            VendorTaxAmountList[i] = VendorTaxAmountList[i].Trim();
                        }
                    }
                    string[] VendorVATPCList = null;
                    if (DTO.VendorVATPCList != null)
                    {
                        VendorVATPCList = DTO.VendorVATPCList.Split(',');
                        for (int i = 0; i < VendorVATPCList.Length; i++)
                        {
                            VendorVATPCList[i] = VendorVATPCList[i].Trim();
                        }
                    }
                    string[] VendorVATAmountList = null;
                    if (DTO.VendorVATAmountList != null)
                    {
                        VendorVATAmountList = DTO.VendorVATAmountList.Split(',');
                        for (int i = 0; i < VendorVATAmountList.Length; i++)
                        {
                            VendorVATAmountList[i] = VendorVATAmountList[i].Trim();
                        }
                    }
                    string[] VendorRentPCList = null;
                    if (DTO.VendorRentPCList != null)
                    {
                        VendorRentPCList = DTO.VendorRentPCList.Split(',');
                        for (int i = 0; i < VendorRentPCList.Length; i++)
                        {
                            VendorRentPCList[i] = VendorRentPCList[i].Trim();
                        }
                    }
                    //string[] VendorRentAmountList = null;
                    //if (DTO.VendorRentAmountList != null)
                    //{
                    //    VendorRentAmountList = DTO.VendorRentAmountList.Split(',');
                    //    for (int i = 0; i < VendorRentAmountList.Length; i++)
                    //    {
                    //        VendorRentAmountList[i] = VendorRentAmountList[i].Trim();
                    //    }
                    //}
                    string[] AddressList = null;
                    if (DTO.LLAddressList != null)
                    {
                        AddressList = DTO.LLAddressList.Split(',');
                        for (int i = 0; i < AddressList.Length; i++)
                        {
                            AddressList[i] = AddressList[i].Trim();
                        }
                    }
                    string[] ContactNoList = null;
                    if (DTO.LLContactNoList != null)
                    {
                        ContactNoList = DTO.LLContactNoList.Split(',');
                        for (int i = 0; i < ContactNoList.Length; i++)
                        {
                            ContactNoList[i] = ContactNoList[i].Trim();
                        }
                    }
                    string[] EmailList = null;
                    if (DTO.LLEmailList != null)
                    {
                        EmailList = DTO.LLEmailList.Split(',');
                        for (int i = 0; i < EmailList.Length; i++)
                        {
                            EmailList[i] = EmailList[i].Trim();
                        }
                    }
                    string[] ACNoList = null;
                    if (DTO.ACNoList != null)
                    {
                        ACNoList = DTO.ACNoList.Split(',');
                        for (int i = 0; i < ACNoList.Length; i++)
                        {
                            ACNoList[i] = ACNoList[i].Trim();
                        }
                    }
                    string[] BankNameList = null;
                    if (DTO.BankNameList != null)
                    {
                        BankNameList = DTO.BankNameList.Split(',');
                        for (int i = 0; i < BankNameList.Length; i++)
                        {
                            BankNameList[i] = BankNameList[i].Trim();
                        }
                    }
                    string[] BranchNameList = null;
                    if (DTO.BranchNameList != null)
                    {
                        BranchNameList = DTO.BranchNameList.Split(',');
                        for (int i = 0; i < BranchNameList.Length; i++)
                        {
                            BranchNameList[i] = BranchNameList[i].Trim();
                        }
                    }
                    string[] RoutingNoList = null;
                    if (DTO.RoutingNoList != null)
                    {
                        RoutingNoList = DTO.RoutingNoList.Split(',');
                        for (int i = 0; i < RoutingNoList.Length; i++)
                        {
                            RoutingNoList[i] = RoutingNoList[i].Trim();
                        }
                    }
                    RMS.Models.LandlordInfo LInfo;
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    for (int i = 0; i < VendorCodeList.Length; i++)
                    {
                        if (VendorCodeList[i] != null && VendorCodeList[i] != "")
                        {
                            LInfo = new RMS.Models.LandlordInfo();
                            LInfo.AgreementSLNo = DTO.AgreementSLNo;
                            LInfo.VendorCode = (VendorCodeList == null) ? null : VendorCodeList[i].ToString();
                            LInfo.LandlordName = (LandlordNameList == null) ? null : LandlordNameList[i].ToString();
                            LInfo.ModeOfPayment = DTO.ModeOfPayment;
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { LInfo.ModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { LInfo.ModeOfPayment = ModeOfPaymentLocation.RTGS; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { LInfo.ModeOfPayment = ModeOfPaymentLocation.EFTN; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { LInfo.ModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { LInfo.ModeOfPayment = ModeOfPaymentLocation.Cash; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { LInfo.ModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { LInfo.ModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { LInfo.ModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { LInfo.ModeOfPayment = ModeOfPaymentLocation.Others; }
                            LInfo.AdvancePC = Convert.ToDouble(VendorAdvancePCList[i].ToString());
                            LInfo.AdvanceAdjustmentPC = Convert.ToDouble(VendorAdvanceAdjustmentPCList[i].ToString());
                            LInfo.TaxPC = Convert.ToDouble(VendorTaxPCList[i].ToString());
                            LInfo.VATPC = Convert.ToDouble(VendorVATPCList[i].ToString());
                            LInfo.RentPC = Convert.ToDouble(VendorRentPCList[i].ToString());
                            //==PC Amount
                            LInfo.AdvanceAmount = (AI.AdvanceAmount * LInfo.AdvancePC) / 100;
                            LInfo.TaxAmount = (AI.TaxAmount * LInfo.TaxPC) / 100;
                            LInfo.VATAmount = (AI.VATAmount * LInfo.VATPC) / 100;
                            //==
                            LInfo.LLAddress = (AddressList == null) ? null : AddressList[i].ToString();
                            LInfo.LLContactNo = (ContactNoList == null) ? null : ContactNoList[i].ToString();
                            LInfo.LLEmail = (EmailList == null) ? null : EmailList[i].ToString();
                            LInfo.ACNo = (ACNoList == null) ? null : ACNoList[i].ToString();
                            LInfo.BankName = (BankNameList == null) ? null : BankNameList[i].ToString();
                            LInfo.BranchName = (BranchNameList == null) ? null : BranchNameList[i].ToString();
                            LInfo.RoutingNo = (RoutingNoList == null) ? null : RoutingNoList[i].ToString();
                            db.LandlordInfos.Add(LInfo);
                            db.SaveChanges();
                        }
                    }
                    //==Cost Center
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Cost Center Info
                        db.CostCenterInfos.RemoveRange(db.CostCenterInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        List<RMS.Models.CostCenterInfo> lstCC = db.CostCenterInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstCC.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    //==Cost Center
                    string[] CCCodeList = null;
                    if (DTO.CCCodeList != null)
                    {
                        CCCodeList = DTO.CCCodeList.Split(',');
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            CCCodeList[i] = CCCodeList[i].Trim();
                        }
                    }
                    string[] CCNameList = null;
                    if (DTO.CCNameList != null)
                    {
                        CCNameList = DTO.CCNameList.Split(',');
                        for (int i = 0; i < CCNameList.Length; i++)
                        {
                            CCNameList[i] = CCNameList[i].Trim();
                        }
                    }
                    string[] SOLCodeList = null;
                    if (DTO.SOLCodeList != null)
                    {
                        SOLCodeList = DTO.SOLCodeList.Split(',');
                        for (int i = 0; i < SOLCodeList.Length; i++)
                        {
                            SOLCodeList[i] = SOLCodeList[i].Trim();
                        }
                    }
                    string[] SOLNameList = null;
                    if (DTO.SOLNameList != null)
                    {
                        SOLNameList = DTO.SOLNameList.Split(',');
                        for (int i = 0; i < SOLNameList.Length; i++)
                        {
                            SOLNameList[i] = SOLNameList[i].Trim();
                        }
                    }
                    string[] CCShareAllotmentList = null;
                    if (DTO.CCShareAllotmentList != null)
                    {
                        CCShareAllotmentList = DTO.CCShareAllotmentList.Split(',');
                        for (int i = 0; i < CCShareAllotmentList.Length; i++)
                        {
                            CCShareAllotmentList[i] = CCShareAllotmentList[i].Trim();
                        }
                    }
                    RMS.Models.CostCenterInfo CCinfo;
                    for (int i = 0; i < CCCodeList.Length; i++)
                    {
                        if (CCCodeList[i] != null && CCCodeList[i] != "")
                        {
                            CCinfo = new RMS.Models.CostCenterInfo();
                            CCinfo.AgreementSLNo = DTO.AgreementSLNo;
                            CCinfo.CCCode = (CCCodeList == null) ? null : CCCodeList[i].ToString();
                            CCinfo.CCName = (CCNameList == null) ? null : CCNameList[i].ToString();
                            CCinfo.SOLCode = (SOLCodeList == null) ? null : SOLCodeList[i].ToString();
                            CCinfo.SOLName = (SOLNameList == null) ? null : SOLNameList[i].ToString();
                            CCinfo.CCShareAllotment = Convert.ToDouble(CCShareAllotmentList[i].ToString());
                            db.CostCenterInfos.Add(CCinfo);
                            db.SaveChanges();
                        }
                    }
                    //==Utility Information
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Utility Info
                        db.UtilityInfos.RemoveRange(db.UtilityInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        List<RMS.Models.UtilityInfo> lstOldUtility = db.UtilityInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstOldUtility.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    string[] UtilityVendorCodeList = null;
                    if (DTO.UtilityVendorCodeList != null)
                    {
                        UtilityVendorCodeList = DTO.UtilityVendorCodeList.Split(',');
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            UtilityVendorCodeList[i] = UtilityVendorCodeList[i].Trim();
                        }
                    }
                    string[] UtilityLandlordNameList = null;
                    if (DTO.UtilityLandlordNameList != null)
                    {
                        UtilityLandlordNameList = DTO.UtilityLandlordNameList.Split(',');
                        for (int i = 0; i < UtilityLandlordNameList.Length; i++)
                        {
                            UtilityLandlordNameList[i] = UtilityLandlordNameList[i].Trim();
                        }
                    }
                    string[] UtilityModeOfPaymentList = null;
                    if (DTO.UtilityModeOfPaymentList != null)
                    {
                        UtilityModeOfPaymentList = DTO.UtilityModeOfPaymentList.Split(',');
                        for (int i = 0; i < UtilityModeOfPaymentList.Length; i++)
                        {
                            UtilityModeOfPaymentList[i] = UtilityModeOfPaymentList[i].Trim();
                        }
                    }

                    string[] ServiceChargePCList = null;
                    if (DTO.ServiceChargePCList != null)
                    {
                        ServiceChargePCList = DTO.ServiceChargePCList.Split(',');
                        for (int i = 0; i < ServiceChargePCList.Length; i++)
                        {
                            ServiceChargePCList[i] = ServiceChargePCList[i].Trim();
                        }
                    }
                    string[] ServiceChargeAmountList = null;
                    if (DTO.ServiceChargeAmountList != null)
                    {
                        ServiceChargeAmountList = DTO.ServiceChargeAmountList.Split(',');
                        for (int i = 0; i < ServiceChargeAmountList.Length; i++)
                        {
                            ServiceChargeAmountList[i] = ServiceChargeAmountList[i].Trim();
                        }
                    }

                    string[] OnlineTowerPCList = null;
                    if (DTO.OnlineTowerPCList != null)
                    {
                        OnlineTowerPCList = DTO.OnlineTowerPCList.Split(',');
                        for (int i = 0; i < OnlineTowerPCList.Length; i++)
                        {
                            OnlineTowerPCList[i] = OnlineTowerPCList[i].Trim();
                        }
                    }
                    string[] OnlineTowerAmountList = null;
                    if (DTO.OnlineTowerAmountList != null)
                    {
                        OnlineTowerAmountList = DTO.OnlineTowerAmountList.Split(',');
                        for (int i = 0; i < OnlineTowerAmountList.Length; i++)
                        {
                            OnlineTowerAmountList[i] = OnlineTowerAmountList[i].Trim();
                        }
                    }

                    string[] GeneratorSpacePCList = null;
                    if (DTO.GeneratorSpacePCList != null)
                    {
                        GeneratorSpacePCList = DTO.GeneratorSpacePCList.Split(',');
                        for (int i = 0; i < GeneratorSpacePCList.Length; i++)
                        {
                            GeneratorSpacePCList[i] = GeneratorSpacePCList[i].Trim();
                        }
                    }
                    string[] GeneratorSpaceAmountList = null;
                    if (DTO.GeneratorSpaceAmountList != null)
                    {
                        GeneratorSpaceAmountList = DTO.GeneratorSpaceAmountList.Split(',');
                        for (int i = 0; i < GeneratorSpaceAmountList.Length; i++)
                        {
                            GeneratorSpaceAmountList[i] = GeneratorSpaceAmountList[i].Trim();
                        }
                    }

                    string[] CarParkingPCList = null;
                    if (DTO.CarParkingPCList != null)
                    {
                        CarParkingPCList = DTO.CarParkingPCList.Split(',');
                        for (int i = 0; i < CarParkingPCList.Length; i++)
                        {
                            CarParkingPCList[i] = CarParkingPCList[i].Trim();
                        }
                    }
                    string[] CarParkingAmountList = null;
                    if (DTO.CarParkingAmountList != null)
                    {
                        CarParkingAmountList = DTO.CarParkingAmountList.Split(',');
                        for (int i = 0; i < CarParkingAmountList.Length; i++)
                        {
                            CarParkingAmountList[i] = CarParkingAmountList[i].Trim();
                        }
                    }
                    string[] UtilityTaxPCList = null;
                    if (DTO.UtilityTaxPCList != null)
                    {
                        UtilityTaxPCList = DTO.UtilityTaxPCList.Split(',');
                        for (int i = 0; i < UtilityTaxPCList.Length; i++)
                        {
                            UtilityTaxPCList[i] = UtilityTaxPCList[i].Trim();
                        }
                    }
                    string[] UtilityTaxAmountList = null;
                    if (DTO.UtilityTaxAmountList != null)
                    {
                        UtilityTaxAmountList = DTO.UtilityTaxAmountList.Split(',');
                        for (int i = 0; i < UtilityTaxAmountList.Length; i++)
                        {
                            UtilityTaxAmountList[i] = UtilityTaxAmountList[i].Trim();
                        }
                    }
                    string[] UtilityVATPCList = null;
                    if (DTO.UtilityVATPCList != null)
                    {
                        UtilityVATPCList = DTO.UtilityVATPCList.Split(',');
                        for (int i = 0; i < UtilityVATPCList.Length; i++)
                        {
                            UtilityVATPCList[i] = UtilityVATPCList[i].Trim();
                        }
                    }
                    string[] UtilityVATAmountList = null;
                    if (DTO.UtilityVATAmountList != null)
                    {
                        UtilityVATAmountList = DTO.UtilityVATAmountList.Split(',');
                        for (int i = 0; i < UtilityVATAmountList.Length; i++)
                        {
                            UtilityVATAmountList[i] = UtilityVATAmountList[i].Trim();
                        }
                    }
                    string[] UtilityAddressList = null;
                    if (DTO.UtilityAddressList != null)
                    {
                        UtilityAddressList = DTO.UtilityAddressList.Split(',');
                        for (int i = 0; i < UtilityAddressList.Length; i++)
                        {
                            UtilityAddressList[i] = UtilityAddressList[i].Trim();
                        }
                    }
                    string[] UtilityContactNoList = null;
                    if (DTO.UtilityContactNoList != null)
                    {
                        UtilityContactNoList = DTO.UtilityContactNoList.Split(',');
                        for (int i = 0; i < UtilityContactNoList.Length; i++)
                        {
                            UtilityContactNoList[i] = UtilityContactNoList[i].Trim();
                        }
                    }
                    string[] UtilityEmailList = null;
                    if (DTO.UtilityEmailList != null)
                    {
                        UtilityEmailList = DTO.UtilityEmailList.Split(',');
                        for (int i = 0; i < UtilityEmailList.Length; i++)
                        {
                            UtilityEmailList[i] = UtilityEmailList[i].Trim();
                        }
                    }
                    string[] UtilityACNoList = null;
                    if (DTO.UtilityACNoList != null)
                    {
                        UtilityACNoList = DTO.UtilityACNoList.Split(',');
                        for (int i = 0; i < UtilityACNoList.Length; i++)
                        {
                            UtilityACNoList[i] = UtilityACNoList[i].Trim();
                        }
                    }
                    string[] UtilityBankNameList = null;
                    if (DTO.UtilityBankNameList != null)
                    {
                        UtilityBankNameList = DTO.UtilityBankNameList.Split(',');
                        for (int i = 0; i < UtilityBankNameList.Length; i++)
                        {
                            UtilityBankNameList[i] = UtilityBankNameList[i].Trim();
                        }
                    }
                    string[] UtilityBranchNameList = null;
                    if (DTO.UtilityBranchNameList != null)
                    {
                        UtilityBranchNameList = DTO.UtilityBranchNameList.Split(',');
                        for (int i = 0; i < UtilityBranchNameList.Length; i++)
                        {
                            UtilityBranchNameList[i] = UtilityBranchNameList[i].Trim();
                        }
                    }
                    string[] UtilityRoutingNoList = null;
                    if (DTO.UtilityRoutingNoList != null)
                    {
                        UtilityRoutingNoList = DTO.UtilityRoutingNoList.Split(',');
                        for (int i = 0; i < UtilityRoutingNoList.Length; i++)
                        {
                            UtilityRoutingNoList[i] = UtilityRoutingNoList[i].Trim();
                        }
                    }
                    if (UtilityVendorCodeList != null)
                    {
                        RMS.Models.UtilityInfo UI;
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            if (UtilityVendorCodeList[i] != null && UtilityVendorCodeList[i] != "")
                            {
                                UI = new RMS.Models.UtilityInfo();
                                UI.AgreementSLNo = AI.AgreementSLNo;
                                UI.UtilityVendorCode = (UtilityVendorCodeList == null) ? null : UtilityVendorCodeList[i].ToString();
                                UI.UtilityLandlordName = (UtilityLandlordNameList == null) ? null : UtilityLandlordNameList[i].ToString();
                                if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Others; }

                                UI.ServiceChargePC = Convert.ToDouble(ServiceChargePCList[i].ToString());
                                UI.ServiceChargeAmount = Convert.ToDouble(ServiceChargeAmountList[i].ToString());

                                UI.OnlineTowerPC = Convert.ToDouble(OnlineTowerPCList[i].ToString());
                                UI.OnlineTowerAmount = Convert.ToDouble(OnlineTowerAmountList[i].ToString());

                                UI.GeneratorSpacePC = Convert.ToDouble(GeneratorSpacePCList[i].ToString());
                                UI.GeneratorSpaceAmount = Convert.ToDouble(GeneratorSpaceAmountList[i].ToString());

                                UI.CarParkingPC = Convert.ToDouble(CarParkingPCList[i].ToString());
                                UI.CarParkingAmount = Convert.ToDouble(CarParkingAmountList[i].ToString());

                                UI.TaxPC = Convert.ToDouble(UtilityTaxPCList[i].ToString());
                                UI.TaxAmount = Convert.ToDouble(UtilityTaxAmountList[i].ToString());
                                UI.VATPC = Convert.ToDouble(UtilityVATPCList[i].ToString());
                                UI.VATAmount = Convert.ToDouble(UtilityVATAmountList[i].ToString());
                                UI.UtilityAddress = (UtilityAddressList == null) ? null : UtilityAddressList[i].ToString();
                                UI.UtilityContactNo = (UtilityContactNoList == null) ? null : UtilityContactNoList[i].ToString();
                                UI.UtilityEmail = (UtilityEmailList == null) ? null : UtilityEmailList[i].ToString();
                                UI.UtilityACNo = (UtilityACNoList == null) ? null : UtilityACNoList[i].ToString();
                                UI.UtilityBankName = (UtilityBankNameList == null) ? null : UtilityBankNameList[i].ToString();
                                UI.UtilityBranchName = (UtilityBranchNameList == null) ? null : UtilityBranchNameList[i].ToString();
                                UI.UtilityRoutingNo = (UtilityRoutingNoList == null) ? null : UtilityRoutingNoList[i].ToString();
                                db.UtilityInfos.Add(UI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Attach Documents
                    string[] FUFileNameList = null;
                    if (DTO.FUFileNameList != null)
                    {
                        FUFileNameList = DTO.FUFileNameList.Split(',');
                        for (int i = 0; i < FUFileNameList.Length; i++)
                        {
                            FUFileNameList[i] = FUFileNameList[i].Trim();
                        }
                    }
                    var originalDirectory = new DirectoryInfo(string.Format("{0}Content\\FileUpload\\", Server.MapPath(@"\")));
                    string pathString = Path.Combine(originalDirectory.ToString(), AI.AliasCode);
                    if (DTO.FUFileNameList != null)
                    {
                        //==Delete physical file
                        var xlstFU = db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && !FUFileNameList.Contains(x.FileName)).ToList();
                        foreach (var item in xlstFU)
                        {
                            //==Delete File
                            FileInfo file = new FileInfo(string.Format("{0}\\{1}", pathString, item.FileName));
                            if (file.Exists)//check file exsit or not  
                            {
                                file.Delete();
                            }
                            else
                            {
                                //==Nothing
                            }
                        }
                        //==Delete Existing Attached File
                        db.FileUploadInfos.RemoveRange(db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && !FUFileNameList.Contains(x.FileName)));
                        db.SaveChanges();
                    }
                    else
                    {
                        //==Delete physical file
                        var xlstFU = db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        foreach (var item in xlstFU)
                        {
                            //==Delete File
                            FileInfo file = new FileInfo(string.Format("{0}\\{1}", pathString, item.FileName));
                            if (file.Exists)//check file exsit or not  
                            {
                                file.Delete();
                            }
                            else
                            {
                                //==Nothing
                            }
                        }
                        //==Delete Existing Attached File
                        db.FileUploadInfos.RemoveRange(db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    if (DTO.files != null)
                    {
                        RMS.Models.FileUploadInfo FU;
                        foreach (var file in DTO.files)
                        {
                            //Save file content goes here
                            if (file != null && file.ContentLength > 0)
                            {
                                //==table update
                                if (db.FileUploadInfos.Any(x => x.AgreementSLNo == AI.AgreementSLNo && x.FileName == file.FileName) == false)
                                {
                                    FU = new RMS.Models.FileUploadInfo();
                                    FU.AgreementSLNo = AI.AgreementSLNo;
                                    FU.FileName = file.FileName;
                                    FU.FilePath = "Content/FileUpload/" + AI.AliasCode + "/" + file.FileName;
                                    db.FileUploadInfos.Add(FU);
                                    db.SaveChanges();
                                }
                                //==Physical file save
                                bool isExists = System.IO.Directory.Exists(pathString);
                                if (!isExists)
                                    System.IO.Directory.CreateDirectory(pathString);
                                var path = string.Format("{0}\\{1}", pathString, file.FileName);
                                file.SaveAs(path);
                            }
                        }
                    }
                    //==Re-schedule Landlord, Cost Center, Utility if Agreement Activated
                    if (AI.AgreementStatus == 2)
                    {
                        //===Delete Existing Landlord Schedule
                        db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        db.SaveChanges();
                        //===Delete Existing Cost Center Schedule
                        db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        db.SaveChanges();
                        //===Delete Existing Utility Schedule
                        //db.UtilitySchedules.RemoveRange(db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        //db.SaveChanges();
                        //==Contract Rent Schedule
                        RMS.Models.ContractSchedule CS = new RMS.Models.ContractSchedule();
                        RMS.Models.LandlordSchedule LS = new RMS.Models.LandlordSchedule();
                        RMS.Models.CostCenterSchedule CCS = new RMS.Models.CostCenterSchedule();
                        //RMS.Models.UtilitySchedule US = new RMS.Models.UtilitySchedule();
                        RMS.Models.IFRSSchedule IFRS = new RMS.Models.IFRSSchedule();
                        List<RMS.Models.LandlordInfo> lstLandlords = db.LandlordInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        List<RMS.Models.CostCenterInfo> lstCostCenter = db.CostCenterInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        //List<RMS.Models.UtilityInfo> lstUtility = db.UtilityInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        List<RMS.Models.ReviewInfo> lstReviewInfo = db.ReviewInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).OrderBy(x => x.ReviewNo).ToList();
                        List<RMS.Models.AdvanceInfo> lstAdvanceInfo = db.AdvanceInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).OrderBy(x => x.AdvanceNo).ToList();
                        DateTime ScheduleDate = AI.AgreementStartDate;
                        //===xxx====
                        int LastMonthDaysCount = DateTime.DaysInMonth(AI.AgreementEndDate.Year, AI.AgreementEndDate.Month);
                        int ReviewMonthDaysCount = 0;
                        int MonthDays = 0;

                        double RentPerDay = 0;
                        double BeforeReviewAmount = 0;
                        double AfterReviewAmount = 0;
                        double NetCalcAmount = 0;
                        if (AI.ReviewFrequency < 1 && lstReviewInfo.Count == 0)
                        {
                            //==Without Review
                            for (int i = 1; i <= AI.AgreementPeriod; i++)
                            {
                                CS = new RMS.Models.ContractSchedule();
                                if (i != 1)
                                {
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                }
                                //==Contract Schedule
                                CS.ScheduleDate = ScheduleDate;
                                CS.AgreementSLNo = AI.AgreementSLNo;
                                CS.MonthNo = i;
                                CS.Year = CS.ScheduleDate.Year;
                                CS.Month = CS.ScheduleDate.ToString("MMMM");
                                CS.ReviewNo = 0;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                }
                                CS.CostPerUnit = AI.CostPerUnit;
                                CS.TotalRentAmount = AI.CostPerUnit * AI.TotalArea;
                                //==First Month
                                if (i == 1)
                                {
                                    //==Full Month
                                    if (ScheduleDate.Day != 1)
                                    {
                                        //==Fraction Date Rent Amount
                                        MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                        RentPerDay = CS.TotalRentAmount / MonthDays;
                                        CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                    }
                                }
                                //==Last Month
                                else if (i == AI.AgreementPeriod)
                                {
                                    //==Full Month
                                    if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                    {
                                        //==Fraction Date Rent Amount
                                        RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                        CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                    }
                                }
                                #region "Tax Type & VAT Type"
                                //1. Inclusive Inclusive
                                if (AI.TaxType == 1 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //2. Inclusive Exclusive
                                else if (AI.TaxType == 1 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //3. Inclusive Exempted
                                else if (AI.TaxType == 1 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //4. Exclusive Inclusive
                                else if (AI.TaxType == 2 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //5. Exclusive Exclusive
                                else if (AI.TaxType == 2 && AI.VatType == 2)
                                {
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //6. Exclusive Exempted
                                else if (AI.TaxType == 2 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //7. Exempted  Inclusive
                                else if (AI.TaxType == 3 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //8. Exempted  Exclusive
                                else if (AI.TaxType == 3 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //9. Exempted Exempted
                                else if (AI.TaxType == 3 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                #endregion
                                CS.UserSLNo = AI.UserSLNo;
                                CS.EntryDate = DateTime.Now;
                                //db.ContractSchedules.Add(CS);
                                //db.SaveChanges();
                                //==Landlord Schedule
                                foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                {
                                    LS = new RMS.Models.LandlordSchedule();
                                    LS.ScheduleDate = ScheduleDate;
                                    LS.AgreementSLNo = AI.AgreementSLNo;
                                    LS.LandlordSLNo = LI.LandlordSLNo;
                                    LS.MonthNo = i;
                                    LS.Year = CS.ScheduleDate.Year;
                                    LS.Month = CS.ScheduleDate.ToString("MMMM");
                                    LS.ReviewNo = 0;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                    }
                                    LS.CostPerUnit = AI.CostPerUnit;
                                    LS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    if (CS.TaxAmount > 0)
                                    {
                                        LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                    }
                                    //==
                                    LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - (LS.AdvanceAdjustmentAmount);
                                    LS.UserSLNo = AI.UserSLNo;
                                    LS.EntryDate = DateTime.Now;
                                    db.LandlordSchedules.Add(LS);
                                    db.SaveChanges();
                                }
                                //==Cost Allocation Schedule
                                foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                {
                                    CCS = new RMS.Models.CostCenterSchedule();
                                    CCS.ScheduleDate = ScheduleDate;
                                    CCS.AgreementSLNo = AI.AgreementSLNo;
                                    CCS.CCSLNo = CC.CCSLNo;
                                    CCS.MonthNo = i;
                                    CCS.Year = CS.ScheduleDate.Year;
                                    CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CCS.ReviewNo = 0;
                                    CCS.CostPerUnit = AI.CostPerUnit;
                                    CCS.TotalRentAmount = CS.TotalRentAmount;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                    }
                                    //==
                                    CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                    CCS.UserSLNo = AI.UserSLNo;
                                    CCS.EntryDate = DateTime.Now;
                                    db.CostCenterSchedules.Add(CCS);
                                    db.SaveChanges();
                                }
                            }
                        }
                        else if (AI.ReviewFrequency > 0)
                        {
                            //==Review Frequency (Repeated)
                            int ReviewCount = AI.ReviewFrequency + 1;
                            int ReviewNo = 0;
                            double NewCPU = AI.CostPerUnit;
                            for (int i = 1; i <= AI.AgreementPeriod; i++)
                            {
                                CS = new RMS.Models.ContractSchedule();
                                if (i != 1)
                                {
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                }
                                if (i <= AI.ReviewFrequency)
                                {
                                    //==Contract Schedule
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    CS.CostPerUnit = NewCPU;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    if (i == 1)
                                    {
                                        //==Full Month
                                        if (ScheduleDate.Day != 1)
                                        {
                                            //==Fraction Date Rent Amount
                                            MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                            RentPerDay = CS.TotalRentAmount / MonthDays;
                                            CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                        }
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                                else if (i == ReviewCount)
                                {
                                    //==Contract Schedule
                                    if (i != AI.AgreementPeriod)
                                    {
                                        ReviewNo = ReviewNo + 1;
                                    }
                                    ReviewCount = ReviewCount + AI.ReviewFrequency;
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    //==xx
                                    //==Last Month
                                    if (i == AI.AgreementPeriod)
                                    {
                                        CS.CostPerUnit = NewCPU;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        //==Full Month
                                        if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                            CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                        }
                                    }
                                    else
                                    {
                                        //==Fraction Month
                                        if (ScheduleDate.Day != 1)
                                        {
                                            //==Before Review Amount
                                            MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                            RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                            BeforeReviewAmount = (ScheduleDate.Day - 1) * RentPerDay;
                                            //==After Review Amount
                                            NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                            AfterReviewAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                            CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                        }
                                        else
                                        {
                                            NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    //==xx
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                                else
                                {
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    CS.CostPerUnit = NewCPU;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    //==Last Month
                                    if (i == AI.AgreementPeriod)
                                    {
                                        //==Full Month
                                        if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                            CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                        }
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                        else if (AI.ReviewFrequency < 1 && lstReviewInfo.Count > 0)
                        {
                            //==Review Declaration Wise
                            int MonthNo = 0;
                            int ReviewNo = 0;
                            double NewCPU = AI.CostPerUnit;
                            //==Review Wise
                            foreach (RMS.Models.ReviewInfo RI in lstReviewInfo)
                            {
                                ReviewNo = ReviewNo + 1;
                                if (RI.ReviewNo == 1)
                                {
                                    //==Schedule without Review
                                    int ReviewStartMonth = ((RI.StartDate.Year - AI.AgreementStartDate.Year) * 12 + RI.StartDate.Month - AI.AgreementStartDate.Month) + 1;
                                    for (int i = 1; i < ReviewStartMonth; i++)
                                    {
                                        MonthNo = MonthNo + 1;
                                        CS = new RMS.Models.ContractSchedule();
                                        if (i != 1)
                                        {
                                            ScheduleDate = ScheduleDate.AddMonths(1);
                                        }
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = 0;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        CS.CostPerUnit = AI.CostPerUnit;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        if (i == 1)
                                        {
                                            //==Full Month
                                            if (ScheduleDate.Day != 1)
                                            {
                                                //==Fraction Date Rent Amount
                                                MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                                RentPerDay = CS.TotalRentAmount / MonthDays;
                                                CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                            }
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = 0;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = AI.CostPerUnit;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = 0;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = AI.CostPerUnit;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                    //==Schedule with Review
                                    for (int i = 1; i <= RI.Period; i++)
                                    {
                                        MonthNo = MonthNo + 1;
                                        CS = new RMS.Models.ContractSchedule();
                                        ScheduleDate = ScheduleDate.AddMonths(1);
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        //==Fraction Month
                                        if (i == 1)
                                        {
                                            if (RI.StartDate.Day != 1)
                                            {
                                                //==Before Review Amount
                                                MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                                RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                                BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                                //==After Review Amount                                            
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                                AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                                CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                            }
                                            else
                                            {
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        //==Review Last Month
                                        else if (i == RI.Period)
                                        {
                                            ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                            //==Full Month
                                            if (RI.EndDate.Day != ReviewMonthDaysCount)
                                            {
                                                //==Fraction Date Rent Amount
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                                CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                            }
                                            else
                                            {
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = NewCPU;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = NewCPU;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    //==Schedule rest of the Review
                                    for (int i = 1; i <= RI.Period; i++)
                                    {
                                        CS = new RMS.Models.ContractSchedule();
                                        //==Conditions applicable for multiple enhancement slots are two enhancements in the same month
                                        if (i == 1 && ScheduleDate.Year == RI.StartDate.Year && ScheduleDate.Month == RI.StartDate.Month)
                                        {
                                            //===MonthNo wise Delete from Contract Schedule
                                            db.ContractSchedules.RemoveRange(db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //===MonthNo wise Delete from Landlord Schedule
                                            db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //===MonthNo wise Delete from Cost Center Schedule
                                            db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //==
                                        }
                                        else
                                        {
                                            MonthNo = MonthNo + 1;
                                            ScheduleDate = ScheduleDate.AddMonths(1);
                                        }
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        //==Fraction Month
                                        if (i == 1)
                                        {
                                            if (RI.StartDate.Day != 1)
                                            {
                                                //==Before Review Amount
                                                MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                                RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                                BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                                //==After Review Amount                                            
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                                AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                                CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                            }
                                            else
                                            {
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        //==Review Last Month
                                        else if (i == RI.Period)
                                        {
                                            ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                            //==Full Month
                                            if (RI.EndDate.Day != ReviewMonthDaysCount)
                                            {
                                                //==Fraction Date Rent Amount
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                                CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                            }
                                            else
                                            {
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = NewCPU;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = NewCPU;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                            }
                        }
                        #region Advance Adjustment
                        //==Advance Info Loop
                        DateTime AdvStartDate = DateTime.Now;
                        int AdvYear = 0;
                        string AdvMonthName = String.Empty;
                        double AdvAdjPerDay = 0;
                        double AdvAdjAmount = 0;
                        double AdvanceMonthDaysCount = 0;
                        foreach (RMS.Models.AdvanceInfo AdvInfo in lstAdvanceInfo)
                        {
                            AdvStartDate = AdvInfo.StartDate;
                            for (int i = 1; i <= AdvInfo.AdvanceSlotPeriod; i++)
                            {
                                if (i != 1)
                                {
                                    AdvStartDate = AdvStartDate.AddMonths(1);
                                }
                                AdvYear = AdvStartDate.Year;
                                AdvMonthName = AdvStartDate.ToString("MMMM");
                                AdvAdjAmount = AdvInfo.AdvanceSlotAmount;
                                //==Fraction Advance Adjustment
                                //==First Month
                                if (i == 1)
                                {
                                    if (AdvStartDate.Day != 1)
                                    {
                                        MonthDays = DateTime.DaysInMonth(AdvStartDate.Year, AdvStartDate.Month);
                                        //==Fraction Date Adv Adj Amount
                                        AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / MonthDays;
                                        AdvAdjAmount = ((MonthDays - AdvStartDate.Day) + 1) * AdvAdjPerDay;
                                    }
                                }
                                else
                                {
                                    //==Last Month
                                    if (i == AdvInfo.AdvanceSlotPeriod)
                                    {
                                        AdvanceMonthDaysCount = DateTime.DaysInMonth(AdvInfo.EndDate.Year, AdvInfo.EndDate.Month);
                                        if (AdvInfo.EndDate.Day != AdvanceMonthDaysCount)
                                        {
                                            //==Fraction Date Adv Adj Amount
                                            AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / AdvanceMonthDaysCount;
                                            AdvAdjAmount = AdvInfo.EndDate.Day * AdvAdjPerDay;
                                        }
                                    }
                                }
                                //==Advance Process Contract Schedule
                                RMS.Models.ContractSchedule GCS = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).SingleOrDefault();
                                GCS.AdvanceAdjustmentAmount = AdvAdjAmount;
                                GCS.NetRentAmount = GCS.NetRentAmount - GCS.AdvanceAdjustmentAmount;
                                //db.Entry(GCS).State = EntityState.Modified;
                                //db.SaveChanges();
                                //==Advance Process Landlord Schedule
                                List<RMS.Models.LandlordSchedule> lstGLS = db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                                foreach (RMS.Models.LandlordSchedule GLS in lstGLS)
                                {
                                    var GLandlordInfo = db.LandlordInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.LandlordSLNo == GLS.LandlordSLNo).Select(x => new { x.AdvanceAdjustmentPC, x.RentPC }).SingleOrDefault();
                                    GLS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * GLandlordInfo.AdvanceAdjustmentPC) / 100;
                                    GLS.NetRentAmount = GLS.NetRentAmount - GLS.AdvanceAdjustmentAmount;
                                    db.Entry(GLS).State = EntityState.Modified;
                                    db.SaveChanges();
                                }
                                //==Advance Process Cost Center Schedule
                                double CCSharePC = 0;
                                List<RMS.Models.CostCenterSchedule> lstGCCS = db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                                foreach (RMS.Models.CostCenterSchedule GCCS in lstGCCS)
                                {
                                    CCSharePC = db.CostCenterInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.CCSLNo == GCCS.CCSLNo).Select(x => x.CCShareAllotment).SingleOrDefault();
                                    GCCS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * CCSharePC) / 100;
                                    GCCS.NetRentAmount = GCCS.NetRentAmount - GCCS.AdvanceAdjustmentAmount;
                                    db.Entry(GCCS).State = EntityState.Modified;
                                    db.SaveChanges();
                                }
                            }
                        }
                        #endregion
                        #region Utility Schedule
                        //ScheduleDate = AI.AgreementStartDate.AddMonths(-1);
                        //for (int i = 1; i <= AI.AgreementPeriod; i++)
                        //{
                        //    ScheduleDate = ScheduleDate.AddMonths(1);
                        //    //==Utility Schedule
                        //    foreach (RMS.Models.UtilityInfo UI in lstUtility)
                        //    {
                        //        US = new RMS.Models.UtilitySchedule();
                        //        US.ScheduleDate = ScheduleDate;
                        //        US.AgreementSLNo = AI.AgreementSLNo;
                        //        US.UtilitySLNo = UI.UtilitySLNo;
                        //        US.MonthNo = i;
                        //        US.Year = US.ScheduleDate.Year;
                        //        US.Month = US.ScheduleDate.ToString("MMMM");
                        //        US.ServiceChargeAmount = UI.ServiceChargeAmount;
                        //        US.OnlineTowerAmount = UI.OnlineTowerAmount;
                        //        US.GeneratorSpaceAmount = UI.GeneratorSpaceAmount;
                        //        US.CarParkingAmount = UI.CarParkingAmount;
                        //        US.TaxAmount = UI.TaxAmount;
                        //        US.VATAmount = UI.VATAmount;
                        //        US.UserSLNo = AI.UserSLNo;
                        //        US.EntryDate = DateTime.Now;
                        //        db.UtilitySchedules.Add(US);
                        //        db.SaveChanges();
                        //    }
                        //}
                        #endregion
                        //==Remove the posted months from the new schedule
                        var ContractSchedules = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == true);
                        foreach (var item in ContractSchedules)
                        {
                            //===Delete
                            db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                            db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                        }
                        db.SaveChanges();
                        //var UtilitySchedules = db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == true);
                        //foreach (var item in UtilitySchedules)
                        //{
                        //    //===Delete
                        //    db.UtilitySchedules.RemoveRange(db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                        //}
                        //db.SaveChanges();
                        //==
                    } //==End
                    AlertMsg = "The agreement: " + AI.AgreementName + " has been updated.";
                    return Json(new { CheckStatus = true, AgreementCode = AI.AgreementCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult DraftEdit(RMS.Models.AgreementInfoDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = (string)Session["LoginUserID"];
                    RMS.Models.DraftAgreementInfo AI = new RMS.Models.DraftAgreementInfo();
                    AI = db.DraftAgreementInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).SingleOrDefault();
                    //==Basic Info
                    AI.PremiseTypeSLNo = DTO.PremiseTypeSLNo;
                    AI.PremiseName = DTO.PremiseName;
                    AI.PremiseAddress = DTO.PremiseAddress;
                    AI.ConcernBranch = DTO.ConcernBranch;
                    AI.InspectorName = DTO.InspectorName;
                    AI.InspectorContactNo = DTO.InspectorContactNo;
                    AI.ClusterGroup = DTO.ClusterGroup;
                    //==Agreement Info
                    AI.AgreementName = DTO.AgreementName;
                    //AI.AgreementStartDate = DateTime.ParseExact(DTO.AgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    //AI.AgreementEndDate = DateTime.ParseExact(DTO.AgreementEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    if (DTO.AgreementStartDate != null)
                    {
                        AI.AgreementStartDate = DateTime.ParseExact(DTO.AgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.AgreementStartDate = DateTime.Now;
                    }
                    if (DTO.AgreementEndDate != null)
                    {
                        AI.AgreementEndDate = DateTime.ParseExact(DTO.AgreementEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.AgreementEndDate = DateTime.Now;
                    }
                    AI.AgreementPeriod = DTO.AgreementPeriod;
                    AI.RenewalFrequency = AI.AgreementPeriod;
                    AI.RentDueDay = DTO.RentDueDay;
                    AI.UOM = DTO.UOM;
                    AI.TotalArea = DTO.TotalArea;
                    AI.CostPerUnit = DTO.CostPerUnit;
                    AI.TotalRentAmount = DTO.TotalRentAmount;
                    AI.SecurityDepositAmount = DTO.SecurityDepositAmount;
                    AI.AdvanceAmount = DTO.AdvanceAmount;
                    AI.AdvanceAdjustmentPeriod = DTO.AdvanceAdjustmentPeriod;
                    AI.AdvanceAdjustmentAmount = DTO.AdvanceAdjustmentAmount;
                    AI.TaxPercentage = DTO.TaxPercentage;
                    AI.TaxAmount = DTO.TaxAmount;
                    AI.VATPercentage = DTO.VATPercentage;
                    AI.VATAmount = DTO.VATAmount;
                    AI.NetRentAmount = AI.TotalRentAmount - AI.AdvanceAdjustmentAmount;
                    AI.AgreementText = null;
                    //AI.Status = DTO.Status;
                    AI.UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    //if (DTO.Status == 0)
                    //{
                    //    AI.IsBlock = true;
                    //    AI.BlockDate = DateTime.Now;
                    //    AI.BlockUserSLNo = AI.UserSLNo;
                    //}
                    //else
                    //{
                    //    AI.IsBlock = false;
                    //    AI.BlockDate = null;
                    //    AI.BlockUserSLNo = null;
                    //}
                    AI.EntryDate = DateTime.Now;
                    AI.IsDeleted = false;
                    AI.ReviewFrequency = DTO.ReviewFrequency;
                    AI.ReviewPercentage = DTO.ReviewPercentage;
                    AI.TaxType = DTO.TaxType;
                    AI.VatType = DTO.VatType;
                    AI.ServiceCharge = DTO.ServiceCharge;
                    AI.OnlineTower = DTO.OnlineTower;
                    AI.GeneratorSpace = DTO.GeneratorSpace;
                    AI.CarParking = DTO.CarParking;
                    //==Control Data
                    AI.CashGLCode = DTO.CashGLCode;
                    AI.BankGLCode = DTO.BankGLCode;
                    AI.AdvanceGLCode = DTO.AdvanceGLCode;
                    AI.AdvanceAdjustmentGLCode = DTO.AdvanceAdjustmentGLCode;
                    AI.RentGLCode = DTO.RentGLCode;
                    AI.ServiceChargeGLCode = DTO.ServiceChargeGLCode;
                    AI.TaxGLCode = DTO.TaxGLCode;
                    AI.VATGLCode = DTO.VATGLCode;
                    AI.ProvisionGLTax = DTO.ProvisionGLTax;
                    AI.ProvisionGLAP = DTO.ProvisionGLAP;
                    AI.RTGSGL = DTO.RTGSGL;
                    AI.EFTNGL = DTO.EFTNGL;
                    AI.PayOrderGL = DTO.PayOrderGL;
                    AI.IBBPaymentGL = DTO.IBBPaymentGL;
                    AI.CityBrokerageGL = DTO.CityBrokerageGL;
                    AI.CityCapitalGL = DTO.CityCapitalGL;
                    AI.OthersGL = DTO.OthersGL;
                    //=====
                    AI.PremiseAddressBangla = DTO.PremiseAddressBangla;
                    AI.AreaStatus = DTO.AreaStatus;
                    AI.RegionalOffice = DTO.RegionalOffice;
                    AI.PrimarySOL = DTO.PrimarySOL;
                    AI.AttachedControl = DTO.AttachedControl;
                    AI.ControllerOfficeDistance = DTO.ControllerOfficeDistance;
                    AI.RoutingNumber = DTO.RoutingNumber;
                    AI.Division = DTO.Division;
                    AI.District = DTO.District;
                    AI.Upazila = DTO.Upazila;
                    AI.Thana = DTO.Thana;
                    AI.ThanaCode = DTO.ThanaCode;
                    AI.Pourasabha = DTO.Pourasabha;
                    AI.PourasabhaType = DTO.PourasabhaType;
                    AI.UnionName = DTO.UnionName;
                    AI.WardNo = DTO.WardNo;
                    AI.PremisesTypeforAccounts = DTO.PremisesTypeforAccounts;
                    AI.ParentAgreementCode = DTO.ParentAgreementCode;
                    AI.ElectricityLoad = DTO.ElectricityLoad;
                    AI.ElectricityProvidedBy = DTO.ElectricityProvidedBy;
                    AI.AITBourneBy = DTO.AITBourneBy;
                    AI.CommercialPermission = DTO.CommercialPermission;
                    AI.BuildingPlan = DTO.BuildingPlan;
                    AI.PremisesSituatedFloor = DTO.PremisesSituatedFloor;
                    AI.BangladeshBankApproval = DTO.BangladeshBankApproval;
                    AI.BangladeshBankReference = DTO.BangladeshBankReference;
                    AI.ITTowerRentClause = DTO.ITTowerRentClause;
                    AI.TerminationClause = DTO.TerminationClause;
                    AI.TerminationNoticePeriod = DTO.TerminationNoticePeriod;
                    if (DTO.PremisesOpeningDate != null)
                    {
                        AI.PremisesOpeningDate = DateTime.ParseExact(DTO.PremisesOpeningDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.PremisesOpeningDate = null;
                    }
                    if (DTO.DocumentDate != null)
                    {
                        AI.DocumentDate = DateTime.ParseExact(DTO.DocumentDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.DocumentDate = null;
                    }
                    AI.Remarks = DTO.Remarks;
                    AI.AgreementRemarks = DTO.AgreementRemarks;
                    AI.AdvanceRemarks = DTO.AdvanceRemarks;
                    AI.ReviewRemarks = DTO.ReviewRemarks;
                    AI.LLRemarks = DTO.LLRemarks;
                    AI.CCRemarks = DTO.CCRemarks;
                    AI.UtilityRemarks = DTO.UtilityRemarks;
                    AI.ControlDataRemarks = DTO.ControlDataRemarks;

                    AI.BorrowingRate = DTO.BorrowingRate;
                    AI.PaymentMethod = DTO.PaymentMethod;
                    AI.IsIFRSEnable = DTO.IsIFRSEnable;
                    AI.CalculationMethod = DTO.CalculationMethod;
                    AI.WithHoldingCode = DTO.WithHoldingCode;
                    AI.AdditionalExpense = DTO.AdditionalExpense;
                    AI.InitialDirectCost = DTO.InitialDirectCost;
                    AI.DismantlingCost = DTO.DismantlingCost;
                    AI.CarParkingNo = DTO.CarParkingNo;
                    AI.WaterBillType = DTO.WaterBillType;
                    AI.WaterBillAmount = DTO.WaterBillAmount;
                    if (DTO.IFRSEffectiveDate != null && DTO.IsIFRSEnable == true)
                    {
                        AI.IFRSEffectiveDate = DateTime.ParseExact(DTO.IFRSEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.IFRSEffectiveDate = null;
                    }
                    AI.CorporateTaxRate = DTO.CorporateTaxRate;
                    //=====
                    db.Entry(AI).State = EntityState.Modified;
                    db.SaveChanges();
                    //==Space Information
                    //===Delete Existing Space Info
                    db.DraftSpaceInfos.RemoveRange(db.DraftSpaceInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                    db.SaveChanges();
                    //==
                    string[] SpaceTypeList = null;
                    if (DTO.SpaceTypeList != null)
                    {
                        SpaceTypeList = DTO.SpaceTypeList.Split(',');
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            SpaceTypeList[i] = SpaceTypeList[i].Trim();
                        }
                    }
                    string[] SpaceAreaList = null;
                    if (DTO.SpaceAreaList != null)
                    {
                        SpaceAreaList = DTO.SpaceAreaList.Split(',');
                        for (int i = 0; i < SpaceAreaList.Length; i++)
                        {
                            SpaceAreaList[i] = SpaceAreaList[i].Trim();
                        }
                    }
                    string[] SpaceRateList = null;
                    if (DTO.SpaceRateList != null)
                    {
                        SpaceRateList = DTO.SpaceRateList.Split(',');
                        for (int i = 0; i < SpaceRateList.Length; i++)
                        {
                            SpaceRateList[i] = SpaceRateList[i].Trim();
                        }
                    }
                    string[] SpaceRentList = null;
                    if (DTO.SpaceRentList != null)
                    {
                        SpaceRentList = DTO.SpaceRentList.Split(',');
                        for (int i = 0; i < SpaceRentList.Length; i++)
                        {
                            SpaceRentList[i] = SpaceRentList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdvanceList = null;
                    if (DTO.SpaceTotalAdvanceList != null)
                    {
                        SpaceTotalAdvanceList = DTO.SpaceTotalAdvanceList.Split(',');
                        for (int i = 0; i < SpaceTotalAdvanceList.Length; i++)
                        {
                            SpaceTotalAdvanceList[i] = SpaceTotalAdvanceList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdjustmentList = null;
                    if (DTO.SpaceTotalAdjustmentList != null)
                    {
                        SpaceTotalAdjustmentList = DTO.SpaceTotalAdjustmentList.Split(',');
                        for (int i = 0; i < SpaceTotalAdjustmentList.Length; i++)
                        {
                            SpaceTotalAdjustmentList[i] = SpaceTotalAdjustmentList[i].Trim();
                        }
                    }
                    string[] SpaceRemarksList = null;
                    if (DTO.SpaceRemarksList != null)
                    {
                        SpaceRemarksList = DTO.SpaceRemarksList.Split(',');
                        for (int i = 0; i < SpaceRemarksList.Length; i++)
                        {
                            SpaceRemarksList[i] = SpaceRemarksList[i].Trim();
                        }
                    }
                    if (SpaceTypeList != null)
                    {
                        RMS.Models.DraftSpaceInfo SpaceInfo;
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            if (SpaceTypeList[i] != null && SpaceTypeList[i] != "")
                            {
                                SpaceInfo = new RMS.Models.DraftSpaceInfo();
                                SpaceInfo.AgreementSLNo = AI.AgreementSLNo;
                                SpaceInfo.SpaceType = (SpaceTypeList == null) ? null : SpaceTypeList[i].ToString();
                                SpaceInfo.SpaceArea = Convert.ToDouble(SpaceAreaList[i].ToString());
                                SpaceInfo.SpaceRate = Convert.ToDouble(SpaceRateList[i].ToString());
                                SpaceInfo.SpaceRent = Convert.ToDouble(SpaceRentList[i].ToString());
                                SpaceInfo.SpaceTotalAdvance = Convert.ToDouble(SpaceTotalAdvanceList[i].ToString());
                                SpaceInfo.SpaceTotalAdjustment = Convert.ToDouble(SpaceTotalAdjustmentList[i].ToString());
                                SpaceInfo.SpaceRemarks = (SpaceRemarksList == null) ? null : SpaceRemarksList[i].ToString();
                                db.DraftSpaceInfos.Add(SpaceInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Advance Information
                    //===Delete Existing Advance Info
                    db.DraftAdvanceInfos.RemoveRange(db.DraftAdvanceInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                    db.SaveChanges();
                    //==
                    string[] AdvanceNoList = null;
                    if (DTO.AdvanceNoList != null)
                    {
                        AdvanceNoList = DTO.AdvanceNoList.Split(',');
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            AdvanceNoList[i] = AdvanceNoList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotPeriodList = null;
                    if (DTO.AdvanceSlotPeriodList != null)
                    {
                        AdvanceSlotPeriodList = DTO.AdvanceSlotPeriodList.Split(',');
                        for (int i = 0; i < AdvanceSlotPeriodList.Length; i++)
                        {
                            AdvanceSlotPeriodList[i] = AdvanceSlotPeriodList[i].Trim();
                        }
                    }
                    string[] AdvanceStartDateList = null;
                    if (DTO.AdvanceStartDateList != null)
                    {
                        AdvanceStartDateList = DTO.AdvanceStartDateList.Split(',');
                        for (int i = 0; i < AdvanceStartDateList.Length; i++)
                        {
                            AdvanceStartDateList[i] = AdvanceStartDateList[i].Trim();
                        }
                    }
                    string[] AdvanceEndDateList = null;
                    if (DTO.AdvanceEndDateList != null)
                    {
                        AdvanceEndDateList = DTO.AdvanceEndDateList.Split(',');
                        for (int i = 0; i < AdvanceEndDateList.Length; i++)
                        {
                            AdvanceEndDateList[i] = AdvanceEndDateList[i].Trim();
                        }
                    }
                    string[] AdvanceSlotAmountList = null;
                    if (DTO.AdvanceSlotAmountList != null)
                    {
                        AdvanceSlotAmountList = DTO.AdvanceSlotAmountList.Split(',');
                        for (int i = 0; i < AdvanceSlotAmountList.Length; i++)
                        {
                            AdvanceSlotAmountList[i] = AdvanceSlotAmountList[i].Trim();
                        }
                    }
                    string[] AdvanceNoteList = null;
                    if (DTO.AdvanceNoteList != null)
                    {
                        AdvanceNoteList = DTO.AdvanceNoteList.Split(',');
                        for (int i = 0; i < AdvanceNoteList.Length; i++)
                        {
                            AdvanceNoteList[i] = AdvanceNoteList[i].Trim();
                        }
                    }
                    if (AdvanceNoList != null)
                    {
                        RMS.Models.DraftAdvanceInfo AdvInfo;
                        for (int i = 0; i < AdvanceNoList.Length; i++)
                        {
                            if (AdvanceNoList[i] != null && AdvanceNoList[i] != "")
                            {
                                AdvInfo = new RMS.Models.DraftAdvanceInfo();
                                AdvInfo.AgreementSLNo = AI.AgreementSLNo;
                                AdvInfo.AdvanceNo = Convert.ToInt32(AdvanceNoList[i].ToString());
                                AdvInfo.AdvanceSlotPeriod = Convert.ToInt32(AdvanceSlotPeriodList[i].ToString());
                                AdvInfo.StartDate = DateTime.ParseExact(AdvanceStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.EndDate = DateTime.ParseExact(AdvanceEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                AdvInfo.AdvanceSlotAmount = Convert.ToDouble(AdvanceSlotAmountList[i].ToString());
                                AdvInfo.AdvanceNote = (AdvanceNoteList == null) ? null : AdvanceNoteList[i].ToString();
                                db.DraftAdvanceInfos.Add(AdvInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Review Info
                    //===Delete Existing Review Info
                    db.DraftReviewInfos.RemoveRange(db.DraftReviewInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                    db.SaveChanges();
                    //==
                    string[] ReviewNoList = null;
                    if (DTO.ReviewNoList != null)
                    {
                        ReviewNoList = DTO.ReviewNoList.Split(',');
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            ReviewNoList[i] = ReviewNoList[i].Trim();
                        }
                    }
                    string[] ReviewStartDateList = null;
                    if (DTO.ReviewStartDateList != null)
                    {
                        ReviewStartDateList = DTO.ReviewStartDateList.Split(',');
                        for (int i = 0; i < ReviewStartDateList.Length; i++)
                        {
                            ReviewStartDateList[i] = ReviewStartDateList[i].Trim();
                        }
                    }
                    string[] ReviewEndDateList = null;
                    if (DTO.ReviewEndDateList != null)
                    {
                        ReviewEndDateList = DTO.ReviewEndDateList.Split(',');
                        for (int i = 0; i < ReviewEndDateList.Length; i++)
                        {
                            ReviewEndDateList[i] = ReviewEndDateList[i].Trim();
                        }
                    }
                    string[] ReviewPeriodList = null;
                    if (DTO.ReviewPeriodList != null)
                    {
                        ReviewPeriodList = DTO.ReviewPeriodList.Split(',');
                        for (int i = 0; i < ReviewPeriodList.Length; i++)
                        {
                            ReviewPeriodList[i] = ReviewPeriodList[i].Trim();
                        }
                    }
                    string[] ReviewIncreaseAmountList = null;
                    if (DTO.ReviewIncreaseAmountList != null)
                    {
                        ReviewIncreaseAmountList = DTO.ReviewIncreaseAmountList.Split(',');
                        for (int i = 0; i < ReviewIncreaseAmountList.Length; i++)
                        {
                            ReviewIncreaseAmountList[i] = ReviewIncreaseAmountList[i].Trim();
                        }
                    }
                    string[] ReviewIncreasePercentageList = null;
                    if (DTO.ReviewIncreasePercentageList != null)
                    {
                        ReviewIncreasePercentageList = DTO.ReviewIncreasePercentageList.Split(',');
                        for (int i = 0; i < ReviewIncreasePercentageList.Length; i++)
                        {
                            ReviewIncreasePercentageList[i] = ReviewIncreasePercentageList[i].Trim();
                        }
                    }
                    string[] ReviewNoteList = null;
                    if (DTO.ReviewNoteList != null)
                    {
                        ReviewNoteList = DTO.ReviewNoteList.Split(',');
                        for (int i = 0; i < ReviewNoteList.Length; i++)
                        {
                            ReviewNoteList[i] = ReviewNoteList[i].Trim();
                        }
                    }
                    if (ReviewNoList != null)
                    {
                        RMS.Models.DraftReviewInfo RI;
                        for (int i = 0; i < ReviewNoList.Length; i++)
                        {
                            if (ReviewNoList[i] != null && ReviewNoList[i] != "")
                            {
                                RI = new RMS.Models.DraftReviewInfo();
                                RI.AgreementSLNo = AI.AgreementSLNo;
                                RI.ReviewNo = Convert.ToInt32(ReviewNoList[i].ToString());
                                RI.Period = Convert.ToInt32(ReviewPeriodList[i].ToString());
                                RI.StartDate = DateTime.ParseExact(ReviewStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                RI.EndDate = DateTime.ParseExact(ReviewEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                RI.IncreaseAmount = Convert.ToDouble(ReviewIncreaseAmountList[i].ToString());
                                RI.IncreasePercentage = Convert.ToDouble(ReviewIncreasePercentageList[i].ToString());
                                RI.ReviewNote = (ReviewNoteList == null) ? null : ReviewNoteList[i].ToString();
                                db.DraftReviewInfos.Add(RI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Landlord Information
                    //===Delete Existing Landlord Info
                    db.DraftLandlordInfos.RemoveRange(db.DraftLandlordInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                    db.SaveChanges();
                    //==
                    string[] VendorCodeList = null;
                    if (DTO.VendorCodeList != null)
                    {
                        VendorCodeList = DTO.VendorCodeList.Split(',');
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            VendorCodeList[i] = VendorCodeList[i].Trim();
                        }
                    }
                    string[] LandlordNameList = null;
                    if (DTO.LandlordNameList != null)
                    {
                        LandlordNameList = DTO.LandlordNameList.Split(',');
                        for (int i = 0; i < LandlordNameList.Length; i++)
                        {
                            LandlordNameList[i] = LandlordNameList[i].Trim();
                        }
                    }
                    string[] ModeOfPaymentList = null;
                    if (DTO.ModeOfPaymentList != null)
                    {
                        ModeOfPaymentList = DTO.ModeOfPaymentList.Split(',');
                        for (int i = 0; i < ModeOfPaymentList.Length; i++)
                        {
                            ModeOfPaymentList[i] = ModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] VendorAdvancePCList = null;
                    if (DTO.VendorAdvancePCList != null)
                    {
                        VendorAdvancePCList = DTO.VendorAdvancePCList.Split(',');
                        for (int i = 0; i < VendorAdvancePCList.Length; i++)
                        {
                            VendorAdvancePCList[i] = VendorAdvancePCList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAmountList = null;
                    if (DTO.VendorAdvanceAmountList != null)
                    {
                        VendorAdvanceAmountList = DTO.VendorAdvanceAmountList.Split(',');
                        for (int i = 0; i < VendorAdvanceAmountList.Length; i++)
                        {
                            VendorAdvanceAmountList[i] = VendorAdvanceAmountList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAdjustmentPCList = null;
                    if (DTO.VendorAdvanceAdjustmentPCList != null)
                    {
                        VendorAdvanceAdjustmentPCList = DTO.VendorAdvanceAdjustmentPCList.Split(',');
                        for (int i = 0; i < VendorAdvanceAdjustmentPCList.Length; i++)
                        {
                            VendorAdvanceAdjustmentPCList[i] = VendorAdvanceAdjustmentPCList[i].Trim();
                        }
                    }
                    //string[] VendorAdvanceAdjustmentAmountList = null;
                    //if (DTO.VendorAdvanceAdjustmentAmountList != null)
                    //{
                    //    VendorAdvanceAdjustmentAmountList = DTO.VendorAdvanceAdjustmentAmountList.Split(',');
                    //    for (int i = 0; i < VendorAdvanceAdjustmentAmountList.Length; i++)
                    //    {
                    //        VendorAdvanceAdjustmentAmountList[i] = VendorAdvanceAdjustmentAmountList[i].Trim();
                    //    }
                    //}
                    string[] VendorTaxPCList = null;
                    if (DTO.VendorTaxPCList != null)
                    {
                        VendorTaxPCList = DTO.VendorTaxPCList.Split(',');
                        for (int i = 0; i < VendorTaxPCList.Length; i++)
                        {
                            VendorTaxPCList[i] = VendorTaxPCList[i].Trim();
                        }
                    }
                    string[] VendorTaxAmountList = null;
                    if (DTO.VendorTaxAmountList != null)
                    {
                        VendorTaxAmountList = DTO.VendorTaxAmountList.Split(',');
                        for (int i = 0; i < VendorTaxAmountList.Length; i++)
                        {
                            VendorTaxAmountList[i] = VendorTaxAmountList[i].Trim();
                        }
                    }
                    string[] VendorVATPCList = null;
                    if (DTO.VendorVATPCList != null)
                    {
                        VendorVATPCList = DTO.VendorVATPCList.Split(',');
                        for (int i = 0; i < VendorVATPCList.Length; i++)
                        {
                            VendorVATPCList[i] = VendorVATPCList[i].Trim();
                        }
                    }
                    string[] VendorVATAmountList = null;
                    if (DTO.VendorVATAmountList != null)
                    {
                        VendorVATAmountList = DTO.VendorVATAmountList.Split(',');
                        for (int i = 0; i < VendorVATAmountList.Length; i++)
                        {
                            VendorVATAmountList[i] = VendorVATAmountList[i].Trim();
                        }
                    }
                    string[] VendorRentPCList = null;
                    if (DTO.VendorRentPCList != null)
                    {
                        VendorRentPCList = DTO.VendorRentPCList.Split(',');
                        for (int i = 0; i < VendorRentPCList.Length; i++)
                        {
                            VendorRentPCList[i] = VendorRentPCList[i].Trim();
                        }
                    }
                    //string[] VendorRentAmountList = null;
                    //if (DTO.VendorRentAmountList != null)
                    //{
                    //    VendorRentAmountList = DTO.VendorRentAmountList.Split(',');
                    //    for (int i = 0; i < VendorRentAmountList.Length; i++)
                    //    {
                    //        VendorRentAmountList[i] = VendorRentAmountList[i].Trim();
                    //    }
                    //}
                    string[] AddressList = null;
                    if (DTO.LLAddressList != null)
                    {
                        AddressList = DTO.LLAddressList.Split(',');
                        for (int i = 0; i < AddressList.Length; i++)
                        {
                            AddressList[i] = AddressList[i].Trim();
                        }
                    }
                    string[] ContactNoList = null;
                    if (DTO.LLContactNoList != null)
                    {
                        ContactNoList = DTO.LLContactNoList.Split(',');
                        for (int i = 0; i < ContactNoList.Length; i++)
                        {
                            ContactNoList[i] = ContactNoList[i].Trim();
                        }
                    }
                    string[] EmailList = null;
                    if (DTO.LLEmailList != null)
                    {
                        EmailList = DTO.LLEmailList.Split(',');
                        for (int i = 0; i < EmailList.Length; i++)
                        {
                            EmailList[i] = EmailList[i].Trim();
                        }
                    }
                    string[] ACNoList = null;
                    if (DTO.ACNoList != null)
                    {
                        ACNoList = DTO.ACNoList.Split(',');
                        for (int i = 0; i < ACNoList.Length; i++)
                        {
                            ACNoList[i] = ACNoList[i].Trim();
                        }
                    }
                    string[] BankNameList = null;
                    if (DTO.BankNameList != null)
                    {
                        BankNameList = DTO.BankNameList.Split(',');
                        for (int i = 0; i < BankNameList.Length; i++)
                        {
                            BankNameList[i] = BankNameList[i].Trim();
                        }
                    }
                    string[] BranchNameList = null;
                    if (DTO.BranchNameList != null)
                    {
                        BranchNameList = DTO.BranchNameList.Split(',');
                        for (int i = 0; i < BranchNameList.Length; i++)
                        {
                            BranchNameList[i] = BranchNameList[i].Trim();
                        }
                    }
                    string[] RoutingNoList = null;
                    if (DTO.RoutingNoList != null)
                    {
                        RoutingNoList = DTO.RoutingNoList.Split(',');
                        for (int i = 0; i < RoutingNoList.Length; i++)
                        {
                            RoutingNoList[i] = RoutingNoList[i].Trim();
                        }
                    }
                    RMS.Models.DraftLandlordInfo LI;
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    if (VendorCodeList != null)
                    {
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            if (VendorCodeList[i] != null && VendorCodeList[i] != "")
                            {
                                LI = new RMS.Models.DraftLandlordInfo();
                                LI.AgreementSLNo = DTO.AgreementSLNo;
                                LI.VendorCode = (VendorCodeList == null) ? null : VendorCodeList[i].ToString();
                                LI.LandlordName = (LandlordNameList == null) ? null : LandlordNameList[i].ToString();
                                if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { LI.ModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { LI.ModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { LI.ModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { LI.ModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { LI.ModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { LI.ModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { LI.ModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { LI.ModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { LI.ModeOfPayment = ModeOfPaymentLocation.Others; }
                                LI.AdvancePC = Convert.ToDouble(VendorAdvancePCList[i].ToString());
                                LI.AdvanceAdjustmentPC = Convert.ToDouble(VendorAdvanceAdjustmentPCList[i].ToString());
                                LI.TaxPC = Convert.ToDouble(VendorTaxPCList[i].ToString());
                                LI.VATPC = Convert.ToDouble(VendorVATPCList[i].ToString());
                                LI.RentPC = Convert.ToDouble(VendorRentPCList[i].ToString());
                                //==PC Amount
                                LI.AdvanceAmount = (AI.AdvanceAmount * LI.AdvancePC) / 100;
                                LI.TaxAmount = (AI.TaxAmount * LI.TaxPC) / 100;
                                LI.VATAmount = (AI.VATAmount * LI.VATPC) / 100;
                                //==
                                LI.LLAddress = (AddressList == null) ? null : AddressList[i].ToString();
                                LI.LLContactNo = (ContactNoList == null) ? null : ContactNoList[i].ToString();
                                LI.LLEmail = (EmailList == null) ? null : EmailList[i].ToString();
                                LI.ACNo = (ACNoList == null) ? null : ACNoList[i].ToString();
                                LI.BankName = (BankNameList == null) ? null : BankNameList[i].ToString();
                                LI.BranchName = (BranchNameList == null) ? null : BranchNameList[i].ToString();
                                LI.RoutingNo = (RoutingNoList == null) ? null : RoutingNoList[i].ToString();
                                db.DraftLandlordInfos.Add(LI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Cost Center
                    //===Delete Existing Cost Center Info
                    db.DraftCostCenterInfos.RemoveRange(db.DraftCostCenterInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                    db.SaveChanges();
                    //==
                    //==Cost Center
                    string[] CCCodeList = null;
                    if (DTO.CCCodeList != null)
                    {
                        CCCodeList = DTO.CCCodeList.Split(',');
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            CCCodeList[i] = CCCodeList[i].Trim();
                        }
                    }
                    string[] CCNameList = null;
                    if (DTO.CCNameList != null)
                    {
                        CCNameList = DTO.CCNameList.Split(',');
                        for (int i = 0; i < CCNameList.Length; i++)
                        {
                            CCNameList[i] = CCNameList[i].Trim();
                        }
                    }
                    string[] SOLCodeList = null;
                    if (DTO.SOLCodeList != null)
                    {
                        SOLCodeList = DTO.SOLCodeList.Split(',');
                        for (int i = 0; i < SOLCodeList.Length; i++)
                        {
                            SOLCodeList[i] = SOLCodeList[i].Trim();
                        }
                    }
                    string[] SOLNameList = null;
                    if (DTO.SOLNameList != null)
                    {
                        SOLNameList = DTO.SOLNameList.Split(',');
                        for (int i = 0; i < SOLNameList.Length; i++)
                        {
                            SOLNameList[i] = SOLNameList[i].Trim();
                        }
                    }
                    string[] CCShareAllotmentList = null;
                    if (DTO.CCShareAllotmentList != null)
                    {
                        CCShareAllotmentList = DTO.CCShareAllotmentList.Split(',');
                        for (int i = 0; i < CCShareAllotmentList.Length; i++)
                        {
                            CCShareAllotmentList[i] = CCShareAllotmentList[i].Trim();
                        }
                    }
                    RMS.Models.DraftCostCenterInfo CC;
                    if (CCCodeList != null)
                    {
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            if (CCCodeList[i] != null && CCCodeList[i] != "")
                            {
                                CC = new RMS.Models.DraftCostCenterInfo();
                                CC.AgreementSLNo = DTO.AgreementSLNo;
                                CC.CCCode = (CCCodeList == null) ? null : CCCodeList[i].ToString();
                                CC.CCName = (CCNameList == null) ? null : CCNameList[i].ToString();
                                CC.SOLCode = (SOLCodeList == null) ? null : SOLCodeList[i].ToString();
                                CC.SOLName = (SOLNameList == null) ? null : SOLNameList[i].ToString();
                                CC.CCShareAllotment = Convert.ToDouble(CCShareAllotmentList[i].ToString());
                                db.DraftCostCenterInfos.Add(CC);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Utility Information
                    //===Delete Existing Utility Info
                    db.DraftUtilityInfos.RemoveRange(db.DraftUtilityInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                    db.SaveChanges();
                    //==
                    string[] UtilityVendorCodeList = null;
                    if (DTO.UtilityVendorCodeList != null)
                    {
                        UtilityVendorCodeList = DTO.UtilityVendorCodeList.Split(',');
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            UtilityVendorCodeList[i] = UtilityVendorCodeList[i].Trim();
                        }
                    }
                    string[] UtilityLandlordNameList = null;
                    if (DTO.UtilityLandlordNameList != null)
                    {
                        UtilityLandlordNameList = DTO.UtilityLandlordNameList.Split(',');
                        for (int i = 0; i < UtilityLandlordNameList.Length; i++)
                        {
                            UtilityLandlordNameList[i] = UtilityLandlordNameList[i].Trim();
                        }
                    }
                    string[] UtilityModeOfPaymentList = null;
                    if (DTO.UtilityModeOfPaymentList != null)
                    {
                        UtilityModeOfPaymentList = DTO.UtilityModeOfPaymentList.Split(',');
                        for (int i = 0; i < UtilityModeOfPaymentList.Length; i++)
                        {
                            UtilityModeOfPaymentList[i] = UtilityModeOfPaymentList[i].Trim();
                        }
                    }

                    string[] ServiceChargePCList = null;
                    if (DTO.ServiceChargePCList != null)
                    {
                        ServiceChargePCList = DTO.ServiceChargePCList.Split(',');
                        for (int i = 0; i < ServiceChargePCList.Length; i++)
                        {
                            ServiceChargePCList[i] = ServiceChargePCList[i].Trim();
                        }
                    }
                    string[] ServiceChargeAmountList = null;
                    if (DTO.ServiceChargeAmountList != null)
                    {
                        ServiceChargeAmountList = DTO.ServiceChargeAmountList.Split(',');
                        for (int i = 0; i < ServiceChargeAmountList.Length; i++)
                        {
                            ServiceChargeAmountList[i] = ServiceChargeAmountList[i].Trim();
                        }
                    }

                    string[] OnlineTowerPCList = null;
                    if (DTO.OnlineTowerPCList != null)
                    {
                        OnlineTowerPCList = DTO.OnlineTowerPCList.Split(',');
                        for (int i = 0; i < OnlineTowerPCList.Length; i++)
                        {
                            OnlineTowerPCList[i] = OnlineTowerPCList[i].Trim();
                        }
                    }
                    string[] OnlineTowerAmountList = null;
                    if (DTO.OnlineTowerAmountList != null)
                    {
                        OnlineTowerAmountList = DTO.OnlineTowerAmountList.Split(',');
                        for (int i = 0; i < OnlineTowerAmountList.Length; i++)
                        {
                            OnlineTowerAmountList[i] = OnlineTowerAmountList[i].Trim();
                        }
                    }

                    string[] GeneratorSpacePCList = null;
                    if (DTO.GeneratorSpacePCList != null)
                    {
                        GeneratorSpacePCList = DTO.GeneratorSpacePCList.Split(',');
                        for (int i = 0; i < GeneratorSpacePCList.Length; i++)
                        {
                            GeneratorSpacePCList[i] = GeneratorSpacePCList[i].Trim();
                        }
                    }
                    string[] GeneratorSpaceAmountList = null;
                    if (DTO.GeneratorSpaceAmountList != null)
                    {
                        GeneratorSpaceAmountList = DTO.GeneratorSpaceAmountList.Split(',');
                        for (int i = 0; i < GeneratorSpaceAmountList.Length; i++)
                        {
                            GeneratorSpaceAmountList[i] = GeneratorSpaceAmountList[i].Trim();
                        }
                    }
                    string[] CarParkingPCList = null;
                    if (DTO.CarParkingPCList != null)
                    {
                        CarParkingPCList = DTO.CarParkingPCList.Split(',');
                        for (int i = 0; i < CarParkingPCList.Length; i++)
                        {
                            CarParkingPCList[i] = CarParkingPCList[i].Trim();
                        }
                    }
                    string[] CarParkingAmountList = null;
                    if (DTO.CarParkingAmountList != null)
                    {
                        CarParkingAmountList = DTO.CarParkingAmountList.Split(',');
                        for (int i = 0; i < CarParkingAmountList.Length; i++)
                        {
                            CarParkingAmountList[i] = CarParkingAmountList[i].Trim();
                        }
                    }
                    string[] UtilityTaxPCList = null;
                    if (DTO.UtilityTaxPCList != null)
                    {
                        UtilityTaxPCList = DTO.UtilityTaxPCList.Split(',');
                        for (int i = 0; i < UtilityTaxPCList.Length; i++)
                        {
                            UtilityTaxPCList[i] = UtilityTaxPCList[i].Trim();
                        }
                    }
                    string[] UtilityTaxAmountList = null;
                    if (DTO.UtilityTaxAmountList != null)
                    {
                        UtilityTaxAmountList = DTO.UtilityTaxAmountList.Split(',');
                        for (int i = 0; i < UtilityTaxAmountList.Length; i++)
                        {
                            UtilityTaxAmountList[i] = UtilityTaxAmountList[i].Trim();
                        }
                    }
                    string[] UtilityVATPCList = null;
                    if (DTO.UtilityVATPCList != null)
                    {
                        UtilityVATPCList = DTO.UtilityVATPCList.Split(',');
                        for (int i = 0; i < UtilityVATPCList.Length; i++)
                        {
                            UtilityVATPCList[i] = UtilityVATPCList[i].Trim();
                        }
                    }
                    string[] UtilityVATAmountList = null;
                    if (DTO.UtilityVATAmountList != null)
                    {
                        UtilityVATAmountList = DTO.UtilityVATAmountList.Split(',');
                        for (int i = 0; i < UtilityVATAmountList.Length; i++)
                        {
                            UtilityVATAmountList[i] = UtilityVATAmountList[i].Trim();
                        }
                    }
                    string[] UtilityAddressList = null;
                    if (DTO.UtilityAddressList != null)
                    {
                        UtilityAddressList = DTO.UtilityAddressList.Split(',');
                        for (int i = 0; i < UtilityAddressList.Length; i++)
                        {
                            UtilityAddressList[i] = UtilityAddressList[i].Trim();
                        }
                    }
                    string[] UtilityContactNoList = null;
                    if (DTO.UtilityContactNoList != null)
                    {
                        UtilityContactNoList = DTO.UtilityContactNoList.Split(',');
                        for (int i = 0; i < UtilityContactNoList.Length; i++)
                        {
                            UtilityContactNoList[i] = UtilityContactNoList[i].Trim();
                        }
                    }
                    string[] UtilityEmailList = null;
                    if (DTO.UtilityEmailList != null)
                    {
                        UtilityEmailList = DTO.UtilityEmailList.Split(',');
                        for (int i = 0; i < UtilityEmailList.Length; i++)
                        {
                            UtilityEmailList[i] = UtilityEmailList[i].Trim();
                        }
                    }
                    string[] UtilityACNoList = null;
                    if (DTO.UtilityACNoList != null)
                    {
                        UtilityACNoList = DTO.UtilityACNoList.Split(',');
                        for (int i = 0; i < UtilityACNoList.Length; i++)
                        {
                            UtilityACNoList[i] = UtilityACNoList[i].Trim();
                        }
                    }
                    string[] UtilityBankNameList = null;
                    if (DTO.UtilityBankNameList != null)
                    {
                        UtilityBankNameList = DTO.UtilityBankNameList.Split(',');
                        for (int i = 0; i < UtilityBankNameList.Length; i++)
                        {
                            UtilityBankNameList[i] = UtilityBankNameList[i].Trim();
                        }
                    }
                    string[] UtilityBranchNameList = null;
                    if (DTO.UtilityBranchNameList != null)
                    {
                        UtilityBranchNameList = DTO.UtilityBranchNameList.Split(',');
                        for (int i = 0; i < UtilityBranchNameList.Length; i++)
                        {
                            UtilityBranchNameList[i] = UtilityBranchNameList[i].Trim();
                        }
                    }
                    string[] UtilityRoutingNoList = null;
                    if (DTO.UtilityRoutingNoList != null)
                    {
                        UtilityRoutingNoList = DTO.UtilityRoutingNoList.Split(',');
                        for (int i = 0; i < UtilityRoutingNoList.Length; i++)
                        {
                            UtilityRoutingNoList[i] = UtilityRoutingNoList[i].Trim();
                        }
                    }
                    if (UtilityVendorCodeList != null)
                    {
                        RMS.Models.DraftUtilityInfo UI;
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            if (UtilityVendorCodeList[i] != null && UtilityVendorCodeList[i] != "")
                            {
                                UI = new RMS.Models.DraftUtilityInfo();
                                UI.AgreementSLNo = AI.AgreementSLNo;
                                UI.UtilityVendorCode = (UtilityVendorCodeList == null) ? null : UtilityVendorCodeList[i].ToString();
                                UI.UtilityLandlordName = (UtilityLandlordNameList == null) ? null : UtilityLandlordNameList[i].ToString();
                                if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Others; }

                                UI.ServiceChargePC = Convert.ToDouble(ServiceChargePCList[i].ToString());
                                UI.ServiceChargeAmount = Convert.ToDouble(ServiceChargeAmountList[i].ToString());

                                UI.OnlineTowerPC = Convert.ToDouble(OnlineTowerPCList[i].ToString());
                                UI.OnlineTowerAmount = Convert.ToDouble(OnlineTowerAmountList[i].ToString());

                                UI.GeneratorSpacePC = Convert.ToDouble(GeneratorSpacePCList[i].ToString());
                                UI.GeneratorSpaceAmount = Convert.ToDouble(GeneratorSpaceAmountList[i].ToString());

                                UI.CarParkingPC = Convert.ToDouble(CarParkingPCList[i].ToString());
                                UI.CarParkingAmount = Convert.ToDouble(CarParkingAmountList[i].ToString());

                                UI.TaxPC = Convert.ToDouble(UtilityTaxPCList[i].ToString());
                                UI.TaxAmount = Convert.ToDouble(UtilityTaxAmountList[i].ToString());
                                UI.VATPC = Convert.ToDouble(UtilityVATPCList[i].ToString());
                                UI.VATAmount = Convert.ToDouble(UtilityVATAmountList[i].ToString());
                                UI.UtilityAddress = (UtilityAddressList == null) ? null : UtilityAddressList[i].ToString();
                                UI.UtilityContactNo = (UtilityContactNoList == null) ? null : UtilityContactNoList[i].ToString();
                                UI.UtilityEmail = (UtilityEmailList == null) ? null : UtilityEmailList[i].ToString();
                                UI.UtilityACNo = (UtilityACNoList == null) ? null : UtilityACNoList[i].ToString();
                                UI.UtilityBankName = (UtilityBankNameList == null) ? null : UtilityBankNameList[i].ToString();
                                UI.UtilityBranchName = (UtilityBranchNameList == null) ? null : UtilityBranchNameList[i].ToString();
                                UI.UtilityRoutingNo = (UtilityRoutingNoList == null) ? null : UtilityRoutingNoList[i].ToString();
                                db.DraftUtilityInfos.Add(UI);
                                db.SaveChanges();
                            }
                        }
                    }
                    AlertMsg = "The draft agreement: " + AI.AgreementName + " has been updated.";
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectReEdit(int AgreementSLNo)
        {
            TempData.Remove("AgreementSLNo");
            TempData.Add("AgreementSLNo", AgreementSLNo);
            return RedirectToAction("ReEdit");
        }

        [HttpGet]
        public ActionResult ReEdit()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strAgreementSLNo = TempData["AgreementSLNo"];
                    if (strAgreementSLNo == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int AgreementSLNo = Convert.ToInt32(strAgreementSLNo);
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    DTOBasic DTOBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.URLPath = "AgreementInfo/RedirectReAgreementIndex?ViewID=2";
                    //==Water Bill Type meter reading
                    IList<SelectListItem> WaterBillTypeList = new List<SelectListItem>();
                    WaterBillTypeList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Meter Reading", Value = "Meter Reading" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Fixed Value", Value = "Fixed Value" });
                    SelectList WaterBillTypeStatus = new SelectList(WaterBillTypeList, "Value", "Text");
                    ViewBag.WaterBillTypeList = WaterBillTypeStatus;
                    //======Lookup
                    var lstLookup = db.Lookups
                        .Where(x => (x.GroupName == "Cost Center" || x.GroupName == "SOL" || x.GroupName == "Bank" || x.GroupName == "Regional Office"
                        || x.GroupName == "Division" || x.GroupName == "District" || x.GroupName == "Upazila" || x.GroupName == "Thana"
                        || x.GroupName == "Premises Type for Accounts" || x.GroupName == "Sub Premises Type" || x.GroupName == "Payment Method") &&
                        x.Status == DTOBasic.active && x.IsDeleted == false).ToList();
                    //==Bank Info
                    ViewBag.BankInfoList = lstLookup.Where(x => x.GroupName == "Bank").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==CC Info
                    ViewBag.CCInfoList = lstLookup.Where(x => x.GroupName == "Cost Center").Select(x => new { CCSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==SOL Info
                    ViewBag.SOLInfoList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { SOLSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premise Type
                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();
                    //==Area Status
                    IList<SelectListItem> AreaStatusList = new List<SelectListItem>();
                    AreaStatusList.Add(new SelectListItem { Text = "Select Area Status", Value = "0" });
                    AreaStatusList.Add(new SelectListItem { Text = "Urban", Value = "Urban" });
                    AreaStatusList.Add(new SelectListItem { Text = "Rural", Value = "Rural" });
                    SelectList AreaStatus = new SelectList(AreaStatusList, "Value", "Text");
                    ViewBag.AreaStatusList = AreaStatus;
                    //==Regional Office 
                    ViewBag.RegionalOfficeList = lstLookup.Where(x => x.GroupName == "Regional Office").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Primary SOL 
                    ViewBag.PrimarySOLList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Attached Control
                    ViewBag.AttachedControlList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Division
                    ViewBag.DivisionList = lstLookup.Where(x => x.GroupName == "Division").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==District
                    ViewBag.DistrictList = lstLookup.Where(x => x.GroupName == "District").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Upazila
                    ViewBag.UpazilaList = lstLookup.Where(x => x.GroupName == "Upazila").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Thana
                    ViewBag.ThanaList = lstLookup.Where(x => x.GroupName == "Thana").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premises Type for Accounts
                    ViewBag.PremisesTypeforAccountsList = lstLookup.Where(x => x.GroupName == "Premises Type for Accounts").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Provided By
                    IList<SelectListItem> ProvidedByList = new List<SelectListItem>();
                    ProvidedByList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    ProvidedByList.Add(new SelectListItem { Text = "Company", Value = "1" });
                    ProvidedByList.Add(new SelectListItem { Text = "Landlord", Value = "2" });
                    ProvidedByList.Add(new SelectListItem { Text = "Others", Value = "3" });
                    SelectList ProvidedByStatus = new SelectList(ProvidedByList, "Value", "Text");
                    ViewBag.ProvidedByList = ProvidedByStatus;
                    //==Yes No
                    IList<SelectListItem> YesNoList = new List<SelectListItem>();
                    YesNoList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    YesNoList.Add(new SelectListItem { Text = "Yes", Value = "1" });
                    YesNoList.Add(new SelectListItem { Text = "No", Value = "2" });
                    SelectList YesNoStatus = new SelectList(YesNoList, "Value", "Text");
                    ViewBag.YesNoList = YesNoStatus;
                    //==Sub Premises Type
                    ViewBag.SubPremisesTypeList = lstLookup.Where(x => x.GroupName == "Sub Premises Type").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Payment Method
                    ViewBag.PaymentMethodList = lstLookup.Where(x => x.GroupName == "Payment Method").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Calculation Method
                    IList<SelectListItem> CalculationMethodList = new List<SelectListItem>();
                    CalculationMethodList.Add(new SelectListItem { Text = "Current Month", Value = "Current Month" });
                    CalculationMethodList.Add(new SelectListItem { Text = "Following Month", Value = "Following Month" });
                    SelectList CalculationMethod = new SelectList(CalculationMethodList, "Value", "Text");
                    ViewBag.CalculationMethodList = CalculationMethod;
                    //======Lookup
                    //==UOM
                    IList<SelectListItem> UOMList = new List<SelectListItem>();
                    UOMList.Add(new SelectListItem { Text = "Select Unit of Measurement", Value = "0" });
                    UOMList.Add(new SelectListItem { Text = "Square Feet", Value = "1" });
                    UOMList.Add(new SelectListItem { Text = "Square Meter", Value = "2" });
                    SelectList UOM = new SelectList(UOMList, "Value", "Text");
                    ViewBag.UOMList = UOM;
                    //==Tax Type
                    IList<SelectListItem> TaxTypeList = new List<SelectListItem>();
                    //TaxTypeList.Add(new SelectListItem { Text = "Select Tax Type", Value = "0" });
                    TaxTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList TaxType = new SelectList(TaxTypeList, "Value", "Text");
                    ViewBag.TaxTypeList = TaxType;
                    //==Vat Type
                    IList<SelectListItem> VatTypeList = new List<SelectListItem>();
                    //VatTypeList.Add(new SelectListItem { Text = "Select VAT Type", Value = "0" });
                    VatTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    VatTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    VatTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList VatType = new SelectList(VatTypeList, "Value", "Text");
                    ViewBag.VatTypeList = VatType;
                    //==Mode of Payment
                    IList<SelectListItem> ModeOfPaymentList = new List<SelectListItem>();
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Select Mode of Payment", Value = "0" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Account Transfer", Value = "Account Transfer" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "RTGS", Value = "RTGS" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "EFTN", Value = "EFTN" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Pay Order", Value = "Pay Order" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Cash", Value = "Cash" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "IBB Payment", Value = "IBB Payment" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Brokerage", Value = "City Brokerage" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Capital", Value = "City Capital" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Others", Value = "Others" });
                    SelectList ModeOfPayment = new SelectList(ModeOfPaymentList, "Value", "Text");
                    ViewBag.ModeOfPaymentList = ModeOfPayment;
                    //==Advance No
                    IList<SelectListItem> AdvanceNoList = new List<SelectListItem>();
                    AdvanceNoList.Add(new SelectListItem { Text = "Select Advance No", Value = "0" });
                    AdvanceNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    AdvanceNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    AdvanceNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    AdvanceNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    AdvanceNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    AdvanceNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    AdvanceNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    AdvanceNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    AdvanceNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    AdvanceNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList AdvanceNo = new SelectList(AdvanceNoList, "Value", "Text");
                    ViewBag.AdvanceNoList = AdvanceNo;
                    //==Review No
                    IList<SelectListItem> ReviewNoList = new List<SelectListItem>();
                    ReviewNoList.Add(new SelectListItem { Text = "Select Enhancement No", Value = "0" });
                    ReviewNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    ReviewNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    ReviewNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    ReviewNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    ReviewNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    ReviewNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    ReviewNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    ReviewNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    ReviewNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    ReviewNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList ReviewNo = new SelectList(ReviewNoList, "Value", "Text");
                    ViewBag.ReviewNoList = ReviewNo;
                    //==Space Info
                    List<RMS.Models.SpaceInfoDTO> lstSpace = new List<RMS.Models.SpaceInfoDTO>();
                    var querySpace = from SP in db.SpaceInfos
                                     where SP.AgreementSLNo == AgreementSLNo
                                     orderby SP.SpaceSLNo ascending
                                     select new
                                     {
                                         SP.SpaceType,
                                         SP.SpaceArea,
                                         SP.SpaceRate,
                                         SP.SpaceRent,
                                         SP.SpaceTotalAdvance,
                                         SP.SpaceTotalAdjustment,
                                         SP.SpaceRemarks,
                                     };
                    lstSpace = querySpace.AsEnumerable().Select(x => new RMS.Models.SpaceInfoDTO
                    {
                        SpaceType = x.SpaceType,
                        SpaceArea = x.SpaceArea,
                        SpaceRate = x.SpaceRate,
                        SpaceRent = x.SpaceRent,
                        SpaceTotalAdvance = x.SpaceTotalAdvance,
                        SpaceTotalAdjustment = x.SpaceTotalAdjustment,
                        SpaceRemarks = x.SpaceRemarks,
                    }).ToList();
                    if (lstSpace.Count > 0)
                    {
                        for (int i = 0; i < lstSpace.Count; i++)
                        {
                            lstSpace[i].SpaceRowNumber = "_" + (i + 1).ToString();
                            lstSpace[i].SpaceftrCount = lstSpace.Count;
                        }
                    }
                    ViewBag.lstSpace = lstSpace;
                    //==Advance Info
                    List<RMS.Models.AdvanceInfoDTO> lstAdvance = new List<RMS.Models.AdvanceInfoDTO>();
                    var queryAdvance = from Adv in db.AdvanceInfos
                                       where Adv.AgreementSLNo == AgreementSLNo
                                       orderby Adv.AdvanceSLNo ascending
                                       select new
                                       {
                                           Adv.AdvanceNo,
                                           Adv.AdvanceSlotPeriod,
                                           Adv.StartDate,
                                           Adv.EndDate,
                                           Adv.AdvanceNote,
                                           Adv.AdvanceSlotAmount,
                                       };
                    lstAdvance = queryAdvance.AsEnumerable().Select(x => new RMS.Models.AdvanceInfoDTO
                    {
                        AdvanceNo = x.AdvanceNo,
                        AdvanceSlotPeriod = x.AdvanceSlotPeriod,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        AdvanceNote = x.AdvanceNote,
                        AdvanceSlotAmount = x.AdvanceSlotAmount,
                    }).ToList();
                    if (lstAdvance.Count > 0)
                    {
                        for (int i = 0; i < lstAdvance.Count; i++)
                        {
                            lstAdvance[i].AdvanceRowNumber = "_" + (i + 1).ToString();
                            lstAdvance[i].AdvanceftrCount = lstAdvance.Count;
                        }
                    }
                    ViewBag.lstAdvance = lstAdvance;
                    //==Review Info
                    List<RMS.Models.ReviewInfoDTO> lstReview = new List<RMS.Models.ReviewInfoDTO>();
                    var queryReview = from RI in db.ReviewInfos
                                      where RI.AgreementSLNo == AgreementSLNo
                                      orderby RI.ReviewSLNo ascending
                                      select new
                                      {
                                          RI.ReviewNo,
                                          RI.StartDate,
                                          RI.EndDate,
                                          RI.Period,
                                          RI.IncreaseAmount,
                                          RI.IncreasePercentage,
                                          RI.ReviewNote,
                                      };
                    lstReview = queryReview.AsEnumerable().Select(x => new RMS.Models.ReviewInfoDTO
                    {
                        ReviewNo = x.ReviewNo,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        Period = x.Period,
                        IncreaseAmount = x.IncreaseAmount,
                        IncreasePercentage = x.IncreasePercentage,
                        ReviewNote = x.ReviewNote,
                    }).ToList();
                    if (lstReview.Count > 0)
                    {
                        for (int i = 0; i < lstReview.Count; i++)
                        {
                            lstReview[i].ReviewRowNumber = "_" + (i + 1).ToString();
                            lstReview[i].ReviewftrCount = lstReview.Count;
                        }
                    }
                    ViewBag.lstReview = lstReview;
                    //==Landlord Information
                    List<RMS.Models.LandlordInfoDTO> lstLandlord = new List<RMS.Models.LandlordInfoDTO>();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    var queryLandlord = from LI in db.LandlordInfos
                                        where LI.AgreementSLNo == AgreementSLNo && LI.IsOld == false
                                        orderby LI.LandlordSLNo ascending
                                        select new
                                        {
                                            //==Landlord Info
                                            LI.LandlordSLNo,
                                            LI.AgreementSLNo,
                                            LI.VendorCode,
                                            LI.LandlordName,
                                            LI.ModeOfPayment,
                                            LI.AdvancePC,
                                            LI.AdvanceAmount,
                                            LI.AdvanceAdjustmentPC,
                                            LI.AdvanceAdjustmentAmount,
                                            LI.TaxPC,
                                            LI.TaxAmount,
                                            LI.VATPC,
                                            LI.VATAmount,
                                            LI.RentPC,
                                            LI.RentAmount,
                                            LI.LLAddress,
                                            LI.LLContactNo,
                                            LI.LLEmail,
                                            LI.ACNo,
                                            LI.BankName,
                                            LI.BranchName,
                                            LI.RoutingNo,
                                        };
                    lstLandlord = queryLandlord.AsEnumerable().Select(x => new RMS.Models.LandlordInfoDTO
                    {
                        LandlordSLNo = x.AgreementSLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        VendorCode = x.VendorCode,
                        LandlordName = x.LandlordName,
                        ModeOfPayment = x.ModeOfPayment,
                        VendorAdvancePC = x.AdvancePC,
                        VendorAdvanceAmount = x.AdvanceAmount,
                        VendorAdvanceAdjustmentPC = x.AdvanceAdjustmentPC,
                        VendorAdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        VendorTaxPC = x.TaxPC,
                        VendorTaxAmount = x.TaxAmount,
                        VendorVATPC = x.VATPC,
                        VendorVATAmount = x.VATAmount,
                        VendorRentPC = x.RentPC,
                        VendorRentAmount = x.RentAmount,
                        LLAddress = x.LLAddress,
                        LLContactNo = x.LLContactNo,
                        LLEmail = x.LLEmail,
                        ACNo = x.ACNo,
                        BankName = x.BankName,
                        BranchName = x.BranchName,
                        RoutingNo = x.RoutingNo,
                    }).ToList();
                    if (lstLandlord.Count > 0)
                    {
                        for (int i = 0; i < lstLandlord.Count; i++)
                        {
                            lstLandlord[i].LIRowNumber = "_" + (i + 1).ToString();
                            lstLandlord[i].LIftrCount = lstLandlord.Count;
                            if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.RTGS) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.EFTN) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Cash) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Others) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstLandlord = lstLandlord;
                    //==Cost Allocation
                    List<RMS.Models.CostCenterInfoDTO> lstCC = new List<RMS.Models.CostCenterInfoDTO>();
                    var queryCC = from CC in db.CostCenterInfos
                                  where CC.AgreementSLNo == AgreementSLNo && CC.IsOld == false
                                  orderby CC.CCSLNo ascending
                                  select new
                                  {
                                      CC.CCCode,
                                      CC.CCName,
                                      CC.SOLCode,
                                      CC.SOLName,
                                      CC.CCShareAllotment,
                                      CC.CCText,
                                  };
                    lstCC = queryCC.AsEnumerable().Select(x => new RMS.Models.CostCenterInfoDTO
                    {
                        CCCode = x.CCCode,
                        CCName = x.CCName,
                        SOLCode = x.SOLCode,
                        SOLName = x.SOLName,
                        CCShareAllotment = x.CCShareAllotment,
                        CCText = x.CCText,
                    }).ToList();
                    if (lstCC.Count > 0)
                    {
                        for (int i = 0; i < lstCC.Count; i++)
                        {
                            lstCC[i].CCRowNumber = "_" + (i + 1).ToString();
                            lstCC[i].CCftrCount = lstCC.Count;
                        }
                    }
                    ViewBag.lstCC = lstCC;
                    //==Utility Information
                    List<RMS.Models.UtilityInfoDTO> lstUtility = new List<RMS.Models.UtilityInfoDTO>();
                    var queryUtility = from UI in db.UtilityInfos
                                       where UI.AgreementSLNo == AgreementSLNo && UI.IsOld == false
                                       orderby UI.UtilitySLNo ascending
                                       select new
                                       {
                                           //==Landlord Info
                                           UI.UtilitySLNo,
                                           UI.AgreementSLNo,
                                           UI.UtilityVendorCode,
                                           UI.UtilityLandlordName,
                                           UI.UtilityModeOfPayment,
                                           UI.ServiceChargePC,
                                           UI.ServiceChargeAmount,
                                           UI.OnlineTowerPC,
                                           UI.OnlineTowerAmount,
                                           UI.GeneratorSpacePC,
                                           UI.GeneratorSpaceAmount,
                                           UI.CarParkingPC,
                                           UI.CarParkingAmount,
                                           UI.TaxPC,
                                           UI.TaxAmount,
                                           UI.VATPC,
                                           UI.VATAmount,
                                           UI.UtilityAddress,
                                           UI.UtilityContactNo,
                                           UI.UtilityEmail,
                                           UI.UtilityACNo,
                                           UI.UtilityBankName,
                                           UI.UtilityBranchName,
                                           UI.UtilityRoutingNo,
                                       };
                    lstUtility = queryUtility.AsEnumerable().Select(x => new RMS.Models.UtilityInfoDTO
                    {
                        UtilitySLNo = x.UtilitySLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        UtilityVendorCode = x.UtilityVendorCode,
                        UtilityLandlordName = x.UtilityLandlordName,
                        UtilityModeOfPayment = x.UtilityModeOfPayment,
                        ServiceChargePC = x.ServiceChargePC,
                        ServiceChargeAmount = x.ServiceChargeAmount,
                        OnlineTowerPC = x.OnlineTowerPC,
                        OnlineTowerAmount = x.OnlineTowerAmount,
                        GeneratorSpacePC = x.GeneratorSpacePC,
                        GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                        CarParkingPC = x.CarParkingPC,
                        CarParkingAmount = x.CarParkingAmount,
                        UtilityTaxPC = x.TaxPC,
                        UtilityTaxAmount = x.TaxAmount,
                        UtilityVATPC = x.VATPC,
                        UtilityVATAmount = x.VATAmount,
                        UtilityAddress = x.UtilityAddress,
                        UtilityContactNo = x.UtilityContactNo,
                        UtilityEmail = x.UtilityEmail,
                        UtilityACNo = x.UtilityACNo,
                        UtilityBankName = x.UtilityBankName,
                        UtilityBranchName = x.UtilityBranchName,
                        UtilityRoutingNo = x.UtilityRoutingNo,
                    }).ToList();
                    if (lstUtility.Count > 0)
                    {
                        for (int i = 0; i < lstUtility.Count; i++)
                        {
                            lstUtility[i].UtilityRowNumber = "_" + (i + 1).ToString();
                            lstUtility[i].UtilityftrCount = lstUtility.Count;
                            if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.RTGS) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.EFTN) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Cash) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Others) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstUtility = lstUtility;
                    //==Attach Documents
                    List<RMS.Models.FileUploadInfoDTO> lstFU = new List<RMS.Models.FileUploadInfoDTO>();
                    var queryFU = from FU in db.FileUploadInfos
                                  where FU.AgreementSLNo == AgreementSLNo
                                  orderby FU.SLNo ascending
                                  select new
                                  {
                                      FU.SLNo,
                                      FU.FileName,
                                  };
                    lstFU = queryFU.AsEnumerable().Select(x => new RMS.Models.FileUploadInfoDTO
                    {
                        SLNo = x.SLNo,
                        FileName = x.FileName,
                    }).ToList();
                    if (lstFU.Count > 0)
                    {
                        for (int i = 0; i < lstFU.Count; i++)
                        {
                            lstFU[i].FURowNumber = "_" + (i + 1).ToString();
                            lstFU[i].FUftrCount = lstFU.Count;
                        }
                    }
                    ViewBag.lstFU = lstFU;
                    //==Agreement Info
                    List<RMS.Models.AgreementInfoDTO> lstAgreement = new List<RMS.Models.AgreementInfoDTO>();
                    var query = from AI in db.AgreementInfos
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                where AI.AgreementSLNo == AgreementSLNo
                                select new
                                {
                                    AI.AgreementSLNo,
                                    AI.xRenewalAgreementSLNo,
                                    AI.yRenewalAgreementSLNo,
                                    //==Basic Info
                                    AI.PremiseTypeSLNo,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.PremiseAddress,
                                    AI.ConcernBranch,
                                    AI.InspectorName,
                                    AI.InspectorContactNo,
                                    AI.ClusterGroup,
                                    //==Agreement Info
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.AgreementStartDate,
                                    AI.AgreementEndDate,
                                    AI.AgreementPeriod,
                                    AI.RenewalFrequency,
                                    AI.RentDueDay,
                                    AI.UOM,
                                    AI.TotalArea,
                                    AI.CostPerUnit,
                                    AI.TotalRentAmount,
                                    AI.SecurityDepositAmount,
                                    AI.AdvanceAmount,
                                    AI.AdvanceAdjustmentPeriod,
                                    AI.AdvanceAdjustmentAmount,
                                    AI.TaxPercentage,
                                    RentTaxAmount = AI.TaxAmount,
                                    AI.VATPercentage,
                                    RentVATAMount = AI.VATAmount,
                                    AI.ServiceCharge,
                                    AI.OnlineTower,
                                    AI.GeneratorSpace,
                                    AI.CarParking,
                                    AI.NetRentAmount,
                                    AI.AgreementStatus,
                                    AI.AgreementText,
                                    AI.Status,
                                    AI.UserSLNo,
                                    AI.EntryDate,
                                    AI.IsDeleted,
                                    S.StatusName,
                                    AI.ReviewFrequency,
                                    AI.ReviewPercentage,
                                    AI.TaxType,
                                    AI.VatType,
                                    //==Control Data
                                    AI.CashGLCode,
                                    AI.BankGLCode,
                                    AI.AdvanceGLCode,
                                    AI.AdvanceAdjustmentGLCode,
                                    AI.RentGLCode,
                                    AI.ServiceChargeGLCode,
                                    AI.TaxGLCode,
                                    AI.VATGLCode,
                                    AI.ProvisionGLTax,
                                    AI.ProvisionGLAP,
                                    AI.RTGSGL,
                                    AI.EFTNGL,
                                    AI.PayOrderGL,
                                    AI.IBBPaymentGL,
                                    AI.CityBrokerageGL,
                                    AI.CityCapitalGL,
                                    AI.OthersGL,
                                    AI.Special,
                                    //====
                                    AI.PremiseAddressBangla,
                                    AI.AreaStatus,
                                    AI.RegionalOffice,
                                    AI.PrimarySOL,
                                    AI.AttachedControl,
                                    AI.ControllerOfficeDistance,
                                    AI.RoutingNumber,
                                    AI.Division,
                                    AI.District,
                                    AI.Upazila,
                                    AI.Thana,
                                    AI.ThanaCode,
                                    AI.Pourasabha,
                                    AI.PourasabhaType,
                                    AI.UnionName,
                                    AI.WardNo,
                                    AI.PremisesTypeforAccounts,
                                    AI.ParentAgreementCode,
                                    AI.ElectricityLoad,
                                    AI.ElectricityProvidedBy,
                                    AI.AITBourneBy,
                                    AI.CommercialPermission,
                                    AI.BuildingPlan,
                                    AI.PremisesSituatedFloor,
                                    AI.BangladeshBankApproval,
                                    AI.BangladeshBankReference,
                                    AI.ITTowerRentClause,
                                    AI.TerminationClause,
                                    AI.TerminationNoticePeriod,
                                    AI.PremisesOpeningDate,
                                    AI.DocumentDate,
                                    AI.Remarks,
                                    AI.AgreementRemarks,
                                    AI.AdvanceRemarks,
                                    AI.ReviewRemarks,
                                    AI.LLRemarks,
                                    AI.CCRemarks,
                                    AI.UtilityRemarks,
                                    AI.ControlDataRemarks,
                                    //====
                                    AI.BorrowingRate,
                                    AI.PaymentMethod,
                                    AI.IsIFRSEnable,
                                    AI.CalculationMethod,
                                    AI.WithHoldingCode,
                                    AI.AdditionalExpense,
                                    AI.InitialDirectCost,
                                    AI.DismantlingCost,
                                    AI.CarParkingNo,
                                    AI.WaterBillType,
                                    AI.WaterBillAmount,
                                    AI.IFRSEffectiveDate,
                                    AI.CorporateTaxRate,
                                };
                    lstAgreement = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        xRenewalAgreementSLNo = x.xRenewalAgreementSLNo,
                        yRenewalAgreementSLNo = x.yRenewalAgreementSLNo,
                        //==Basic Info
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        ConcernBranch = x.ConcernBranch,
                        InspectorName = x.InspectorName,
                        InspectorContactNo = x.InspectorContactNo,
                        ClusterGroup = x.ClusterGroup,
                        //==Agreement Info
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        RenewalFrequency = x.RenewalFrequency,
                        RentDueDay = x.RentDueDay,
                        UOM = x.UOM,
                        TotalArea = x.TotalArea,
                        CostPerUnit = x.CostPerUnit,
                        RentAmount = x.TotalArea * x.CostPerUnit,
                        TotalRentAmount = x.TotalRentAmount,
                        SecurityDepositAmount = x.SecurityDepositAmount,
                        AdvanceAmount = x.AdvanceAmount,
                        AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                        AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        TaxPercentage = x.TaxPercentage,
                        TaxAmount = x.RentTaxAmount,
                        VATPercentage = x.VATPercentage,
                        VATAmount = x.RentVATAMount,
                        ServiceCharge = x.ServiceCharge,
                        OnlineTower = x.OnlineTower,
                        GeneratorSpace = x.GeneratorSpace,
                        CarParking = x.CarParking,
                        NetRentAmount = x.NetRentAmount,
                        AgreementStatus = x.AgreementStatus,
                        AgreementText = x.AgreementText,
                        Status = x.Status,
                        UserSLNo = x.UserSLNo,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        IsDeleted = x.IsDeleted,
                        StatusName = x.StatusName,
                        ReviewFrequency = x.ReviewFrequency,
                        ReviewPercentage = x.ReviewPercentage,
                        TaxType = x.TaxType,
                        xTaxType = x.TaxType,
                        VatType = x.VatType,
                        //==Control Data
                        CashGLCode = x.CashGLCode,
                        BankGLCode = x.BankGLCode,
                        AdvanceGLCode = x.AdvanceGLCode,
                        AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                        RentGLCode = x.RentGLCode,
                        ServiceChargeGLCode = x.ServiceChargeGLCode,
                        TaxGLCode = x.TaxGLCode,
                        VATGLCode = x.VATGLCode,
                        ProvisionGLTax = x.ProvisionGLTax,
                        ProvisionGLAP = x.ProvisionGLAP,
                        RTGSGL = x.RTGSGL,
                        EFTNGL = x.EFTNGL,
                        PayOrderGL = x.PayOrderGL,
                        IBBPaymentGL = x.IBBPaymentGL,
                        CityBrokerageGL = x.CityBrokerageGL,
                        CityCapitalGL = x.CityCapitalGL,
                        OthersGL = x.OthersGL,
                        Special = x.Special,
                        SpaceftrCount = lstSpace.Count(),
                        RIftrCount = lstReview.Count(),
                        LIftrCount = lstLandlord.Count(),
                        CCftrCount = lstCC.Count(),
                        UIftrCount = lstUtility.Count(),
                        //======
                        PremiseAddressBangla = x.PremiseAddressBangla,
                        AreaStatus = x.AreaStatus,
                        RegionalOffice = x.RegionalOffice,
                        PrimarySOL = x.PrimarySOL,
                        AttachedControl = x.AttachedControl,
                        ControllerOfficeDistance = x.ControllerOfficeDistance,
                        RoutingNumber = x.RoutingNumber,
                        Division = x.Division,
                        District = x.District,
                        Upazila = x.Upazila,
                        Thana = x.Thana,
                        ThanaCode = x.ThanaCode,
                        Pourasabha = x.Pourasabha,
                        PourasabhaType = x.PourasabhaType,
                        UnionName = x.UnionName,
                        WardNo = x.WardNo,
                        PremisesTypeforAccounts = x.PremisesTypeforAccounts,
                        ParentAgreementCode = x.ParentAgreementCode,
                        ElectricityLoad = x.ElectricityLoad,
                        ElectricityProvidedBy = x.ElectricityProvidedBy,
                        AITBourneBy = x.AITBourneBy,
                        CommercialPermission = x.CommercialPermission,
                        BuildingPlan = x.BuildingPlan,
                        PremisesSituatedFloor = x.PremisesSituatedFloor,
                        BangladeshBankApproval = x.BangladeshBankApproval,
                        BangladeshBankReference = x.BangladeshBankReference,
                        ITTowerRentClause = x.ITTowerRentClause,
                        TerminationClause = x.TerminationClause,
                        TerminationNoticePeriod = x.TerminationNoticePeriod,
                        PremisesOpeningDate = x.PremisesOpeningDate?.ToString("dd/MM/yyyy"),
                        DocumentDate = x.DocumentDate?.ToString("dd/MM/yyyy"),
                        Remarks = x.Remarks,
                        AgreementRemarks = x.AgreementRemarks,
                        AdvanceRemarks = x.AdvanceRemarks,
                        ReviewRemarks = x.ReviewRemarks,
                        LLRemarks = x.LLRemarks,
                        CCRemarks = x.CCRemarks,
                        UtilityRemarks = x.UtilityRemarks,
                        ControlDataRemarks = x.ControlDataRemarks,
                        //======
                        BorrowingRate = x.BorrowingRate,
                        PaymentMethod = x.PaymentMethod,
                        IsIFRSEnable = x.IsIFRSEnable,
                        CalculationMethod = x.CalculationMethod,
                        WithHoldingCode = x.WithHoldingCode,
                        AdditionalExpense = x.AdditionalExpense,
                        InitialDirectCost = x.InitialDirectCost,
                        DismantlingCost = x.DismantlingCost,
                        CarParkingNo = x.CarParkingNo,
                        WaterBillType = x.WaterBillType,
                        WaterBillAmount = x.WaterBillAmount,
                        IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        CorporateTaxRate = x.CorporateTaxRate,
                    }).ToList();
                    int xRenewalAgreementSLNo = lstAgreement[0].xRenewalAgreementSLNo;
                    //ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementSLNo == xRenewalAgreementSLNo ||
                    //(x.AgreementStatus == AgreementStatus.Activate
                    //        && x.IsBlock == false && x.IsRenewal == false && x.IsModified == false && x.AgreementEndDate < DateTime.Now))
                    //            .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderBy(x => x.AgreementCode).ToList();
                    //==Dropdown Reference Agreement
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementSLNo == xRenewalAgreementSLNo)
                            .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();
                    return View(AgreementInfoPath.ReEdit, lstAgreement);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectRenewalCreate(int AgreementSLNo)
        {
            TempData.Remove("AgreementSLNo");
            TempData.Add("AgreementSLNo", AgreementSLNo);
            return RedirectToAction("RenewalCreate");
        }

        [HttpGet]
        public ActionResult RenewalCreate()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strAgreementSLNo = TempData["AgreementSLNo"];
                    if (strAgreementSLNo == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int AgreementSLNo = Convert.ToInt32(strAgreementSLNo);
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    DTOBasic DTOBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.URLPath = "AgreementInfo/RedirectReAgreementIndex?ViewID=1";
                    //==Water Bill Type meter reading
                    IList<SelectListItem> WaterBillTypeList = new List<SelectListItem>();
                    WaterBillTypeList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Meter Reading", Value = "Meter Reading" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Fixed Value", Value = "Fixed Value" });
                    SelectList WaterBillTypeStatus = new SelectList(WaterBillTypeList, "Value", "Text");
                    ViewBag.WaterBillTypeList = WaterBillTypeStatus;
                    //======Lookup
                    var lstLookup = db.Lookups
                        .Where(x => (x.GroupName == "Cost Center" || x.GroupName == "SOL" || x.GroupName == "Bank" || x.GroupName == "Regional Office"
                        || x.GroupName == "Division" || x.GroupName == "District" || x.GroupName == "Upazila" || x.GroupName == "Thana"
                        || x.GroupName == "Premises Type for Accounts" || x.GroupName == "Sub Premises Type" || x.GroupName == "Payment Method") &&
                        x.Status == DTOBasic.active && x.IsDeleted == false).ToList();
                    //==Bank Info
                    ViewBag.BankInfoList = lstLookup.Where(x => x.GroupName == "Bank").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==CC Info
                    ViewBag.CCInfoList = lstLookup.Where(x => x.GroupName == "Cost Center").Select(x => new { CCSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==SOL Info
                    ViewBag.SOLInfoList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { SOLSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premise Type
                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();
                    //==Area Status
                    IList<SelectListItem> AreaStatusList = new List<SelectListItem>();
                    AreaStatusList.Add(new SelectListItem { Text = "Select Area Status", Value = "0" });
                    AreaStatusList.Add(new SelectListItem { Text = "Urban", Value = "Urban" });
                    AreaStatusList.Add(new SelectListItem { Text = "Rural", Value = "Rural" });
                    SelectList AreaStatus = new SelectList(AreaStatusList, "Value", "Text");
                    ViewBag.AreaStatusList = AreaStatus;
                    //==Regional Office 
                    ViewBag.RegionalOfficeList = lstLookup.Where(x => x.GroupName == "Regional Office").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Primary SOL 
                    ViewBag.PrimarySOLList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Attached Control
                    ViewBag.AttachedControlList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Division
                    ViewBag.DivisionList = lstLookup.Where(x => x.GroupName == "Division").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==District
                    ViewBag.DistrictList = lstLookup.Where(x => x.GroupName == "District").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Upazila
                    ViewBag.UpazilaList = lstLookup.Where(x => x.GroupName == "Upazila").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Thana
                    ViewBag.ThanaList = lstLookup.Where(x => x.GroupName == "Thana").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premises Type for Accounts
                    ViewBag.PremisesTypeforAccountsList = lstLookup.Where(x => x.GroupName == "Premises Type for Accounts").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Provided By
                    IList<SelectListItem> ProvidedByList = new List<SelectListItem>();
                    ProvidedByList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    ProvidedByList.Add(new SelectListItem { Text = "Company", Value = "1" });
                    ProvidedByList.Add(new SelectListItem { Text = "Landlord", Value = "2" });
                    ProvidedByList.Add(new SelectListItem { Text = "Others", Value = "3" });
                    SelectList ProvidedByStatus = new SelectList(ProvidedByList, "Value", "Text");
                    ViewBag.ProvidedByList = ProvidedByStatus;
                    //==Yes No
                    IList<SelectListItem> YesNoList = new List<SelectListItem>();
                    YesNoList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    YesNoList.Add(new SelectListItem { Text = "Yes", Value = "1" });
                    YesNoList.Add(new SelectListItem { Text = "No", Value = "2" });
                    SelectList YesNoStatus = new SelectList(YesNoList, "Value", "Text");
                    ViewBag.YesNoList = YesNoStatus;
                    //==Sub Premises Type
                    ViewBag.SubPremisesTypeList = lstLookup.Where(x => x.GroupName == "Sub Premises Type").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Payment Method
                    ViewBag.PaymentMethodList = lstLookup.Where(x => x.GroupName == "Payment Method").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Calculation Method
                    IList<SelectListItem> CalculationMethodList = new List<SelectListItem>();
                    CalculationMethodList.Add(new SelectListItem { Text = "Current Month", Value = "Current Month" });
                    CalculationMethodList.Add(new SelectListItem { Text = "Following Month", Value = "Following Month" });
                    SelectList CalculationMethod = new SelectList(CalculationMethodList, "Value", "Text");
                    ViewBag.CalculationMethodList = CalculationMethod;
                    //======Lookup
                    //==UOM
                    IList<SelectListItem> UOMList = new List<SelectListItem>();
                    UOMList.Add(new SelectListItem { Text = "Select Unit of Measurement", Value = "0" });
                    UOMList.Add(new SelectListItem { Text = "Square Feet", Value = "1" });
                    UOMList.Add(new SelectListItem { Text = "Square Meter", Value = "2" });
                    SelectList UOM = new SelectList(UOMList, "Value", "Text");
                    ViewBag.UOMList = UOM;
                    //==Tax Type
                    IList<SelectListItem> TaxTypeList = new List<SelectListItem>();
                    //TaxTypeList.Add(new SelectListItem { Text = "Select Tax Type", Value = "0" });
                    TaxTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList TaxType = new SelectList(TaxTypeList, "Value", "Text");
                    ViewBag.TaxTypeList = TaxType;
                    //==Vat Type
                    IList<SelectListItem> VatTypeList = new List<SelectListItem>();
                    //VatTypeList.Add(new SelectListItem { Text = "Select VAT Type", Value = "0" });
                    VatTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    VatTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    VatTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList VatType = new SelectList(VatTypeList, "Value", "Text");
                    ViewBag.VatTypeList = VatType;
                    //==Mode of Payment
                    IList<SelectListItem> ModeOfPaymentList = new List<SelectListItem>();
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Select Mode of Payment", Value = "0" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Account Transfer", Value = "Account Transfer" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "RTGS", Value = "RTGS" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "EFTN", Value = "EFTN" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Pay Order", Value = "Pay Order" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Cash", Value = "Cash" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "IBB Payment", Value = "IBB Payment" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Brokerage", Value = "City Brokerage" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Capital", Value = "City Capital" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Others", Value = "Others" });
                    SelectList ModeOfPayment = new SelectList(ModeOfPaymentList, "Value", "Text");
                    ViewBag.ModeOfPaymentList = ModeOfPayment;
                    //==Advance No
                    IList<SelectListItem> AdvanceNoList = new List<SelectListItem>();
                    AdvanceNoList.Add(new SelectListItem { Text = "Select Advance No", Value = "0" });
                    AdvanceNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    AdvanceNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    AdvanceNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    AdvanceNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    AdvanceNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    AdvanceNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    AdvanceNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    AdvanceNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    AdvanceNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    AdvanceNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList AdvanceNo = new SelectList(AdvanceNoList, "Value", "Text");
                    ViewBag.AdvanceNoList = AdvanceNo;
                    //==Review No
                    IList<SelectListItem> ReviewNoList = new List<SelectListItem>();
                    ReviewNoList.Add(new SelectListItem { Text = "Select Enhancement No", Value = "0" });
                    ReviewNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    ReviewNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    ReviewNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    ReviewNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    ReviewNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    ReviewNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    ReviewNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    ReviewNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    ReviewNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    ReviewNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList ReviewNo = new SelectList(ReviewNoList, "Value", "Text");
                    ViewBag.ReviewNoList = ReviewNo;
                    //==Dropdown Reference Agreement
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementSLNo == AgreementSLNo)
                            .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();
                    //==Space Info
                    List<RMS.Models.SpaceInfoDTO> lstSpace = new List<RMS.Models.SpaceInfoDTO>();
                    var querySpace = from SP in db.SpaceInfos
                                     where SP.AgreementSLNo == AgreementSLNo
                                     orderby SP.SpaceSLNo ascending
                                     select new
                                     {
                                         SP.SpaceType,
                                         SP.SpaceArea,
                                         SP.SpaceRate,
                                         SP.SpaceRent,
                                         SP.SpaceTotalAdvance,
                                         SP.SpaceTotalAdjustment,
                                         SP.SpaceRemarks,
                                     };
                    lstSpace = querySpace.AsEnumerable().Select(x => new RMS.Models.SpaceInfoDTO
                    {
                        SpaceType = x.SpaceType,
                        SpaceArea = x.SpaceArea,
                        SpaceRate = x.SpaceRate,
                        SpaceRent = x.SpaceRent,
                        SpaceTotalAdvance = x.SpaceTotalAdvance,
                        SpaceTotalAdjustment = x.SpaceTotalAdjustment,
                        SpaceRemarks = x.SpaceRemarks,
                    }).ToList();
                    if (lstSpace.Count > 0)
                    {
                        for (int i = 0; i < lstSpace.Count; i++)
                        {
                            lstSpace[i].SpaceRowNumber = "_" + (i + 1).ToString();
                            lstSpace[i].SpaceftrCount = lstSpace.Count;
                        }
                    }
                    ViewBag.lstSpace = lstSpace;
                    //==Advance Info
                    List<RMS.Models.AdvanceInfoDTO> lstAdvance = new List<RMS.Models.AdvanceInfoDTO>();
                    var queryAdvance = from Adv in db.AdvanceInfos
                                       where Adv.AgreementSLNo == AgreementSLNo
                                       orderby Adv.AdvanceSLNo ascending
                                       select new
                                       {
                                           Adv.AdvanceNo,
                                           Adv.AdvanceSlotPeriod,
                                           Adv.StartDate,
                                           Adv.EndDate,
                                           Adv.AdvanceNote,
                                           Adv.AdvanceSlotAmount,
                                       };
                    lstAdvance = queryAdvance.AsEnumerable().Select(x => new RMS.Models.AdvanceInfoDTO
                    {
                        AdvanceNo = x.AdvanceNo,
                        AdvanceSlotPeriod = x.AdvanceSlotPeriod,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        AdvanceNote = x.AdvanceNote,
                        AdvanceSlotAmount = x.AdvanceSlotAmount,
                    }).ToList();
                    if (lstAdvance.Count > 0)
                    {
                        for (int i = 0; i < lstAdvance.Count; i++)
                        {
                            lstAdvance[i].AdvanceRowNumber = "_" + (i + 1).ToString();
                            lstAdvance[i].AdvanceftrCount = lstAdvance.Count;
                        }
                    }
                    ViewBag.lstAdvance = lstAdvance;
                    //==Review Info
                    List<RMS.Models.ReviewInfoDTO> lstReview = new List<RMS.Models.ReviewInfoDTO>();
                    var queryReview = from RI in db.ReviewInfos
                                      where RI.AgreementSLNo == AgreementSLNo
                                      orderby RI.ReviewSLNo ascending
                                      select new
                                      {
                                          RI.ReviewNo,
                                          RI.StartDate,
                                          RI.EndDate,
                                          RI.Period,
                                          RI.IncreaseAmount,
                                          RI.IncreasePercentage,
                                          RI.ReviewNote,
                                      };
                    lstReview = queryReview.AsEnumerable().Select(x => new RMS.Models.ReviewInfoDTO
                    {
                        ReviewNo = x.ReviewNo,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        Period = x.Period,
                        IncreaseAmount = x.IncreaseAmount,
                        IncreasePercentage = x.IncreasePercentage,
                        ReviewNote = x.ReviewNote,
                    }).ToList();
                    if (lstReview.Count > 0)
                    {
                        for (int i = 0; i < lstReview.Count; i++)
                        {
                            lstReview[i].ReviewRowNumber = "_" + (i + 1).ToString();
                            lstReview[i].ReviewftrCount = lstReview.Count;
                        }
                    }
                    ViewBag.lstReview = lstReview;
                    //==Landlord Information
                    List<RMS.Models.LandlordInfoDTO> lstLandlord = new List<RMS.Models.LandlordInfoDTO>();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    var queryLandlord = from LI in db.LandlordInfos
                                        where LI.AgreementSLNo == AgreementSLNo && LI.IsOld == false
                                        orderby LI.LandlordSLNo ascending
                                        select new
                                        {
                                            //==Landlord Info
                                            LI.LandlordSLNo,
                                            LI.AgreementSLNo,
                                            LI.VendorCode,
                                            LI.LandlordName,
                                            LI.ModeOfPayment,
                                            LI.AdvancePC,
                                            LI.AdvanceAmount,
                                            LI.AdvanceAdjustmentPC,
                                            LI.AdvanceAdjustmentAmount,
                                            LI.TaxPC,
                                            LI.TaxAmount,
                                            LI.VATPC,
                                            LI.VATAmount,
                                            LI.RentPC,
                                            LI.RentAmount,
                                            LI.LLAddress,
                                            LI.LLContactNo,
                                            LI.LLEmail,
                                            LI.ACNo,
                                            LI.BankName,
                                            LI.BranchName,
                                            LI.RoutingNo,
                                        };
                    lstLandlord = queryLandlord.AsEnumerable().Select(x => new RMS.Models.LandlordInfoDTO
                    {
                        LandlordSLNo = x.AgreementSLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        VendorCode = x.VendorCode,
                        LandlordName = x.LandlordName,
                        ModeOfPayment = x.ModeOfPayment,
                        VendorAdvancePC = x.AdvancePC,
                        VendorAdvanceAmount = x.AdvanceAmount,
                        VendorAdvanceAdjustmentPC = x.AdvanceAdjustmentPC,
                        VendorAdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        VendorTaxPC = x.TaxPC,
                        VendorTaxAmount = x.TaxAmount,
                        VendorVATPC = x.VATPC,
                        VendorVATAmount = x.VATAmount,
                        VendorRentPC = x.RentPC,
                        VendorRentAmount = x.RentAmount,
                        LLAddress = x.LLAddress,
                        LLContactNo = x.LLContactNo,
                        LLEmail = x.LLEmail,
                        ACNo = x.ACNo,
                        BankName = x.BankName,
                        BranchName = x.BranchName,
                        RoutingNo = x.RoutingNo,
                    }).ToList();
                    if (lstLandlord.Count > 0)
                    {
                        for (int i = 0; i < lstLandlord.Count; i++)
                        {
                            lstLandlord[i].LIRowNumber = "_" + (i + 1).ToString();
                            lstLandlord[i].LIftrCount = lstLandlord.Count;
                            if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.RTGS) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.EFTN) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Cash) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Others) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstLandlord = lstLandlord;
                    //==Cost Allocation
                    List<RMS.Models.CostCenterInfoDTO> lstCC = new List<RMS.Models.CostCenterInfoDTO>();
                    var queryCC = from CC in db.CostCenterInfos
                                  where CC.AgreementSLNo == AgreementSLNo && CC.IsOld == false
                                  orderby CC.CCSLNo ascending
                                  select new
                                  {
                                      CC.CCCode,
                                      CC.CCName,
                                      CC.SOLCode,
                                      CC.SOLName,
                                      CC.CCShareAllotment,
                                      CC.CCText,
                                  };
                    lstCC = queryCC.AsEnumerable().Select(x => new RMS.Models.CostCenterInfoDTO
                    {
                        CCCode = x.CCCode,
                        CCName = x.CCName,
                        SOLCode = x.SOLCode,
                        SOLName = x.SOLName,
                        CCShareAllotment = x.CCShareAllotment,
                        CCText = x.CCText,
                    }).ToList();
                    if (lstCC.Count > 0)
                    {
                        for (int i = 0; i < lstCC.Count; i++)
                        {
                            lstCC[i].CCRowNumber = "_" + (i + 1).ToString();
                            lstCC[i].CCftrCount = lstCC.Count;
                        }
                    }
                    ViewBag.lstCC = lstCC;
                    //==Utility Information
                    List<RMS.Models.UtilityInfoDTO> lstUtility = new List<RMS.Models.UtilityInfoDTO>();
                    var queryUtility = from UI in db.UtilityInfos
                                       where UI.AgreementSLNo == AgreementSLNo && UI.IsOld == false
                                       orderby UI.UtilitySLNo ascending
                                       select new
                                       {
                                           //==Landlord Info
                                           UI.UtilitySLNo,
                                           UI.AgreementSLNo,
                                           UI.UtilityVendorCode,
                                           UI.UtilityLandlordName,
                                           UI.UtilityModeOfPayment,
                                           UI.ServiceChargePC,
                                           UI.ServiceChargeAmount,
                                           UI.OnlineTowerPC,
                                           UI.OnlineTowerAmount,
                                           UI.GeneratorSpacePC,
                                           UI.GeneratorSpaceAmount,
                                           UI.CarParkingPC,
                                           UI.CarParkingAmount,
                                           UI.TaxPC,
                                           UI.TaxAmount,
                                           UI.VATPC,
                                           UI.VATAmount,
                                           UI.UtilityAddress,
                                           UI.UtilityContactNo,
                                           UI.UtilityEmail,
                                           UI.UtilityACNo,
                                           UI.UtilityBankName,
                                           UI.UtilityBranchName,
                                           UI.UtilityRoutingNo,
                                       };
                    lstUtility = queryUtility.AsEnumerable().Select(x => new RMS.Models.UtilityInfoDTO
                    {
                        UtilitySLNo = x.UtilitySLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        UtilityVendorCode = x.UtilityVendorCode,
                        UtilityLandlordName = x.UtilityLandlordName,
                        UtilityModeOfPayment = x.UtilityModeOfPayment,
                        ServiceChargePC = x.ServiceChargePC,
                        ServiceChargeAmount = x.ServiceChargeAmount,
                        OnlineTowerPC = x.OnlineTowerPC,
                        OnlineTowerAmount = x.OnlineTowerAmount,
                        GeneratorSpacePC = x.GeneratorSpacePC,
                        GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                        CarParkingPC = x.CarParkingPC,
                        CarParkingAmount = x.CarParkingAmount,
                        UtilityTaxPC = x.TaxPC,
                        UtilityTaxAmount = x.TaxAmount,
                        UtilityVATPC = x.VATPC,
                        UtilityVATAmount = x.VATAmount,
                        UtilityAddress = x.UtilityAddress,
                        UtilityContactNo = x.UtilityContactNo,
                        UtilityEmail = x.UtilityEmail,
                        UtilityACNo = x.UtilityACNo,
                        UtilityBankName = x.UtilityBankName,
                        UtilityBranchName = x.UtilityBranchName,
                        UtilityRoutingNo = x.UtilityRoutingNo,
                    }).ToList();
                    if (lstUtility.Count > 0)
                    {
                        for (int i = 0; i < lstUtility.Count; i++)
                        {
                            lstUtility[i].UtilityRowNumber = "_" + (i + 1).ToString();
                            lstUtility[i].UtilityftrCount = lstUtility.Count;
                            if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.RTGS) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.EFTN) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Cash) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Others) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstUtility = lstUtility;
                    //==Attach Documents
                    List<RMS.Models.FileUploadInfoDTO> lstFU = new List<RMS.Models.FileUploadInfoDTO>();
                    var queryFU = from FU in db.FileUploadInfos
                                  where FU.AgreementSLNo == AgreementSLNo
                                  orderby FU.SLNo ascending
                                  select new
                                  {
                                      FU.SLNo,
                                      FU.FileName,
                                  };
                    lstFU = queryFU.AsEnumerable().Select(x => new RMS.Models.FileUploadInfoDTO
                    {
                        SLNo = x.SLNo,
                        FileName = x.FileName,
                    }).ToList();
                    if (lstFU.Count > 0)
                    {
                        for (int i = 0; i < lstFU.Count; i++)
                        {
                            lstFU[i].FURowNumber = "_" + (i + 1).ToString();
                            lstFU[i].FUftrCount = lstFU.Count;
                        }
                    }
                    ViewBag.lstFU = lstFU;
                    //==Agreement Info
                    List<RMS.Models.AgreementInfoDTO> lstAgreement = new List<RMS.Models.AgreementInfoDTO>();
                    var query = from AI in db.AgreementInfos
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                where AI.AgreementSLNo == AgreementSLNo
                                select new
                                {
                                    AI.AgreementSLNo,
                                    AI.xRenewalAgreementSLNo,
                                    //==Basic Info
                                    AI.PremiseTypeSLNo,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.PremiseAddress,
                                    AI.ConcernBranch,
                                    AI.InspectorName,
                                    AI.InspectorContactNo,
                                    AI.ClusterGroup,
                                    //==Agreement Info
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.AgreementStartDate,
                                    AI.AgreementEndDate,
                                    AI.AgreementPeriod,
                                    AI.RenewalFrequency,
                                    AI.RentDueDay,
                                    AI.UOM,
                                    AI.TotalArea,
                                    AI.CostPerUnit,
                                    AI.TotalRentAmount,
                                    AI.SecurityDepositAmount,
                                    AI.AdvanceAmount,
                                    AI.AdvanceAdjustmentPeriod,
                                    AI.AdvanceAdjustmentAmount,
                                    AI.TaxPercentage,
                                    RentTaxAmount = AI.TaxAmount,
                                    AI.VATPercentage,
                                    RentVATAMount = AI.VATAmount,
                                    AI.ServiceCharge,
                                    AI.OnlineTower,
                                    AI.GeneratorSpace,
                                    AI.CarParking,
                                    AI.NetRentAmount,
                                    AI.AgreementStatus,
                                    AI.AgreementText,
                                    AI.Status,
                                    AI.UserSLNo,
                                    AI.EntryDate,
                                    AI.IsDeleted,
                                    S.StatusName,
                                    AI.ReviewFrequency,
                                    AI.ReviewPercentage,
                                    AI.TaxType,
                                    AI.VatType,
                                    //==Control Data
                                    AI.CashGLCode,
                                    AI.BankGLCode,
                                    AI.AdvanceGLCode,
                                    AI.AdvanceAdjustmentGLCode,
                                    AI.RentGLCode,
                                    AI.ServiceChargeGLCode,
                                    AI.TaxGLCode,
                                    AI.VATGLCode,
                                    AI.ProvisionGLTax,
                                    AI.ProvisionGLAP,
                                    AI.RTGSGL,
                                    AI.EFTNGL,
                                    AI.PayOrderGL,
                                    AI.IBBPaymentGL,
                                    AI.CityBrokerageGL,
                                    AI.CityCapitalGL,
                                    AI.OthersGL,
                                    //====
                                    AI.PremiseAddressBangla,
                                    AI.AreaStatus,
                                    AI.RegionalOffice,
                                    AI.PrimarySOL,
                                    AI.AttachedControl,
                                    AI.ControllerOfficeDistance,
                                    AI.RoutingNumber,
                                    AI.Division,
                                    AI.District,
                                    AI.Upazila,
                                    AI.Thana,
                                    AI.ThanaCode,
                                    AI.Pourasabha,
                                    AI.PourasabhaType,
                                    AI.UnionName,
                                    AI.WardNo,
                                    AI.PremisesTypeforAccounts,
                                    AI.ParentAgreementCode,
                                    AI.ElectricityLoad,
                                    AI.ElectricityProvidedBy,
                                    AI.AITBourneBy,
                                    AI.CommercialPermission,
                                    AI.BuildingPlan,
                                    AI.PremisesSituatedFloor,
                                    AI.BangladeshBankApproval,
                                    AI.BangladeshBankReference,
                                    AI.ITTowerRentClause,
                                    AI.TerminationClause,
                                    AI.TerminationNoticePeriod,
                                    AI.PremisesOpeningDate,
                                    AI.DocumentDate,
                                    AI.Remarks,
                                    AI.AgreementRemarks,
                                    AI.AdvanceRemarks,
                                    AI.ReviewRemarks,
                                    AI.LLRemarks,
                                    AI.CCRemarks,
                                    AI.UtilityRemarks,
                                    AI.ControlDataRemarks,
                                    //====
                                    AI.BorrowingRate,
                                    AI.PaymentMethod,
                                    AI.IsIFRSEnable,
                                    AI.CalculationMethod,
                                    AI.WithHoldingCode,
                                    AI.AdditionalExpense,
                                    AI.InitialDirectCost,
                                    AI.DismantlingCost,
                                    AI.CarParkingNo,
                                    AI.WaterBillType,
                                    AI.WaterBillAmount,
                                    AI.IFRSEffectiveDate,
                                    AI.CorporateTaxRate,
                                };
                    lstAgreement = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        xRenewalAgreementSLNo = x.AgreementSLNo,
                        yRenewalAgreementSLNo = x.xRenewalAgreementSLNo,
                        //==Basic Info
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        ConcernBranch = x.ConcernBranch,
                        InspectorName = x.InspectorName,
                        InspectorContactNo = x.InspectorContactNo,
                        ClusterGroup = x.ClusterGroup,
                        //==Agreement Info
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        RenewalFrequency = x.RenewalFrequency,
                        RentDueDay = x.RentDueDay,
                        UOM = x.UOM,
                        TotalArea = x.TotalArea,
                        CostPerUnit = x.CostPerUnit,
                        RentAmount = x.TotalArea * x.CostPerUnit,
                        TotalRentAmount = x.TotalRentAmount,
                        SecurityDepositAmount = x.SecurityDepositAmount,
                        AdvanceAmount = x.AdvanceAmount,
                        AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                        AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        TaxPercentage = x.TaxPercentage,
                        TaxAmount = x.RentTaxAmount,
                        VATPercentage = x.VATPercentage,
                        VATAmount = x.RentVATAMount,
                        ServiceCharge = x.ServiceCharge,
                        OnlineTower = x.OnlineTower,
                        GeneratorSpace = x.GeneratorSpace,
                        CarParking = x.CarParking,
                        NetRentAmount = x.NetRentAmount,
                        AgreementStatus = x.AgreementStatus,
                        AgreementText = x.AgreementText,
                        Status = x.Status,
                        UserSLNo = x.UserSLNo,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        IsDeleted = x.IsDeleted,
                        StatusName = x.StatusName,
                        ReviewFrequency = x.ReviewFrequency,
                        ReviewPercentage = x.ReviewPercentage,
                        TaxType = x.TaxType,
                        xTaxType = x.TaxType,
                        VatType = x.VatType,
                        //==Control Data
                        CashGLCode = x.CashGLCode,
                        BankGLCode = x.BankGLCode,
                        AdvanceGLCode = x.AdvanceGLCode,
                        AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                        RentGLCode = x.RentGLCode,
                        ServiceChargeGLCode = x.ServiceChargeGLCode,
                        TaxGLCode = x.TaxGLCode,
                        VATGLCode = x.VATGLCode,
                        ProvisionGLTax = x.ProvisionGLTax,
                        ProvisionGLAP = x.ProvisionGLAP,
                        RTGSGL = x.RTGSGL,
                        EFTNGL = x.EFTNGL,
                        PayOrderGL = x.PayOrderGL,
                        IBBPaymentGL = x.IBBPaymentGL,
                        CityBrokerageGL = x.CityBrokerageGL,
                        CityCapitalGL = x.CityCapitalGL,
                        OthersGL = x.OthersGL,
                        SpaceftrCount = lstSpace.Count(),
                        RIftrCount = lstReview.Count(),
                        LIftrCount = lstLandlord.Count(),
                        CCftrCount = lstCC.Count(),
                        UIftrCount = lstUtility.Count(),
                        //======
                        PremiseAddressBangla = x.PremiseAddressBangla,
                        AreaStatus = x.AreaStatus,
                        RegionalOffice = x.RegionalOffice,
                        PrimarySOL = x.PrimarySOL,
                        AttachedControl = x.AttachedControl,
                        ControllerOfficeDistance = x.ControllerOfficeDistance,
                        RoutingNumber = x.RoutingNumber,
                        Division = x.Division,
                        District = x.District,
                        Upazila = x.Upazila,
                        Thana = x.Thana,
                        ThanaCode = x.ThanaCode,
                        Pourasabha = x.Pourasabha,
                        PourasabhaType = x.PourasabhaType,
                        UnionName = x.UnionName,
                        WardNo = x.WardNo,
                        PremisesTypeforAccounts = x.PremisesTypeforAccounts,
                        ParentAgreementCode = x.ParentAgreementCode,
                        ElectricityLoad = x.ElectricityLoad,
                        ElectricityProvidedBy = x.ElectricityProvidedBy,
                        AITBourneBy = x.AITBourneBy,
                        CommercialPermission = x.CommercialPermission,
                        BuildingPlan = x.BuildingPlan,
                        PremisesSituatedFloor = x.PremisesSituatedFloor,
                        BangladeshBankApproval = x.BangladeshBankApproval,
                        BangladeshBankReference = x.BangladeshBankReference,
                        ITTowerRentClause = x.ITTowerRentClause,
                        TerminationClause = x.TerminationClause,
                        TerminationNoticePeriod = x.TerminationNoticePeriod,
                        PremisesOpeningDate = x.PremisesOpeningDate?.ToString("dd/MM/yyyy"),
                        DocumentDate = x.DocumentDate?.ToString("dd/MM/yyyy"),
                        Remarks = x.Remarks,
                        AgreementRemarks = x.AgreementRemarks,
                        AdvanceRemarks = x.AdvanceRemarks,
                        ReviewRemarks = x.ReviewRemarks,
                        LLRemarks = x.LLRemarks,
                        CCRemarks = x.CCRemarks,
                        UtilityRemarks = x.UtilityRemarks,
                        ControlDataRemarks = x.ControlDataRemarks,
                        //======
                        BorrowingRate = x.BorrowingRate,
                        PaymentMethod = x.PaymentMethod,
                        IsIFRSEnable = x.IsIFRSEnable,
                        CalculationMethod = x.CalculationMethod,
                        WithHoldingCode = x.WithHoldingCode,
                        AdditionalExpense = x.AdditionalExpense,
                        InitialDirectCost = x.InitialDirectCost,
                        DismantlingCost = x.DismantlingCost,
                        CarParkingNo = x.CarParkingNo,
                        WaterBillType = x.WaterBillType,
                        WaterBillAmount = x.WaterBillAmount,
                        IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        CorporateTaxRate = x.CorporateTaxRate,
                    }).ToList();
                    //int xRenewalAgreementSLNo = lstAgreement[0].xRenewalAgreementSLNo;
                    //ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementSLNo == xRenewalAgreementSLNo ||
                    //(x.AgreementStatus == AgreementStatus.Activate
                    //        && x.IsBlock == false && x.IsRenewal == false && x.IsModified == false && x.AgreementEndDate < DateTime.Now))
                    //            .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderBy(x => x.AgreementCode).ToList();
                    return View(AgreementInfoPath.RenewalCreate, lstAgreement);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult ReEdit(RMS.Models.AgreementInfoDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = (string)Session["LoginUserID"];
                    //==If change xRenewalAgreementSLNo
                    //if (DTO.xRenewalAgreementSLNo != DTO.yRenewalAgreementSLNo)
                    //{
                    //    //==Check available xRenewalAgreementSLNo
                    //    if (db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xRenewalAgreementSLNo && (x.IsRenewal == true || x.IsModified == true)).Any() == true)
                    //    {
                    //        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    //    }
                    //    //==Update old xRenewalAgreementSLNo
                    //    RMS.Models.AgreementInfo xAI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.yRenewalAgreementSLNo).SingleOrDefault();
                    //    if (xAI != null)
                    //    {
                    //        xAI.IsRenewal = false;
                    //        xAI.yRenewalAgreementSLNo = 0;
                    //        db.Entry(xAI).State = EntityState.Modified;
                    //        db.SaveChanges();
                    //    }
                    //    //==Update new selected xRenewalAgreementSLNo
                    //    RMS.Models.AgreementInfo yAI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xRenewalAgreementSLNo).SingleOrDefault();
                    //    if (yAI != null)
                    //    {
                    //        yAI.IsRenewal = true;
                    //        yAI.yRenewalAgreementSLNo = DTO.xRenewalAgreementSLNo;
                    //        db.Entry(yAI).State = EntityState.Modified;
                    //        db.SaveChanges();
                    //    }
                    //}
                    //==
                    RMS.Models.AgreementInfo AI = new RMS.Models.AgreementInfo();
                    AI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).SingleOrDefault();
                    //==Basic Info
                    AI.PremiseTypeSLNo = DTO.PremiseTypeSLNo;
                    AI.PremiseName = DTO.PremiseName;
                    AI.PremiseAddress = DTO.PremiseAddress;
                    AI.ConcernBranch = DTO.ConcernBranch;
                    AI.InspectorName = DTO.InspectorName;
                    AI.InspectorContactNo = DTO.InspectorContactNo;
                    AI.ClusterGroup = DTO.ClusterGroup;
                    //==Agreement Info
                    //if (DTO.xRenewalAgreementSLNo != DTO.yRenewalAgreementSLNo)
                    //{
                    //    //==New selected xRenewalAgreementSLNo
                    //    var CodeInfo = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xRenewalAgreementSLNo).Select(x => new { x.AgreementCode, x.AgreementVersion }).SingleOrDefault();
                    //    AI.AgreementCode = CodeInfo.AgreementCode;
                    //    AI.AgreementVersion = CodeInfo.AgreementVersion + 1;
                    //    AI.AliasCode = AI.AgreementCode + "-R" + AI.AgreementVersion;
                    //    AI.xRenewalAgreementSLNo = DTO.xRenewalAgreementSLNo;
                    //}
                    //==Agreement Status Wise Update
                    AI.RentDueDay = DTO.RentDueDay;
                    if (AI.AgreementStatus == 1)
                    {
                        //==Agreement Info
                        AI.Special = DTO.Special;
                        AI.AgreementName = DTO.AgreementName;
                        AI.AgreementStartDate = DateTime.ParseExact(DTO.AgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        AI.AgreementEndDate = DateTime.ParseExact(DTO.AgreementEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        AI.AgreementPeriod = DTO.AgreementPeriod;
                        AI.RenewalFrequency = AI.AgreementPeriod;
                        AI.UOM = DTO.UOM;
                        AI.TotalArea = DTO.TotalArea;
                        AI.CostPerUnit = DTO.CostPerUnit;
                        AI.TotalRentAmount = DTO.TotalRentAmount;
                        AI.SecurityDepositAmount = DTO.SecurityDepositAmount;
                        AI.AdvanceAmount = DTO.AdvanceAmount;
                        AI.AdvanceAdjustmentPeriod = DTO.AdvanceAdjustmentPeriod;
                        AI.AdvanceAdjustmentAmount = DTO.AdvanceAdjustmentAmount;
                        AI.TaxPercentage = DTO.TaxPercentage;
                        AI.TaxAmount = DTO.TaxAmount;
                        AI.VATPercentage = DTO.VATPercentage;
                        AI.VATAmount = DTO.VATAmount;
                        AI.NetRentAmount = AI.TotalRentAmount - AI.AdvanceAdjustmentAmount;
                        AI.AgreementText = DTO.AgreementText;
                        //AI.Status = DTO.Status;
                        AI.TaxType = DTO.TaxType;
                        AI.VatType = DTO.VatType;
                        AI.CalculationMethod = DTO.CalculationMethod;
                        AI.BorrowingRate = DTO.BorrowingRate;
                        AI.IsIFRSEnable = DTO.IsIFRSEnable;
                        if (DTO.IFRSEffectiveDate != null && DTO.IsIFRSEnable == true)
                        {
                            AI.IFRSEffectiveDate = DateTime.ParseExact(DTO.IFRSEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        }
                        else
                        {
                            AI.IFRSEffectiveDate = null;
                        }
                        AI.CorporateTaxRate = DTO.CorporateTaxRate;
                    }
                    //==Control Data
                    AI.CashGLCode = DTO.CashGLCode;
                    AI.BankGLCode = DTO.BankGLCode;
                    AI.AdvanceGLCode = DTO.AdvanceGLCode;
                    AI.AdvanceAdjustmentGLCode = DTO.AdvanceAdjustmentGLCode;
                    AI.RentGLCode = DTO.RentGLCode;
                    AI.ServiceChargeGLCode = DTO.ServiceChargeGLCode;
                    AI.TaxGLCode = DTO.TaxGLCode;
                    AI.VATGLCode = DTO.VATGLCode;
                    AI.ProvisionGLTax = DTO.ProvisionGLTax;
                    AI.ProvisionGLAP = DTO.ProvisionGLAP;
                    AI.RTGSGL = DTO.RTGSGL;
                    AI.EFTNGL = DTO.EFTNGL;
                    AI.PayOrderGL = DTO.PayOrderGL;
                    AI.IBBPaymentGL = DTO.IBBPaymentGL;
                    AI.CityBrokerageGL = DTO.CityBrokerageGL;
                    AI.CityCapitalGL = DTO.CityCapitalGL;
                    AI.OthersGL = DTO.OthersGL;
                    //if (DTO.Status == 0)
                    //{
                    //    AI.IsBlock = true;
                    //    AI.BlockDate = DateTime.Now;
                    //    AI.BlockUserSLNo = AI.UserSLNo;
                    //}
                    //else
                    //{
                    //    AI.IsBlock = false;
                    //    AI.BlockDate = null;
                    //    AI.BlockUserSLNo = null;
                    //}
                    AI.EditBy = (string)Session["LoginUserID"];
                    AI.EditDate = DateTime.Now;
                    AI.IsDeleted = false;
                    //==Utility Master Info
                    AI.ReviewFrequency = DTO.ReviewFrequency;
                    AI.ReviewPercentage = DTO.ReviewPercentage;
                    AI.ServiceCharge = DTO.ServiceCharge;
                    AI.OnlineTower = DTO.OnlineTower;
                    AI.GeneratorSpace = DTO.GeneratorSpace;
                    AI.CarParking = DTO.CarParking;
                    //=====
                    AI.PremiseAddressBangla = DTO.PremiseAddressBangla;
                    AI.AreaStatus = DTO.AreaStatus;
                    AI.RegionalOffice = DTO.RegionalOffice;
                    AI.PrimarySOL = DTO.PrimarySOL;
                    AI.AttachedControl = DTO.AttachedControl;
                    AI.ControllerOfficeDistance = DTO.ControllerOfficeDistance;
                    AI.RoutingNumber = DTO.RoutingNumber;
                    AI.Division = DTO.Division;
                    AI.District = DTO.District;
                    AI.Upazila = DTO.Upazila;
                    AI.Thana = DTO.Thana;
                    AI.ThanaCode = DTO.ThanaCode;
                    AI.Pourasabha = DTO.Pourasabha;
                    AI.PourasabhaType = DTO.PourasabhaType;
                    AI.UnionName = DTO.UnionName;
                    AI.WardNo = DTO.WardNo;
                    AI.PremisesTypeforAccounts = DTO.PremisesTypeforAccounts;
                    AI.ParentAgreementCode = DTO.ParentAgreementCode;
                    AI.ElectricityLoad = DTO.ElectricityLoad;
                    AI.ElectricityProvidedBy = DTO.ElectricityProvidedBy;
                    AI.AITBourneBy = DTO.AITBourneBy;
                    AI.CommercialPermission = DTO.CommercialPermission;
                    AI.BuildingPlan = DTO.BuildingPlan;
                    AI.PremisesSituatedFloor = DTO.PremisesSituatedFloor;
                    AI.BangladeshBankApproval = DTO.BangladeshBankApproval;
                    AI.BangladeshBankReference = DTO.BangladeshBankReference;
                    AI.ITTowerRentClause = DTO.ITTowerRentClause;
                    AI.TerminationClause = DTO.TerminationClause;
                    AI.TerminationNoticePeriod = DTO.TerminationNoticePeriod;
                    if (DTO.PremisesOpeningDate != null)
                    {
                        AI.PremisesOpeningDate = DateTime.ParseExact(DTO.PremisesOpeningDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.PremisesOpeningDate = null;
                    }
                    if (DTO.DocumentDate != null)
                    {
                        AI.DocumentDate = DateTime.ParseExact(DTO.DocumentDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.DocumentDate = null;
                    }
                    AI.Remarks = DTO.Remarks;
                    AI.AgreementRemarks = DTO.AgreementRemarks;
                    AI.AdvanceRemarks = DTO.AdvanceRemarks;
                    AI.ReviewRemarks = DTO.ReviewRemarks;
                    AI.LLRemarks = DTO.LLRemarks;
                    AI.CCRemarks = DTO.CCRemarks;
                    AI.UtilityRemarks = DTO.UtilityRemarks;
                    AI.ControlDataRemarks = DTO.ControlDataRemarks;

                    AI.PaymentMethod = DTO.PaymentMethod;
                    AI.WithHoldingCode = DTO.WithHoldingCode;
                    AI.AdditionalExpense = DTO.AdditionalExpense;
                    AI.InitialDirectCost = DTO.InitialDirectCost;
                    AI.DismantlingCost = DTO.DismantlingCost;
                    AI.CarParkingNo = DTO.CarParkingNo;
                    AI.WaterBillType = DTO.WaterBillType;
                    AI.WaterBillAmount = DTO.WaterBillAmount;
                    //=====
                    db.Entry(AI).State = EntityState.Modified;
                    db.SaveChanges();
                    //==Space Information
                    //===Delete Existing Space Info
                    db.SpaceInfos.RemoveRange(db.SpaceInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                    db.SaveChanges();
                    //==
                    string[] SpaceTypeList = null;
                    if (DTO.SpaceTypeList != null)
                    {
                        SpaceTypeList = DTO.SpaceTypeList.Split(',');
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            SpaceTypeList[i] = SpaceTypeList[i].Trim();
                        }
                    }
                    string[] SpaceAreaList = null;
                    if (DTO.SpaceAreaList != null)
                    {
                        SpaceAreaList = DTO.SpaceAreaList.Split(',');
                        for (int i = 0; i < SpaceAreaList.Length; i++)
                        {
                            SpaceAreaList[i] = SpaceAreaList[i].Trim();
                        }
                    }
                    string[] SpaceRateList = null;
                    if (DTO.SpaceRateList != null)
                    {
                        SpaceRateList = DTO.SpaceRateList.Split(',');
                        for (int i = 0; i < SpaceRateList.Length; i++)
                        {
                            SpaceRateList[i] = SpaceRateList[i].Trim();
                        }
                    }
                    string[] SpaceRentList = null;
                    if (DTO.SpaceRentList != null)
                    {
                        SpaceRentList = DTO.SpaceRentList.Split(',');
                        for (int i = 0; i < SpaceRentList.Length; i++)
                        {
                            SpaceRentList[i] = SpaceRentList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdvanceList = null;
                    if (DTO.SpaceTotalAdvanceList != null)
                    {
                        SpaceTotalAdvanceList = DTO.SpaceTotalAdvanceList.Split(',');
                        for (int i = 0; i < SpaceTotalAdvanceList.Length; i++)
                        {
                            SpaceTotalAdvanceList[i] = SpaceTotalAdvanceList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdjustmentList = null;
                    if (DTO.SpaceTotalAdjustmentList != null)
                    {
                        SpaceTotalAdjustmentList = DTO.SpaceTotalAdjustmentList.Split(',');
                        for (int i = 0; i < SpaceTotalAdjustmentList.Length; i++)
                        {
                            SpaceTotalAdjustmentList[i] = SpaceTotalAdjustmentList[i].Trim();
                        }
                    }
                    string[] SpaceRemarksList = null;
                    if (DTO.SpaceRemarksList != null)
                    {
                        SpaceRemarksList = DTO.SpaceRemarksList.Split(',');
                        for (int i = 0; i < SpaceRemarksList.Length; i++)
                        {
                            SpaceRemarksList[i] = SpaceRemarksList[i].Trim();
                        }
                    }
                    if (SpaceTypeList != null)
                    {
                        RMS.Models.SpaceInfo SpaceInfo;
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            if (SpaceTypeList[i] != null && SpaceTypeList[i] != "")
                            {
                                SpaceInfo = new RMS.Models.SpaceInfo();
                                SpaceInfo.AgreementSLNo = AI.AgreementSLNo;
                                SpaceInfo.SpaceType = (SpaceTypeList == null) ? null : SpaceTypeList[i].ToString();
                                SpaceInfo.SpaceArea = Convert.ToDouble(SpaceAreaList[i].ToString());
                                SpaceInfo.SpaceRate = Convert.ToDouble(SpaceRateList[i].ToString());
                                SpaceInfo.SpaceRent = Convert.ToDouble(SpaceRentList[i].ToString());
                                SpaceInfo.SpaceTotalAdvance = Convert.ToDouble(SpaceTotalAdvanceList[i].ToString());
                                SpaceInfo.SpaceTotalAdjustment = Convert.ToDouble(SpaceTotalAdjustmentList[i].ToString());
                                SpaceInfo.SpaceRemarks = (SpaceRemarksList == null) ? null : SpaceRemarksList[i].ToString();
                                db.SpaceInfos.Add(SpaceInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    if (AI.AgreementStatus == 1)
                    {
                        //==Advance Information
                        //===Delete Existing Advance Info
                        db.AdvanceInfos.RemoveRange(db.AdvanceInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                        //==
                        string[] AdvanceNoList = null;
                        if (DTO.AdvanceNoList != null)
                        {
                            AdvanceNoList = DTO.AdvanceNoList.Split(',');
                            for (int i = 0; i < AdvanceNoList.Length; i++)
                            {
                                AdvanceNoList[i] = AdvanceNoList[i].Trim();
                            }
                        }
                        string[] AdvanceSlotPeriodList = null;
                        if (DTO.AdvanceSlotPeriodList != null)
                        {
                            AdvanceSlotPeriodList = DTO.AdvanceSlotPeriodList.Split(',');
                            for (int i = 0; i < AdvanceSlotPeriodList.Length; i++)
                            {
                                AdvanceSlotPeriodList[i] = AdvanceSlotPeriodList[i].Trim();
                            }
                        }
                        string[] AdvanceStartDateList = null;
                        if (DTO.AdvanceStartDateList != null)
                        {
                            AdvanceStartDateList = DTO.AdvanceStartDateList.Split(',');
                            for (int i = 0; i < AdvanceStartDateList.Length; i++)
                            {
                                AdvanceStartDateList[i] = AdvanceStartDateList[i].Trim();
                            }
                        }
                        string[] AdvanceEndDateList = null;
                        if (DTO.AdvanceEndDateList != null)
                        {
                            AdvanceEndDateList = DTO.AdvanceEndDateList.Split(',');
                            for (int i = 0; i < AdvanceEndDateList.Length; i++)
                            {
                                AdvanceEndDateList[i] = AdvanceEndDateList[i].Trim();
                            }
                        }
                        string[] AdvanceNoteList = null;
                        if (DTO.AdvanceNoteList != null)
                        {
                            AdvanceNoteList = DTO.AdvanceNoteList.Split(',');
                            for (int i = 0; i < AdvanceNoteList.Length; i++)
                            {
                                AdvanceNoteList[i] = AdvanceNoteList[i].Trim();
                            }
                        }
                        string[] AdvanceSlotAmountList = null;
                        if (DTO.AdvanceSlotAmountList != null)
                        {
                            AdvanceSlotAmountList = DTO.AdvanceSlotAmountList.Split(',');
                            for (int i = 0; i < AdvanceSlotAmountList.Length; i++)
                            {
                                AdvanceSlotAmountList[i] = AdvanceSlotAmountList[i].Trim();
                            }
                        }
                        if (AdvanceNoList != null)
                        {
                            RMS.Models.AdvanceInfo AdvInfo;
                            for (int i = 0; i < AdvanceNoList.Length; i++)
                            {
                                if (AdvanceNoList[i] != null && AdvanceNoList[i] != "")
                                {
                                    AdvInfo = new RMS.Models.AdvanceInfo();
                                    AdvInfo.AgreementSLNo = AI.AgreementSLNo;
                                    AdvInfo.AdvanceNo = Convert.ToInt32(AdvanceNoList[i].ToString());
                                    AdvInfo.AdvanceSlotPeriod = Convert.ToInt32(AdvanceSlotPeriodList[i].ToString());
                                    AdvInfo.StartDate = DateTime.ParseExact(AdvanceStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    AdvInfo.EndDate = DateTime.ParseExact(AdvanceEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    AdvInfo.AdvanceSlotAmount = Convert.ToDouble(AdvanceSlotAmountList[i].ToString());
                                    AdvInfo.AdvanceNote = (AdvanceNoteList == null) ? null : AdvanceNoteList[i].ToString();
                                    db.AdvanceInfos.Add(AdvInfo);
                                    db.SaveChanges();
                                }
                            }
                        }
                        //==Review Info
                        //===Delete Existing Review Info
                        db.ReviewInfos.RemoveRange(db.ReviewInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                        //==
                        string[] ReviewNoList = null;
                        if (DTO.ReviewNoList != null)
                        {
                            ReviewNoList = DTO.ReviewNoList.Split(',');
                            for (int i = 0; i < ReviewNoList.Length; i++)
                            {
                                ReviewNoList[i] = ReviewNoList[i].Trim();
                            }
                        }
                        string[] ReviewStartDateList = null;
                        if (DTO.ReviewStartDateList != null)
                        {
                            ReviewStartDateList = DTO.ReviewStartDateList.Split(',');
                            for (int i = 0; i < ReviewStartDateList.Length; i++)
                            {
                                ReviewStartDateList[i] = ReviewStartDateList[i].Trim();
                            }
                        }
                        string[] ReviewEndDateList = null;
                        if (DTO.ReviewEndDateList != null)
                        {
                            ReviewEndDateList = DTO.ReviewEndDateList.Split(',');
                            for (int i = 0; i < ReviewEndDateList.Length; i++)
                            {
                                ReviewEndDateList[i] = ReviewEndDateList[i].Trim();
                            }
                        }
                        string[] ReviewPeriodList = null;
                        if (DTO.ReviewPeriodList != null)
                        {
                            ReviewPeriodList = DTO.ReviewPeriodList.Split(',');
                            for (int i = 0; i < ReviewPeriodList.Length; i++)
                            {
                                ReviewPeriodList[i] = ReviewPeriodList[i].Trim();
                            }
                        }
                        string[] ReviewIncreaseAmountList = null;
                        if (DTO.ReviewIncreaseAmountList != null)
                        {
                            ReviewIncreaseAmountList = DTO.ReviewIncreaseAmountList.Split(',');
                            for (int i = 0; i < ReviewIncreaseAmountList.Length; i++)
                            {
                                ReviewIncreaseAmountList[i] = ReviewIncreaseAmountList[i].Trim();
                            }
                        }
                        string[] ReviewIncreasePercentageList = null;
                        if (DTO.ReviewIncreasePercentageList != null)
                        {
                            ReviewIncreasePercentageList = DTO.ReviewIncreasePercentageList.Split(',');
                            for (int i = 0; i < ReviewIncreasePercentageList.Length; i++)
                            {
                                ReviewIncreasePercentageList[i] = ReviewIncreasePercentageList[i].Trim();
                            }
                        }
                        string[] ReviewNoteList = null;
                        if (DTO.ReviewNoteList != null)
                        {
                            ReviewNoteList = DTO.ReviewNoteList.Split(',');
                            for (int i = 0; i < ReviewNoteList.Length; i++)
                            {
                                ReviewNoteList[i] = ReviewNoteList[i].Trim();
                            }
                        }
                        if (ReviewNoList != null)
                        {
                            RMS.Models.ReviewInfo RI;
                            for (int i = 0; i < ReviewNoList.Length; i++)
                            {
                                if (ReviewNoList[i] != null && ReviewNoList[i] != "")
                                {
                                    RI = new RMS.Models.ReviewInfo();
                                    RI.AgreementSLNo = AI.AgreementSLNo;
                                    RI.ReviewNo = Convert.ToInt32(ReviewNoList[i].ToString());
                                    RI.Period = Convert.ToInt32(ReviewPeriodList[i].ToString());
                                    RI.StartDate = DateTime.ParseExact(ReviewStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    RI.EndDate = DateTime.ParseExact(ReviewEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    RI.IncreaseAmount = Convert.ToDouble(ReviewIncreaseAmountList[i].ToString());
                                    RI.IncreasePercentage = Convert.ToDouble(ReviewIncreasePercentageList[i].ToString());
                                    RI.ReviewNote = (ReviewNoteList == null) ? null : ReviewNoteList[i].ToString();
                                    db.ReviewInfos.Add(RI);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                    //==Landlord Information
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Landlord Info
                        db.LandlordInfos.RemoveRange(db.LandlordInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        //===Update Existing Landlord Info
                        List<RMS.Models.LandlordInfo> lstOldLandlord = db.LandlordInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstOldLandlord.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    string[] VendorCodeList = null;
                    if (DTO.VendorCodeList != null)
                    {
                        VendorCodeList = DTO.VendorCodeList.Split(',');
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            VendorCodeList[i] = VendorCodeList[i].Trim();
                        }
                    }
                    string[] LandlordNameList = null;
                    if (DTO.LandlordNameList != null)
                    {
                        LandlordNameList = DTO.LandlordNameList.Split(',');
                        for (int i = 0; i < LandlordNameList.Length; i++)
                        {
                            LandlordNameList[i] = LandlordNameList[i].Trim();
                        }
                    }
                    string[] ModeOfPaymentList = null;
                    if (DTO.ModeOfPaymentList != null)
                    {
                        ModeOfPaymentList = DTO.ModeOfPaymentList.Split(',');
                        for (int i = 0; i < ModeOfPaymentList.Length; i++)
                        {
                            ModeOfPaymentList[i] = ModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] VendorAdvancePCList = null;
                    if (DTO.VendorAdvancePCList != null)
                    {
                        VendorAdvancePCList = DTO.VendorAdvancePCList.Split(',');
                        for (int i = 0; i < VendorAdvancePCList.Length; i++)
                        {
                            VendorAdvancePCList[i] = VendorAdvancePCList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAmountList = null;
                    if (DTO.VendorAdvanceAmountList != null)
                    {
                        VendorAdvanceAmountList = DTO.VendorAdvanceAmountList.Split(',');
                        for (int i = 0; i < VendorAdvanceAmountList.Length; i++)
                        {
                            VendorAdvanceAmountList[i] = VendorAdvanceAmountList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAdjustmentPCList = null;
                    if (DTO.VendorAdvanceAdjustmentPCList != null)
                    {
                        VendorAdvanceAdjustmentPCList = DTO.VendorAdvanceAdjustmentPCList.Split(',');
                        for (int i = 0; i < VendorAdvanceAdjustmentPCList.Length; i++)
                        {
                            VendorAdvanceAdjustmentPCList[i] = VendorAdvanceAdjustmentPCList[i].Trim();
                        }
                    }
                    //string[] VendorAdvanceAdjustmentAmountList = null;
                    //if (DTO.VendorAdvanceAdjustmentAmountList != null)
                    //{
                    //    VendorAdvanceAdjustmentAmountList = DTO.VendorAdvanceAdjustmentAmountList.Split(',');
                    //    for (int i = 0; i < VendorAdvanceAdjustmentAmountList.Length; i++)
                    //    {
                    //        VendorAdvanceAdjustmentAmountList[i] = VendorAdvanceAdjustmentAmountList[i].Trim();
                    //    }
                    //}
                    string[] VendorTaxPCList = null;
                    if (DTO.VendorTaxPCList != null)
                    {
                        VendorTaxPCList = DTO.VendorTaxPCList.Split(',');
                        for (int i = 0; i < VendorTaxPCList.Length; i++)
                        {
                            VendorTaxPCList[i] = VendorTaxPCList[i].Trim();
                        }
                    }
                    string[] VendorTaxAmountList = null;
                    if (DTO.VendorTaxAmountList != null)
                    {
                        VendorTaxAmountList = DTO.VendorTaxAmountList.Split(',');
                        for (int i = 0; i < VendorTaxAmountList.Length; i++)
                        {
                            VendorTaxAmountList[i] = VendorTaxAmountList[i].Trim();
                        }
                    }
                    string[] VendorVATPCList = null;
                    if (DTO.VendorVATPCList != null)
                    {
                        VendorVATPCList = DTO.VendorVATPCList.Split(',');
                        for (int i = 0; i < VendorVATPCList.Length; i++)
                        {
                            VendorVATPCList[i] = VendorVATPCList[i].Trim();
                        }
                    }
                    string[] VendorVATAmountList = null;
                    if (DTO.VendorVATAmountList != null)
                    {
                        VendorVATAmountList = DTO.VendorVATAmountList.Split(',');
                        for (int i = 0; i < VendorVATAmountList.Length; i++)
                        {
                            VendorVATAmountList[i] = VendorVATAmountList[i].Trim();
                        }
                    }
                    string[] VendorRentPCList = null;
                    if (DTO.VendorRentPCList != null)
                    {
                        VendorRentPCList = DTO.VendorRentPCList.Split(',');
                        for (int i = 0; i < VendorRentPCList.Length; i++)
                        {
                            VendorRentPCList[i] = VendorRentPCList[i].Trim();
                        }
                    }
                    //string[] VendorRentAmountList = null;
                    //if (DTO.VendorRentAmountList != null)
                    //{
                    //    VendorRentAmountList = DTO.VendorRentAmountList.Split(',');
                    //    for (int i = 0; i < VendorRentAmountList.Length; i++)
                    //    {
                    //        VendorRentAmountList[i] = VendorRentAmountList[i].Trim();
                    //    }
                    //}
                    string[] AddressList = null;
                    if (DTO.LLAddressList != null)
                    {
                        AddressList = DTO.LLAddressList.Split(',');
                        for (int i = 0; i < AddressList.Length; i++)
                        {
                            AddressList[i] = AddressList[i].Trim();
                        }
                    }
                    string[] ContactNoList = null;
                    if (DTO.LLContactNoList != null)
                    {
                        ContactNoList = DTO.LLContactNoList.Split(',');
                        for (int i = 0; i < ContactNoList.Length; i++)
                        {
                            ContactNoList[i] = ContactNoList[i].Trim();
                        }
                    }
                    string[] EmailList = null;
                    if (DTO.LLEmailList != null)
                    {
                        EmailList = DTO.LLEmailList.Split(',');
                        for (int i = 0; i < EmailList.Length; i++)
                        {
                            EmailList[i] = EmailList[i].Trim();
                        }
                    }
                    string[] ACNoList = null;
                    if (DTO.ACNoList != null)
                    {
                        ACNoList = DTO.ACNoList.Split(',');
                        for (int i = 0; i < ACNoList.Length; i++)
                        {
                            ACNoList[i] = ACNoList[i].Trim();
                        }
                    }
                    string[] BankNameList = null;
                    if (DTO.BankNameList != null)
                    {
                        BankNameList = DTO.BankNameList.Split(',');
                        for (int i = 0; i < BankNameList.Length; i++)
                        {
                            BankNameList[i] = BankNameList[i].Trim();
                        }
                    }
                    string[] BranchNameList = null;
                    if (DTO.BranchNameList != null)
                    {
                        BranchNameList = DTO.BranchNameList.Split(',');
                        for (int i = 0; i < BranchNameList.Length; i++)
                        {
                            BranchNameList[i] = BranchNameList[i].Trim();
                        }
                    }
                    string[] RoutingNoList = null;
                    if (DTO.RoutingNoList != null)
                    {
                        RoutingNoList = DTO.RoutingNoList.Split(',');
                        for (int i = 0; i < RoutingNoList.Length; i++)
                        {
                            RoutingNoList[i] = RoutingNoList[i].Trim();
                        }
                    }
                    RMS.Models.LandlordInfo LInfo;
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    for (int i = 0; i < VendorCodeList.Length; i++)
                    {
                        if (VendorCodeList[i] != null && VendorCodeList[i] != "")
                        {
                            LInfo = new RMS.Models.LandlordInfo();
                            LInfo.AgreementSLNo = DTO.AgreementSLNo;
                            LInfo.VendorCode = (VendorCodeList == null) ? null : VendorCodeList[i].ToString();
                            LInfo.LandlordName = (LandlordNameList == null) ? null : LandlordNameList[i].ToString();
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { LInfo.ModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { LInfo.ModeOfPayment = ModeOfPaymentLocation.RTGS; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { LInfo.ModeOfPayment = ModeOfPaymentLocation.EFTN; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { LInfo.ModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { LInfo.ModeOfPayment = ModeOfPaymentLocation.Cash; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { LInfo.ModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { LInfo.ModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { LInfo.ModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { LInfo.ModeOfPayment = ModeOfPaymentLocation.Others; }
                            LInfo.AdvancePC = Convert.ToDouble(VendorAdvancePCList[i].ToString());
                            LInfo.AdvanceAdjustmentPC = Convert.ToDouble(VendorAdvanceAdjustmentPCList[i].ToString());
                            LInfo.TaxPC = Convert.ToDouble(VendorTaxPCList[i].ToString());
                            LInfo.VATPC = Convert.ToDouble(VendorVATPCList[i].ToString());
                            LInfo.RentPC = Convert.ToDouble(VendorRentPCList[i].ToString());
                            //==PC Amount
                            LInfo.AdvanceAmount = (AI.AdvanceAmount * LInfo.AdvancePC) / 100;
                            LInfo.TaxAmount = (AI.TaxAmount * LInfo.TaxPC) / 100;
                            LInfo.VATAmount = (AI.VATAmount * LInfo.VATPC) / 100;
                            //==
                            LInfo.LLAddress = (AddressList == null) ? null : AddressList[i].ToString();
                            LInfo.LLContactNo = (ContactNoList == null) ? null : ContactNoList[i].ToString();
                            LInfo.LLEmail = (EmailList == null) ? null : EmailList[i].ToString();
                            LInfo.ACNo = (ACNoList == null) ? null : ACNoList[i].ToString();
                            LInfo.BankName = (BankNameList == null) ? null : BankNameList[i].ToString();
                            LInfo.BranchName = (BranchNameList == null) ? null : BranchNameList[i].ToString();
                            LInfo.RoutingNo = (RoutingNoList == null) ? null : RoutingNoList[i].ToString();
                            db.LandlordInfos.Add(LInfo);
                            db.SaveChanges();
                        }
                    }
                    //==Cost Center
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Cost Center Info
                        db.CostCenterInfos.RemoveRange(db.CostCenterInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        List<RMS.Models.CostCenterInfo> lstCC = db.CostCenterInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstCC.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    string[] CCCodeList = null;
                    if (DTO.CCCodeList != null)
                    {
                        CCCodeList = DTO.CCCodeList.Split(',');
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            CCCodeList[i] = CCCodeList[i].Trim();
                        }
                    }
                    string[] CCNameList = null;
                    if (DTO.CCNameList != null)
                    {
                        CCNameList = DTO.CCNameList.Split(',');
                        for (int i = 0; i < CCNameList.Length; i++)
                        {
                            CCNameList[i] = CCNameList[i].Trim();
                        }
                    }
                    string[] SOLCodeList = null;
                    if (DTO.SOLCodeList != null)
                    {
                        SOLCodeList = DTO.SOLCodeList.Split(',');
                        for (int i = 0; i < SOLCodeList.Length; i++)
                        {
                            SOLCodeList[i] = SOLCodeList[i].Trim();
                        }
                    }
                    string[] SOLNameList = null;
                    if (DTO.SOLNameList != null)
                    {
                        SOLNameList = DTO.SOLNameList.Split(',');
                        for (int i = 0; i < SOLNameList.Length; i++)
                        {
                            SOLNameList[i] = SOLNameList[i].Trim();
                        }
                    }
                    string[] CCShareAllotmentList = null;
                    if (DTO.CCShareAllotmentList != null)
                    {
                        CCShareAllotmentList = DTO.CCShareAllotmentList.Split(',');
                        for (int i = 0; i < CCShareAllotmentList.Length; i++)
                        {
                            CCShareAllotmentList[i] = CCShareAllotmentList[i].Trim();
                        }
                    }
                    RMS.Models.CostCenterInfo CCinfo;
                    for (int i = 0; i < CCCodeList.Length; i++)
                    {
                        if (CCCodeList[i] != null && CCCodeList[i] != "")
                        {
                            CCinfo = new RMS.Models.CostCenterInfo();
                            CCinfo.AgreementSLNo = DTO.AgreementSLNo;
                            CCinfo.CCCode = (CCCodeList == null) ? null : CCCodeList[i].ToString();
                            CCinfo.CCName = (CCNameList == null) ? null : CCNameList[i].ToString();
                            CCinfo.SOLCode = (SOLCodeList == null) ? null : SOLCodeList[i].ToString();
                            CCinfo.SOLName = (SOLNameList == null) ? null : SOLNameList[i].ToString();
                            CCinfo.CCShareAllotment = Convert.ToDouble(CCShareAllotmentList[i].ToString());
                            db.CostCenterInfos.Add(CCinfo);
                            db.SaveChanges();
                        }
                    }
                    //==Utility Information
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Utility Info
                        db.UtilityInfos.RemoveRange(db.UtilityInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        List<RMS.Models.UtilityInfo> lstOldUtility = db.UtilityInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstOldUtility.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    string[] UtilityVendorCodeList = null;
                    if (DTO.UtilityVendorCodeList != null)
                    {
                        UtilityVendorCodeList = DTO.UtilityVendorCodeList.Split(',');
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            UtilityVendorCodeList[i] = UtilityVendorCodeList[i].Trim();
                        }
                    }
                    string[] UtilityLandlordNameList = null;
                    if (DTO.UtilityLandlordNameList != null)
                    {
                        UtilityLandlordNameList = DTO.UtilityLandlordNameList.Split(',');
                        for (int i = 0; i < UtilityLandlordNameList.Length; i++)
                        {
                            UtilityLandlordNameList[i] = UtilityLandlordNameList[i].Trim();
                        }
                    }
                    string[] UtilityModeOfPaymentList = null;
                    if (DTO.UtilityModeOfPaymentList != null)
                    {
                        UtilityModeOfPaymentList = DTO.UtilityModeOfPaymentList.Split(',');
                        for (int i = 0; i < UtilityModeOfPaymentList.Length; i++)
                        {
                            UtilityModeOfPaymentList[i] = UtilityModeOfPaymentList[i].Trim();
                        }
                    }

                    string[] ServiceChargePCList = null;
                    if (DTO.ServiceChargePCList != null)
                    {
                        ServiceChargePCList = DTO.ServiceChargePCList.Split(',');
                        for (int i = 0; i < ServiceChargePCList.Length; i++)
                        {
                            ServiceChargePCList[i] = ServiceChargePCList[i].Trim();
                        }
                    }
                    string[] ServiceChargeAmountList = null;
                    if (DTO.ServiceChargeAmountList != null)
                    {
                        ServiceChargeAmountList = DTO.ServiceChargeAmountList.Split(',');
                        for (int i = 0; i < ServiceChargeAmountList.Length; i++)
                        {
                            ServiceChargeAmountList[i] = ServiceChargeAmountList[i].Trim();
                        }
                    }

                    string[] OnlineTowerPCList = null;
                    if (DTO.OnlineTowerPCList != null)
                    {
                        OnlineTowerPCList = DTO.OnlineTowerPCList.Split(',');
                        for (int i = 0; i < OnlineTowerPCList.Length; i++)
                        {
                            OnlineTowerPCList[i] = OnlineTowerPCList[i].Trim();
                        }
                    }
                    string[] OnlineTowerAmountList = null;
                    if (DTO.OnlineTowerAmountList != null)
                    {
                        OnlineTowerAmountList = DTO.OnlineTowerAmountList.Split(',');
                        for (int i = 0; i < OnlineTowerAmountList.Length; i++)
                        {
                            OnlineTowerAmountList[i] = OnlineTowerAmountList[i].Trim();
                        }
                    }

                    string[] GeneratorSpacePCList = null;
                    if (DTO.GeneratorSpacePCList != null)
                    {
                        GeneratorSpacePCList = DTO.GeneratorSpacePCList.Split(',');
                        for (int i = 0; i < GeneratorSpacePCList.Length; i++)
                        {
                            GeneratorSpacePCList[i] = GeneratorSpacePCList[i].Trim();
                        }
                    }
                    string[] GeneratorSpaceAmountList = null;
                    if (DTO.GeneratorSpaceAmountList != null)
                    {
                        GeneratorSpaceAmountList = DTO.GeneratorSpaceAmountList.Split(',');
                        for (int i = 0; i < GeneratorSpaceAmountList.Length; i++)
                        {
                            GeneratorSpaceAmountList[i] = GeneratorSpaceAmountList[i].Trim();
                        }
                    }

                    string[] CarParkingPCList = null;
                    if (DTO.CarParkingPCList != null)
                    {
                        CarParkingPCList = DTO.CarParkingPCList.Split(',');
                        for (int i = 0; i < CarParkingPCList.Length; i++)
                        {
                            CarParkingPCList[i] = CarParkingPCList[i].Trim();
                        }
                    }
                    string[] CarParkingAmountList = null;
                    if (DTO.CarParkingAmountList != null)
                    {
                        CarParkingAmountList = DTO.CarParkingAmountList.Split(',');
                        for (int i = 0; i < CarParkingAmountList.Length; i++)
                        {
                            CarParkingAmountList[i] = CarParkingAmountList[i].Trim();
                        }
                    }
                    string[] UtilityTaxPCList = null;
                    if (DTO.UtilityTaxPCList != null)
                    {
                        UtilityTaxPCList = DTO.UtilityTaxPCList.Split(',');
                        for (int i = 0; i < UtilityTaxPCList.Length; i++)
                        {
                            UtilityTaxPCList[i] = UtilityTaxPCList[i].Trim();
                        }
                    }
                    string[] UtilityTaxAmountList = null;
                    if (DTO.UtilityTaxAmountList != null)
                    {
                        UtilityTaxAmountList = DTO.UtilityTaxAmountList.Split(',');
                        for (int i = 0; i < UtilityTaxAmountList.Length; i++)
                        {
                            UtilityTaxAmountList[i] = UtilityTaxAmountList[i].Trim();
                        }
                    }
                    string[] UtilityVATPCList = null;
                    if (DTO.UtilityVATPCList != null)
                    {
                        UtilityVATPCList = DTO.UtilityVATPCList.Split(',');
                        for (int i = 0; i < UtilityVATPCList.Length; i++)
                        {
                            UtilityVATPCList[i] = UtilityVATPCList[i].Trim();
                        }
                    }
                    string[] UtilityVATAmountList = null;
                    if (DTO.UtilityVATAmountList != null)
                    {
                        UtilityVATAmountList = DTO.UtilityVATAmountList.Split(',');
                        for (int i = 0; i < UtilityVATAmountList.Length; i++)
                        {
                            UtilityVATAmountList[i] = UtilityVATAmountList[i].Trim();
                        }
                    }
                    string[] UtilityAddressList = null;
                    if (DTO.UtilityAddressList != null)
                    {
                        UtilityAddressList = DTO.UtilityAddressList.Split(',');
                        for (int i = 0; i < UtilityAddressList.Length; i++)
                        {
                            UtilityAddressList[i] = UtilityAddressList[i].Trim();
                        }
                    }
                    string[] UtilityContactNoList = null;
                    if (DTO.UtilityContactNoList != null)
                    {
                        UtilityContactNoList = DTO.UtilityContactNoList.Split(',');
                        for (int i = 0; i < UtilityContactNoList.Length; i++)
                        {
                            UtilityContactNoList[i] = UtilityContactNoList[i].Trim();
                        }
                    }
                    string[] UtilityEmailList = null;
                    if (DTO.UtilityEmailList != null)
                    {
                        UtilityEmailList = DTO.UtilityEmailList.Split(',');
                        for (int i = 0; i < UtilityEmailList.Length; i++)
                        {
                            UtilityEmailList[i] = UtilityEmailList[i].Trim();
                        }
                    }
                    string[] UtilityACNoList = null;
                    if (DTO.UtilityACNoList != null)
                    {
                        UtilityACNoList = DTO.UtilityACNoList.Split(',');
                        for (int i = 0; i < UtilityACNoList.Length; i++)
                        {
                            UtilityACNoList[i] = UtilityACNoList[i].Trim();
                        }
                    }
                    string[] UtilityBankNameList = null;
                    if (DTO.UtilityBankNameList != null)
                    {
                        UtilityBankNameList = DTO.UtilityBankNameList.Split(',');
                        for (int i = 0; i < UtilityBankNameList.Length; i++)
                        {
                            UtilityBankNameList[i] = UtilityBankNameList[i].Trim();
                        }
                    }
                    string[] UtilityBranchNameList = null;
                    if (DTO.UtilityBranchNameList != null)
                    {
                        UtilityBranchNameList = DTO.UtilityBranchNameList.Split(',');
                        for (int i = 0; i < UtilityBranchNameList.Length; i++)
                        {
                            UtilityBranchNameList[i] = UtilityBranchNameList[i].Trim();
                        }
                    }
                    string[] UtilityRoutingNoList = null;
                    if (DTO.UtilityRoutingNoList != null)
                    {
                        UtilityRoutingNoList = DTO.UtilityRoutingNoList.Split(',');
                        for (int i = 0; i < UtilityRoutingNoList.Length; i++)
                        {
                            UtilityRoutingNoList[i] = UtilityRoutingNoList[i].Trim();
                        }
                    }
                    if (UtilityVendorCodeList != null)
                    {
                        RMS.Models.UtilityInfo UI;
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            if (UtilityVendorCodeList[i] != null && UtilityVendorCodeList[i] != "")
                            {
                                UI = new RMS.Models.UtilityInfo();
                                UI.AgreementSLNo = AI.AgreementSLNo;
                                UI.UtilityVendorCode = (UtilityVendorCodeList == null) ? null : UtilityVendorCodeList[i].ToString();
                                UI.UtilityLandlordName = (UtilityLandlordNameList == null) ? null : UtilityLandlordNameList[i].ToString();
                                if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Others; }

                                UI.ServiceChargePC = Convert.ToDouble(ServiceChargePCList[i].ToString());
                                UI.ServiceChargeAmount = Convert.ToDouble(ServiceChargeAmountList[i].ToString());

                                UI.OnlineTowerPC = Convert.ToDouble(OnlineTowerPCList[i].ToString());
                                UI.OnlineTowerAmount = Convert.ToDouble(OnlineTowerAmountList[i].ToString());

                                UI.GeneratorSpacePC = Convert.ToDouble(GeneratorSpacePCList[i].ToString());
                                UI.GeneratorSpaceAmount = Convert.ToDouble(GeneratorSpaceAmountList[i].ToString());

                                UI.CarParkingPC = Convert.ToDouble(CarParkingPCList[i].ToString());
                                UI.CarParkingAmount = Convert.ToDouble(CarParkingAmountList[i].ToString());

                                UI.TaxPC = Convert.ToDouble(UtilityTaxPCList[i].ToString());
                                UI.TaxAmount = Convert.ToDouble(UtilityTaxAmountList[i].ToString());
                                UI.VATPC = Convert.ToDouble(UtilityVATPCList[i].ToString());
                                UI.VATAmount = Convert.ToDouble(UtilityVATAmountList[i].ToString());
                                UI.UtilityAddress = (UtilityAddressList == null) ? null : UtilityAddressList[i].ToString();
                                UI.UtilityContactNo = (UtilityContactNoList == null) ? null : UtilityContactNoList[i].ToString();
                                UI.UtilityEmail = (UtilityEmailList == null) ? null : UtilityEmailList[i].ToString();
                                UI.UtilityACNo = (UtilityACNoList == null) ? null : UtilityACNoList[i].ToString();
                                UI.UtilityBankName = (UtilityBankNameList == null) ? null : UtilityBankNameList[i].ToString();
                                UI.UtilityBranchName = (UtilityBranchNameList == null) ? null : UtilityBranchNameList[i].ToString();
                                UI.UtilityRoutingNo = (UtilityRoutingNoList == null) ? null : UtilityRoutingNoList[i].ToString();
                                db.UtilityInfos.Add(UI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Attach Documents
                    string[] FUFileNameList = null;
                    if (DTO.FUFileNameList != null)
                    {
                        FUFileNameList = DTO.FUFileNameList.Split(',');
                        for (int i = 0; i < FUFileNameList.Length; i++)
                        {
                            FUFileNameList[i] = FUFileNameList[i].Trim();
                        }
                    }
                    var originalDirectory = new DirectoryInfo(string.Format("{0}Content\\FileUpload\\", Server.MapPath(@"\")));
                    string pathString = Path.Combine(originalDirectory.ToString(), AI.AliasCode);
                    if (DTO.FUFileNameList != null)
                    {
                        //==Delete physical file
                        var xlstFU = db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && !FUFileNameList.Contains(x.FileName)).ToList();
                        foreach (var item in xlstFU)
                        {
                            //==Delete File
                            FileInfo file = new FileInfo(string.Format("{0}\\{1}", pathString, item.FileName));
                            if (file.Exists)//check file exsit or not  
                            {
                                file.Delete();
                            }
                            else
                            {
                                //==Nothing
                            }
                        }
                        //==Delete Existing Attached File
                        db.FileUploadInfos.RemoveRange(db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && !FUFileNameList.Contains(x.FileName)));
                        db.SaveChanges();
                    }
                    else
                    {
                        //==Delete physical file
                        var xlstFU = db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        foreach (var item in xlstFU)
                        {
                            //==Delete File
                            FileInfo file = new FileInfo(string.Format("{0}\\{1}", pathString, item.FileName));
                            if (file.Exists)//check file exsit or not  
                            {
                                file.Delete();
                            }
                            else
                            {
                                //==Nothing
                            }
                        }
                        //==Delete Existing Attached File
                        db.FileUploadInfos.RemoveRange(db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    if (DTO.files != null)
                    {
                        RMS.Models.FileUploadInfo FU;
                        foreach (var file in DTO.files)
                        {
                            //Save file content goes here
                            if (file != null && file.ContentLength > 0)
                            {
                                //==table update
                                if (db.FileUploadInfos.Any(x => x.AgreementSLNo == AI.AgreementSLNo && x.FileName == file.FileName) == false)
                                {
                                    FU = new RMS.Models.FileUploadInfo();
                                    FU.AgreementSLNo = AI.AgreementSLNo;
                                    FU.FileName = file.FileName;
                                    FU.FilePath = "Content/FileUpload/" + AI.AliasCode + "/" + file.FileName;
                                    db.FileUploadInfos.Add(FU);
                                    db.SaveChanges();
                                }
                                //==Physical file save
                                bool isExists = System.IO.Directory.Exists(pathString);
                                if (!isExists)
                                    System.IO.Directory.CreateDirectory(pathString);
                                var path = string.Format("{0}\\{1}", pathString, file.FileName);
                                file.SaveAs(path);
                            }
                        }
                    }
                    //==Re-schedule Landlord, Cost Center, Utility if Agreement Activated
                    if (AI.AgreementStatus == 2)
                    {
                        //===Delete Existing Landlord Schedule
                        db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        db.SaveChanges();
                        //===Delete Existing Cost Center Schedule
                        db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        db.SaveChanges();
                        //===Delete Existing Utility Schedule
                        //db.UtilitySchedules.RemoveRange(db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        //db.SaveChanges();
                        //==Contract Rent Schedule
                        RMS.Models.ContractSchedule CS = new RMS.Models.ContractSchedule();
                        RMS.Models.LandlordSchedule LS = new RMS.Models.LandlordSchedule();
                        RMS.Models.CostCenterSchedule CCS = new RMS.Models.CostCenterSchedule();
                        //RMS.Models.UtilitySchedule US = new RMS.Models.UtilitySchedule();
                        RMS.Models.IFRSSchedule IFRS = new RMS.Models.IFRSSchedule();
                        List<RMS.Models.LandlordInfo> lstLandlords = db.LandlordInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        List<RMS.Models.CostCenterInfo> lstCostCenter = db.CostCenterInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        //List<RMS.Models.UtilityInfo> lstUtility = db.UtilityInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        List<RMS.Models.ReviewInfo> lstReviewInfo = db.ReviewInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).OrderBy(x => x.ReviewNo).ToList();
                        List<RMS.Models.AdvanceInfo> lstAdvanceInfo = db.AdvanceInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).OrderBy(x => x.AdvanceNo).ToList();
                        DateTime ScheduleDate = AI.AgreementStartDate;
                        //===xxx====
                        int LastMonthDaysCount = DateTime.DaysInMonth(AI.AgreementEndDate.Year, AI.AgreementEndDate.Month);
                        int ReviewMonthDaysCount = 0;
                        int MonthDays = 0;

                        double RentPerDay = 0;
                        double BeforeReviewAmount = 0;
                        double AfterReviewAmount = 0;
                        double NetCalcAmount = 0;
                        if (AI.ReviewFrequency < 1 && lstReviewInfo.Count == 0)
                        {
                            //==Without Review
                            for (int i = 1; i <= AI.AgreementPeriod; i++)
                            {
                                CS = new RMS.Models.ContractSchedule();
                                if (i != 1)
                                {
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                }
                                //==Contract Schedule
                                CS.ScheduleDate = ScheduleDate;
                                CS.AgreementSLNo = AI.AgreementSLNo;
                                CS.MonthNo = i;
                                CS.Year = CS.ScheduleDate.Year;
                                CS.Month = CS.ScheduleDate.ToString("MMMM");
                                CS.ReviewNo = 0;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                }
                                CS.CostPerUnit = AI.CostPerUnit;
                                CS.TotalRentAmount = AI.CostPerUnit * AI.TotalArea;
                                //==First Month
                                if (i == 1)
                                {
                                    //==Full Month
                                    if (ScheduleDate.Day != 1)
                                    {
                                        //==Fraction Date Rent Amount
                                        MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                        RentPerDay = CS.TotalRentAmount / MonthDays;
                                        CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                    }
                                }
                                //==Last Month
                                else if (i == AI.AgreementPeriod)
                                {
                                    //==Full Month
                                    if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                    {
                                        //==Fraction Date Rent Amount
                                        RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                        CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                    }
                                }
                                #region "Tax Type & VAT Type"
                                //1. Inclusive Inclusive
                                if (AI.TaxType == 1 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //2. Inclusive Exclusive
                                else if (AI.TaxType == 1 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //3. Inclusive Exempted
                                else if (AI.TaxType == 1 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //4. Exclusive Inclusive
                                else if (AI.TaxType == 2 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //5. Exclusive Exclusive
                                else if (AI.TaxType == 2 && AI.VatType == 2)
                                {
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //6. Exclusive Exempted
                                else if (AI.TaxType == 2 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //7. Exempted  Inclusive
                                else if (AI.TaxType == 3 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //8. Exempted  Exclusive
                                else if (AI.TaxType == 3 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //9. Exempted Exempted
                                else if (AI.TaxType == 3 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                #endregion
                                CS.UserSLNo = AI.UserSLNo;
                                CS.EntryDate = DateTime.Now;
                                //db.ContractSchedules.Add(CS);
                                //db.SaveChanges();
                                //==Landlord Schedule
                                foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                {
                                    LS = new RMS.Models.LandlordSchedule();
                                    LS.ScheduleDate = ScheduleDate;
                                    LS.AgreementSLNo = AI.AgreementSLNo;
                                    LS.LandlordSLNo = LI.LandlordSLNo;
                                    LS.MonthNo = i;
                                    LS.Year = CS.ScheduleDate.Year;
                                    LS.Month = CS.ScheduleDate.ToString("MMMM");
                                    LS.ReviewNo = 0;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                    }
                                    LS.CostPerUnit = AI.CostPerUnit;
                                    LS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    if (CS.TaxAmount > 0)
                                    {
                                        LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                    }
                                    //==
                                    LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - (LS.AdvanceAdjustmentAmount);
                                    LS.UserSLNo = AI.UserSLNo;
                                    LS.EntryDate = DateTime.Now;
                                    db.LandlordSchedules.Add(LS);
                                    db.SaveChanges();
                                }
                                //==Cost Allocation Schedule
                                foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                {
                                    CCS = new RMS.Models.CostCenterSchedule();
                                    CCS.ScheduleDate = ScheduleDate;
                                    CCS.AgreementSLNo = AI.AgreementSLNo;
                                    CCS.CCSLNo = CC.CCSLNo;
                                    CCS.MonthNo = i;
                                    CCS.Year = CS.ScheduleDate.Year;
                                    CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CCS.ReviewNo = 0;
                                    CCS.CostPerUnit = AI.CostPerUnit;
                                    CCS.TotalRentAmount = CS.TotalRentAmount;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                    }
                                    //==
                                    CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                    CCS.UserSLNo = AI.UserSLNo;
                                    CCS.EntryDate = DateTime.Now;
                                    db.CostCenterSchedules.Add(CCS);
                                    db.SaveChanges();
                                }
                            }
                        }
                        else if (AI.ReviewFrequency > 0)
                        {
                            //==Review Frequency (Repeated)
                            int ReviewCount = AI.ReviewFrequency + 1;
                            int ReviewNo = 0;
                            double NewCPU = AI.CostPerUnit;
                            for (int i = 1; i <= AI.AgreementPeriod; i++)
                            {
                                CS = new RMS.Models.ContractSchedule();
                                if (i != 1)
                                {
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                }
                                if (i <= AI.ReviewFrequency)
                                {
                                    //==Contract Schedule
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    CS.CostPerUnit = NewCPU;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    if (i == 1)
                                    {
                                        //==Full Month
                                        if (ScheduleDate.Day != 1)
                                        {
                                            //==Fraction Date Rent Amount
                                            MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                            RentPerDay = CS.TotalRentAmount / MonthDays;
                                            CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                        }
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                                else if (i == ReviewCount)
                                {
                                    //==Contract Schedule
                                    if (i != AI.AgreementPeriod)
                                    {
                                        ReviewNo = ReviewNo + 1;
                                    }
                                    ReviewCount = ReviewCount + AI.ReviewFrequency;
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    //==xx
                                    //==Last Month
                                    if (i == AI.AgreementPeriod)
                                    {
                                        CS.CostPerUnit = NewCPU;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        //==Full Month
                                        if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                            CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                        }
                                    }
                                    else
                                    {
                                        //==Fraction Month
                                        if (ScheduleDate.Day != 1)
                                        {
                                            //==Before Review Amount
                                            MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                            RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                            BeforeReviewAmount = (ScheduleDate.Day - 1) * RentPerDay;
                                            //==After Review Amount
                                            NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                            AfterReviewAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                            CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                        }
                                        else
                                        {
                                            NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    //==xx
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                                else
                                {
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    CS.CostPerUnit = NewCPU;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    //==Last Month
                                    if (i == AI.AgreementPeriod)
                                    {
                                        //==Full Month
                                        if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                            CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                        }
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                        else if (AI.ReviewFrequency < 1 && lstReviewInfo.Count > 0)
                        {
                            //==Review Declaration Wise
                            int MonthNo = 0;
                            int ReviewNo = 0;
                            double NewCPU = AI.CostPerUnit;
                            //==Review Wise
                            foreach (RMS.Models.ReviewInfo RI in lstReviewInfo)
                            {
                                ReviewNo = ReviewNo + 1;
                                if (RI.ReviewNo == 1)
                                {
                                    //==Schedule without Review
                                    int ReviewStartMonth = ((RI.StartDate.Year - AI.AgreementStartDate.Year) * 12 + RI.StartDate.Month - AI.AgreementStartDate.Month) + 1;
                                    for (int i = 1; i < ReviewStartMonth; i++)
                                    {
                                        MonthNo = MonthNo + 1;
                                        CS = new RMS.Models.ContractSchedule();
                                        if (i != 1)
                                        {
                                            ScheduleDate = ScheduleDate.AddMonths(1);
                                        }
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = 0;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        CS.CostPerUnit = AI.CostPerUnit;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        if (i == 1)
                                        {
                                            //==Full Month
                                            if (ScheduleDate.Day != 1)
                                            {
                                                //==Fraction Date Rent Amount
                                                MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                                RentPerDay = CS.TotalRentAmount / MonthDays;
                                                CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                            }
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = 0;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = AI.CostPerUnit;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = 0;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = AI.CostPerUnit;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                    //==Schedule with Review
                                    for (int i = 1; i <= RI.Period; i++)
                                    {
                                        MonthNo = MonthNo + 1;
                                        CS = new RMS.Models.ContractSchedule();
                                        ScheduleDate = ScheduleDate.AddMonths(1);
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        //==Fraction Month
                                        if (i == 1)
                                        {
                                            if (RI.StartDate.Day != 1)
                                            {
                                                //==Before Review Amount
                                                MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                                RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                                BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                                //==After Review Amount                                            
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                                AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                                CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                            }
                                            else
                                            {
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        //==Review Last Month
                                        else if (i == RI.Period)
                                        {
                                            ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                            //==Full Month
                                            if (RI.EndDate.Day != ReviewMonthDaysCount)
                                            {
                                                //==Fraction Date Rent Amount
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                                CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                            }
                                            else
                                            {
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = NewCPU;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = NewCPU;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    //==Schedule rest of the Review
                                    for (int i = 1; i <= RI.Period; i++)
                                    {
                                        CS = new RMS.Models.ContractSchedule();
                                        //==Conditions applicable for multiple enhancement slots are two enhancements in the same month
                                        if (i == 1 && ScheduleDate.Year == RI.StartDate.Year && ScheduleDate.Month == RI.StartDate.Month)
                                        {
                                            //===MonthNo wise Delete from Contract Schedule
                                            db.ContractSchedules.RemoveRange(db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //===MonthNo wise Delete from Landlord Schedule
                                            db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //===MonthNo wise Delete from Cost Center Schedule
                                            db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //==
                                        }
                                        else
                                        {
                                            MonthNo = MonthNo + 1;
                                            ScheduleDate = ScheduleDate.AddMonths(1);
                                        }
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        //==Fraction Month
                                        if (i == 1)
                                        {
                                            if (RI.StartDate.Day != 1)
                                            {
                                                //==Before Review Amount
                                                MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                                RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                                BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                                //==After Review Amount                                            
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                                AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                                CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                            }
                                            else
                                            {
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        //==Review Last Month
                                        else if (i == RI.Period)
                                        {
                                            ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                            //==Full Month
                                            if (RI.EndDate.Day != ReviewMonthDaysCount)
                                            {
                                                //==Fraction Date Rent Amount
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                                CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                            }
                                            else
                                            {
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = NewCPU;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = NewCPU;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                            }
                        }
                        #region Advance Adjustment
                        //==Advance Info Loop
                        DateTime AdvStartDate = DateTime.Now;
                        int AdvYear = 0;
                        string AdvMonthName = String.Empty;
                        double AdvAdjPerDay = 0;
                        double AdvAdjAmount = 0;
                        double AdvanceMonthDaysCount = 0;
                        foreach (RMS.Models.AdvanceInfo AdvInfo in lstAdvanceInfo)
                        {
                            AdvStartDate = AdvInfo.StartDate;
                            for (int i = 1; i <= AdvInfo.AdvanceSlotPeriod; i++)
                            {
                                if (i != 1)
                                {
                                    AdvStartDate = AdvStartDate.AddMonths(1);
                                }
                                AdvYear = AdvStartDate.Year;
                                AdvMonthName = AdvStartDate.ToString("MMMM");
                                AdvAdjAmount = AdvInfo.AdvanceSlotAmount;
                                //==Fraction Advance Adjustment
                                //==First Month
                                if (i == 1)
                                {
                                    if (AdvStartDate.Day != 1)
                                    {
                                        MonthDays = DateTime.DaysInMonth(AdvStartDate.Year, AdvStartDate.Month);
                                        //==Fraction Date Adv Adj Amount
                                        AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / MonthDays;
                                        AdvAdjAmount = ((MonthDays - AdvStartDate.Day) + 1) * AdvAdjPerDay;
                                    }
                                }
                                else
                                {
                                    //==Last Month
                                    if (i == AdvInfo.AdvanceSlotPeriod)
                                    {
                                        AdvanceMonthDaysCount = DateTime.DaysInMonth(AdvInfo.EndDate.Year, AdvInfo.EndDate.Month);
                                        if (AdvInfo.EndDate.Day != AdvanceMonthDaysCount)
                                        {
                                            //==Fraction Date Adv Adj Amount
                                            AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / AdvanceMonthDaysCount;
                                            AdvAdjAmount = AdvInfo.EndDate.Day * AdvAdjPerDay;
                                        }
                                    }
                                }
                                //==Advance Process Contract Schedule
                                RMS.Models.ContractSchedule GCS = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).SingleOrDefault();
                                GCS.AdvanceAdjustmentAmount = AdvAdjAmount;
                                GCS.NetRentAmount = GCS.NetRentAmount - GCS.AdvanceAdjustmentAmount;
                                //db.Entry(GCS).State = EntityState.Modified;
                                //db.SaveChanges();
                                //==Advance Process Landlord Schedule
                                List<RMS.Models.LandlordSchedule> lstGLS = db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                                foreach (RMS.Models.LandlordSchedule GLS in lstGLS)
                                {
                                    var GLandlordInfo = db.LandlordInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.LandlordSLNo == GLS.LandlordSLNo).Select(x => new { x.AdvanceAdjustmentPC, x.RentPC }).SingleOrDefault();
                                    GLS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * GLandlordInfo.AdvanceAdjustmentPC) / 100;
                                    GLS.NetRentAmount = GLS.NetRentAmount - GLS.AdvanceAdjustmentAmount;
                                    db.Entry(GLS).State = EntityState.Modified;
                                    db.SaveChanges();
                                }
                                //==Advance Process Cost Center Schedule
                                double CCSharePC = 0;
                                List<RMS.Models.CostCenterSchedule> lstGCCS = db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                                foreach (RMS.Models.CostCenterSchedule GCCS in lstGCCS)
                                {
                                    CCSharePC = db.CostCenterInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.CCSLNo == GCCS.CCSLNo).Select(x => x.CCShareAllotment).SingleOrDefault();
                                    GCCS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * CCSharePC) / 100;
                                    GCCS.NetRentAmount = GCCS.NetRentAmount - GCCS.AdvanceAdjustmentAmount;
                                    db.Entry(GCCS).State = EntityState.Modified;
                                    db.SaveChanges();
                                }
                            }
                        }
                        #endregion
                        #region Utility Schedule
                        //ScheduleDate = AI.AgreementStartDate.AddMonths(-1);
                        //for (int i = 1; i <= AI.AgreementPeriod; i++)
                        //{
                        //    ScheduleDate = ScheduleDate.AddMonths(1);
                        //    //==Utility Schedule
                        //    foreach (RMS.Models.UtilityInfo UI in lstUtility)
                        //    {
                        //        US = new RMS.Models.UtilitySchedule();
                        //        US.ScheduleDate = ScheduleDate;
                        //        US.AgreementSLNo = AI.AgreementSLNo;
                        //        US.UtilitySLNo = UI.UtilitySLNo;
                        //        US.MonthNo = i;
                        //        US.Year = US.ScheduleDate.Year;
                        //        US.Month = US.ScheduleDate.ToString("MMMM");
                        //        US.ServiceChargeAmount = UI.ServiceChargeAmount;
                        //        US.OnlineTowerAmount = UI.OnlineTowerAmount;
                        //        US.GeneratorSpaceAmount = UI.GeneratorSpaceAmount;
                        //        US.CarParkingAmount = UI.CarParkingAmount;
                        //        US.TaxAmount = UI.TaxAmount;
                        //        US.VATAmount = UI.VATAmount;
                        //        US.UserSLNo = AI.UserSLNo;
                        //        US.EntryDate = DateTime.Now;
                        //        db.UtilitySchedules.Add(US);
                        //        db.SaveChanges();
                        //    }
                        //}
                        #endregion
                        //==Remove the posted months from the new schedule
                        var ContractSchedules = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == true);
                        foreach (var item in ContractSchedules)
                        {
                            //===Delete
                            db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                            db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                        }
                        db.SaveChanges();
                        //var UtilitySchedules = db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == true);
                        //foreach (var item in UtilitySchedules)
                        //{
                        //    //===Delete
                        //    db.UtilitySchedules.RemoveRange(db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                        //}
                        //db.SaveChanges();
                    } //==End
                    AlertMsg = "The renewal agreement: " + AI.AgreementName + " has been updated.";
                    return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ReEditAttach(RMS.Models.AgreementInfoDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = (string)Session["LoginUserID"];
                    //==If change xRenewalAgreementSLNo
                    //if (DTO.xRenewalAgreementSLNo != DTO.yRenewalAgreementSLNo)
                    //{
                    //    //==Check available xRenewalAgreementSLNo
                    //    if (db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xRenewalAgreementSLNo && (x.IsRenewal == true || x.IsModified == true)).Any() == true)
                    //    {
                    //        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    //    }
                    //    //==Update old xRenewalAgreementSLNo
                    //    RMS.Models.AgreementInfo xAI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.yRenewalAgreementSLNo).SingleOrDefault();
                    //    xAI.IsRenewal = false;
                    //    xAI.yRenewalAgreementSLNo = 0;
                    //    db.Entry(xAI).State = EntityState.Modified;
                    //    db.SaveChanges();
                    //    //==Update new selected xRenewalAgreementSLNo
                    //    RMS.Models.AgreementInfo yAI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xRenewalAgreementSLNo).SingleOrDefault();
                    //    yAI.IsRenewal = true;
                    //    yAI.yRenewalAgreementSLNo = DTO.xRenewalAgreementSLNo;
                    //    db.Entry(yAI).State = EntityState.Modified;
                    //    db.SaveChanges();
                    //}
                    //==
                    RMS.Models.AgreementInfo AI = new RMS.Models.AgreementInfo();
                    AI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).SingleOrDefault();
                    //==Basic Info
                    AI.PremiseTypeSLNo = DTO.PremiseTypeSLNo;
                    AI.PremiseName = DTO.PremiseName;
                    AI.PremiseAddress = DTO.PremiseAddress;
                    AI.ConcernBranch = DTO.ConcernBranch;
                    AI.InspectorName = DTO.InspectorName;
                    AI.InspectorContactNo = DTO.InspectorContactNo;
                    AI.ClusterGroup = DTO.ClusterGroup;
                    //==Agreement Info
                    //if (DTO.xRenewalAgreementSLNo != DTO.yRenewalAgreementSLNo)
                    //{
                    //    //==New selected xRenewalAgreementSLNo
                    //    var CodeInfo = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xRenewalAgreementSLNo).Select(x => new { x.AgreementCode, x.AgreementVersion }).SingleOrDefault();
                    //    AI.AgreementCode = CodeInfo.AgreementCode;
                    //    AI.AgreementVersion = CodeInfo.AgreementVersion + 1;
                    //    AI.AliasCode = AI.AgreementCode + "-R" + AI.AgreementVersion;
                    //    AI.xRenewalAgreementSLNo = DTO.xRenewalAgreementSLNo;
                    //}
                    //==Agreement Status Wise Update
                    AI.RentDueDay = DTO.RentDueDay;
                    if (AI.AgreementStatus == 1)
                    {
                        //==Agreement Info
                        AI.Special = DTO.Special;
                        AI.AgreementName = DTO.AgreementName;
                        AI.AgreementStartDate = DateTime.ParseExact(DTO.AgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        AI.AgreementEndDate = DateTime.ParseExact(DTO.AgreementEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        AI.AgreementPeriod = DTO.AgreementPeriod;
                        AI.RenewalFrequency = AI.AgreementPeriod;
                        AI.UOM = DTO.UOM;
                        AI.TotalArea = DTO.TotalArea;
                        AI.CostPerUnit = DTO.CostPerUnit;
                        AI.TotalRentAmount = DTO.TotalRentAmount;
                        AI.SecurityDepositAmount = DTO.SecurityDepositAmount;
                        AI.AdvanceAmount = DTO.AdvanceAmount;
                        AI.AdvanceAdjustmentPeriod = DTO.AdvanceAdjustmentPeriod;
                        AI.AdvanceAdjustmentAmount = DTO.AdvanceAdjustmentAmount;
                        AI.TaxPercentage = DTO.TaxPercentage;
                        AI.TaxAmount = DTO.TaxAmount;
                        AI.VATPercentage = DTO.VATPercentage;
                        AI.VATAmount = DTO.VATAmount;
                        AI.NetRentAmount = AI.TotalRentAmount - AI.AdvanceAdjustmentAmount;
                        AI.AgreementText = DTO.AgreementText;
                        //AI.Status = DTO.Status;
                        AI.TaxType = DTO.TaxType;
                        AI.VatType = DTO.VatType;
                        AI.CalculationMethod = DTO.CalculationMethod;
                        AI.BorrowingRate = DTO.BorrowingRate;
                        AI.IsIFRSEnable = DTO.IsIFRSEnable;
                        if (DTO.IFRSEffectiveDate != null && DTO.IsIFRSEnable == true)
                        {
                            AI.IFRSEffectiveDate = DateTime.ParseExact(DTO.IFRSEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        }
                        else
                        {
                            AI.IFRSEffectiveDate = null;
                        }
                        AI.CorporateTaxRate = DTO.CorporateTaxRate;
                    }
                    //==Control Data
                    AI.CashGLCode = DTO.CashGLCode;
                    AI.BankGLCode = DTO.BankGLCode;
                    AI.AdvanceGLCode = DTO.AdvanceGLCode;
                    AI.AdvanceAdjustmentGLCode = DTO.AdvanceAdjustmentGLCode;
                    AI.RentGLCode = DTO.RentGLCode;
                    AI.ServiceChargeGLCode = DTO.ServiceChargeGLCode;
                    AI.TaxGLCode = DTO.TaxGLCode;
                    AI.VATGLCode = DTO.VATGLCode;
                    AI.ProvisionGLTax = DTO.ProvisionGLTax;
                    AI.ProvisionGLAP = DTO.ProvisionGLAP;
                    AI.RTGSGL = DTO.RTGSGL;
                    AI.EFTNGL = DTO.EFTNGL;
                    AI.PayOrderGL = DTO.PayOrderGL;
                    AI.IBBPaymentGL = DTO.IBBPaymentGL;
                    AI.CityBrokerageGL = DTO.CityBrokerageGL;
                    AI.CityCapitalGL = DTO.CityCapitalGL;
                    AI.OthersGL = DTO.OthersGL;
                    //if (DTO.Status == 0)
                    //{
                    //    AI.IsBlock = true;
                    //    AI.BlockDate = DateTime.Now;
                    //    AI.BlockUserSLNo = AI.UserSLNo;
                    //}
                    //else
                    //{
                    //    AI.IsBlock = false;
                    //    AI.BlockDate = null;
                    //    AI.BlockUserSLNo = null;
                    //}
                    AI.EditBy = (string)Session["LoginUserID"];
                    AI.EditDate = DateTime.Now;
                    AI.IsDeleted = false;
                    //==Utility Master Info
                    AI.ReviewFrequency = DTO.ReviewFrequency;
                    AI.ReviewPercentage = DTO.ReviewPercentage;
                    AI.ServiceCharge = DTO.ServiceCharge;
                    AI.OnlineTower = DTO.OnlineTower;
                    AI.GeneratorSpace = DTO.GeneratorSpace;
                    AI.CarParking = DTO.CarParking;
                    //=====
                    AI.PremiseAddressBangla = DTO.PremiseAddressBangla;
                    AI.AreaStatus = DTO.AreaStatus;
                    AI.RegionalOffice = DTO.RegionalOffice;
                    AI.PrimarySOL = DTO.PrimarySOL;
                    AI.AttachedControl = DTO.AttachedControl;
                    AI.ControllerOfficeDistance = DTO.ControllerOfficeDistance;
                    AI.RoutingNumber = DTO.RoutingNumber;
                    AI.Division = DTO.Division;
                    AI.District = DTO.District;
                    AI.Upazila = DTO.Upazila;
                    AI.Thana = DTO.Thana;
                    AI.ThanaCode = DTO.ThanaCode;
                    AI.Pourasabha = DTO.Pourasabha;
                    AI.PourasabhaType = DTO.PourasabhaType;
                    AI.UnionName = DTO.UnionName;
                    AI.WardNo = DTO.WardNo;
                    AI.PremisesTypeforAccounts = DTO.PremisesTypeforAccounts;
                    AI.ParentAgreementCode = DTO.ParentAgreementCode;
                    AI.ElectricityLoad = DTO.ElectricityLoad;
                    AI.ElectricityProvidedBy = DTO.ElectricityProvidedBy;
                    AI.AITBourneBy = DTO.AITBourneBy;
                    AI.CommercialPermission = DTO.CommercialPermission;
                    AI.BuildingPlan = DTO.BuildingPlan;
                    AI.PremisesSituatedFloor = DTO.PremisesSituatedFloor;
                    AI.BangladeshBankApproval = DTO.BangladeshBankApproval;
                    AI.BangladeshBankReference = DTO.BangladeshBankReference;
                    AI.ITTowerRentClause = DTO.ITTowerRentClause;
                    AI.TerminationClause = DTO.TerminationClause;
                    AI.TerminationNoticePeriod = DTO.TerminationNoticePeriod;
                    if (DTO.PremisesOpeningDate != null)
                    {
                        AI.PremisesOpeningDate = DateTime.ParseExact(DTO.PremisesOpeningDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.PremisesOpeningDate = null;
                    }
                    if (DTO.DocumentDate != null)
                    {
                        AI.DocumentDate = DateTime.ParseExact(DTO.DocumentDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.DocumentDate = null;
                    }
                    AI.Remarks = DTO.Remarks;
                    AI.AgreementRemarks = DTO.AgreementRemarks;
                    AI.AdvanceRemarks = DTO.AdvanceRemarks;
                    AI.ReviewRemarks = DTO.ReviewRemarks;
                    AI.LLRemarks = DTO.LLRemarks;
                    AI.CCRemarks = DTO.CCRemarks;
                    AI.UtilityRemarks = DTO.UtilityRemarks;
                    AI.ControlDataRemarks = DTO.ControlDataRemarks;

                    AI.PaymentMethod = DTO.PaymentMethod;
                    AI.WithHoldingCode = DTO.WithHoldingCode;
                    AI.AdditionalExpense = DTO.AdditionalExpense;
                    AI.InitialDirectCost = DTO.InitialDirectCost;
                    AI.DismantlingCost = DTO.DismantlingCost;
                    AI.CarParkingNo = DTO.CarParkingNo;
                    AI.WaterBillType = DTO.WaterBillType;
                    AI.WaterBillAmount = DTO.WaterBillAmount;
                    //=====
                    db.Entry(AI).State = EntityState.Modified;
                    db.SaveChanges();
                    //==Space Information
                    //===Delete Existing Space Info
                    db.SpaceInfos.RemoveRange(db.SpaceInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                    db.SaveChanges();
                    //==
                    string[] SpaceTypeList = null;
                    if (DTO.SpaceTypeList != null)
                    {
                        SpaceTypeList = DTO.SpaceTypeList.Split(',');
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            SpaceTypeList[i] = SpaceTypeList[i].Trim();
                        }
                    }
                    string[] SpaceAreaList = null;
                    if (DTO.SpaceAreaList != null)
                    {
                        SpaceAreaList = DTO.SpaceAreaList.Split(',');
                        for (int i = 0; i < SpaceAreaList.Length; i++)
                        {
                            SpaceAreaList[i] = SpaceAreaList[i].Trim();
                        }
                    }
                    string[] SpaceRateList = null;
                    if (DTO.SpaceRateList != null)
                    {
                        SpaceRateList = DTO.SpaceRateList.Split(',');
                        for (int i = 0; i < SpaceRateList.Length; i++)
                        {
                            SpaceRateList[i] = SpaceRateList[i].Trim();
                        }
                    }
                    string[] SpaceRentList = null;
                    if (DTO.SpaceRentList != null)
                    {
                        SpaceRentList = DTO.SpaceRentList.Split(',');
                        for (int i = 0; i < SpaceRentList.Length; i++)
                        {
                            SpaceRentList[i] = SpaceRentList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdvanceList = null;
                    if (DTO.SpaceTotalAdvanceList != null)
                    {
                        SpaceTotalAdvanceList = DTO.SpaceTotalAdvanceList.Split(',');
                        for (int i = 0; i < SpaceTotalAdvanceList.Length; i++)
                        {
                            SpaceTotalAdvanceList[i] = SpaceTotalAdvanceList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdjustmentList = null;
                    if (DTO.SpaceTotalAdjustmentList != null)
                    {
                        SpaceTotalAdjustmentList = DTO.SpaceTotalAdjustmentList.Split(',');
                        for (int i = 0; i < SpaceTotalAdjustmentList.Length; i++)
                        {
                            SpaceTotalAdjustmentList[i] = SpaceTotalAdjustmentList[i].Trim();
                        }
                    }
                    string[] SpaceRemarksList = null;
                    if (DTO.SpaceRemarksList != null)
                    {
                        SpaceRemarksList = DTO.SpaceRemarksList.Split(',');
                        for (int i = 0; i < SpaceRemarksList.Length; i++)
                        {
                            SpaceRemarksList[i] = SpaceRemarksList[i].Trim();
                        }
                    }
                    if (SpaceTypeList != null)
                    {
                        RMS.Models.SpaceInfo SpaceInfo;
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            if (SpaceTypeList[i] != null && SpaceTypeList[i] != "")
                            {
                                SpaceInfo = new RMS.Models.SpaceInfo();
                                SpaceInfo.AgreementSLNo = AI.AgreementSLNo;
                                SpaceInfo.SpaceType = (SpaceTypeList == null) ? null : SpaceTypeList[i].ToString();
                                SpaceInfo.SpaceArea = Convert.ToDouble(SpaceAreaList[i].ToString());
                                SpaceInfo.SpaceRate = Convert.ToDouble(SpaceRateList[i].ToString());
                                SpaceInfo.SpaceRent = Convert.ToDouble(SpaceRentList[i].ToString());
                                SpaceInfo.SpaceTotalAdvance = Convert.ToDouble(SpaceTotalAdvanceList[i].ToString());
                                SpaceInfo.SpaceTotalAdjustment = Convert.ToDouble(SpaceTotalAdjustmentList[i].ToString());
                                SpaceInfo.SpaceRemarks = (SpaceRemarksList == null) ? null : SpaceRemarksList[i].ToString();
                                db.SpaceInfos.Add(SpaceInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    if (AI.AgreementStatus == 1)
                    {
                        //==Advance Information
                        //===Delete Existing Advance Info
                        db.AdvanceInfos.RemoveRange(db.AdvanceInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                        //==
                        string[] AdvanceNoList = null;
                        if (DTO.AdvanceNoList != null)
                        {
                            AdvanceNoList = DTO.AdvanceNoList.Split(',');
                            for (int i = 0; i < AdvanceNoList.Length; i++)
                            {
                                AdvanceNoList[i] = AdvanceNoList[i].Trim();
                            }
                        }
                        string[] AdvanceSlotPeriodList = null;
                        if (DTO.AdvanceSlotPeriodList != null)
                        {
                            AdvanceSlotPeriodList = DTO.AdvanceSlotPeriodList.Split(',');
                            for (int i = 0; i < AdvanceSlotPeriodList.Length; i++)
                            {
                                AdvanceSlotPeriodList[i] = AdvanceSlotPeriodList[i].Trim();
                            }
                        }
                        string[] AdvanceStartDateList = null;
                        if (DTO.AdvanceStartDateList != null)
                        {
                            AdvanceStartDateList = DTO.AdvanceStartDateList.Split(',');
                            for (int i = 0; i < AdvanceStartDateList.Length; i++)
                            {
                                AdvanceStartDateList[i] = AdvanceStartDateList[i].Trim();
                            }
                        }
                        string[] AdvanceEndDateList = null;
                        if (DTO.AdvanceEndDateList != null)
                        {
                            AdvanceEndDateList = DTO.AdvanceEndDateList.Split(',');
                            for (int i = 0; i < AdvanceEndDateList.Length; i++)
                            {
                                AdvanceEndDateList[i] = AdvanceEndDateList[i].Trim();
                            }
                        }
                        string[] AdvanceNoteList = null;
                        if (DTO.AdvanceNoteList != null)
                        {
                            AdvanceNoteList = DTO.AdvanceNoteList.Split(',');
                            for (int i = 0; i < AdvanceNoteList.Length; i++)
                            {
                                AdvanceNoteList[i] = AdvanceNoteList[i].Trim();
                            }
                        }
                        string[] AdvanceSlotAmountList = null;
                        if (DTO.AdvanceSlotAmountList != null)
                        {
                            AdvanceSlotAmountList = DTO.AdvanceSlotAmountList.Split(',');
                            for (int i = 0; i < AdvanceSlotAmountList.Length; i++)
                            {
                                AdvanceSlotAmountList[i] = AdvanceSlotAmountList[i].Trim();
                            }
                        }
                        if (AdvanceNoList != null)
                        {
                            RMS.Models.AdvanceInfo AdvInfo;
                            for (int i = 0; i < AdvanceNoList.Length; i++)
                            {
                                if (AdvanceNoList[i] != null && AdvanceNoList[i] != "")
                                {
                                    AdvInfo = new RMS.Models.AdvanceInfo();
                                    AdvInfo.AgreementSLNo = AI.AgreementSLNo;
                                    AdvInfo.AdvanceNo = Convert.ToInt32(AdvanceNoList[i].ToString());
                                    AdvInfo.AdvanceSlotPeriod = Convert.ToInt32(AdvanceSlotPeriodList[i].ToString());
                                    AdvInfo.StartDate = DateTime.ParseExact(AdvanceStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    AdvInfo.EndDate = DateTime.ParseExact(AdvanceEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    AdvInfo.AdvanceSlotAmount = Convert.ToDouble(AdvanceSlotAmountList[i].ToString());
                                    AdvInfo.AdvanceNote = (AdvanceNoteList == null) ? null : AdvanceNoteList[i].ToString();
                                    db.AdvanceInfos.Add(AdvInfo);
                                    db.SaveChanges();
                                }
                            }
                        }
                        //==Review Info
                        //===Delete Existing Review Info
                        db.ReviewInfos.RemoveRange(db.ReviewInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                        //==
                        string[] ReviewNoList = null;
                        if (DTO.ReviewNoList != null)
                        {
                            ReviewNoList = DTO.ReviewNoList.Split(',');
                            for (int i = 0; i < ReviewNoList.Length; i++)
                            {
                                ReviewNoList[i] = ReviewNoList[i].Trim();
                            }
                        }
                        string[] ReviewStartDateList = null;
                        if (DTO.ReviewStartDateList != null)
                        {
                            ReviewStartDateList = DTO.ReviewStartDateList.Split(',');
                            for (int i = 0; i < ReviewStartDateList.Length; i++)
                            {
                                ReviewStartDateList[i] = ReviewStartDateList[i].Trim();
                            }
                        }
                        string[] ReviewEndDateList = null;
                        if (DTO.ReviewEndDateList != null)
                        {
                            ReviewEndDateList = DTO.ReviewEndDateList.Split(',');
                            for (int i = 0; i < ReviewEndDateList.Length; i++)
                            {
                                ReviewEndDateList[i] = ReviewEndDateList[i].Trim();
                            }
                        }
                        string[] ReviewPeriodList = null;
                        if (DTO.ReviewPeriodList != null)
                        {
                            ReviewPeriodList = DTO.ReviewPeriodList.Split(',');
                            for (int i = 0; i < ReviewPeriodList.Length; i++)
                            {
                                ReviewPeriodList[i] = ReviewPeriodList[i].Trim();
                            }
                        }
                        string[] ReviewIncreaseAmountList = null;
                        if (DTO.ReviewIncreaseAmountList != null)
                        {
                            ReviewIncreaseAmountList = DTO.ReviewIncreaseAmountList.Split(',');
                            for (int i = 0; i < ReviewIncreaseAmountList.Length; i++)
                            {
                                ReviewIncreaseAmountList[i] = ReviewIncreaseAmountList[i].Trim();
                            }
                        }
                        string[] ReviewIncreasePercentageList = null;
                        if (DTO.ReviewIncreasePercentageList != null)
                        {
                            ReviewIncreasePercentageList = DTO.ReviewIncreasePercentageList.Split(',');
                            for (int i = 0; i < ReviewIncreasePercentageList.Length; i++)
                            {
                                ReviewIncreasePercentageList[i] = ReviewIncreasePercentageList[i].Trim();
                            }
                        }
                        string[] ReviewNoteList = null;
                        if (DTO.ReviewNoteList != null)
                        {
                            ReviewNoteList = DTO.ReviewNoteList.Split(',');
                            for (int i = 0; i < ReviewNoteList.Length; i++)
                            {
                                ReviewNoteList[i] = ReviewNoteList[i].Trim();
                            }
                        }
                        if (ReviewNoList != null)
                        {
                            RMS.Models.ReviewInfo RI;
                            for (int i = 0; i < ReviewNoList.Length; i++)
                            {
                                if (ReviewNoList[i] != null && ReviewNoList[i] != "")
                                {
                                    RI = new RMS.Models.ReviewInfo();
                                    RI.AgreementSLNo = AI.AgreementSLNo;
                                    RI.ReviewNo = Convert.ToInt32(ReviewNoList[i].ToString());
                                    RI.Period = Convert.ToInt32(ReviewPeriodList[i].ToString());
                                    RI.StartDate = DateTime.ParseExact(ReviewStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    RI.EndDate = DateTime.ParseExact(ReviewEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    RI.IncreaseAmount = Convert.ToDouble(ReviewIncreaseAmountList[i].ToString());
                                    RI.IncreasePercentage = Convert.ToDouble(ReviewIncreasePercentageList[i].ToString());
                                    RI.ReviewNote = (ReviewNoteList == null) ? null : ReviewNoteList[i].ToString();
                                    db.ReviewInfos.Add(RI);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                    //==Landlord Information
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Landlord Info
                        db.LandlordInfos.RemoveRange(db.LandlordInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        //===Update Existing Landlord Info
                        List<RMS.Models.LandlordInfo> lstOldLandlord = db.LandlordInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstOldLandlord.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    string[] VendorCodeList = null;
                    if (DTO.VendorCodeList != null)
                    {
                        VendorCodeList = DTO.VendorCodeList.Split(',');
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            VendorCodeList[i] = VendorCodeList[i].Trim();
                        }
                    }
                    string[] LandlordNameList = null;
                    if (DTO.LandlordNameList != null)
                    {
                        LandlordNameList = DTO.LandlordNameList.Split(',');
                        for (int i = 0; i < LandlordNameList.Length; i++)
                        {
                            LandlordNameList[i] = LandlordNameList[i].Trim();
                        }
                    }
                    string[] ModeOfPaymentList = null;
                    if (DTO.ModeOfPaymentList != null)
                    {
                        ModeOfPaymentList = DTO.ModeOfPaymentList.Split(',');
                        for (int i = 0; i < ModeOfPaymentList.Length; i++)
                        {
                            ModeOfPaymentList[i] = ModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] VendorAdvancePCList = null;
                    if (DTO.VendorAdvancePCList != null)
                    {
                        VendorAdvancePCList = DTO.VendorAdvancePCList.Split(',');
                        for (int i = 0; i < VendorAdvancePCList.Length; i++)
                        {
                            VendorAdvancePCList[i] = VendorAdvancePCList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAmountList = null;
                    if (DTO.VendorAdvanceAmountList != null)
                    {
                        VendorAdvanceAmountList = DTO.VendorAdvanceAmountList.Split(',');
                        for (int i = 0; i < VendorAdvanceAmountList.Length; i++)
                        {
                            VendorAdvanceAmountList[i] = VendorAdvanceAmountList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAdjustmentPCList = null;
                    if (DTO.VendorAdvanceAdjustmentPCList != null)
                    {
                        VendorAdvanceAdjustmentPCList = DTO.VendorAdvanceAdjustmentPCList.Split(',');
                        for (int i = 0; i < VendorAdvanceAdjustmentPCList.Length; i++)
                        {
                            VendorAdvanceAdjustmentPCList[i] = VendorAdvanceAdjustmentPCList[i].Trim();
                        }
                    }
                    //string[] VendorAdvanceAdjustmentAmountList = null;
                    //if (DTO.VendorAdvanceAdjustmentAmountList != null)
                    //{
                    //    VendorAdvanceAdjustmentAmountList = DTO.VendorAdvanceAdjustmentAmountList.Split(',');
                    //    for (int i = 0; i < VendorAdvanceAdjustmentAmountList.Length; i++)
                    //    {
                    //        VendorAdvanceAdjustmentAmountList[i] = VendorAdvanceAdjustmentAmountList[i].Trim();
                    //    }
                    //}
                    string[] VendorTaxPCList = null;
                    if (DTO.VendorTaxPCList != null)
                    {
                        VendorTaxPCList = DTO.VendorTaxPCList.Split(',');
                        for (int i = 0; i < VendorTaxPCList.Length; i++)
                        {
                            VendorTaxPCList[i] = VendorTaxPCList[i].Trim();
                        }
                    }
                    string[] VendorTaxAmountList = null;
                    if (DTO.VendorTaxAmountList != null)
                    {
                        VendorTaxAmountList = DTO.VendorTaxAmountList.Split(',');
                        for (int i = 0; i < VendorTaxAmountList.Length; i++)
                        {
                            VendorTaxAmountList[i] = VendorTaxAmountList[i].Trim();
                        }
                    }
                    string[] VendorVATPCList = null;
                    if (DTO.VendorVATPCList != null)
                    {
                        VendorVATPCList = DTO.VendorVATPCList.Split(',');
                        for (int i = 0; i < VendorVATPCList.Length; i++)
                        {
                            VendorVATPCList[i] = VendorVATPCList[i].Trim();
                        }
                    }
                    string[] VendorVATAmountList = null;
                    if (DTO.VendorVATAmountList != null)
                    {
                        VendorVATAmountList = DTO.VendorVATAmountList.Split(',');
                        for (int i = 0; i < VendorVATAmountList.Length; i++)
                        {
                            VendorVATAmountList[i] = VendorVATAmountList[i].Trim();
                        }
                    }
                    string[] VendorRentPCList = null;
                    if (DTO.VendorRentPCList != null)
                    {
                        VendorRentPCList = DTO.VendorRentPCList.Split(',');
                        for (int i = 0; i < VendorRentPCList.Length; i++)
                        {
                            VendorRentPCList[i] = VendorRentPCList[i].Trim();
                        }
                    }
                    //string[] VendorRentAmountList = null;
                    //if (DTO.VendorRentAmountList != null)
                    //{
                    //    VendorRentAmountList = DTO.VendorRentAmountList.Split(',');
                    //    for (int i = 0; i < VendorRentAmountList.Length; i++)
                    //    {
                    //        VendorRentAmountList[i] = VendorRentAmountList[i].Trim();
                    //    }
                    //}
                    string[] AddressList = null;
                    if (DTO.LLAddressList != null)
                    {
                        AddressList = DTO.LLAddressList.Split(',');
                        for (int i = 0; i < AddressList.Length; i++)
                        {
                            AddressList[i] = AddressList[i].Trim();
                        }
                    }
                    string[] ContactNoList = null;
                    if (DTO.LLContactNoList != null)
                    {
                        ContactNoList = DTO.LLContactNoList.Split(',');
                        for (int i = 0; i < ContactNoList.Length; i++)
                        {
                            ContactNoList[i] = ContactNoList[i].Trim();
                        }
                    }
                    string[] EmailList = null;
                    if (DTO.LLEmailList != null)
                    {
                        EmailList = DTO.LLEmailList.Split(',');
                        for (int i = 0; i < EmailList.Length; i++)
                        {
                            EmailList[i] = EmailList[i].Trim();
                        }
                    }
                    string[] ACNoList = null;
                    if (DTO.ACNoList != null)
                    {
                        ACNoList = DTO.ACNoList.Split(',');
                        for (int i = 0; i < ACNoList.Length; i++)
                        {
                            ACNoList[i] = ACNoList[i].Trim();
                        }
                    }
                    string[] BankNameList = null;
                    if (DTO.BankNameList != null)
                    {
                        BankNameList = DTO.BankNameList.Split(',');
                        for (int i = 0; i < BankNameList.Length; i++)
                        {
                            BankNameList[i] = BankNameList[i].Trim();
                        }
                    }
                    string[] BranchNameList = null;
                    if (DTO.BranchNameList != null)
                    {
                        BranchNameList = DTO.BranchNameList.Split(',');
                        for (int i = 0; i < BranchNameList.Length; i++)
                        {
                            BranchNameList[i] = BranchNameList[i].Trim();
                        }
                    }
                    string[] RoutingNoList = null;
                    if (DTO.RoutingNoList != null)
                    {
                        RoutingNoList = DTO.RoutingNoList.Split(',');
                        for (int i = 0; i < RoutingNoList.Length; i++)
                        {
                            RoutingNoList[i] = RoutingNoList[i].Trim();
                        }
                    }
                    RMS.Models.LandlordInfo LInfo;
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    for (int i = 0; i < VendorCodeList.Length; i++)
                    {
                        if (VendorCodeList[i] != null && VendorCodeList[i] != "")
                        {
                            LInfo = new RMS.Models.LandlordInfo();
                            LInfo.AgreementSLNo = DTO.AgreementSLNo;
                            LInfo.VendorCode = (VendorCodeList == null) ? null : VendorCodeList[i].ToString();
                            LInfo.LandlordName = (LandlordNameList == null) ? null : LandlordNameList[i].ToString();
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { LInfo.ModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { LInfo.ModeOfPayment = ModeOfPaymentLocation.RTGS; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { LInfo.ModeOfPayment = ModeOfPaymentLocation.EFTN; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { LInfo.ModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { LInfo.ModeOfPayment = ModeOfPaymentLocation.Cash; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { LInfo.ModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { LInfo.ModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { LInfo.ModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { LInfo.ModeOfPayment = ModeOfPaymentLocation.Others; }
                            LInfo.AdvancePC = Convert.ToDouble(VendorAdvancePCList[i].ToString());
                            LInfo.AdvanceAdjustmentPC = Convert.ToDouble(VendorAdvanceAdjustmentPCList[i].ToString());
                            LInfo.TaxPC = Convert.ToDouble(VendorTaxPCList[i].ToString());
                            LInfo.VATPC = Convert.ToDouble(VendorVATPCList[i].ToString());
                            LInfo.RentPC = Convert.ToDouble(VendorRentPCList[i].ToString());
                            //==PC Amount
                            LInfo.AdvanceAmount = (AI.AdvanceAmount * LInfo.AdvancePC) / 100;
                            LInfo.TaxAmount = (AI.TaxAmount * LInfo.TaxPC) / 100;
                            LInfo.VATAmount = (AI.VATAmount * LInfo.VATPC) / 100;
                            //==
                            LInfo.LLAddress = (AddressList == null) ? null : AddressList[i].ToString();
                            LInfo.LLContactNo = (ContactNoList == null) ? null : ContactNoList[i].ToString();
                            LInfo.LLEmail = (EmailList == null) ? null : EmailList[i].ToString();
                            LInfo.ACNo = (ACNoList == null) ? null : ACNoList[i].ToString();
                            LInfo.BankName = (BankNameList == null) ? null : BankNameList[i].ToString();
                            LInfo.BranchName = (BranchNameList == null) ? null : BranchNameList[i].ToString();
                            LInfo.RoutingNo = (RoutingNoList == null) ? null : RoutingNoList[i].ToString();
                            db.LandlordInfos.Add(LInfo);
                            db.SaveChanges();
                        }
                    }
                    //==Cost Center
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Cost Center Info
                        db.CostCenterInfos.RemoveRange(db.CostCenterInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        List<RMS.Models.CostCenterInfo> lstCC = db.CostCenterInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstCC.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    string[] CCCodeList = null;
                    if (DTO.CCCodeList != null)
                    {
                        CCCodeList = DTO.CCCodeList.Split(',');
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            CCCodeList[i] = CCCodeList[i].Trim();
                        }
                    }
                    string[] CCNameList = null;
                    if (DTO.CCNameList != null)
                    {
                        CCNameList = DTO.CCNameList.Split(',');
                        for (int i = 0; i < CCNameList.Length; i++)
                        {
                            CCNameList[i] = CCNameList[i].Trim();
                        }
                    }
                    string[] SOLCodeList = null;
                    if (DTO.SOLCodeList != null)
                    {
                        SOLCodeList = DTO.SOLCodeList.Split(',');
                        for (int i = 0; i < SOLCodeList.Length; i++)
                        {
                            SOLCodeList[i] = SOLCodeList[i].Trim();
                        }
                    }
                    string[] SOLNameList = null;
                    if (DTO.SOLNameList != null)
                    {
                        SOLNameList = DTO.SOLNameList.Split(',');
                        for (int i = 0; i < SOLNameList.Length; i++)
                        {
                            SOLNameList[i] = SOLNameList[i].Trim();
                        }
                    }
                    string[] CCShareAllotmentList = null;
                    if (DTO.CCShareAllotmentList != null)
                    {
                        CCShareAllotmentList = DTO.CCShareAllotmentList.Split(',');
                        for (int i = 0; i < CCShareAllotmentList.Length; i++)
                        {
                            CCShareAllotmentList[i] = CCShareAllotmentList[i].Trim();
                        }
                    }
                    RMS.Models.CostCenterInfo CCinfo;
                    for (int i = 0; i < CCCodeList.Length; i++)
                    {
                        if (CCCodeList[i] != null && CCCodeList[i] != "")
                        {
                            CCinfo = new RMS.Models.CostCenterInfo();
                            CCinfo.AgreementSLNo = DTO.AgreementSLNo;
                            CCinfo.CCCode = (CCCodeList == null) ? null : CCCodeList[i].ToString();
                            CCinfo.CCName = (CCNameList == null) ? null : CCNameList[i].ToString();
                            CCinfo.SOLCode = (SOLCodeList == null) ? null : SOLCodeList[i].ToString();
                            CCinfo.SOLName = (SOLNameList == null) ? null : SOLNameList[i].ToString();
                            CCinfo.CCShareAllotment = Convert.ToDouble(CCShareAllotmentList[i].ToString());
                            db.CostCenterInfos.Add(CCinfo);
                            db.SaveChanges();
                        }
                    }
                    //==Utility Information
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Utility Info
                        db.UtilityInfos.RemoveRange(db.UtilityInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        List<RMS.Models.UtilityInfo> lstOldUtility = db.UtilityInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstOldUtility.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    string[] UtilityVendorCodeList = null;
                    if (DTO.UtilityVendorCodeList != null)
                    {
                        UtilityVendorCodeList = DTO.UtilityVendorCodeList.Split(',');
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            UtilityVendorCodeList[i] = UtilityVendorCodeList[i].Trim();
                        }
                    }
                    string[] UtilityLandlordNameList = null;
                    if (DTO.UtilityLandlordNameList != null)
                    {
                        UtilityLandlordNameList = DTO.UtilityLandlordNameList.Split(',');
                        for (int i = 0; i < UtilityLandlordNameList.Length; i++)
                        {
                            UtilityLandlordNameList[i] = UtilityLandlordNameList[i].Trim();
                        }
                    }
                    string[] UtilityModeOfPaymentList = null;
                    if (DTO.UtilityModeOfPaymentList != null)
                    {
                        UtilityModeOfPaymentList = DTO.UtilityModeOfPaymentList.Split(',');
                        for (int i = 0; i < UtilityModeOfPaymentList.Length; i++)
                        {
                            UtilityModeOfPaymentList[i] = UtilityModeOfPaymentList[i].Trim();
                        }
                    }

                    string[] ServiceChargePCList = null;
                    if (DTO.ServiceChargePCList != null)
                    {
                        ServiceChargePCList = DTO.ServiceChargePCList.Split(',');
                        for (int i = 0; i < ServiceChargePCList.Length; i++)
                        {
                            ServiceChargePCList[i] = ServiceChargePCList[i].Trim();
                        }
                    }
                    string[] ServiceChargeAmountList = null;
                    if (DTO.ServiceChargeAmountList != null)
                    {
                        ServiceChargeAmountList = DTO.ServiceChargeAmountList.Split(',');
                        for (int i = 0; i < ServiceChargeAmountList.Length; i++)
                        {
                            ServiceChargeAmountList[i] = ServiceChargeAmountList[i].Trim();
                        }
                    }

                    string[] OnlineTowerPCList = null;
                    if (DTO.OnlineTowerPCList != null)
                    {
                        OnlineTowerPCList = DTO.OnlineTowerPCList.Split(',');
                        for (int i = 0; i < OnlineTowerPCList.Length; i++)
                        {
                            OnlineTowerPCList[i] = OnlineTowerPCList[i].Trim();
                        }
                    }
                    string[] OnlineTowerAmountList = null;
                    if (DTO.OnlineTowerAmountList != null)
                    {
                        OnlineTowerAmountList = DTO.OnlineTowerAmountList.Split(',');
                        for (int i = 0; i < OnlineTowerAmountList.Length; i++)
                        {
                            OnlineTowerAmountList[i] = OnlineTowerAmountList[i].Trim();
                        }
                    }

                    string[] GeneratorSpacePCList = null;
                    if (DTO.GeneratorSpacePCList != null)
                    {
                        GeneratorSpacePCList = DTO.GeneratorSpacePCList.Split(',');
                        for (int i = 0; i < GeneratorSpacePCList.Length; i++)
                        {
                            GeneratorSpacePCList[i] = GeneratorSpacePCList[i].Trim();
                        }
                    }
                    string[] GeneratorSpaceAmountList = null;
                    if (DTO.GeneratorSpaceAmountList != null)
                    {
                        GeneratorSpaceAmountList = DTO.GeneratorSpaceAmountList.Split(',');
                        for (int i = 0; i < GeneratorSpaceAmountList.Length; i++)
                        {
                            GeneratorSpaceAmountList[i] = GeneratorSpaceAmountList[i].Trim();
                        }
                    }

                    string[] CarParkingPCList = null;
                    if (DTO.CarParkingPCList != null)
                    {
                        CarParkingPCList = DTO.CarParkingPCList.Split(',');
                        for (int i = 0; i < CarParkingPCList.Length; i++)
                        {
                            CarParkingPCList[i] = CarParkingPCList[i].Trim();
                        }
                    }
                    string[] CarParkingAmountList = null;
                    if (DTO.CarParkingAmountList != null)
                    {
                        CarParkingAmountList = DTO.CarParkingAmountList.Split(',');
                        for (int i = 0; i < CarParkingAmountList.Length; i++)
                        {
                            CarParkingAmountList[i] = CarParkingAmountList[i].Trim();
                        }
                    }
                    string[] UtilityTaxPCList = null;
                    if (DTO.UtilityTaxPCList != null)
                    {
                        UtilityTaxPCList = DTO.UtilityTaxPCList.Split(',');
                        for (int i = 0; i < UtilityTaxPCList.Length; i++)
                        {
                            UtilityTaxPCList[i] = UtilityTaxPCList[i].Trim();
                        }
                    }
                    string[] UtilityTaxAmountList = null;
                    if (DTO.UtilityTaxAmountList != null)
                    {
                        UtilityTaxAmountList = DTO.UtilityTaxAmountList.Split(',');
                        for (int i = 0; i < UtilityTaxAmountList.Length; i++)
                        {
                            UtilityTaxAmountList[i] = UtilityTaxAmountList[i].Trim();
                        }
                    }
                    string[] UtilityVATPCList = null;
                    if (DTO.UtilityVATPCList != null)
                    {
                        UtilityVATPCList = DTO.UtilityVATPCList.Split(',');
                        for (int i = 0; i < UtilityVATPCList.Length; i++)
                        {
                            UtilityVATPCList[i] = UtilityVATPCList[i].Trim();
                        }
                    }
                    string[] UtilityVATAmountList = null;
                    if (DTO.UtilityVATAmountList != null)
                    {
                        UtilityVATAmountList = DTO.UtilityVATAmountList.Split(',');
                        for (int i = 0; i < UtilityVATAmountList.Length; i++)
                        {
                            UtilityVATAmountList[i] = UtilityVATAmountList[i].Trim();
                        }
                    }
                    string[] UtilityAddressList = null;
                    if (DTO.UtilityAddressList != null)
                    {
                        UtilityAddressList = DTO.UtilityAddressList.Split(',');
                        for (int i = 0; i < UtilityAddressList.Length; i++)
                        {
                            UtilityAddressList[i] = UtilityAddressList[i].Trim();
                        }
                    }
                    string[] UtilityContactNoList = null;
                    if (DTO.UtilityContactNoList != null)
                    {
                        UtilityContactNoList = DTO.UtilityContactNoList.Split(',');
                        for (int i = 0; i < UtilityContactNoList.Length; i++)
                        {
                            UtilityContactNoList[i] = UtilityContactNoList[i].Trim();
                        }
                    }
                    string[] UtilityEmailList = null;
                    if (DTO.UtilityEmailList != null)
                    {
                        UtilityEmailList = DTO.UtilityEmailList.Split(',');
                        for (int i = 0; i < UtilityEmailList.Length; i++)
                        {
                            UtilityEmailList[i] = UtilityEmailList[i].Trim();
                        }
                    }
                    string[] UtilityACNoList = null;
                    if (DTO.UtilityACNoList != null)
                    {
                        UtilityACNoList = DTO.UtilityACNoList.Split(',');
                        for (int i = 0; i < UtilityACNoList.Length; i++)
                        {
                            UtilityACNoList[i] = UtilityACNoList[i].Trim();
                        }
                    }
                    string[] UtilityBankNameList = null;
                    if (DTO.UtilityBankNameList != null)
                    {
                        UtilityBankNameList = DTO.UtilityBankNameList.Split(',');
                        for (int i = 0; i < UtilityBankNameList.Length; i++)
                        {
                            UtilityBankNameList[i] = UtilityBankNameList[i].Trim();
                        }
                    }
                    string[] UtilityBranchNameList = null;
                    if (DTO.UtilityBranchNameList != null)
                    {
                        UtilityBranchNameList = DTO.UtilityBranchNameList.Split(',');
                        for (int i = 0; i < UtilityBranchNameList.Length; i++)
                        {
                            UtilityBranchNameList[i] = UtilityBranchNameList[i].Trim();
                        }
                    }
                    string[] UtilityRoutingNoList = null;
                    if (DTO.UtilityRoutingNoList != null)
                    {
                        UtilityRoutingNoList = DTO.UtilityRoutingNoList.Split(',');
                        for (int i = 0; i < UtilityRoutingNoList.Length; i++)
                        {
                            UtilityRoutingNoList[i] = UtilityRoutingNoList[i].Trim();
                        }
                    }
                    if (UtilityVendorCodeList != null)
                    {
                        RMS.Models.UtilityInfo UI;
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            if (UtilityVendorCodeList[i] != null && UtilityVendorCodeList[i] != "")
                            {
                                UI = new RMS.Models.UtilityInfo();
                                UI.AgreementSLNo = AI.AgreementSLNo;
                                UI.UtilityVendorCode = (UtilityVendorCodeList == null) ? null : UtilityVendorCodeList[i].ToString();
                                UI.UtilityLandlordName = (UtilityLandlordNameList == null) ? null : UtilityLandlordNameList[i].ToString();
                                if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Others; }

                                UI.ServiceChargePC = Convert.ToDouble(ServiceChargePCList[i].ToString());
                                UI.ServiceChargeAmount = Convert.ToDouble(ServiceChargeAmountList[i].ToString());

                                UI.OnlineTowerPC = Convert.ToDouble(OnlineTowerPCList[i].ToString());
                                UI.OnlineTowerAmount = Convert.ToDouble(OnlineTowerAmountList[i].ToString());

                                UI.GeneratorSpacePC = Convert.ToDouble(GeneratorSpacePCList[i].ToString());
                                UI.GeneratorSpaceAmount = Convert.ToDouble(GeneratorSpaceAmountList[i].ToString());

                                UI.CarParkingPC = Convert.ToDouble(CarParkingPCList[i].ToString());
                                UI.CarParkingAmount = Convert.ToDouble(CarParkingAmountList[i].ToString());

                                UI.TaxPC = Convert.ToDouble(UtilityTaxPCList[i].ToString());
                                UI.TaxAmount = Convert.ToDouble(UtilityTaxAmountList[i].ToString());
                                UI.VATPC = Convert.ToDouble(UtilityVATPCList[i].ToString());
                                UI.VATAmount = Convert.ToDouble(UtilityVATAmountList[i].ToString());
                                UI.UtilityAddress = (UtilityAddressList == null) ? null : UtilityAddressList[i].ToString();
                                UI.UtilityContactNo = (UtilityContactNoList == null) ? null : UtilityContactNoList[i].ToString();
                                UI.UtilityEmail = (UtilityEmailList == null) ? null : UtilityEmailList[i].ToString();
                                UI.UtilityACNo = (UtilityACNoList == null) ? null : UtilityACNoList[i].ToString();
                                UI.UtilityBankName = (UtilityBankNameList == null) ? null : UtilityBankNameList[i].ToString();
                                UI.UtilityBranchName = (UtilityBranchNameList == null) ? null : UtilityBranchNameList[i].ToString();
                                UI.UtilityRoutingNo = (UtilityRoutingNoList == null) ? null : UtilityRoutingNoList[i].ToString();
                                db.UtilityInfos.Add(UI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Attach Documents
                    string[] FUFileNameList = null;
                    if (DTO.FUFileNameList != null)
                    {
                        FUFileNameList = DTO.FUFileNameList.Split(',');
                        for (int i = 0; i < FUFileNameList.Length; i++)
                        {
                            FUFileNameList[i] = FUFileNameList[i].Trim();
                        }
                    }
                    var originalDirectory = new DirectoryInfo(string.Format("{0}Content\\FileUpload\\", Server.MapPath(@"\")));
                    string pathString = Path.Combine(originalDirectory.ToString(), AI.AliasCode);
                    if (DTO.FUFileNameList != null)
                    {
                        //==Delete physical file
                        var xlstFU = db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && !FUFileNameList.Contains(x.FileName)).ToList();
                        foreach (var item in xlstFU)
                        {
                            //==Delete File
                            FileInfo file = new FileInfo(string.Format("{0}\\{1}", pathString, item.FileName));
                            if (file.Exists)//check file exsit or not  
                            {
                                file.Delete();
                            }
                            else
                            {
                                //==Nothing
                            }
                        }
                        //==Delete Existing Attached File
                        db.FileUploadInfos.RemoveRange(db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && !FUFileNameList.Contains(x.FileName)));
                        db.SaveChanges();
                    }
                    else
                    {
                        //==Delete physical file
                        var xlstFU = db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        foreach (var item in xlstFU)
                        {
                            //==Delete File
                            FileInfo file = new FileInfo(string.Format("{0}\\{1}", pathString, item.FileName));
                            if (file.Exists)//check file exsit or not  
                            {
                                file.Delete();
                            }
                            else
                            {
                                //==Nothing
                            }
                        }
                        //==Delete Existing Attached File
                        db.FileUploadInfos.RemoveRange(db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    if (DTO.files != null)
                    {
                        RMS.Models.FileUploadInfo FU;
                        foreach (var file in DTO.files)
                        {
                            //Save file content goes here
                            if (file != null && file.ContentLength > 0)
                            {
                                //==table update
                                if (db.FileUploadInfos.Any(x => x.AgreementSLNo == AI.AgreementSLNo && x.FileName == file.FileName) == false)
                                {
                                    FU = new RMS.Models.FileUploadInfo();
                                    FU.AgreementSLNo = AI.AgreementSLNo;
                                    FU.FileName = file.FileName;
                                    FU.FilePath = "Content/FileUpload/" + AI.AliasCode + "/" + file.FileName;
                                    db.FileUploadInfos.Add(FU);
                                    db.SaveChanges();
                                }
                                //==Physical file save
                                bool isExists = System.IO.Directory.Exists(pathString);
                                if (!isExists)
                                    System.IO.Directory.CreateDirectory(pathString);
                                var path = string.Format("{0}\\{1}", pathString, file.FileName);
                                file.SaveAs(path);
                            }
                        }
                    }
                    //==Re-schedule Landlord, Cost Center, Utility if Agreement Activated
                    if (AI.AgreementStatus == 2)
                    {
                        //===Delete Existing Landlord Schedule
                        db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        db.SaveChanges();
                        //===Delete Existing Cost Center Schedule
                        db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        db.SaveChanges();
                        //===Delete Existing Utility Schedule
                        //db.UtilitySchedules.RemoveRange(db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        //db.SaveChanges();
                        //==Contract Rent Schedule
                        RMS.Models.ContractSchedule CS = new RMS.Models.ContractSchedule();
                        RMS.Models.LandlordSchedule LS = new RMS.Models.LandlordSchedule();
                        RMS.Models.CostCenterSchedule CCS = new RMS.Models.CostCenterSchedule();
                        //RMS.Models.UtilitySchedule US = new RMS.Models.UtilitySchedule();
                        RMS.Models.IFRSSchedule IFRS = new RMS.Models.IFRSSchedule();
                        List<RMS.Models.LandlordInfo> lstLandlords = db.LandlordInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        List<RMS.Models.CostCenterInfo> lstCostCenter = db.CostCenterInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        //List<RMS.Models.UtilityInfo> lstUtility = db.UtilityInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        List<RMS.Models.ReviewInfo> lstReviewInfo = db.ReviewInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).OrderBy(x => x.ReviewNo).ToList();
                        List<RMS.Models.AdvanceInfo> lstAdvanceInfo = db.AdvanceInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).OrderBy(x => x.AdvanceNo).ToList();
                        DateTime ScheduleDate = AI.AgreementStartDate;
                        //===xxx====
                        int LastMonthDaysCount = DateTime.DaysInMonth(AI.AgreementEndDate.Year, AI.AgreementEndDate.Month);
                        int ReviewMonthDaysCount = 0;
                        int MonthDays = 0;

                        double RentPerDay = 0;
                        double BeforeReviewAmount = 0;
                        double AfterReviewAmount = 0;
                        double NetCalcAmount = 0;
                        if (AI.ReviewFrequency < 1 && lstReviewInfo.Count == 0)
                        {
                            //==Without Review
                            for (int i = 1; i <= AI.AgreementPeriod; i++)
                            {
                                CS = new RMS.Models.ContractSchedule();
                                if (i != 1)
                                {
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                }
                                //==Contract Schedule
                                CS.ScheduleDate = ScheduleDate;
                                CS.AgreementSLNo = AI.AgreementSLNo;
                                CS.MonthNo = i;
                                CS.Year = CS.ScheduleDate.Year;
                                CS.Month = CS.ScheduleDate.ToString("MMMM");
                                CS.ReviewNo = 0;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                }
                                CS.CostPerUnit = AI.CostPerUnit;
                                CS.TotalRentAmount = AI.CostPerUnit * AI.TotalArea;
                                //==First Month
                                if (i == 1)
                                {
                                    //==Full Month
                                    if (ScheduleDate.Day != 1)
                                    {
                                        //==Fraction Date Rent Amount
                                        MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                        RentPerDay = CS.TotalRentAmount / MonthDays;
                                        CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                    }
                                }
                                //==Last Month
                                else if (i == AI.AgreementPeriod)
                                {
                                    //==Full Month
                                    if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                    {
                                        //==Fraction Date Rent Amount
                                        RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                        CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                    }
                                }
                                #region "Tax Type & VAT Type"
                                //1. Inclusive Inclusive
                                if (AI.TaxType == 1 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //2. Inclusive Exclusive
                                else if (AI.TaxType == 1 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //3. Inclusive Exempted
                                else if (AI.TaxType == 1 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //4. Exclusive Inclusive
                                else if (AI.TaxType == 2 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //5. Exclusive Exclusive
                                else if (AI.TaxType == 2 && AI.VatType == 2)
                                {
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //6. Exclusive Exempted
                                else if (AI.TaxType == 2 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //7. Exempted  Inclusive
                                else if (AI.TaxType == 3 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //8. Exempted  Exclusive
                                else if (AI.TaxType == 3 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //9. Exempted Exempted
                                else if (AI.TaxType == 3 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                #endregion
                                CS.UserSLNo = AI.UserSLNo;
                                CS.EntryDate = DateTime.Now;
                                //db.ContractSchedules.Add(CS);
                                //db.SaveChanges();
                                //==Landlord Schedule
                                foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                {
                                    LS = new RMS.Models.LandlordSchedule();
                                    LS.ScheduleDate = ScheduleDate;
                                    LS.AgreementSLNo = AI.AgreementSLNo;
                                    LS.LandlordSLNo = LI.LandlordSLNo;
                                    LS.MonthNo = i;
                                    LS.Year = CS.ScheduleDate.Year;
                                    LS.Month = CS.ScheduleDate.ToString("MMMM");
                                    LS.ReviewNo = 0;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                    }
                                    LS.CostPerUnit = AI.CostPerUnit;
                                    LS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    if (CS.TaxAmount > 0)
                                    {
                                        LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                    }
                                    //==
                                    LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - (LS.AdvanceAdjustmentAmount);
                                    LS.UserSLNo = AI.UserSLNo;
                                    LS.EntryDate = DateTime.Now;
                                    db.LandlordSchedules.Add(LS);
                                    db.SaveChanges();
                                }
                                //==Cost Allocation Schedule
                                foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                {
                                    CCS = new RMS.Models.CostCenterSchedule();
                                    CCS.ScheduleDate = ScheduleDate;
                                    CCS.AgreementSLNo = AI.AgreementSLNo;
                                    CCS.CCSLNo = CC.CCSLNo;
                                    CCS.MonthNo = i;
                                    CCS.Year = CS.ScheduleDate.Year;
                                    CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CCS.ReviewNo = 0;
                                    CCS.CostPerUnit = AI.CostPerUnit;
                                    CCS.TotalRentAmount = CS.TotalRentAmount;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                    }
                                    //==
                                    CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                    CCS.UserSLNo = AI.UserSLNo;
                                    CCS.EntryDate = DateTime.Now;
                                    db.CostCenterSchedules.Add(CCS);
                                    db.SaveChanges();
                                }
                            }
                        }
                        else if (AI.ReviewFrequency > 0)
                        {
                            //==Review Frequency (Repeated)
                            int ReviewCount = AI.ReviewFrequency + 1;
                            int ReviewNo = 0;
                            double NewCPU = AI.CostPerUnit;
                            for (int i = 1; i <= AI.AgreementPeriod; i++)
                            {
                                CS = new RMS.Models.ContractSchedule();
                                if (i != 1)
                                {
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                }
                                if (i <= AI.ReviewFrequency)
                                {
                                    //==Contract Schedule
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    CS.CostPerUnit = NewCPU;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    if (i == 1)
                                    {
                                        //==Full Month
                                        if (ScheduleDate.Day != 1)
                                        {
                                            //==Fraction Date Rent Amount
                                            MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                            RentPerDay = CS.TotalRentAmount / MonthDays;
                                            CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                        }
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                                else if (i == ReviewCount)
                                {
                                    //==Contract Schedule
                                    if (i != AI.AgreementPeriod)
                                    {
                                        ReviewNo = ReviewNo + 1;
                                    }
                                    ReviewCount = ReviewCount + AI.ReviewFrequency;
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    //==xx
                                    //==Last Month
                                    if (i == AI.AgreementPeriod)
                                    {
                                        CS.CostPerUnit = NewCPU;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        //==Full Month
                                        if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                            CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                        }
                                    }
                                    else
                                    {
                                        //==Fraction Month
                                        if (ScheduleDate.Day != 1)
                                        {
                                            //==Before Review Amount
                                            MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                            RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                            BeforeReviewAmount = (ScheduleDate.Day - 1) * RentPerDay;
                                            //==After Review Amount
                                            NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                            AfterReviewAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                            CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                        }
                                        else
                                        {
                                            NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    //==xx
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                                else
                                {
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    CS.CostPerUnit = NewCPU;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    //==Last Month
                                    if (i == AI.AgreementPeriod)
                                    {
                                        //==Full Month
                                        if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                            CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                        }
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                        else if (AI.ReviewFrequency < 1 && lstReviewInfo.Count > 0)
                        {
                            //==Review Declaration Wise
                            int MonthNo = 0;
                            int ReviewNo = 0;
                            double NewCPU = AI.CostPerUnit;
                            //==Review Wise
                            foreach (RMS.Models.ReviewInfo RI in lstReviewInfo)
                            {
                                ReviewNo = ReviewNo + 1;
                                if (RI.ReviewNo == 1)
                                {
                                    //==Schedule without Review
                                    int ReviewStartMonth = ((RI.StartDate.Year - AI.AgreementStartDate.Year) * 12 + RI.StartDate.Month - AI.AgreementStartDate.Month) + 1;
                                    for (int i = 1; i < ReviewStartMonth; i++)
                                    {
                                        MonthNo = MonthNo + 1;
                                        CS = new RMS.Models.ContractSchedule();
                                        if (i != 1)
                                        {
                                            ScheduleDate = ScheduleDate.AddMonths(1);
                                        }
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = 0;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        CS.CostPerUnit = AI.CostPerUnit;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        if (i == 1)
                                        {
                                            //==Full Month
                                            if (ScheduleDate.Day != 1)
                                            {
                                                //==Fraction Date Rent Amount
                                                MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                                RentPerDay = CS.TotalRentAmount / MonthDays;
                                                CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                            }
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = 0;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = AI.CostPerUnit;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = 0;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = AI.CostPerUnit;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                    //==Schedule with Review
                                    for (int i = 1; i <= RI.Period; i++)
                                    {
                                        MonthNo = MonthNo + 1;
                                        CS = new RMS.Models.ContractSchedule();
                                        ScheduleDate = ScheduleDate.AddMonths(1);
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        //==Fraction Month
                                        if (i == 1)
                                        {
                                            if (RI.StartDate.Day != 1)
                                            {
                                                //==Before Review Amount
                                                MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                                RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                                BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                                //==After Review Amount                                            
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                                AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                                CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                            }
                                            else
                                            {
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        //==Review Last Month
                                        else if (i == RI.Period)
                                        {
                                            ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                            //==Full Month
                                            if (RI.EndDate.Day != ReviewMonthDaysCount)
                                            {
                                                //==Fraction Date Rent Amount
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                                CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                            }
                                            else
                                            {
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = NewCPU;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = NewCPU;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    //==Schedule rest of the Review
                                    for (int i = 1; i <= RI.Period; i++)
                                    {
                                        CS = new RMS.Models.ContractSchedule();
                                        //==Conditions applicable for multiple enhancement slots are two enhancements in the same month
                                        if (i == 1 && ScheduleDate.Year == RI.StartDate.Year && ScheduleDate.Month == RI.StartDate.Month)
                                        {
                                            //===MonthNo wise Delete from Contract Schedule
                                            db.ContractSchedules.RemoveRange(db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //===MonthNo wise Delete from Landlord Schedule
                                            db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //===MonthNo wise Delete from Cost Center Schedule
                                            db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //==
                                        }
                                        else
                                        {
                                            MonthNo = MonthNo + 1;
                                            ScheduleDate = ScheduleDate.AddMonths(1);
                                        }
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        //==Fraction Month
                                        if (i == 1)
                                        {
                                            if (RI.StartDate.Day != 1)
                                            {
                                                //==Before Review Amount
                                                MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                                RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                                BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                                //==After Review Amount                                            
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                                AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                                CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                            }
                                            else
                                            {
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        //==Review Last Month
                                        else if (i == RI.Period)
                                        {
                                            ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                            //==Full Month
                                            if (RI.EndDate.Day != ReviewMonthDaysCount)
                                            {
                                                //==Fraction Date Rent Amount
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                                CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                            }
                                            else
                                            {
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = NewCPU;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = NewCPU;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                            }
                        }
                        #region Advance Adjustment
                        //==Advance Info Loop
                        DateTime AdvStartDate = DateTime.Now;
                        int AdvYear = 0;
                        string AdvMonthName = String.Empty;
                        double AdvAdjPerDay = 0;
                        double AdvAdjAmount = 0;
                        double AdvanceMonthDaysCount = 0;
                        foreach (RMS.Models.AdvanceInfo AdvInfo in lstAdvanceInfo)
                        {
                            AdvStartDate = AdvInfo.StartDate;
                            for (int i = 1; i <= AdvInfo.AdvanceSlotPeriod; i++)
                            {
                                if (i != 1)
                                {
                                    AdvStartDate = AdvStartDate.AddMonths(1);
                                }
                                AdvYear = AdvStartDate.Year;
                                AdvMonthName = AdvStartDate.ToString("MMMM");
                                AdvAdjAmount = AdvInfo.AdvanceSlotAmount;
                                //==Fraction Advance Adjustment
                                //==First Month
                                if (i == 1)
                                {
                                    if (AdvStartDate.Day != 1)
                                    {
                                        MonthDays = DateTime.DaysInMonth(AdvStartDate.Year, AdvStartDate.Month);
                                        //==Fraction Date Adv Adj Amount
                                        AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / MonthDays;
                                        AdvAdjAmount = ((MonthDays - AdvStartDate.Day) + 1) * AdvAdjPerDay;
                                    }
                                }
                                else
                                {
                                    //==Last Month
                                    if (i == AdvInfo.AdvanceSlotPeriod)
                                    {
                                        AdvanceMonthDaysCount = DateTime.DaysInMonth(AdvInfo.EndDate.Year, AdvInfo.EndDate.Month);
                                        if (AdvInfo.EndDate.Day != AdvanceMonthDaysCount)
                                        {
                                            //==Fraction Date Adv Adj Amount
                                            AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / AdvanceMonthDaysCount;
                                            AdvAdjAmount = AdvInfo.EndDate.Day * AdvAdjPerDay;
                                        }
                                    }
                                }
                                //==Advance Process Contract Schedule
                                RMS.Models.ContractSchedule GCS = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).SingleOrDefault();
                                GCS.AdvanceAdjustmentAmount = AdvAdjAmount;
                                GCS.NetRentAmount = GCS.NetRentAmount - GCS.AdvanceAdjustmentAmount;
                                //db.Entry(GCS).State = EntityState.Modified;
                                //db.SaveChanges();
                                //==Advance Process Landlord Schedule
                                List<RMS.Models.LandlordSchedule> lstGLS = db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                                foreach (RMS.Models.LandlordSchedule GLS in lstGLS)
                                {
                                    var GLandlordInfo = db.LandlordInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.LandlordSLNo == GLS.LandlordSLNo).Select(x => new { x.AdvanceAdjustmentPC, x.RentPC }).SingleOrDefault();
                                    GLS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * GLandlordInfo.AdvanceAdjustmentPC) / 100;
                                    GLS.NetRentAmount = GLS.NetRentAmount - GLS.AdvanceAdjustmentAmount;
                                    db.Entry(GLS).State = EntityState.Modified;
                                    db.SaveChanges();
                                }
                                //==Advance Process Cost Center Schedule
                                double CCSharePC = 0;
                                List<RMS.Models.CostCenterSchedule> lstGCCS = db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                                foreach (RMS.Models.CostCenterSchedule GCCS in lstGCCS)
                                {
                                    CCSharePC = db.CostCenterInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.CCSLNo == GCCS.CCSLNo).Select(x => x.CCShareAllotment).SingleOrDefault();
                                    GCCS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * CCSharePC) / 100;
                                    GCCS.NetRentAmount = GCCS.NetRentAmount - GCCS.AdvanceAdjustmentAmount;
                                    db.Entry(GCCS).State = EntityState.Modified;
                                    db.SaveChanges();
                                }
                            }
                        }
                        #endregion
                        #region Utility Schedule
                        //ScheduleDate = AI.AgreementStartDate.AddMonths(-1);
                        //for (int i = 1; i <= AI.AgreementPeriod; i++)
                        //{
                        //    ScheduleDate = ScheduleDate.AddMonths(1);
                        //    //==Utility Schedule
                        //    foreach (RMS.Models.UtilityInfo UI in lstUtility)
                        //    {
                        //        US = new RMS.Models.UtilitySchedule();
                        //        US.ScheduleDate = ScheduleDate;
                        //        US.AgreementSLNo = AI.AgreementSLNo;
                        //        US.UtilitySLNo = UI.UtilitySLNo;
                        //        US.MonthNo = i;
                        //        US.Year = US.ScheduleDate.Year;
                        //        US.Month = US.ScheduleDate.ToString("MMMM");
                        //        US.ServiceChargeAmount = UI.ServiceChargeAmount;
                        //        US.OnlineTowerAmount = UI.OnlineTowerAmount;
                        //        US.GeneratorSpaceAmount = UI.GeneratorSpaceAmount;
                        //        US.CarParkingAmount = UI.CarParkingAmount;
                        //        US.TaxAmount = UI.TaxAmount;
                        //        US.VATAmount = UI.VATAmount;
                        //        US.UserSLNo = AI.UserSLNo;
                        //        US.EntryDate = DateTime.Now;
                        //        db.UtilitySchedules.Add(US);
                        //        db.SaveChanges();
                        //    }
                        //}
                        #endregion
                        //==Remove the posted months from the new schedule
                        var ContractSchedules = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == true);
                        foreach (var item in ContractSchedules)
                        {
                            //===Delete
                            db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                            db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                        }
                        db.SaveChanges();
                        //var UtilitySchedules = db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == true);
                        //foreach (var item in UtilitySchedules)
                        //{
                        //    //===Delete
                        //    db.UtilitySchedules.RemoveRange(db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                        //}
                        //db.SaveChanges();
                        //==
                    } //==End
                    AlertMsg = "The renewal agreement: " + AI.AgreementName + " has been updated.";
                    return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectModEdit(int AgreementSLNo)
        {
            TempData.Remove("AgreementSLNo");
            TempData.Add("AgreementSLNo", AgreementSLNo);
            return RedirectToAction("ModEdit");
        }

        [HttpGet]
        public ActionResult ModEdit()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strAgreementSLNo = TempData["AgreementSLNo"];
                    if (strAgreementSLNo == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int AgreementSLNo = Convert.ToInt32(strAgreementSLNo);
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    DTOBasic DTOBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.URLPath = "AgreementInfo/RedirectModAgreementIndex?ViewID=2";
                    //==Water Bill Type meter reading
                    IList<SelectListItem> WaterBillTypeList = new List<SelectListItem>();
                    WaterBillTypeList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Meter Reading", Value = "Meter Reading" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Fixed Value", Value = "Fixed Value" });
                    SelectList WaterBillTypeStatus = new SelectList(WaterBillTypeList, "Value", "Text");
                    ViewBag.WaterBillTypeList = WaterBillTypeStatus;
                    //======Lookup
                    var lstLookup = db.Lookups
                        .Where(x => (x.GroupName == "Cost Center" || x.GroupName == "SOL" || x.GroupName == "Bank" || x.GroupName == "Regional Office"
                        || x.GroupName == "Division" || x.GroupName == "District" || x.GroupName == "Upazila" || x.GroupName == "Thana"
                        || x.GroupName == "Premises Type for Accounts" || x.GroupName == "Sub Premises Type" || x.GroupName == "Payment Method") &&
                        x.Status == DTOBasic.active && x.IsDeleted == false).ToList();
                    //==Bank Info
                    ViewBag.BankInfoList = lstLookup.Where(x => x.GroupName == "Bank").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==CC Info
                    ViewBag.CCInfoList = lstLookup.Where(x => x.GroupName == "Cost Center").Select(x => new { CCSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==SOL Info
                    ViewBag.SOLInfoList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { SOLSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premise Type
                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();
                    //==Area Status
                    IList<SelectListItem> AreaStatusList = new List<SelectListItem>();
                    AreaStatusList.Add(new SelectListItem { Text = "Select Area Status", Value = "0" });
                    AreaStatusList.Add(new SelectListItem { Text = "Urban", Value = "Urban" });
                    AreaStatusList.Add(new SelectListItem { Text = "Rural", Value = "Rural" });
                    SelectList AreaStatus = new SelectList(AreaStatusList, "Value", "Text");
                    ViewBag.AreaStatusList = AreaStatus;
                    //==Regional Office 
                    ViewBag.RegionalOfficeList = lstLookup.Where(x => x.GroupName == "Regional Office").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Primary SOL 
                    ViewBag.PrimarySOLList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Attached Control
                    ViewBag.AttachedControlList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Division
                    ViewBag.DivisionList = lstLookup.Where(x => x.GroupName == "Division").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==District
                    ViewBag.DistrictList = lstLookup.Where(x => x.GroupName == "District").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Upazila
                    ViewBag.UpazilaList = lstLookup.Where(x => x.GroupName == "Upazila").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Thana
                    ViewBag.ThanaList = lstLookup.Where(x => x.GroupName == "Thana").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premises Type for Accounts
                    ViewBag.PremisesTypeforAccountsList = lstLookup.Where(x => x.GroupName == "Premises Type for Accounts").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Provided By
                    IList<SelectListItem> ProvidedByList = new List<SelectListItem>();
                    ProvidedByList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    ProvidedByList.Add(new SelectListItem { Text = "Company", Value = "1" });
                    ProvidedByList.Add(new SelectListItem { Text = "Landlord", Value = "2" });
                    ProvidedByList.Add(new SelectListItem { Text = "Others", Value = "3" });
                    SelectList ProvidedByStatus = new SelectList(ProvidedByList, "Value", "Text");
                    ViewBag.ProvidedByList = ProvidedByStatus;
                    //==Yes No
                    IList<SelectListItem> YesNoList = new List<SelectListItem>();
                    YesNoList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    YesNoList.Add(new SelectListItem { Text = "Yes", Value = "1" });
                    YesNoList.Add(new SelectListItem { Text = "No", Value = "2" });
                    SelectList YesNoStatus = new SelectList(YesNoList, "Value", "Text");
                    ViewBag.YesNoList = YesNoStatus;
                    //==Sub Premises Type
                    ViewBag.SubPremisesTypeList = lstLookup.Where(x => x.GroupName == "Sub Premises Type").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Payment Method
                    ViewBag.PaymentMethodList = lstLookup.Where(x => x.GroupName == "Payment Method").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Calculation Method
                    IList<SelectListItem> CalculationMethodList = new List<SelectListItem>();
                    CalculationMethodList.Add(new SelectListItem { Text = "Current Month", Value = "Current Month" });
                    CalculationMethodList.Add(new SelectListItem { Text = "Following Month", Value = "Following Month" });
                    SelectList CalculationMethod = new SelectList(CalculationMethodList, "Value", "Text");
                    ViewBag.CalculationMethodList = CalculationMethod;
                    //======Lookup
                    //==UOM
                    IList<SelectListItem> UOMList = new List<SelectListItem>();
                    UOMList.Add(new SelectListItem { Text = "Select Unit of Measurement", Value = "0" });
                    UOMList.Add(new SelectListItem { Text = "Square Feet", Value = "1" });
                    UOMList.Add(new SelectListItem { Text = "Square Meter", Value = "2" });
                    SelectList UOM = new SelectList(UOMList, "Value", "Text");
                    ViewBag.UOMList = UOM;
                    //==Tax Type
                    IList<SelectListItem> TaxTypeList = new List<SelectListItem>();
                    //TaxTypeList.Add(new SelectListItem { Text = "Select Tax Type", Value = "0" });
                    TaxTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList TaxType = new SelectList(TaxTypeList, "Value", "Text");
                    ViewBag.TaxTypeList = TaxType;
                    //==Vat Type
                    IList<SelectListItem> VatTypeList = new List<SelectListItem>();
                    //VatTypeList.Add(new SelectListItem { Text = "Select VAT Type", Value = "0" });
                    VatTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    VatTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    VatTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList VatType = new SelectList(VatTypeList, "Value", "Text");
                    ViewBag.VatTypeList = VatType;
                    //==Mode of Payment
                    IList<SelectListItem> ModeOfPaymentList = new List<SelectListItem>();
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Select Mode of Payment", Value = "0" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Account Transfer", Value = "Account Transfer" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "RTGS", Value = "RTGS" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "EFTN", Value = "EFTN" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Pay Order", Value = "Pay Order" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Cash", Value = "Cash" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "IBB Payment", Value = "IBB Payment" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Brokerage", Value = "City Brokerage" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Capital", Value = "City Capital" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Others", Value = "Others" });
                    SelectList ModeOfPayment = new SelectList(ModeOfPaymentList, "Value", "Text");
                    ViewBag.ModeOfPaymentList = ModeOfPayment;
                    //==Advance No
                    IList<SelectListItem> AdvanceNoList = new List<SelectListItem>();
                    AdvanceNoList.Add(new SelectListItem { Text = "Select Advance No", Value = "0" });
                    AdvanceNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    AdvanceNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    AdvanceNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    AdvanceNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    AdvanceNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    AdvanceNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    AdvanceNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    AdvanceNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    AdvanceNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    AdvanceNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList AdvanceNo = new SelectList(AdvanceNoList, "Value", "Text");
                    ViewBag.AdvanceNoList = AdvanceNo;
                    //==Review No
                    IList<SelectListItem> ReviewNoList = new List<SelectListItem>();
                    ReviewNoList.Add(new SelectListItem { Text = "Select Enhancement No", Value = "0" });
                    ReviewNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    ReviewNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    ReviewNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    ReviewNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    ReviewNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    ReviewNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    ReviewNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    ReviewNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    ReviewNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    ReviewNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList ReviewNo = new SelectList(ReviewNoList, "Value", "Text");
                    ViewBag.ReviewNoList = ReviewNo;
                    //==Space Info
                    List<RMS.Models.SpaceInfoDTO> lstSpace = new List<RMS.Models.SpaceInfoDTO>();
                    var querySpace = from SP in db.SpaceInfos
                                     where SP.AgreementSLNo == AgreementSLNo
                                     orderby SP.SpaceSLNo ascending
                                     select new
                                     {
                                         SP.SpaceType,
                                         SP.SpaceArea,
                                         SP.SpaceRate,
                                         SP.SpaceRent,
                                         SP.SpaceTotalAdvance,
                                         SP.SpaceTotalAdjustment,
                                         SP.SpaceRemarks,
                                     };
                    lstSpace = querySpace.AsEnumerable().Select(x => new RMS.Models.SpaceInfoDTO
                    {
                        SpaceType = x.SpaceType,
                        SpaceArea = x.SpaceArea,
                        SpaceRate = x.SpaceRate,
                        SpaceRent = x.SpaceRent,
                        SpaceTotalAdvance = x.SpaceTotalAdvance,
                        SpaceTotalAdjustment = x.SpaceTotalAdjustment,
                        SpaceRemarks = x.SpaceRemarks,
                    }).ToList();
                    if (lstSpace.Count > 0)
                    {
                        for (int i = 0; i < lstSpace.Count; i++)
                        {
                            lstSpace[i].SpaceRowNumber = "_" + (i + 1).ToString();
                            lstSpace[i].SpaceftrCount = lstSpace.Count;
                        }
                    }
                    ViewBag.lstSpace = lstSpace;
                    //==Advance Info
                    List<RMS.Models.AdvanceInfoDTO> lstAdvance = new List<RMS.Models.AdvanceInfoDTO>();
                    var queryAdvance = from Adv in db.AdvanceInfos
                                       where Adv.AgreementSLNo == AgreementSLNo
                                       orderby Adv.AdvanceSLNo ascending
                                       select new
                                       {
                                           Adv.AdvanceNo,
                                           Adv.AdvanceSlotPeriod,
                                           Adv.StartDate,
                                           Adv.EndDate,
                                           Adv.AdvanceNote,
                                           Adv.AdvanceSlotAmount,
                                       };
                    lstAdvance = queryAdvance.AsEnumerable().Select(x => new RMS.Models.AdvanceInfoDTO
                    {
                        AdvanceNo = x.AdvanceNo,
                        AdvanceSlotPeriod = x.AdvanceSlotPeriod,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        AdvanceNote = x.AdvanceNote,
                        AdvanceSlotAmount = x.AdvanceSlotAmount,
                    }).ToList();
                    if (lstAdvance.Count > 0)
                    {
                        for (int i = 0; i < lstAdvance.Count; i++)
                        {
                            lstAdvance[i].AdvanceRowNumber = "_" + (i + 1).ToString();
                            lstAdvance[i].AdvanceftrCount = lstAdvance.Count;
                        }
                    }
                    ViewBag.lstAdvance = lstAdvance;
                    //==Review Info
                    List<RMS.Models.ReviewInfoDTO> lstReview = new List<RMS.Models.ReviewInfoDTO>();
                    var queryReview = from RI in db.ReviewInfos
                                      where RI.AgreementSLNo == AgreementSLNo
                                      orderby RI.ReviewSLNo ascending
                                      select new
                                      {
                                          RI.ReviewNo,
                                          RI.StartDate,
                                          RI.EndDate,
                                          RI.Period,
                                          RI.IncreaseAmount,
                                          RI.IncreasePercentage,
                                          RI.ReviewNote,
                                      };
                    lstReview = queryReview.AsEnumerable().Select(x => new RMS.Models.ReviewInfoDTO
                    {
                        ReviewNo = x.ReviewNo,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        Period = x.Period,
                        IncreaseAmount = x.IncreaseAmount,
                        IncreasePercentage = x.IncreasePercentage,
                        ReviewNote = x.ReviewNote,
                    }).ToList();
                    if (lstReview.Count > 0)
                    {
                        for (int i = 0; i < lstReview.Count; i++)
                        {
                            lstReview[i].ReviewRowNumber = "_" + (i + 1).ToString();
                            lstReview[i].ReviewftrCount = lstReview.Count;
                        }
                    }
                    ViewBag.lstReview = lstReview;
                    //==Landlord Information
                    List<RMS.Models.LandlordInfoDTO> lstLandlord = new List<RMS.Models.LandlordInfoDTO>();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    var queryLandlord = from LI in db.LandlordInfos
                                        where LI.AgreementSLNo == AgreementSLNo && LI.IsOld == false
                                        orderby LI.LandlordSLNo ascending
                                        select new
                                        {
                                            //==Landlord Info
                                            LI.LandlordSLNo,
                                            LI.AgreementSLNo,
                                            LI.VendorCode,
                                            LI.LandlordName,
                                            LI.ModeOfPayment,
                                            LI.AdvancePC,
                                            LI.AdvanceAmount,
                                            LI.AdvanceAdjustmentPC,
                                            LI.AdvanceAdjustmentAmount,
                                            LI.TaxPC,
                                            LI.TaxAmount,
                                            LI.VATPC,
                                            LI.VATAmount,
                                            LI.RentPC,
                                            LI.RentAmount,
                                            LI.LLAddress,
                                            LI.LLContactNo,
                                            LI.LLEmail,
                                            LI.ACNo,
                                            LI.BankName,
                                            LI.BranchName,
                                            LI.RoutingNo,
                                        };
                    lstLandlord = queryLandlord.AsEnumerable().Select(x => new RMS.Models.LandlordInfoDTO
                    {
                        LandlordSLNo = x.AgreementSLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        VendorCode = x.VendorCode,
                        LandlordName = x.LandlordName,
                        ModeOfPayment = x.ModeOfPayment,
                        VendorAdvancePC = x.AdvancePC,
                        VendorAdvanceAmount = x.AdvanceAmount,
                        VendorAdvanceAdjustmentPC = x.AdvanceAdjustmentPC,
                        VendorAdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        VendorTaxPC = x.TaxPC,
                        VendorTaxAmount = x.TaxAmount,
                        VendorVATPC = x.VATPC,
                        VendorVATAmount = x.VATAmount,
                        VendorRentPC = x.RentPC,
                        VendorRentAmount = x.RentAmount,
                        LLAddress = x.LLAddress,
                        LLContactNo = x.LLContactNo,
                        LLEmail = x.LLEmail,
                        ACNo = x.ACNo,
                        BankName = x.BankName,
                        BranchName = x.BranchName,
                        RoutingNo = x.RoutingNo,
                    }).ToList();
                    if (lstLandlord.Count > 0)
                    {
                        for (int i = 0; i < lstLandlord.Count; i++)
                        {
                            lstLandlord[i].LIRowNumber = "_" + (i + 1).ToString();
                            lstLandlord[i].LIftrCount = lstLandlord.Count;
                            if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.RTGS) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.EFTN) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Cash) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Others) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstLandlord = lstLandlord;
                    //==Cost Allocation
                    List<RMS.Models.CostCenterInfoDTO> lstCC = new List<RMS.Models.CostCenterInfoDTO>();
                    var queryCC = from CC in db.CostCenterInfos
                                  where CC.AgreementSLNo == AgreementSLNo && CC.IsOld == false
                                  orderby CC.CCSLNo ascending
                                  select new
                                  {
                                      CC.CCCode,
                                      CC.CCName,
                                      CC.SOLCode,
                                      CC.SOLName,
                                      CC.CCShareAllotment,
                                      CC.CCText,
                                  };
                    lstCC = queryCC.AsEnumerable().Select(x => new RMS.Models.CostCenterInfoDTO
                    {
                        CCCode = x.CCCode,
                        CCName = x.CCName,
                        SOLCode = x.SOLCode,
                        SOLName = x.SOLName,
                        CCShareAllotment = x.CCShareAllotment,
                        CCText = x.CCText,
                    }).ToList();
                    if (lstCC.Count > 0)
                    {
                        for (int i = 0; i < lstCC.Count; i++)
                        {
                            lstCC[i].CCRowNumber = "_" + (i + 1).ToString();
                            lstCC[i].CCftrCount = lstCC.Count;
                        }
                    }
                    ViewBag.lstCC = lstCC;
                    //==Utility Information
                    List<RMS.Models.UtilityInfoDTO> lstUtility = new List<RMS.Models.UtilityInfoDTO>();
                    var queryUtility = from UI in db.UtilityInfos
                                       where UI.AgreementSLNo == AgreementSLNo && UI.IsOld == false
                                       orderby UI.UtilitySLNo ascending
                                       select new
                                       {
                                           //==Landlord Info
                                           UI.UtilitySLNo,
                                           UI.AgreementSLNo,
                                           UI.UtilityVendorCode,
                                           UI.UtilityLandlordName,
                                           UI.UtilityModeOfPayment,
                                           UI.ServiceChargePC,
                                           UI.ServiceChargeAmount,
                                           UI.OnlineTowerPC,
                                           UI.OnlineTowerAmount,
                                           UI.GeneratorSpacePC,
                                           UI.GeneratorSpaceAmount,
                                           UI.CarParkingPC,
                                           UI.CarParkingAmount,
                                           UI.TaxPC,
                                           UI.TaxAmount,
                                           UI.VATPC,
                                           UI.VATAmount,
                                           UI.UtilityAddress,
                                           UI.UtilityContactNo,
                                           UI.UtilityEmail,
                                           UI.UtilityACNo,
                                           UI.UtilityBankName,
                                           UI.UtilityBranchName,
                                           UI.UtilityRoutingNo,
                                       };
                    lstUtility = queryUtility.AsEnumerable().Select(x => new RMS.Models.UtilityInfoDTO
                    {
                        UtilitySLNo = x.UtilitySLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        UtilityVendorCode = x.UtilityVendorCode,
                        UtilityLandlordName = x.UtilityLandlordName,
                        UtilityModeOfPayment = x.UtilityModeOfPayment,
                        ServiceChargePC = x.ServiceChargePC,
                        ServiceChargeAmount = x.ServiceChargeAmount,
                        OnlineTowerPC = x.OnlineTowerPC,
                        OnlineTowerAmount = x.OnlineTowerAmount,
                        GeneratorSpacePC = x.GeneratorSpacePC,
                        GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                        CarParkingPC = x.CarParkingPC,
                        CarParkingAmount = x.CarParkingAmount,
                        UtilityTaxPC = x.TaxPC,
                        UtilityTaxAmount = x.TaxAmount,
                        UtilityVATPC = x.VATPC,
                        UtilityVATAmount = x.VATAmount,
                        UtilityAddress = x.UtilityAddress,
                        UtilityContactNo = x.UtilityContactNo,
                        UtilityEmail = x.UtilityEmail,
                        UtilityACNo = x.UtilityACNo,
                        UtilityBankName = x.UtilityBankName,
                        UtilityBranchName = x.UtilityBranchName,
                        UtilityRoutingNo = x.UtilityRoutingNo,
                    }).ToList();
                    if (lstUtility.Count > 0)
                    {
                        for (int i = 0; i < lstUtility.Count; i++)
                        {
                            lstUtility[i].UtilityRowNumber = "_" + (i + 1).ToString();
                            lstUtility[i].UtilityftrCount = lstUtility.Count;
                            if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.RTGS) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.EFTN) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Cash) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Others) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstUtility = lstUtility;
                    //==Attach Documents
                    List<RMS.Models.FileUploadInfoDTO> lstFU = new List<RMS.Models.FileUploadInfoDTO>();
                    var queryFU = from FU in db.FileUploadInfos
                                  where FU.AgreementSLNo == AgreementSLNo
                                  orderby FU.SLNo ascending
                                  select new
                                  {
                                      FU.SLNo,
                                      FU.FileName,
                                  };
                    lstFU = queryFU.AsEnumerable().Select(x => new RMS.Models.FileUploadInfoDTO
                    {
                        SLNo = x.SLNo,
                        FileName = x.FileName,
                    }).ToList();
                    if (lstFU.Count > 0)
                    {
                        for (int i = 0; i < lstFU.Count; i++)
                        {
                            lstFU[i].FURowNumber = "_" + (i + 1).ToString();
                            lstFU[i].FUftrCount = lstFU.Count;
                        }
                    }
                    ViewBag.lstFU = lstFU;
                    //==Agreement Info
                    List<RMS.Models.AgreementInfoDTO> lstAgreement = new List<RMS.Models.AgreementInfoDTO>();
                    var query = from AI in db.AgreementInfos
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                where AI.AgreementSLNo == AgreementSLNo
                                select new
                                {
                                    AI.AgreementSLNo,
                                    AI.xModifiedAgreementSLNo,
                                    AI.yModifiedAgreementSLNo,
                                    //==Basic Info
                                    AI.PremiseTypeSLNo,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.PremiseAddress,
                                    AI.ConcernBranch,
                                    AI.InspectorName,
                                    AI.InspectorContactNo,
                                    AI.ClusterGroup,
                                    //==Agreement Info
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.AgreementStartDate,
                                    AI.AgreementEndDate,
                                    AI.AgreementPeriod,
                                    AI.RenewalFrequency,
                                    AI.RentDueDay,
                                    AI.UOM,
                                    AI.TotalArea,
                                    AI.CostPerUnit,
                                    AI.TotalRentAmount,
                                    AI.SecurityDepositAmount,
                                    AI.AdvanceAmount,
                                    AI.AdditionalAdvanceAmount,
                                    AI.AdvanceAdjustmentPeriod,
                                    AI.AdvanceAdjustmentAmount,
                                    AI.TaxPercentage,
                                    RentTaxAmount = AI.TaxAmount,
                                    AI.VATPercentage,
                                    RentVATAMount = AI.VATAmount,
                                    AI.ServiceCharge,
                                    AI.OnlineTower,
                                    AI.GeneratorSpace,
                                    AI.CarParking,
                                    AI.NetRentAmount,
                                    AI.AgreementStatus,
                                    AI.AgreementText,
                                    AI.Status,
                                    AI.UserSLNo,
                                    AI.EntryDate,
                                    AI.IsDeleted,
                                    S.StatusName,
                                    AI.ReviewFrequency,
                                    AI.ReviewPercentage,
                                    AI.TaxType,
                                    AI.VatType,
                                    //==Control Data
                                    AI.CashGLCode,
                                    AI.BankGLCode,
                                    AI.AdvanceGLCode,
                                    AI.AdvanceAdjustmentGLCode,
                                    AI.RentGLCode,
                                    AI.ServiceChargeGLCode,
                                    AI.TaxGLCode,
                                    AI.VATGLCode,
                                    AI.ProvisionGLTax,
                                    AI.ProvisionGLAP,
                                    AI.RTGSGL,
                                    AI.EFTNGL,
                                    AI.PayOrderGL,
                                    AI.IBBPaymentGL,
                                    AI.CityBrokerageGL,
                                    AI.CityCapitalGL,
                                    AI.OthersGL,
                                    //====
                                    AI.PremiseAddressBangla,
                                    AI.AreaStatus,
                                    AI.RegionalOffice,
                                    AI.PrimarySOL,
                                    AI.AttachedControl,
                                    AI.ControllerOfficeDistance,
                                    AI.RoutingNumber,
                                    AI.Division,
                                    AI.District,
                                    AI.Upazila,
                                    AI.Thana,
                                    AI.ThanaCode,
                                    AI.Pourasabha,
                                    AI.PourasabhaType,
                                    AI.UnionName,
                                    AI.WardNo,
                                    AI.PremisesTypeforAccounts,
                                    AI.ParentAgreementCode,
                                    AI.ElectricityLoad,
                                    AI.ElectricityProvidedBy,
                                    AI.AITBourneBy,
                                    AI.CommercialPermission,
                                    AI.BuildingPlan,
                                    AI.PremisesSituatedFloor,
                                    AI.BangladeshBankApproval,
                                    AI.BangladeshBankReference,
                                    AI.ITTowerRentClause,
                                    AI.TerminationClause,
                                    AI.TerminationNoticePeriod,
                                    AI.PremisesOpeningDate,
                                    AI.DocumentDate,
                                    AI.Remarks,
                                    AI.AgreementRemarks,
                                    AI.AdvanceRemarks,
                                    AI.ReviewRemarks,
                                    AI.LLRemarks,
                                    AI.CCRemarks,
                                    AI.UtilityRemarks,
                                    AI.ControlDataRemarks,
                                    //====
                                    AI.BorrowingRate,
                                    AI.PaymentMethod,
                                    AI.IsIFRSEnable,
                                    AI.CalculationMethod,
                                    AI.WithHoldingCode,
                                    AI.AdditionalExpense,
                                    AI.InitialDirectCost,
                                    AI.DismantlingCost,
                                    AI.CarParkingNo,
                                    AI.WaterBillType,
                                    AI.WaterBillAmount,
                                    AI.IFRSEffectiveDate,
                                    AI.CorporateTaxRate,
                                };
                    lstAgreement = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        xModifiedAgreementSLNo = x.xModifiedAgreementSLNo,
                        yModifiedAgreementSLNo = x.yModifiedAgreementSLNo,
                        //==Basic Info
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        ConcernBranch = x.ConcernBranch,
                        InspectorName = x.InspectorName,
                        InspectorContactNo = x.InspectorContactNo,
                        ClusterGroup = x.ClusterGroup,
                        //==Agreement Info
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        RenewalFrequency = x.RenewalFrequency,
                        RentDueDay = x.RentDueDay,
                        UOM = x.UOM,
                        TotalArea = x.TotalArea,
                        CostPerUnit = x.CostPerUnit,
                        RentAmount = x.TotalArea * x.CostPerUnit,
                        TotalRentAmount = x.TotalRentAmount,
                        SecurityDepositAmount = x.SecurityDepositAmount,
                        AdvanceAmount = x.AdvanceAmount,
                        AdditionalAdvanceAmount = x.AdditionalAdvanceAmount,
                        AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                        AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        TaxPercentage = x.TaxPercentage,
                        TaxAmount = x.RentTaxAmount,
                        VATPercentage = x.VATPercentage,
                        VATAmount = x.RentVATAMount,
                        ServiceCharge = x.ServiceCharge,
                        OnlineTower = x.OnlineTower,
                        GeneratorSpace = x.GeneratorSpace,
                        CarParking = x.CarParking,
                        NetRentAmount = x.NetRentAmount,
                        AgreementStatus = x.AgreementStatus,
                        AgreementText = x.AgreementText,
                        Status = x.Status,
                        UserSLNo = x.UserSLNo,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        IsDeleted = x.IsDeleted,
                        StatusName = x.StatusName,
                        ReviewFrequency = x.ReviewFrequency,
                        ReviewPercentage = x.ReviewPercentage,
                        TaxType = x.TaxType,
                        xTaxType = x.TaxType,
                        VatType = x.VatType,
                        //==Control Data
                        CashGLCode = x.CashGLCode,
                        BankGLCode = x.BankGLCode,
                        AdvanceGLCode = x.AdvanceGLCode,
                        AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                        RentGLCode = x.RentGLCode,
                        ServiceChargeGLCode = x.ServiceChargeGLCode,
                        TaxGLCode = x.TaxGLCode,
                        VATGLCode = x.VATGLCode,
                        ProvisionGLTax = x.ProvisionGLTax,
                        ProvisionGLAP = x.ProvisionGLAP,
                        RTGSGL = x.RTGSGL,
                        EFTNGL = x.EFTNGL,
                        PayOrderGL = x.PayOrderGL,
                        IBBPaymentGL = x.IBBPaymentGL,
                        CityBrokerageGL = x.CityBrokerageGL,
                        CityCapitalGL = x.CityCapitalGL,
                        OthersGL = x.OthersGL,
                        SpaceftrCount = lstSpace.Count(),
                        RIftrCount = lstReview.Count(),
                        LIftrCount = lstLandlord.Count(),
                        CCftrCount = lstCC.Count(),
                        UIftrCount = lstUtility.Count(),
                        //======
                        PremiseAddressBangla = x.PremiseAddressBangla,
                        AreaStatus = x.AreaStatus,
                        RegionalOffice = x.RegionalOffice,
                        PrimarySOL = x.PrimarySOL,
                        AttachedControl = x.AttachedControl,
                        ControllerOfficeDistance = x.ControllerOfficeDistance,
                        RoutingNumber = x.RoutingNumber,
                        Division = x.Division,
                        District = x.District,
                        Upazila = x.Upazila,
                        Thana = x.Thana,
                        ThanaCode = x.ThanaCode,
                        Pourasabha = x.Pourasabha,
                        PourasabhaType = x.PourasabhaType,
                        UnionName = x.UnionName,
                        WardNo = x.WardNo,
                        PremisesTypeforAccounts = x.PremisesTypeforAccounts,
                        ParentAgreementCode = x.ParentAgreementCode,
                        ElectricityLoad = x.ElectricityLoad,
                        ElectricityProvidedBy = x.ElectricityProvidedBy,
                        AITBourneBy = x.AITBourneBy,
                        CommercialPermission = x.CommercialPermission,
                        BuildingPlan = x.BuildingPlan,
                        PremisesSituatedFloor = x.PremisesSituatedFloor,
                        BangladeshBankApproval = x.BangladeshBankApproval,
                        BangladeshBankReference = x.BangladeshBankReference,
                        ITTowerRentClause = x.ITTowerRentClause,
                        TerminationClause = x.TerminationClause,
                        TerminationNoticePeriod = x.TerminationNoticePeriod,
                        PremisesOpeningDate = x.PremisesOpeningDate?.ToString("dd/MM/yyyy"),
                        DocumentDate = x.DocumentDate?.ToString("dd/MM/yyyy"),
                        Remarks = x.Remarks,
                        AgreementRemarks = x.AgreementRemarks,
                        AdvanceRemarks = x.AdvanceRemarks,
                        ReviewRemarks = x.ReviewRemarks,
                        LLRemarks = x.LLRemarks,
                        CCRemarks = x.CCRemarks,
                        UtilityRemarks = x.UtilityRemarks,
                        ControlDataRemarks = x.ControlDataRemarks,
                        //======
                        BorrowingRate = x.BorrowingRate,
                        PaymentMethod = x.PaymentMethod,
                        IsIFRSEnable = x.IsIFRSEnable,
                        CalculationMethod = x.CalculationMethod,
                        WithHoldingCode = x.WithHoldingCode,
                        AdditionalExpense = x.AdditionalExpense,
                        InitialDirectCost = x.InitialDirectCost,
                        DismantlingCost = x.DismantlingCost,
                        CarParkingNo = x.CarParkingNo,
                        WaterBillType = x.WaterBillType,
                        WaterBillAmount = x.WaterBillAmount,
                        IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        CorporateTaxRate = x.CorporateTaxRate,
                    }).ToList();
                    int xModifiedAgreementSLNo = lstAgreement[0].xModifiedAgreementSLNo;
                    //ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementSLNo == xModifiedAgreementSLNo ||
                    //(x.AgreementStatus == AgreementStatus.Activate
                    //        && x.IsBlock == false && x.IsRenewal == false && x.IsModified == false && x.AgreementEndDate > DateTime.Now))
                    //            .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderBy(x => x.AgreementCode).ToList();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementSLNo == xModifiedAgreementSLNo)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();
                    return View(AgreementInfoPath.ModEdit, lstAgreement);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectModifiedCreate(int AgreementSLNo)
        {
            TempData.Remove("AgreementSLNo");
            TempData.Add("AgreementSLNo", AgreementSLNo);
            return RedirectToAction("ModifiedCreate");
        }

        [HttpGet]
        public ActionResult ModifiedCreate()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strAgreementSLNo = TempData["AgreementSLNo"];
                    if (strAgreementSLNo == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int AgreementSLNo = Convert.ToInt32(strAgreementSLNo);
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    DTOBasic DTOBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.URLPath = "AgreementInfo/RedirectModAgreementIndex?ViewID=1";
                    //==Water Bill Type meter reading
                    IList<SelectListItem> WaterBillTypeList = new List<SelectListItem>();
                    WaterBillTypeList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Meter Reading", Value = "Meter Reading" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Fixed Value", Value = "Fixed Value" });
                    SelectList WaterBillTypeStatus = new SelectList(WaterBillTypeList, "Value", "Text");
                    ViewBag.WaterBillTypeList = WaterBillTypeStatus;
                    //======Lookup
                    var lstLookup = db.Lookups
                        .Where(x => (x.GroupName == "Cost Center" || x.GroupName == "SOL" || x.GroupName == "Bank" || x.GroupName == "Regional Office"
                        || x.GroupName == "Division" || x.GroupName == "District" || x.GroupName == "Upazila" || x.GroupName == "Thana"
                        || x.GroupName == "Premises Type for Accounts" || x.GroupName == "Sub Premises Type" || x.GroupName == "Payment Method") &&
                        x.Status == DTOBasic.active && x.IsDeleted == false).ToList();
                    //==Bank Info
                    ViewBag.BankInfoList = lstLookup.Where(x => x.GroupName == "Bank").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==CC Info
                    ViewBag.CCInfoList = lstLookup.Where(x => x.GroupName == "Cost Center").Select(x => new { CCSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==SOL Info
                    ViewBag.SOLInfoList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { SOLSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premise Type
                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();
                    //==Area Status
                    IList<SelectListItem> AreaStatusList = new List<SelectListItem>();
                    AreaStatusList.Add(new SelectListItem { Text = "Select Area Status", Value = "0" });
                    AreaStatusList.Add(new SelectListItem { Text = "Urban", Value = "Urban" });
                    AreaStatusList.Add(new SelectListItem { Text = "Rural", Value = "Rural" });
                    SelectList AreaStatus = new SelectList(AreaStatusList, "Value", "Text");
                    ViewBag.AreaStatusList = AreaStatus;
                    //==Regional Office 
                    ViewBag.RegionalOfficeList = lstLookup.Where(x => x.GroupName == "Regional Office").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Primary SOL 
                    ViewBag.PrimarySOLList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Attached Control
                    ViewBag.AttachedControlList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Division
                    ViewBag.DivisionList = lstLookup.Where(x => x.GroupName == "Division").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==District
                    ViewBag.DistrictList = lstLookup.Where(x => x.GroupName == "District").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Upazila
                    ViewBag.UpazilaList = lstLookup.Where(x => x.GroupName == "Upazila").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Thana
                    ViewBag.ThanaList = lstLookup.Where(x => x.GroupName == "Thana").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premises Type for Accounts
                    ViewBag.PremisesTypeforAccountsList = lstLookup.Where(x => x.GroupName == "Premises Type for Accounts").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Provided By
                    IList<SelectListItem> ProvidedByList = new List<SelectListItem>();
                    ProvidedByList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    ProvidedByList.Add(new SelectListItem { Text = "Company", Value = "1" });
                    ProvidedByList.Add(new SelectListItem { Text = "Landlord", Value = "2" });
                    ProvidedByList.Add(new SelectListItem { Text = "Others", Value = "3" });
                    SelectList ProvidedByStatus = new SelectList(ProvidedByList, "Value", "Text");
                    ViewBag.ProvidedByList = ProvidedByStatus;
                    //==Yes No
                    IList<SelectListItem> YesNoList = new List<SelectListItem>();
                    YesNoList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    YesNoList.Add(new SelectListItem { Text = "Yes", Value = "1" });
                    YesNoList.Add(new SelectListItem { Text = "No", Value = "2" });
                    SelectList YesNoStatus = new SelectList(YesNoList, "Value", "Text");
                    ViewBag.YesNoList = YesNoStatus;
                    //==Sub Premises Type
                    ViewBag.SubPremisesTypeList = lstLookup.Where(x => x.GroupName == "Sub Premises Type").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Payment Method
                    ViewBag.PaymentMethodList = lstLookup.Where(x => x.GroupName == "Payment Method").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Calculation Method
                    IList<SelectListItem> CalculationMethodList = new List<SelectListItem>();
                    CalculationMethodList.Add(new SelectListItem { Text = "Current Month", Value = "Current Month" });
                    CalculationMethodList.Add(new SelectListItem { Text = "Following Month", Value = "Following Month" });
                    SelectList CalculationMethod = new SelectList(CalculationMethodList, "Value", "Text");
                    ViewBag.CalculationMethodList = CalculationMethod;
                    //======Lookup
                    //==UOM
                    IList<SelectListItem> UOMList = new List<SelectListItem>();
                    UOMList.Add(new SelectListItem { Text = "Select Unit of Measurement", Value = "0" });
                    UOMList.Add(new SelectListItem { Text = "Square Feet", Value = "1" });
                    UOMList.Add(new SelectListItem { Text = "Square Meter", Value = "2" });
                    SelectList UOM = new SelectList(UOMList, "Value", "Text");
                    ViewBag.UOMList = UOM;
                    //==Tax Type
                    IList<SelectListItem> TaxTypeList = new List<SelectListItem>();
                    //TaxTypeList.Add(new SelectListItem { Text = "Select Tax Type", Value = "0" });
                    TaxTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList TaxType = new SelectList(TaxTypeList, "Value", "Text");
                    ViewBag.TaxTypeList = TaxType;
                    //==Vat Type
                    IList<SelectListItem> VatTypeList = new List<SelectListItem>();
                    //VatTypeList.Add(new SelectListItem { Text = "Select VAT Type", Value = "0" });
                    VatTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    VatTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    VatTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList VatType = new SelectList(VatTypeList, "Value", "Text");
                    ViewBag.VatTypeList = VatType;
                    //==Mode of Payment
                    IList<SelectListItem> ModeOfPaymentList = new List<SelectListItem>();
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Select Mode of Payment", Value = "0" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Account Transfer", Value = "Account Transfer" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "RTGS", Value = "RTGS" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "EFTN", Value = "EFTN" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Pay Order", Value = "Pay Order" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Cash", Value = "Cash" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "IBB Payment", Value = "IBB Payment" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Brokerage", Value = "City Brokerage" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Capital", Value = "City Capital" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Others", Value = "Others" });
                    SelectList ModeOfPayment = new SelectList(ModeOfPaymentList, "Value", "Text");
                    ViewBag.ModeOfPaymentList = ModeOfPayment;
                    //==Advance No
                    IList<SelectListItem> AdvanceNoList = new List<SelectListItem>();
                    AdvanceNoList.Add(new SelectListItem { Text = "Select Advance No", Value = "0" });
                    AdvanceNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    AdvanceNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    AdvanceNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    AdvanceNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    AdvanceNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    AdvanceNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    AdvanceNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    AdvanceNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    AdvanceNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    AdvanceNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList AdvanceNo = new SelectList(AdvanceNoList, "Value", "Text");
                    ViewBag.AdvanceNoList = AdvanceNo;
                    //==Review No
                    IList<SelectListItem> ReviewNoList = new List<SelectListItem>();
                    ReviewNoList.Add(new SelectListItem { Text = "Select Enhancement No", Value = "0" });
                    ReviewNoList.Add(new SelectListItem { Text = "1", Value = "1" });
                    ReviewNoList.Add(new SelectListItem { Text = "2", Value = "2" });
                    ReviewNoList.Add(new SelectListItem { Text = "3", Value = "3" });
                    ReviewNoList.Add(new SelectListItem { Text = "4", Value = "4" });
                    ReviewNoList.Add(new SelectListItem { Text = "5", Value = "5" });
                    ReviewNoList.Add(new SelectListItem { Text = "6", Value = "6" });
                    ReviewNoList.Add(new SelectListItem { Text = "7", Value = "7" });
                    ReviewNoList.Add(new SelectListItem { Text = "8", Value = "8" });
                    ReviewNoList.Add(new SelectListItem { Text = "9", Value = "9" });
                    ReviewNoList.Add(new SelectListItem { Text = "10", Value = "10" });
                    SelectList ReviewNo = new SelectList(ReviewNoList, "Value", "Text");
                    ViewBag.ReviewNoList = ReviewNo;
                    //==Dropdown Reference Agreement
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementSLNo == AgreementSLNo)
                            .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();
                    //==Space Info
                    List<RMS.Models.SpaceInfoDTO> lstSpace = new List<RMS.Models.SpaceInfoDTO>();
                    var querySpace = from SP in db.SpaceInfos
                                     where SP.AgreementSLNo == AgreementSLNo
                                     orderby SP.SpaceSLNo ascending
                                     select new
                                     {
                                         SP.SpaceType,
                                         SP.SpaceArea,
                                         SP.SpaceRate,
                                         SP.SpaceRent,
                                         SP.SpaceTotalAdvance,
                                         SP.SpaceTotalAdjustment,
                                         SP.SpaceRemarks,
                                     };
                    lstSpace = querySpace.AsEnumerable().Select(x => new RMS.Models.SpaceInfoDTO
                    {
                        SpaceType = x.SpaceType,
                        SpaceArea = x.SpaceArea,
                        SpaceRate = x.SpaceRate,
                        SpaceRent = x.SpaceRent,
                        SpaceTotalAdvance = x.SpaceTotalAdvance,
                        SpaceTotalAdjustment = x.SpaceTotalAdjustment,
                        SpaceRemarks = x.SpaceRemarks,
                    }).ToList();
                    if (lstSpace.Count > 0)
                    {
                        for (int i = 0; i < lstSpace.Count; i++)
                        {
                            lstSpace[i].SpaceRowNumber = "_" + (i + 1).ToString();
                            lstSpace[i].SpaceftrCount = lstSpace.Count;
                        }
                    }
                    ViewBag.lstSpace = lstSpace;
                    //==Advance Info
                    List<RMS.Models.AdvanceInfoDTO> lstAdvance = new List<RMS.Models.AdvanceInfoDTO>();
                    var queryAdvance = from Adv in db.AdvanceInfos
                                       where Adv.AgreementSLNo == AgreementSLNo
                                       orderby Adv.AdvanceSLNo ascending
                                       select new
                                       {
                                           Adv.AdvanceNo,
                                           Adv.AdvanceSlotPeriod,
                                           Adv.StartDate,
                                           Adv.EndDate,
                                           Adv.AdvanceNote,
                                           Adv.AdvanceSlotAmount,
                                       };
                    lstAdvance = queryAdvance.AsEnumerable().Select(x => new RMS.Models.AdvanceInfoDTO
                    {
                        AdvanceNo = x.AdvanceNo,
                        AdvanceSlotPeriod = x.AdvanceSlotPeriod,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        AdvanceNote = x.AdvanceNote,
                        AdvanceSlotAmount = x.AdvanceSlotAmount,
                    }).ToList();
                    if (lstAdvance.Count > 0)
                    {
                        for (int i = 0; i < lstAdvance.Count; i++)
                        {
                            lstAdvance[i].AdvanceRowNumber = "_" + (i + 1).ToString();
                            lstAdvance[i].AdvanceftrCount = lstAdvance.Count;
                        }
                    }
                    ViewBag.lstAdvance = lstAdvance;
                    //==Review Info
                    List<RMS.Models.ReviewInfoDTO> lstReview = new List<RMS.Models.ReviewInfoDTO>();
                    var queryReview = from RI in db.ReviewInfos
                                      where RI.AgreementSLNo == AgreementSLNo
                                      orderby RI.ReviewSLNo ascending
                                      select new
                                      {
                                          RI.ReviewNo,
                                          RI.StartDate,
                                          RI.EndDate,
                                          RI.Period,
                                          RI.IncreaseAmount,
                                          RI.IncreasePercentage,
                                          RI.ReviewNote,
                                      };
                    lstReview = queryReview.AsEnumerable().Select(x => new RMS.Models.ReviewInfoDTO
                    {
                        ReviewNo = x.ReviewNo,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        Period = x.Period,
                        IncreaseAmount = x.IncreaseAmount,
                        IncreasePercentage = x.IncreasePercentage,
                        ReviewNote = x.ReviewNote,
                    }).ToList();
                    if (lstReview.Count > 0)
                    {
                        for (int i = 0; i < lstReview.Count; i++)
                        {
                            lstReview[i].ReviewRowNumber = "_" + (i + 1).ToString();
                            lstReview[i].ReviewftrCount = lstReview.Count;
                        }
                    }
                    ViewBag.lstReview = lstReview;
                    //==Landlord Information
                    List<RMS.Models.LandlordInfoDTO> lstLandlord = new List<RMS.Models.LandlordInfoDTO>();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    var queryLandlord = from LI in db.LandlordInfos
                                        where LI.AgreementSLNo == AgreementSLNo && LI.IsOld == false
                                        orderby LI.LandlordSLNo ascending
                                        select new
                                        {
                                            //==Landlord Info
                                            LI.LandlordSLNo,
                                            LI.AgreementSLNo,
                                            LI.VendorCode,
                                            LI.LandlordName,
                                            LI.ModeOfPayment,
                                            LI.AdvancePC,
                                            LI.AdvanceAmount,
                                            LI.AdvanceAdjustmentPC,
                                            LI.AdvanceAdjustmentAmount,
                                            LI.TaxPC,
                                            LI.TaxAmount,
                                            LI.VATPC,
                                            LI.VATAmount,
                                            LI.RentPC,
                                            LI.RentAmount,
                                            LI.LLAddress,
                                            LI.LLContactNo,
                                            LI.LLEmail,
                                            LI.ACNo,
                                            LI.BankName,
                                            LI.BranchName,
                                            LI.RoutingNo,
                                        };
                    lstLandlord = queryLandlord.AsEnumerable().Select(x => new RMS.Models.LandlordInfoDTO
                    {
                        LandlordSLNo = x.AgreementSLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        VendorCode = x.VendorCode,
                        LandlordName = x.LandlordName,
                        ModeOfPayment = x.ModeOfPayment,
                        VendorAdvancePC = x.AdvancePC,
                        VendorAdvanceAmount = x.AdvanceAmount,
                        VendorAdvanceAdjustmentPC = x.AdvanceAdjustmentPC,
                        VendorAdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        VendorTaxPC = x.TaxPC,
                        VendorTaxAmount = x.TaxAmount,
                        VendorVATPC = x.VATPC,
                        VendorVATAmount = x.VATAmount,
                        VendorRentPC = x.RentPC,
                        VendorRentAmount = x.RentAmount,
                        LLAddress = x.LLAddress,
                        LLContactNo = x.LLContactNo,
                        LLEmail = x.LLEmail,
                        ACNo = x.ACNo,
                        BankName = x.BankName,
                        BranchName = x.BranchName,
                        RoutingNo = x.RoutingNo,
                    }).ToList();
                    if (lstLandlord.Count > 0)
                    {
                        for (int i = 0; i < lstLandlord.Count; i++)
                        {
                            lstLandlord[i].LIRowNumber = "_" + (i + 1).ToString();
                            lstLandlord[i].LIftrCount = lstLandlord.Count;
                            if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.RTGS) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.EFTN) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Cash) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Others) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstLandlord = lstLandlord;
                    //==Cost Allocation
                    List<RMS.Models.CostCenterInfoDTO> lstCC = new List<RMS.Models.CostCenterInfoDTO>();
                    var queryCC = from CC in db.CostCenterInfos
                                  where CC.AgreementSLNo == AgreementSLNo && CC.IsOld == false
                                  orderby CC.CCSLNo ascending
                                  select new
                                  {
                                      CC.CCCode,
                                      CC.CCName,
                                      CC.SOLCode,
                                      CC.SOLName,
                                      CC.CCShareAllotment,
                                      CC.CCText,
                                  };
                    lstCC = queryCC.AsEnumerable().Select(x => new RMS.Models.CostCenterInfoDTO
                    {
                        CCCode = x.CCCode,
                        CCName = x.CCName,
                        SOLCode = x.SOLCode,
                        SOLName = x.SOLName,
                        CCShareAllotment = x.CCShareAllotment,
                        CCText = x.CCText,
                    }).ToList();
                    if (lstCC.Count > 0)
                    {
                        for (int i = 0; i < lstCC.Count; i++)
                        {
                            lstCC[i].CCRowNumber = "_" + (i + 1).ToString();
                            lstCC[i].CCftrCount = lstCC.Count;
                        }
                    }
                    ViewBag.lstCC = lstCC;
                    //==Utility Information
                    List<RMS.Models.UtilityInfoDTO> lstUtility = new List<RMS.Models.UtilityInfoDTO>();
                    var queryUtility = from UI in db.UtilityInfos
                                       where UI.AgreementSLNo == AgreementSLNo && UI.IsOld == false
                                       orderby UI.UtilitySLNo ascending
                                       select new
                                       {
                                           //==Landlord Info
                                           UI.UtilitySLNo,
                                           UI.AgreementSLNo,
                                           UI.UtilityVendorCode,
                                           UI.UtilityLandlordName,
                                           UI.UtilityModeOfPayment,
                                           UI.ServiceChargePC,
                                           UI.ServiceChargeAmount,
                                           UI.OnlineTowerPC,
                                           UI.OnlineTowerAmount,
                                           UI.GeneratorSpacePC,
                                           UI.GeneratorSpaceAmount,
                                           UI.CarParkingPC,
                                           UI.CarParkingAmount,
                                           UI.TaxPC,
                                           UI.TaxAmount,
                                           UI.VATPC,
                                           UI.VATAmount,
                                           UI.UtilityAddress,
                                           UI.UtilityContactNo,
                                           UI.UtilityEmail,
                                           UI.UtilityACNo,
                                           UI.UtilityBankName,
                                           UI.UtilityBranchName,
                                           UI.UtilityRoutingNo,
                                       };
                    lstUtility = queryUtility.AsEnumerable().Select(x => new RMS.Models.UtilityInfoDTO
                    {
                        UtilitySLNo = x.UtilitySLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        UtilityVendorCode = x.UtilityVendorCode,
                        UtilityLandlordName = x.UtilityLandlordName,
                        UtilityModeOfPayment = x.UtilityModeOfPayment,
                        ServiceChargePC = x.ServiceChargePC,
                        ServiceChargeAmount = x.ServiceChargeAmount,
                        OnlineTowerPC = x.OnlineTowerPC,
                        OnlineTowerAmount = x.OnlineTowerAmount,
                        GeneratorSpacePC = x.GeneratorSpacePC,
                        GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                        CarParkingPC = x.CarParkingPC,
                        CarParkingAmount = x.CarParkingAmount,
                        UtilityTaxPC = x.TaxPC,
                        UtilityTaxAmount = x.TaxAmount,
                        UtilityVATPC = x.VATPC,
                        UtilityVATAmount = x.VATAmount,
                        UtilityAddress = x.UtilityAddress,
                        UtilityContactNo = x.UtilityContactNo,
                        UtilityEmail = x.UtilityEmail,
                        UtilityACNo = x.UtilityACNo,
                        UtilityBankName = x.UtilityBankName,
                        UtilityBranchName = x.UtilityBranchName,
                        UtilityRoutingNo = x.UtilityRoutingNo,
                    }).ToList();
                    if (lstUtility.Count > 0)
                    {
                        for (int i = 0; i < lstUtility.Count; i++)
                        {
                            lstUtility[i].UtilityRowNumber = "_" + (i + 1).ToString();
                            lstUtility[i].UtilityftrCount = lstUtility.Count;
                            if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.RTGS) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.EFTN) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Cash) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Others) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstUtility = lstUtility;
                    //==Attach Documents
                    List<RMS.Models.FileUploadInfoDTO> lstFU = new List<RMS.Models.FileUploadInfoDTO>();
                    var queryFU = from FU in db.FileUploadInfos
                                  where FU.AgreementSLNo == AgreementSLNo
                                  orderby FU.SLNo ascending
                                  select new
                                  {
                                      FU.SLNo,
                                      FU.FileName,
                                  };
                    lstFU = queryFU.AsEnumerable().Select(x => new RMS.Models.FileUploadInfoDTO
                    {
                        SLNo = x.SLNo,
                        FileName = x.FileName,
                    }).ToList();
                    if (lstFU.Count > 0)
                    {
                        for (int i = 0; i < lstFU.Count; i++)
                        {
                            lstFU[i].FURowNumber = "_" + (i + 1).ToString();
                            lstFU[i].FUftrCount = lstFU.Count;
                        }
                    }
                    ViewBag.lstFU = lstFU;
                    //==Agreement Info
                    List<RMS.Models.AgreementInfoDTO> lstAgreement = new List<RMS.Models.AgreementInfoDTO>();
                    var query = from AI in db.AgreementInfos
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                where AI.AgreementSLNo == AgreementSLNo
                                select new
                                {
                                    AI.AgreementSLNo,
                                    AI.xModifiedAgreementSLNo,
                                    //==Basic Info
                                    AI.PremiseTypeSLNo,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.PremiseAddress,
                                    AI.ConcernBranch,
                                    AI.InspectorName,
                                    AI.InspectorContactNo,
                                    AI.ClusterGroup,
                                    //==Agreement Info
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.AgreementStartDate,
                                    AI.AgreementEndDate,
                                    AI.AgreementPeriod,
                                    AI.RenewalFrequency,
                                    AI.RentDueDay,
                                    AI.UOM,
                                    AI.TotalArea,
                                    AI.CostPerUnit,
                                    AI.TotalRentAmount,
                                    AI.SecurityDepositAmount,
                                    AI.AdvanceAmount,
                                    AI.AdditionalAdvanceAmount,
                                    AI.AdvanceAdjustmentPeriod,
                                    AI.AdvanceAdjustmentAmount,
                                    AI.TaxPercentage,
                                    RentTaxAmount = AI.TaxAmount,
                                    AI.VATPercentage,
                                    RentVATAMount = AI.VATAmount,
                                    AI.ServiceCharge,
                                    AI.OnlineTower,
                                    AI.GeneratorSpace,
                                    AI.CarParking,
                                    AI.NetRentAmount,
                                    AI.AgreementStatus,
                                    AI.AgreementText,
                                    AI.Status,
                                    AI.UserSLNo,
                                    AI.EntryDate,
                                    AI.IsDeleted,
                                    S.StatusName,
                                    AI.ReviewFrequency,
                                    AI.ReviewPercentage,
                                    AI.TaxType,
                                    AI.VatType,
                                    //==Control Data
                                    AI.CashGLCode,
                                    AI.BankGLCode,
                                    AI.AdvanceGLCode,
                                    AI.AdvanceAdjustmentGLCode,
                                    AI.RentGLCode,
                                    AI.ServiceChargeGLCode,
                                    AI.TaxGLCode,
                                    AI.VATGLCode,
                                    AI.ProvisionGLTax,
                                    AI.ProvisionGLAP,
                                    AI.RTGSGL,
                                    AI.EFTNGL,
                                    AI.PayOrderGL,
                                    AI.IBBPaymentGL,
                                    AI.CityBrokerageGL,
                                    AI.CityCapitalGL,
                                    AI.OthersGL,
                                    //====
                                    AI.PremiseAddressBangla,
                                    AI.AreaStatus,
                                    AI.RegionalOffice,
                                    AI.PrimarySOL,
                                    AI.AttachedControl,
                                    AI.ControllerOfficeDistance,
                                    AI.RoutingNumber,
                                    AI.Division,
                                    AI.District,
                                    AI.Upazila,
                                    AI.Thana,
                                    AI.ThanaCode,
                                    AI.Pourasabha,
                                    AI.PourasabhaType,
                                    AI.UnionName,
                                    AI.WardNo,
                                    AI.PremisesTypeforAccounts,
                                    AI.ParentAgreementCode,
                                    AI.ElectricityLoad,
                                    AI.ElectricityProvidedBy,
                                    AI.AITBourneBy,
                                    AI.CommercialPermission,
                                    AI.BuildingPlan,
                                    AI.PremisesSituatedFloor,
                                    AI.BangladeshBankApproval,
                                    AI.BangladeshBankReference,
                                    AI.ITTowerRentClause,
                                    AI.TerminationClause,
                                    AI.TerminationNoticePeriod,
                                    AI.PremisesOpeningDate,
                                    AI.DocumentDate,
                                    AI.Remarks,
                                    AI.AgreementRemarks,
                                    AI.AdvanceRemarks,
                                    AI.ReviewRemarks,
                                    AI.LLRemarks,
                                    AI.CCRemarks,
                                    AI.UtilityRemarks,
                                    AI.ControlDataRemarks,
                                    //====
                                    AI.BorrowingRate,
                                    AI.PaymentMethod,
                                    AI.IsIFRSEnable,
                                    AI.CalculationMethod,
                                    AI.WithHoldingCode,
                                    AI.AdditionalExpense,
                                    AI.InitialDirectCost,
                                    AI.DismantlingCost,
                                    AI.CarParkingNo,
                                    AI.WaterBillType,
                                    AI.WaterBillAmount,
                                    AI.IFRSEffectiveDate,
                                    AI.CorporateTaxRate,
                                };
                    lstAgreement = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        xModifiedAgreementSLNo = x.AgreementSLNo,
                        yModifiedAgreementSLNo = x.xModifiedAgreementSLNo,
                        //==Basic Info
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        ConcernBranch = x.ConcernBranch,
                        InspectorName = x.InspectorName,
                        InspectorContactNo = x.InspectorContactNo,
                        ClusterGroup = x.ClusterGroup,
                        //==Agreement Info
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        RenewalFrequency = x.RenewalFrequency,
                        RentDueDay = x.RentDueDay,
                        UOM = x.UOM,
                        TotalArea = x.TotalArea,
                        CostPerUnit = x.CostPerUnit,
                        RentAmount = x.TotalArea * x.CostPerUnit,
                        TotalRentAmount = x.TotalRentAmount,
                        SecurityDepositAmount = x.SecurityDepositAmount,
                        AdvanceAmount = x.AdvanceAmount,
                        AdditionalAdvanceAmount = x.AdditionalAdvanceAmount,
                        AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                        AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        TaxPercentage = x.TaxPercentage,
                        TaxAmount = x.RentTaxAmount,
                        VATPercentage = x.VATPercentage,
                        VATAmount = x.RentVATAMount,
                        ServiceCharge = x.ServiceCharge,
                        OnlineTower = x.OnlineTower,
                        GeneratorSpace = x.GeneratorSpace,
                        CarParking = x.CarParking,
                        NetRentAmount = x.NetRentAmount,
                        AgreementStatus = x.AgreementStatus,
                        AgreementText = x.AgreementText,
                        Status = x.Status,
                        UserSLNo = x.UserSLNo,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        IsDeleted = x.IsDeleted,
                        StatusName = x.StatusName,
                        ReviewFrequency = x.ReviewFrequency,
                        ReviewPercentage = x.ReviewPercentage,
                        TaxType = x.TaxType,
                        xTaxType = x.TaxType,
                        VatType = x.VatType,
                        //==Control Data
                        CashGLCode = x.CashGLCode,
                        BankGLCode = x.BankGLCode,
                        AdvanceGLCode = x.AdvanceGLCode,
                        AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                        RentGLCode = x.RentGLCode,
                        ServiceChargeGLCode = x.ServiceChargeGLCode,
                        TaxGLCode = x.TaxGLCode,
                        VATGLCode = x.VATGLCode,
                        ProvisionGLTax = x.ProvisionGLTax,
                        ProvisionGLAP = x.ProvisionGLAP,
                        RTGSGL = x.RTGSGL,
                        EFTNGL = x.EFTNGL,
                        PayOrderGL = x.PayOrderGL,
                        IBBPaymentGL = x.IBBPaymentGL,
                        CityBrokerageGL = x.CityBrokerageGL,
                        CityCapitalGL = x.CityCapitalGL,
                        OthersGL = x.OthersGL,
                        SpaceftrCount = lstSpace.Count(),
                        RIftrCount = lstReview.Count(),
                        LIftrCount = lstLandlord.Count(),
                        CCftrCount = lstCC.Count(),
                        UIftrCount = lstUtility.Count(),
                        //======
                        PremiseAddressBangla = x.PremiseAddressBangla,
                        AreaStatus = x.AreaStatus,
                        RegionalOffice = x.RegionalOffice,
                        PrimarySOL = x.PrimarySOL,
                        AttachedControl = x.AttachedControl,
                        ControllerOfficeDistance = x.ControllerOfficeDistance,
                        RoutingNumber = x.RoutingNumber,
                        Division = x.Division,
                        District = x.District,
                        Upazila = x.Upazila,
                        Thana = x.Thana,
                        ThanaCode = x.ThanaCode,
                        Pourasabha = x.Pourasabha,
                        PourasabhaType = x.PourasabhaType,
                        UnionName = x.UnionName,
                        WardNo = x.WardNo,
                        PremisesTypeforAccounts = x.PremisesTypeforAccounts,
                        ParentAgreementCode = x.ParentAgreementCode,
                        ElectricityLoad = x.ElectricityLoad,
                        ElectricityProvidedBy = x.ElectricityProvidedBy,
                        AITBourneBy = x.AITBourneBy,
                        CommercialPermission = x.CommercialPermission,
                        BuildingPlan = x.BuildingPlan,
                        PremisesSituatedFloor = x.PremisesSituatedFloor,
                        BangladeshBankApproval = x.BangladeshBankApproval,
                        BangladeshBankReference = x.BangladeshBankReference,
                        ITTowerRentClause = x.ITTowerRentClause,
                        TerminationClause = x.TerminationClause,
                        TerminationNoticePeriod = x.TerminationNoticePeriod,
                        PremisesOpeningDate = x.PremisesOpeningDate?.ToString("dd/MM/yyyy"),
                        DocumentDate = x.DocumentDate?.ToString("dd/MM/yyyy"),
                        Remarks = x.Remarks,
                        AgreementRemarks = x.AgreementRemarks,
                        AdvanceRemarks = x.AdvanceRemarks,
                        ReviewRemarks = x.ReviewRemarks,
                        LLRemarks = x.LLRemarks,
                        CCRemarks = x.CCRemarks,
                        UtilityRemarks = x.UtilityRemarks,
                        ControlDataRemarks = x.ControlDataRemarks,
                        //======
                        BorrowingRate = x.BorrowingRate,
                        PaymentMethod = x.PaymentMethod,
                        IsIFRSEnable = x.IsIFRSEnable,
                        CalculationMethod = x.CalculationMethod,
                        WithHoldingCode = x.WithHoldingCode,
                        AdditionalExpense = x.AdditionalExpense,
                        InitialDirectCost = x.InitialDirectCost,
                        DismantlingCost = x.DismantlingCost,
                        CarParkingNo = x.CarParkingNo,
                        WaterBillType = x.WaterBillType,
                        WaterBillAmount = x.WaterBillAmount,
                        IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        CorporateTaxRate = x.CorporateTaxRate,
                    }).ToList();
                    //int xModifiedAgreementSLNo = lstAgreement[0].xModifiedAgreementSLNo;
                    //ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementSLNo == xModifiedAgreementSLNo ||
                    //(x.AgreementStatus == AgreementStatus.Activate
                    //        && x.IsBlock == false && x.IsRenewal == false && x.IsModified == false && x.AgreementEndDate > DateTime.Now))
                    //            .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderBy(x => x.AgreementCode).ToList();
                    return View(AgreementInfoPath.ModifiedCreate, lstAgreement);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult ModEdit(RMS.Models.AgreementInfoDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = (string)Session["LoginUserID"];
                    //==If change xModifiedAgreementSLNo
                    //if (DTO.xModifiedAgreementSLNo != DTO.yModifiedAgreementSLNo)
                    //{
                    //    //==Check available xModifiedAgreementSLNo
                    //    if (db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xModifiedAgreementSLNo && (x.IsRenewal == true || x.IsModified == true)).Any() == true)
                    //    {
                    //        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    //    }
                    //    //==Update old xModifiedAgreementSLNo
                    //    RMS.Models.AgreementInfo xAI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.yModifiedAgreementSLNo).SingleOrDefault();
                    //    xAI.IsModified = false;
                    //    xAI.yModifiedAgreementSLNo = 0;
                    //    db.Entry(xAI).State = EntityState.Modified;
                    //    db.SaveChanges();
                    //    //==Update new selected xModifiedAgreementSLNo
                    //    RMS.Models.AgreementInfo yAI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xModifiedAgreementSLNo).SingleOrDefault();
                    //    yAI.IsModified = true;
                    //    yAI.yModifiedAgreementSLNo = DTO.AgreementSLNo;
                    //    db.Entry(yAI).State = EntityState.Modified;
                    //    db.SaveChanges();
                    //}
                    //==
                    RMS.Models.AgreementInfo AI = new RMS.Models.AgreementInfo();
                    AI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).SingleOrDefault();
                    //==Basic Info
                    AI.PremiseTypeSLNo = DTO.PremiseTypeSLNo;
                    AI.PremiseName = DTO.PremiseName;
                    AI.PremiseAddress = DTO.PremiseAddress;
                    AI.ConcernBranch = DTO.ConcernBranch;
                    AI.InspectorName = DTO.InspectorName;
                    AI.InspectorContactNo = DTO.InspectorContactNo;
                    AI.ClusterGroup = DTO.ClusterGroup;
                    //==Agreement Info
                    //if (DTO.xModifiedAgreementSLNo != DTO.yModifiedAgreementSLNo)
                    //{
                    //    //==New selected xModifiedAgreementSLNo
                    //    var CodeInfo = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xModifiedAgreementSLNo).Select(x => new { x.AgreementCode, x.AgreementVersion }).SingleOrDefault();
                    //    AI.AgreementCode = CodeInfo.AgreementCode;
                    //    AI.AgreementVersion = CodeInfo.AgreementVersion + 1;
                    //    AI.AliasCode = AI.AgreementCode + "-M" + AI.AgreementVersion;
                    //    AI.xModifiedAgreementSLNo = DTO.xModifiedAgreementSLNo;
                    //}
                    //==Agreement Status Wise Update
                    AI.RentDueDay = DTO.RentDueDay;
                    if (AI.AgreementStatus == 1)
                    {
                        //==Agreement Info
                        AI.AgreementName = DTO.AgreementName;
                        AI.AgreementStartDate = DateTime.ParseExact(DTO.AgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        AI.AgreementEndDate = DateTime.ParseExact(DTO.AgreementEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        AI.AgreementPeriod = DTO.AgreementPeriod;
                        AI.RenewalFrequency = AI.AgreementPeriod;
                        AI.UOM = DTO.UOM;
                        AI.TotalArea = DTO.TotalArea;
                        AI.CostPerUnit = DTO.CostPerUnit;
                        AI.TotalRentAmount = DTO.TotalRentAmount;
                        AI.SecurityDepositAmount = DTO.SecurityDepositAmount;
                        AI.AdvanceAmount = DTO.AdvanceAmount;
                        AI.AdditionalAdvanceAmount = DTO.AdditionalAdvanceAmount;
                        AI.AdvanceAdjustmentPeriod = DTO.AdvanceAdjustmentPeriod;
                        AI.AdvanceAdjustmentAmount = DTO.AdvanceAdjustmentAmount;
                        AI.TaxPercentage = DTO.TaxPercentage;
                        AI.TaxAmount = DTO.TaxAmount;
                        AI.VATPercentage = DTO.VATPercentage;
                        AI.VATAmount = DTO.VATAmount;
                        AI.NetRentAmount = AI.TotalRentAmount - AI.AdvanceAdjustmentAmount;
                        AI.AgreementText = DTO.AgreementText;
                        //AI.Status = DTO.Status;
                        AI.TaxType = DTO.TaxType;
                        AI.VatType = DTO.VatType;
                        AI.CalculationMethod = DTO.CalculationMethod;
                        AI.BorrowingRate = DTO.BorrowingRate;
                        AI.IsIFRSEnable = DTO.IsIFRSEnable;
                        if (DTO.IFRSEffectiveDate != null && DTO.IsIFRSEnable == true)
                        {
                            AI.IFRSEffectiveDate = DateTime.ParseExact(DTO.IFRSEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        }
                        else
                        {
                            AI.IFRSEffectiveDate = null;
                        }
                        AI.CorporateTaxRate = DTO.CorporateTaxRate;
                    }
                    //==Control Data
                    AI.CashGLCode = DTO.CashGLCode;
                    AI.BankGLCode = DTO.BankGLCode;
                    AI.AdvanceGLCode = DTO.AdvanceGLCode;
                    AI.AdvanceAdjustmentGLCode = DTO.AdvanceAdjustmentGLCode;
                    AI.RentGLCode = DTO.RentGLCode;
                    AI.ServiceChargeGLCode = DTO.ServiceChargeGLCode;
                    AI.TaxGLCode = DTO.TaxGLCode;
                    AI.VATGLCode = DTO.VATGLCode;
                    AI.ProvisionGLTax = DTO.ProvisionGLTax;
                    AI.ProvisionGLAP = DTO.ProvisionGLAP;
                    AI.RTGSGL = DTO.RTGSGL;
                    AI.EFTNGL = DTO.EFTNGL;
                    AI.PayOrderGL = DTO.PayOrderGL;
                    AI.IBBPaymentGL = DTO.IBBPaymentGL;
                    AI.CityBrokerageGL = DTO.CityBrokerageGL;
                    AI.CityCapitalGL = DTO.CityCapitalGL;
                    AI.OthersGL = DTO.OthersGL;
                    //if (DTO.Status == 0)
                    //{
                    //    AI.IsBlock = true;
                    //    AI.BlockDate = DateTime.Now;
                    //    AI.BlockUserSLNo = AI.UserSLNo;
                    //}
                    //else
                    //{
                    //    AI.IsBlock = false;
                    //    AI.BlockDate = null;
                    //    AI.BlockUserSLNo = null;
                    //}
                    AI.EditBy = (string)Session["LoginUserID"];
                    AI.EditDate = DateTime.Now;
                    AI.IsDeleted = false;
                    //==Utility Master Info
                    AI.ReviewFrequency = DTO.ReviewFrequency;
                    AI.ReviewPercentage = DTO.ReviewPercentage;
                    AI.ServiceCharge = DTO.ServiceCharge;
                    AI.OnlineTower = DTO.OnlineTower;
                    AI.GeneratorSpace = DTO.GeneratorSpace;
                    AI.CarParking = DTO.CarParking;
                    //=====
                    AI.PremiseAddressBangla = DTO.PremiseAddressBangla;
                    AI.AreaStatus = DTO.AreaStatus;
                    AI.RegionalOffice = DTO.RegionalOffice;
                    AI.PrimarySOL = DTO.PrimarySOL;
                    AI.AttachedControl = DTO.AttachedControl;
                    AI.ControllerOfficeDistance = DTO.ControllerOfficeDistance;
                    AI.RoutingNumber = DTO.RoutingNumber;
                    AI.Division = DTO.Division;
                    AI.District = DTO.District;
                    AI.Upazila = DTO.Upazila;
                    AI.Thana = DTO.Thana;
                    AI.ThanaCode = DTO.ThanaCode;
                    AI.Pourasabha = DTO.Pourasabha;
                    AI.PourasabhaType = DTO.PourasabhaType;
                    AI.UnionName = DTO.UnionName;
                    AI.WardNo = DTO.WardNo;
                    AI.PremisesTypeforAccounts = DTO.PremisesTypeforAccounts;
                    AI.ParentAgreementCode = DTO.ParentAgreementCode;
                    AI.ElectricityLoad = DTO.ElectricityLoad;
                    AI.ElectricityProvidedBy = DTO.ElectricityProvidedBy;
                    AI.AITBourneBy = DTO.AITBourneBy;
                    AI.CommercialPermission = DTO.CommercialPermission;
                    AI.BuildingPlan = DTO.BuildingPlan;
                    AI.PremisesSituatedFloor = DTO.PremisesSituatedFloor;
                    AI.BangladeshBankApproval = DTO.BangladeshBankApproval;
                    AI.BangladeshBankReference = DTO.BangladeshBankReference;
                    AI.ITTowerRentClause = DTO.ITTowerRentClause;
                    AI.TerminationClause = DTO.TerminationClause;
                    AI.TerminationNoticePeriod = DTO.TerminationNoticePeriod;
                    if (DTO.PremisesOpeningDate != null)
                    {
                        AI.PremisesOpeningDate = DateTime.ParseExact(DTO.PremisesOpeningDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.PremisesOpeningDate = null;
                    }
                    if (DTO.DocumentDate != null)
                    {
                        AI.DocumentDate = DateTime.ParseExact(DTO.DocumentDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.DocumentDate = null;
                    }
                    AI.Remarks = DTO.Remarks;
                    AI.AgreementRemarks = DTO.AgreementRemarks;
                    AI.AdvanceRemarks = DTO.AdvanceRemarks;
                    AI.ReviewRemarks = DTO.ReviewRemarks;
                    AI.LLRemarks = DTO.LLRemarks;
                    AI.CCRemarks = DTO.CCRemarks;
                    AI.UtilityRemarks = DTO.UtilityRemarks;
                    AI.ControlDataRemarks = DTO.ControlDataRemarks;

                    AI.PaymentMethod = DTO.PaymentMethod;
                    AI.WithHoldingCode = DTO.WithHoldingCode;
                    AI.AdditionalExpense = DTO.AdditionalExpense;
                    AI.InitialDirectCost = DTO.InitialDirectCost;
                    AI.DismantlingCost = DTO.DismantlingCost;
                    AI.CarParkingNo = DTO.CarParkingNo;
                    AI.WaterBillType = DTO.WaterBillType;
                    AI.WaterBillAmount = DTO.WaterBillAmount;
                    //=====
                    db.Entry(AI).State = EntityState.Modified;
                    db.SaveChanges();
                    //==Space Information
                    //===Delete Existing Space Info
                    db.SpaceInfos.RemoveRange(db.SpaceInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                    db.SaveChanges();
                    //==
                    string[] SpaceTypeList = null;
                    if (DTO.SpaceTypeList != null)
                    {
                        SpaceTypeList = DTO.SpaceTypeList.Split(',');
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            SpaceTypeList[i] = SpaceTypeList[i].Trim();
                        }
                    }
                    string[] SpaceAreaList = null;
                    if (DTO.SpaceAreaList != null)
                    {
                        SpaceAreaList = DTO.SpaceAreaList.Split(',');
                        for (int i = 0; i < SpaceAreaList.Length; i++)
                        {
                            SpaceAreaList[i] = SpaceAreaList[i].Trim();
                        }
                    }
                    string[] SpaceRateList = null;
                    if (DTO.SpaceRateList != null)
                    {
                        SpaceRateList = DTO.SpaceRateList.Split(',');
                        for (int i = 0; i < SpaceRateList.Length; i++)
                        {
                            SpaceRateList[i] = SpaceRateList[i].Trim();
                        }
                    }
                    string[] SpaceRentList = null;
                    if (DTO.SpaceRentList != null)
                    {
                        SpaceRentList = DTO.SpaceRentList.Split(',');
                        for (int i = 0; i < SpaceRentList.Length; i++)
                        {
                            SpaceRentList[i] = SpaceRentList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdvanceList = null;
                    if (DTO.SpaceTotalAdvanceList != null)
                    {
                        SpaceTotalAdvanceList = DTO.SpaceTotalAdvanceList.Split(',');
                        for (int i = 0; i < SpaceTotalAdvanceList.Length; i++)
                        {
                            SpaceTotalAdvanceList[i] = SpaceTotalAdvanceList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdjustmentList = null;
                    if (DTO.SpaceTotalAdjustmentList != null)
                    {
                        SpaceTotalAdjustmentList = DTO.SpaceTotalAdjustmentList.Split(',');
                        for (int i = 0; i < SpaceTotalAdjustmentList.Length; i++)
                        {
                            SpaceTotalAdjustmentList[i] = SpaceTotalAdjustmentList[i].Trim();
                        }
                    }
                    string[] SpaceRemarksList = null;
                    if (DTO.SpaceRemarksList != null)
                    {
                        SpaceRemarksList = DTO.SpaceRemarksList.Split(',');
                        for (int i = 0; i < SpaceRemarksList.Length; i++)
                        {
                            SpaceRemarksList[i] = SpaceRemarksList[i].Trim();
                        }
                    }
                    if (SpaceTypeList != null)
                    {
                        RMS.Models.SpaceInfo SpaceInfo;
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            if (SpaceTypeList[i] != null && SpaceTypeList[i] != "")
                            {
                                SpaceInfo = new RMS.Models.SpaceInfo();
                                SpaceInfo.AgreementSLNo = AI.AgreementSLNo;
                                SpaceInfo.SpaceType = (SpaceTypeList == null) ? null : SpaceTypeList[i].ToString();
                                SpaceInfo.SpaceArea = Convert.ToDouble(SpaceAreaList[i].ToString());
                                SpaceInfo.SpaceRate = Convert.ToDouble(SpaceRateList[i].ToString());
                                SpaceInfo.SpaceRent = Convert.ToDouble(SpaceRentList[i].ToString());
                                SpaceInfo.SpaceTotalAdvance = Convert.ToDouble(SpaceTotalAdvanceList[i].ToString());
                                SpaceInfo.SpaceTotalAdjustment = Convert.ToDouble(SpaceTotalAdjustmentList[i].ToString());
                                SpaceInfo.SpaceRemarks = (SpaceRemarksList == null) ? null : SpaceRemarksList[i].ToString();
                                db.SpaceInfos.Add(SpaceInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    if (AI.AgreementStatus == 1)
                    {
                        //==Advance Information
                        //===Delete Existing Advance Info
                        db.AdvanceInfos.RemoveRange(db.AdvanceInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                        //==
                        string[] AdvanceNoList = null;
                        if (DTO.AdvanceNoList != null)
                        {
                            AdvanceNoList = DTO.AdvanceNoList.Split(',');
                            for (int i = 0; i < AdvanceNoList.Length; i++)
                            {
                                AdvanceNoList[i] = AdvanceNoList[i].Trim();
                            }
                        }
                        string[] AdvanceSlotPeriodList = null;
                        if (DTO.AdvanceSlotPeriodList != null)
                        {
                            AdvanceSlotPeriodList = DTO.AdvanceSlotPeriodList.Split(',');
                            for (int i = 0; i < AdvanceSlotPeriodList.Length; i++)
                            {
                                AdvanceSlotPeriodList[i] = AdvanceSlotPeriodList[i].Trim();
                            }
                        }
                        string[] AdvanceStartDateList = null;
                        if (DTO.AdvanceStartDateList != null)
                        {
                            AdvanceStartDateList = DTO.AdvanceStartDateList.Split(',');
                            for (int i = 0; i < AdvanceStartDateList.Length; i++)
                            {
                                AdvanceStartDateList[i] = AdvanceStartDateList[i].Trim();
                            }
                        }
                        string[] AdvanceEndDateList = null;
                        if (DTO.AdvanceEndDateList != null)
                        {
                            AdvanceEndDateList = DTO.AdvanceEndDateList.Split(',');
                            for (int i = 0; i < AdvanceEndDateList.Length; i++)
                            {
                                AdvanceEndDateList[i] = AdvanceEndDateList[i].Trim();
                            }
                        }
                        string[] AdvanceNoteList = null;
                        if (DTO.AdvanceNoteList != null)
                        {
                            AdvanceNoteList = DTO.AdvanceNoteList.Split(',');
                            for (int i = 0; i < AdvanceNoteList.Length; i++)
                            {
                                AdvanceNoteList[i] = AdvanceNoteList[i].Trim();
                            }
                        }
                        string[] AdvanceSlotAmountList = null;
                        if (DTO.AdvanceSlotAmountList != null)
                        {
                            AdvanceSlotAmountList = DTO.AdvanceSlotAmountList.Split(',');
                            for (int i = 0; i < AdvanceSlotAmountList.Length; i++)
                            {
                                AdvanceSlotAmountList[i] = AdvanceSlotAmountList[i].Trim();
                            }
                        }
                        if (AdvanceNoList != null)
                        {
                            RMS.Models.AdvanceInfo AdvInfo;
                            for (int i = 0; i < AdvanceNoList.Length; i++)
                            {
                                if (AdvanceNoList[i] != null && AdvanceNoList[i] != "")
                                {
                                    AdvInfo = new RMS.Models.AdvanceInfo();
                                    AdvInfo.AgreementSLNo = AI.AgreementSLNo;
                                    AdvInfo.AdvanceNo = Convert.ToInt32(AdvanceNoList[i].ToString());
                                    AdvInfo.AdvanceSlotPeriod = Convert.ToInt32(AdvanceSlotPeriodList[i].ToString());
                                    AdvInfo.StartDate = DateTime.ParseExact(AdvanceStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    AdvInfo.EndDate = DateTime.ParseExact(AdvanceEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    AdvInfo.AdvanceSlotAmount = Convert.ToDouble(AdvanceSlotAmountList[i].ToString());
                                    AdvInfo.AdvanceNote = (AdvanceNoteList == null) ? null : AdvanceNoteList[i].ToString();
                                    db.AdvanceInfos.Add(AdvInfo);
                                    db.SaveChanges();
                                }
                            }
                        }
                        //==Review Info
                        //===Delete Existing Review Info
                        db.ReviewInfos.RemoveRange(db.ReviewInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                        //==
                        string[] ReviewNoList = null;
                        if (DTO.ReviewNoList != null)
                        {
                            ReviewNoList = DTO.ReviewNoList.Split(',');
                            for (int i = 0; i < ReviewNoList.Length; i++)
                            {
                                ReviewNoList[i] = ReviewNoList[i].Trim();
                            }
                        }
                        string[] ReviewStartDateList = null;
                        if (DTO.ReviewStartDateList != null)
                        {
                            ReviewStartDateList = DTO.ReviewStartDateList.Split(',');
                            for (int i = 0; i < ReviewStartDateList.Length; i++)
                            {
                                ReviewStartDateList[i] = ReviewStartDateList[i].Trim();
                            }
                        }
                        string[] ReviewEndDateList = null;
                        if (DTO.ReviewEndDateList != null)
                        {
                            ReviewEndDateList = DTO.ReviewEndDateList.Split(',');
                            for (int i = 0; i < ReviewEndDateList.Length; i++)
                            {
                                ReviewEndDateList[i] = ReviewEndDateList[i].Trim();
                            }
                        }
                        string[] ReviewPeriodList = null;
                        if (DTO.ReviewPeriodList != null)
                        {
                            ReviewPeriodList = DTO.ReviewPeriodList.Split(',');
                            for (int i = 0; i < ReviewPeriodList.Length; i++)
                            {
                                ReviewPeriodList[i] = ReviewPeriodList[i].Trim();
                            }
                        }
                        string[] ReviewIncreaseAmountList = null;
                        if (DTO.ReviewIncreaseAmountList != null)
                        {
                            ReviewIncreaseAmountList = DTO.ReviewIncreaseAmountList.Split(',');
                            for (int i = 0; i < ReviewIncreaseAmountList.Length; i++)
                            {
                                ReviewIncreaseAmountList[i] = ReviewIncreaseAmountList[i].Trim();
                            }
                        }
                        string[] ReviewIncreasePercentageList = null;
                        if (DTO.ReviewIncreasePercentageList != null)
                        {
                            ReviewIncreasePercentageList = DTO.ReviewIncreasePercentageList.Split(',');
                            for (int i = 0; i < ReviewIncreasePercentageList.Length; i++)
                            {
                                ReviewIncreasePercentageList[i] = ReviewIncreasePercentageList[i].Trim();
                            }
                        }
                        string[] ReviewNoteList = null;
                        if (DTO.ReviewNoteList != null)
                        {
                            ReviewNoteList = DTO.ReviewNoteList.Split(',');
                            for (int i = 0; i < ReviewNoteList.Length; i++)
                            {
                                ReviewNoteList[i] = ReviewNoteList[i].Trim();
                            }
                        }
                        if (ReviewNoList != null)
                        {
                            RMS.Models.ReviewInfo RI;
                            for (int i = 0; i < ReviewNoList.Length; i++)
                            {
                                if (ReviewNoList[i] != null && ReviewNoList[i] != "")
                                {
                                    RI = new RMS.Models.ReviewInfo();
                                    RI.AgreementSLNo = AI.AgreementSLNo;
                                    RI.ReviewNo = Convert.ToInt32(ReviewNoList[i].ToString());
                                    RI.Period = Convert.ToInt32(ReviewPeriodList[i].ToString());
                                    RI.StartDate = DateTime.ParseExact(ReviewStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    RI.EndDate = DateTime.ParseExact(ReviewEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    RI.IncreaseAmount = Convert.ToDouble(ReviewIncreaseAmountList[i].ToString());
                                    RI.IncreasePercentage = Convert.ToDouble(ReviewIncreasePercentageList[i].ToString());
                                    RI.ReviewNote = (ReviewNoteList == null) ? null : ReviewNoteList[i].ToString();
                                    db.ReviewInfos.Add(RI);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                    //==Landlord Information
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Landlord Info
                        db.LandlordInfos.RemoveRange(db.LandlordInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        //===Update Existing Landlord Info
                        List<RMS.Models.LandlordInfo> lstOldLandlord = db.LandlordInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstOldLandlord.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    string[] VendorCodeList = null;
                    if (DTO.VendorCodeList != null)
                    {
                        VendorCodeList = DTO.VendorCodeList.Split(',');
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            VendorCodeList[i] = VendorCodeList[i].Trim();
                        }
                    }
                    string[] LandlordNameList = null;
                    if (DTO.LandlordNameList != null)
                    {
                        LandlordNameList = DTO.LandlordNameList.Split(',');
                        for (int i = 0; i < LandlordNameList.Length; i++)
                        {
                            LandlordNameList[i] = LandlordNameList[i].Trim();
                        }
                    }
                    string[] ModeOfPaymentList = null;
                    if (DTO.ModeOfPaymentList != null)
                    {
                        ModeOfPaymentList = DTO.ModeOfPaymentList.Split(',');
                        for (int i = 0; i < ModeOfPaymentList.Length; i++)
                        {
                            ModeOfPaymentList[i] = ModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] VendorAdvancePCList = null;
                    if (DTO.VendorAdvancePCList != null)
                    {
                        VendorAdvancePCList = DTO.VendorAdvancePCList.Split(',');
                        for (int i = 0; i < VendorAdvancePCList.Length; i++)
                        {
                            VendorAdvancePCList[i] = VendorAdvancePCList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAmountList = null;
                    if (DTO.VendorAdvanceAmountList != null)
                    {
                        VendorAdvanceAmountList = DTO.VendorAdvanceAmountList.Split(',');
                        for (int i = 0; i < VendorAdvanceAmountList.Length; i++)
                        {
                            VendorAdvanceAmountList[i] = VendorAdvanceAmountList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAdjustmentPCList = null;
                    if (DTO.VendorAdvanceAdjustmentPCList != null)
                    {
                        VendorAdvanceAdjustmentPCList = DTO.VendorAdvanceAdjustmentPCList.Split(',');
                        for (int i = 0; i < VendorAdvanceAdjustmentPCList.Length; i++)
                        {
                            VendorAdvanceAdjustmentPCList[i] = VendorAdvanceAdjustmentPCList[i].Trim();
                        }
                    }
                    //string[] VendorAdvanceAdjustmentAmountList = null;
                    //if (DTO.VendorAdvanceAdjustmentAmountList != null)
                    //{
                    //    VendorAdvanceAdjustmentAmountList = DTO.VendorAdvanceAdjustmentAmountList.Split(',');
                    //    for (int i = 0; i < VendorAdvanceAdjustmentAmountList.Length; i++)
                    //    {
                    //        VendorAdvanceAdjustmentAmountList[i] = VendorAdvanceAdjustmentAmountList[i].Trim();
                    //    }
                    //}
                    string[] VendorTaxPCList = null;
                    if (DTO.VendorTaxPCList != null)
                    {
                        VendorTaxPCList = DTO.VendorTaxPCList.Split(',');
                        for (int i = 0; i < VendorTaxPCList.Length; i++)
                        {
                            VendorTaxPCList[i] = VendorTaxPCList[i].Trim();
                        }
                    }
                    string[] VendorTaxAmountList = null;
                    if (DTO.VendorTaxAmountList != null)
                    {
                        VendorTaxAmountList = DTO.VendorTaxAmountList.Split(',');
                        for (int i = 0; i < VendorTaxAmountList.Length; i++)
                        {
                            VendorTaxAmountList[i] = VendorTaxAmountList[i].Trim();
                        }
                    }
                    string[] VendorVATPCList = null;
                    if (DTO.VendorVATPCList != null)
                    {
                        VendorVATPCList = DTO.VendorVATPCList.Split(',');
                        for (int i = 0; i < VendorVATPCList.Length; i++)
                        {
                            VendorVATPCList[i] = VendorVATPCList[i].Trim();
                        }
                    }
                    string[] VendorVATAmountList = null;
                    if (DTO.VendorVATAmountList != null)
                    {
                        VendorVATAmountList = DTO.VendorVATAmountList.Split(',');
                        for (int i = 0; i < VendorVATAmountList.Length; i++)
                        {
                            VendorVATAmountList[i] = VendorVATAmountList[i].Trim();
                        }
                    }
                    string[] VendorRentPCList = null;
                    if (DTO.VendorRentPCList != null)
                    {
                        VendorRentPCList = DTO.VendorRentPCList.Split(',');
                        for (int i = 0; i < VendorRentPCList.Length; i++)
                        {
                            VendorRentPCList[i] = VendorRentPCList[i].Trim();
                        }
                    }
                    //string[] VendorRentAmountList = null;
                    //if (DTO.VendorRentAmountList != null)
                    //{
                    //    VendorRentAmountList = DTO.VendorRentAmountList.Split(',');
                    //    for (int i = 0; i < VendorRentAmountList.Length; i++)
                    //    {
                    //        VendorRentAmountList[i] = VendorRentAmountList[i].Trim();
                    //    }
                    //}
                    string[] AddressList = null;
                    if (DTO.LLAddressList != null)
                    {
                        AddressList = DTO.LLAddressList.Split(',');
                        for (int i = 0; i < AddressList.Length; i++)
                        {
                            AddressList[i] = AddressList[i].Trim();
                        }
                    }
                    string[] ContactNoList = null;
                    if (DTO.LLContactNoList != null)
                    {
                        ContactNoList = DTO.LLContactNoList.Split(',');
                        for (int i = 0; i < ContactNoList.Length; i++)
                        {
                            ContactNoList[i] = ContactNoList[i].Trim();
                        }
                    }
                    string[] EmailList = null;
                    if (DTO.LLEmailList != null)
                    {
                        EmailList = DTO.LLEmailList.Split(',');
                        for (int i = 0; i < EmailList.Length; i++)
                        {
                            EmailList[i] = EmailList[i].Trim();
                        }
                    }
                    string[] ACNoList = null;
                    if (DTO.ACNoList != null)
                    {
                        ACNoList = DTO.ACNoList.Split(',');
                        for (int i = 0; i < ACNoList.Length; i++)
                        {
                            ACNoList[i] = ACNoList[i].Trim();
                        }
                    }
                    string[] BankNameList = null;
                    if (DTO.BankNameList != null)
                    {
                        BankNameList = DTO.BankNameList.Split(',');
                        for (int i = 0; i < BankNameList.Length; i++)
                        {
                            BankNameList[i] = BankNameList[i].Trim();
                        }
                    }
                    string[] BranchNameList = null;
                    if (DTO.BranchNameList != null)
                    {
                        BranchNameList = DTO.BranchNameList.Split(',');
                        for (int i = 0; i < BranchNameList.Length; i++)
                        {
                            BranchNameList[i] = BranchNameList[i].Trim();
                        }
                    }
                    string[] RoutingNoList = null;
                    if (DTO.RoutingNoList != null)
                    {
                        RoutingNoList = DTO.RoutingNoList.Split(',');
                        for (int i = 0; i < RoutingNoList.Length; i++)
                        {
                            RoutingNoList[i] = RoutingNoList[i].Trim();
                        }
                    }
                    RMS.Models.LandlordInfo LInfo;
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    for (int i = 0; i < VendorCodeList.Length; i++)
                    {
                        if (VendorCodeList[i] != null && VendorCodeList[i] != "")
                        {
                            LInfo = new RMS.Models.LandlordInfo();
                            LInfo.AgreementSLNo = DTO.AgreementSLNo;
                            LInfo.VendorCode = (VendorCodeList == null) ? null : VendorCodeList[i].ToString();
                            LInfo.LandlordName = (LandlordNameList == null) ? null : LandlordNameList[i].ToString();
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { LInfo.ModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { LInfo.ModeOfPayment = ModeOfPaymentLocation.RTGS; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { LInfo.ModeOfPayment = ModeOfPaymentLocation.EFTN; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { LInfo.ModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { LInfo.ModeOfPayment = ModeOfPaymentLocation.Cash; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { LInfo.ModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { LInfo.ModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { LInfo.ModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { LInfo.ModeOfPayment = ModeOfPaymentLocation.Others; }
                            LInfo.AdvancePC = Convert.ToDouble(VendorAdvancePCList[i].ToString());
                            LInfo.AdvanceAdjustmentPC = Convert.ToDouble(VendorAdvanceAdjustmentPCList[i].ToString());
                            LInfo.TaxPC = Convert.ToDouble(VendorTaxPCList[i].ToString());
                            LInfo.VATPC = Convert.ToDouble(VendorVATPCList[i].ToString());
                            LInfo.VATAmount = Convert.ToDouble(VendorVATAmountList[i].ToString());
                            LInfo.RentPC = Convert.ToDouble(VendorRentPCList[i].ToString());
                            //==PC Amount
                            LInfo.AdvanceAmount = ((AI.AdvanceAmount + AI.AdditionalAdvanceAmount) * LInfo.AdvancePC) / 100;
                            LInfo.TaxAmount = (AI.TaxAmount * LInfo.TaxPC) / 100;
                            LInfo.VATAmount = (AI.VATAmount * LInfo.VATPC) / 100;
                            //==
                            LInfo.LLAddress = (AddressList == null) ? null : AddressList[i].ToString();
                            LInfo.LLContactNo = (ContactNoList == null) ? null : ContactNoList[i].ToString();
                            LInfo.LLEmail = (EmailList == null) ? null : EmailList[i].ToString();
                            LInfo.ACNo = (ACNoList == null) ? null : ACNoList[i].ToString();
                            LInfo.BankName = (BankNameList == null) ? null : BankNameList[i].ToString();
                            LInfo.BranchName = (BranchNameList == null) ? null : BranchNameList[i].ToString();
                            LInfo.RoutingNo = (RoutingNoList == null) ? null : RoutingNoList[i].ToString();
                            db.LandlordInfos.Add(LInfo);
                            db.SaveChanges();
                        }
                    }
                    //==Cost Center
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Cost Center Info
                        db.CostCenterInfos.RemoveRange(db.CostCenterInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        List<RMS.Models.CostCenterInfo> lstCC = db.CostCenterInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstCC.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    //==Cost Center
                    string[] CCCodeList = null;
                    if (DTO.CCCodeList != null)
                    {
                        CCCodeList = DTO.CCCodeList.Split(',');
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            CCCodeList[i] = CCCodeList[i].Trim();
                        }
                    }
                    string[] CCNameList = null;
                    if (DTO.CCNameList != null)
                    {
                        CCNameList = DTO.CCNameList.Split(',');
                        for (int i = 0; i < CCNameList.Length; i++)
                        {
                            CCNameList[i] = CCNameList[i].Trim();
                        }
                    }
                    string[] SOLCodeList = null;
                    if (DTO.SOLCodeList != null)
                    {
                        SOLCodeList = DTO.SOLCodeList.Split(',');
                        for (int i = 0; i < SOLCodeList.Length; i++)
                        {
                            SOLCodeList[i] = SOLCodeList[i].Trim();
                        }
                    }
                    string[] SOLNameList = null;
                    if (DTO.SOLNameList != null)
                    {
                        SOLNameList = DTO.SOLNameList.Split(',');
                        for (int i = 0; i < SOLNameList.Length; i++)
                        {
                            SOLNameList[i] = SOLNameList[i].Trim();
                        }
                    }
                    string[] CCShareAllotmentList = null;
                    if (DTO.CCShareAllotmentList != null)
                    {
                        CCShareAllotmentList = DTO.CCShareAllotmentList.Split(',');
                        for (int i = 0; i < CCShareAllotmentList.Length; i++)
                        {
                            CCShareAllotmentList[i] = CCShareAllotmentList[i].Trim();
                        }
                    }
                    RMS.Models.CostCenterInfo CCinfo;
                    for (int i = 0; i < CCCodeList.Length; i++)
                    {
                        if (CCCodeList[i] != null && CCCodeList[i] != "")
                        {
                            CCinfo = new RMS.Models.CostCenterInfo();
                            CCinfo.AgreementSLNo = DTO.AgreementSLNo;
                            CCinfo.CCCode = (CCCodeList == null) ? null : CCCodeList[i].ToString();
                            CCinfo.CCName = (CCNameList == null) ? null : CCNameList[i].ToString();
                            CCinfo.SOLCode = (SOLCodeList == null) ? null : SOLCodeList[i].ToString();
                            CCinfo.SOLName = (SOLNameList == null) ? null : SOLNameList[i].ToString();
                            CCinfo.CCShareAllotment = Convert.ToDouble(CCShareAllotmentList[i].ToString());
                            db.CostCenterInfos.Add(CCinfo);
                            db.SaveChanges();
                        }
                    }
                    //==Utility Information
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Utility Info
                        db.UtilityInfos.RemoveRange(db.UtilityInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        List<RMS.Models.UtilityInfo> lstOldUtility = db.UtilityInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstOldUtility.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    string[] UtilityVendorCodeList = null;
                    if (DTO.UtilityVendorCodeList != null)
                    {
                        UtilityVendorCodeList = DTO.UtilityVendorCodeList.Split(',');
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            UtilityVendorCodeList[i] = UtilityVendorCodeList[i].Trim();
                        }
                    }
                    string[] UtilityLandlordNameList = null;
                    if (DTO.UtilityLandlordNameList != null)
                    {
                        UtilityLandlordNameList = DTO.UtilityLandlordNameList.Split(',');
                        for (int i = 0; i < UtilityLandlordNameList.Length; i++)
                        {
                            UtilityLandlordNameList[i] = UtilityLandlordNameList[i].Trim();
                        }
                    }
                    string[] UtilityModeOfPaymentList = null;
                    if (DTO.UtilityModeOfPaymentList != null)
                    {
                        UtilityModeOfPaymentList = DTO.UtilityModeOfPaymentList.Split(',');
                        for (int i = 0; i < UtilityModeOfPaymentList.Length; i++)
                        {
                            UtilityModeOfPaymentList[i] = UtilityModeOfPaymentList[i].Trim();
                        }
                    }

                    string[] ServiceChargePCList = null;
                    if (DTO.ServiceChargePCList != null)
                    {
                        ServiceChargePCList = DTO.ServiceChargePCList.Split(',');
                        for (int i = 0; i < ServiceChargePCList.Length; i++)
                        {
                            ServiceChargePCList[i] = ServiceChargePCList[i].Trim();
                        }
                    }
                    string[] ServiceChargeAmountList = null;
                    if (DTO.ServiceChargeAmountList != null)
                    {
                        ServiceChargeAmountList = DTO.ServiceChargeAmountList.Split(',');
                        for (int i = 0; i < ServiceChargeAmountList.Length; i++)
                        {
                            ServiceChargeAmountList[i] = ServiceChargeAmountList[i].Trim();
                        }
                    }

                    string[] OnlineTowerPCList = null;
                    if (DTO.OnlineTowerPCList != null)
                    {
                        OnlineTowerPCList = DTO.OnlineTowerPCList.Split(',');
                        for (int i = 0; i < OnlineTowerPCList.Length; i++)
                        {
                            OnlineTowerPCList[i] = OnlineTowerPCList[i].Trim();
                        }
                    }
                    string[] OnlineTowerAmountList = null;
                    if (DTO.OnlineTowerAmountList != null)
                    {
                        OnlineTowerAmountList = DTO.OnlineTowerAmountList.Split(',');
                        for (int i = 0; i < OnlineTowerAmountList.Length; i++)
                        {
                            OnlineTowerAmountList[i] = OnlineTowerAmountList[i].Trim();
                        }
                    }

                    string[] GeneratorSpacePCList = null;
                    if (DTO.GeneratorSpacePCList != null)
                    {
                        GeneratorSpacePCList = DTO.GeneratorSpacePCList.Split(',');
                        for (int i = 0; i < GeneratorSpacePCList.Length; i++)
                        {
                            GeneratorSpacePCList[i] = GeneratorSpacePCList[i].Trim();
                        }
                    }
                    string[] GeneratorSpaceAmountList = null;
                    if (DTO.GeneratorSpaceAmountList != null)
                    {
                        GeneratorSpaceAmountList = DTO.GeneratorSpaceAmountList.Split(',');
                        for (int i = 0; i < GeneratorSpaceAmountList.Length; i++)
                        {
                            GeneratorSpaceAmountList[i] = GeneratorSpaceAmountList[i].Trim();
                        }
                    }

                    string[] CarParkingPCList = null;
                    if (DTO.CarParkingPCList != null)
                    {
                        CarParkingPCList = DTO.CarParkingPCList.Split(',');
                        for (int i = 0; i < CarParkingPCList.Length; i++)
                        {
                            CarParkingPCList[i] = CarParkingPCList[i].Trim();
                        }
                    }
                    string[] CarParkingAmountList = null;
                    if (DTO.CarParkingAmountList != null)
                    {
                        CarParkingAmountList = DTO.CarParkingAmountList.Split(',');
                        for (int i = 0; i < CarParkingAmountList.Length; i++)
                        {
                            CarParkingAmountList[i] = CarParkingAmountList[i].Trim();
                        }
                    }
                    string[] UtilityTaxPCList = null;
                    if (DTO.UtilityTaxPCList != null)
                    {
                        UtilityTaxPCList = DTO.UtilityTaxPCList.Split(',');
                        for (int i = 0; i < UtilityTaxPCList.Length; i++)
                        {
                            UtilityTaxPCList[i] = UtilityTaxPCList[i].Trim();
                        }
                    }
                    string[] UtilityTaxAmountList = null;
                    if (DTO.UtilityTaxAmountList != null)
                    {
                        UtilityTaxAmountList = DTO.UtilityTaxAmountList.Split(',');
                        for (int i = 0; i < UtilityTaxAmountList.Length; i++)
                        {
                            UtilityTaxAmountList[i] = UtilityTaxAmountList[i].Trim();
                        }
                    }
                    string[] UtilityVATPCList = null;
                    if (DTO.UtilityVATPCList != null)
                    {
                        UtilityVATPCList = DTO.UtilityVATPCList.Split(',');
                        for (int i = 0; i < UtilityVATPCList.Length; i++)
                        {
                            UtilityVATPCList[i] = UtilityVATPCList[i].Trim();
                        }
                    }
                    string[] UtilityVATAmountList = null;
                    if (DTO.UtilityVATAmountList != null)
                    {
                        UtilityVATAmountList = DTO.UtilityVATAmountList.Split(',');
                        for (int i = 0; i < UtilityVATAmountList.Length; i++)
                        {
                            UtilityVATAmountList[i] = UtilityVATAmountList[i].Trim();
                        }
                    }
                    string[] UtilityAddressList = null;
                    if (DTO.UtilityAddressList != null)
                    {
                        UtilityAddressList = DTO.UtilityAddressList.Split(',');
                        for (int i = 0; i < UtilityAddressList.Length; i++)
                        {
                            UtilityAddressList[i] = UtilityAddressList[i].Trim();
                        }
                    }
                    string[] UtilityContactNoList = null;
                    if (DTO.UtilityContactNoList != null)
                    {
                        UtilityContactNoList = DTO.UtilityContactNoList.Split(',');
                        for (int i = 0; i < UtilityContactNoList.Length; i++)
                        {
                            UtilityContactNoList[i] = UtilityContactNoList[i].Trim();
                        }
                    }
                    string[] UtilityEmailList = null;
                    if (DTO.UtilityEmailList != null)
                    {
                        UtilityEmailList = DTO.UtilityEmailList.Split(',');
                        for (int i = 0; i < UtilityEmailList.Length; i++)
                        {
                            UtilityEmailList[i] = UtilityEmailList[i].Trim();
                        }
                    }
                    string[] UtilityACNoList = null;
                    if (DTO.UtilityACNoList != null)
                    {
                        UtilityACNoList = DTO.UtilityACNoList.Split(',');
                        for (int i = 0; i < UtilityACNoList.Length; i++)
                        {
                            UtilityACNoList[i] = UtilityACNoList[i].Trim();
                        }
                    }
                    string[] UtilityBankNameList = null;
                    if (DTO.UtilityBankNameList != null)
                    {
                        UtilityBankNameList = DTO.UtilityBankNameList.Split(',');
                        for (int i = 0; i < UtilityBankNameList.Length; i++)
                        {
                            UtilityBankNameList[i] = UtilityBankNameList[i].Trim();
                        }
                    }
                    string[] UtilityBranchNameList = null;
                    if (DTO.UtilityBranchNameList != null)
                    {
                        UtilityBranchNameList = DTO.UtilityBranchNameList.Split(',');
                        for (int i = 0; i < UtilityBranchNameList.Length; i++)
                        {
                            UtilityBranchNameList[i] = UtilityBranchNameList[i].Trim();
                        }
                    }
                    string[] UtilityRoutingNoList = null;
                    if (DTO.UtilityRoutingNoList != null)
                    {
                        UtilityRoutingNoList = DTO.UtilityRoutingNoList.Split(',');
                        for (int i = 0; i < UtilityRoutingNoList.Length; i++)
                        {
                            UtilityRoutingNoList[i] = UtilityRoutingNoList[i].Trim();
                        }
                    }
                    if (UtilityVendorCodeList != null)
                    {
                        RMS.Models.UtilityInfo UI;
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            if (UtilityVendorCodeList[i] != null && UtilityVendorCodeList[i] != "")
                            {
                                UI = new RMS.Models.UtilityInfo();
                                UI.AgreementSLNo = AI.AgreementSLNo;
                                UI.UtilityVendorCode = (UtilityVendorCodeList == null) ? null : UtilityVendorCodeList[i].ToString();
                                UI.UtilityLandlordName = (UtilityLandlordNameList == null) ? null : UtilityLandlordNameList[i].ToString();
                                if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Others; }

                                UI.ServiceChargePC = Convert.ToDouble(ServiceChargePCList[i].ToString());
                                UI.ServiceChargeAmount = Convert.ToDouble(ServiceChargeAmountList[i].ToString());

                                UI.OnlineTowerPC = Convert.ToDouble(OnlineTowerPCList[i].ToString());
                                UI.OnlineTowerAmount = Convert.ToDouble(OnlineTowerAmountList[i].ToString());

                                UI.GeneratorSpacePC = Convert.ToDouble(GeneratorSpacePCList[i].ToString());
                                UI.GeneratorSpaceAmount = Convert.ToDouble(GeneratorSpaceAmountList[i].ToString());

                                UI.CarParkingPC = Convert.ToDouble(CarParkingPCList[i].ToString());
                                UI.CarParkingAmount = Convert.ToDouble(CarParkingAmountList[i].ToString());

                                UI.TaxPC = Convert.ToDouble(UtilityTaxPCList[i].ToString());
                                UI.TaxAmount = Convert.ToDouble(UtilityTaxAmountList[i].ToString());
                                UI.VATPC = Convert.ToDouble(UtilityVATPCList[i].ToString());
                                UI.VATAmount = Convert.ToDouble(UtilityVATAmountList[i].ToString());
                                UI.UtilityAddress = (UtilityAddressList == null) ? null : UtilityAddressList[i].ToString();
                                UI.UtilityContactNo = (UtilityContactNoList == null) ? null : UtilityContactNoList[i].ToString();
                                UI.UtilityEmail = (UtilityEmailList == null) ? null : UtilityEmailList[i].ToString();
                                UI.UtilityACNo = (UtilityACNoList == null) ? null : UtilityACNoList[i].ToString();
                                UI.UtilityBankName = (UtilityBankNameList == null) ? null : UtilityBankNameList[i].ToString();
                                UI.UtilityBranchName = (UtilityBranchNameList == null) ? null : UtilityBranchNameList[i].ToString();
                                UI.UtilityRoutingNo = (UtilityRoutingNoList == null) ? null : UtilityRoutingNoList[i].ToString();
                                db.UtilityInfos.Add(UI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Attach Documents
                    string[] FUFileNameList = null;
                    if (DTO.FUFileNameList != null)
                    {
                        FUFileNameList = DTO.FUFileNameList.Split(',');
                        for (int i = 0; i < FUFileNameList.Length; i++)
                        {
                            FUFileNameList[i] = FUFileNameList[i].Trim();
                        }
                    }
                    var originalDirectory = new DirectoryInfo(string.Format("{0}Content\\FileUpload\\", Server.MapPath(@"\")));
                    string pathString = Path.Combine(originalDirectory.ToString(), AI.AliasCode);
                    if (DTO.FUFileNameList != null)
                    {
                        //==Delete physical file
                        var xlstFU = db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && !FUFileNameList.Contains(x.FileName)).ToList();
                        foreach (var item in xlstFU)
                        {
                            //==Delete File
                            FileInfo file = new FileInfo(string.Format("{0}\\{1}", pathString, item.FileName));
                            if (file.Exists)//check file exsit or not  
                            {
                                file.Delete();
                            }
                            else
                            {
                                //==Nothing
                            }
                        }
                        //==Delete Existing Attached File
                        db.FileUploadInfos.RemoveRange(db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && !FUFileNameList.Contains(x.FileName)));
                        db.SaveChanges();
                    }
                    else
                    {
                        //==Delete physical file
                        var xlstFU = db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        foreach (var item in xlstFU)
                        {
                            //==Delete File
                            FileInfo file = new FileInfo(string.Format("{0}\\{1}", pathString, item.FileName));
                            if (file.Exists)//check file exsit or not  
                            {
                                file.Delete();
                            }
                            else
                            {
                                //==Nothing
                            }
                        }
                        //==Delete Existing Attached File
                        db.FileUploadInfos.RemoveRange(db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    if (DTO.files != null)
                    {
                        RMS.Models.FileUploadInfo FU;
                        foreach (var file in DTO.files)
                        {
                            //Save file content goes here
                            if (file != null && file.ContentLength > 0)
                            {
                                //==table update
                                if (db.FileUploadInfos.Any(x => x.AgreementSLNo == AI.AgreementSLNo && x.FileName == file.FileName) == false)
                                {
                                    FU = new RMS.Models.FileUploadInfo();
                                    FU.AgreementSLNo = AI.AgreementSLNo;
                                    FU.FileName = file.FileName;
                                    FU.FilePath = "Content/FileUpload/" + AI.AliasCode + "/" + file.FileName;
                                    db.FileUploadInfos.Add(FU);
                                    db.SaveChanges();
                                }
                                //==Physical file save
                                bool isExists = System.IO.Directory.Exists(pathString);
                                if (!isExists)
                                    System.IO.Directory.CreateDirectory(pathString);
                                var path = string.Format("{0}\\{1}", pathString, file.FileName);
                                file.SaveAs(path);
                            }
                        }
                    }
                    //==Re-schedule Landlord, Cost Center, Utility if Agreement Activated
                    if (AI.AgreementStatus == 2)
                    {
                        //===Delete Existing Landlord Schedule
                        db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        db.SaveChanges();
                        //===Delete Existing Cost Center Schedule
                        db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        db.SaveChanges();
                        //===Delete Existing Utility Schedule
                        //db.UtilitySchedules.RemoveRange(db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        //db.SaveChanges();
                        //==Contract Rent Schedule
                        RMS.Models.ContractSchedule CS = new RMS.Models.ContractSchedule();
                        RMS.Models.LandlordSchedule LS = new RMS.Models.LandlordSchedule();
                        RMS.Models.CostCenterSchedule CCS = new RMS.Models.CostCenterSchedule();
                        //RMS.Models.UtilitySchedule US = new RMS.Models.UtilitySchedule();
                        RMS.Models.IFRSSchedule IFRS = new RMS.Models.IFRSSchedule();
                        List<RMS.Models.LandlordInfo> lstLandlords = db.LandlordInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        List<RMS.Models.CostCenterInfo> lstCostCenter = db.CostCenterInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        //List<RMS.Models.UtilityInfo> lstUtility = db.UtilityInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        List<RMS.Models.ReviewInfo> lstReviewInfo = db.ReviewInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).OrderBy(x => x.ReviewNo).ToList();
                        List<RMS.Models.AdvanceInfo> lstAdvanceInfo = db.AdvanceInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).OrderBy(x => x.AdvanceNo).ToList();
                        DateTime ScheduleDate = AI.AgreementStartDate;
                        //===xxx====
                        int LastMonthDaysCount = DateTime.DaysInMonth(AI.AgreementEndDate.Year, AI.AgreementEndDate.Month);
                        int ReviewMonthDaysCount = 0;
                        int MonthDays = 0;

                        double RentPerDay = 0;
                        double BeforeReviewAmount = 0;
                        double AfterReviewAmount = 0;
                        double NetCalcAmount = 0;
                        if (AI.ReviewFrequency < 1 && lstReviewInfo.Count == 0)
                        {
                            //==Without Review
                            for (int i = 1; i <= AI.AgreementPeriod; i++)
                            {
                                CS = new RMS.Models.ContractSchedule();
                                if (i != 1)
                                {
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                }
                                //==Contract Schedule
                                CS.ScheduleDate = ScheduleDate;
                                CS.AgreementSLNo = AI.AgreementSLNo;
                                CS.MonthNo = i;
                                CS.Year = CS.ScheduleDate.Year;
                                CS.Month = CS.ScheduleDate.ToString("MMMM");
                                CS.ReviewNo = 0;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                }
                                CS.CostPerUnit = AI.CostPerUnit;
                                CS.TotalRentAmount = AI.CostPerUnit * AI.TotalArea;
                                //==First Month
                                if (i == 1)
                                {
                                    //==Full Month
                                    if (ScheduleDate.Day != 1)
                                    {
                                        //==Fraction Date Rent Amount
                                        MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                        RentPerDay = CS.TotalRentAmount / MonthDays;
                                        CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                    }
                                }
                                //==Last Month
                                else if (i == AI.AgreementPeriod)
                                {
                                    //==Full Month
                                    if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                    {
                                        //==Fraction Date Rent Amount
                                        RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                        CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                    }
                                }
                                #region "Tax Type & VAT Type"
                                //1. Inclusive Inclusive
                                if (AI.TaxType == 1 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //2. Inclusive Exclusive
                                else if (AI.TaxType == 1 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //3. Inclusive Exempted
                                else if (AI.TaxType == 1 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //4. Exclusive Inclusive
                                else if (AI.TaxType == 2 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //5. Exclusive Exclusive
                                else if (AI.TaxType == 2 && AI.VatType == 2)
                                {
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //6. Exclusive Exempted
                                else if (AI.TaxType == 2 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //7. Exempted  Inclusive
                                else if (AI.TaxType == 3 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //8. Exempted  Exclusive
                                else if (AI.TaxType == 3 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //9. Exempted Exempted
                                else if (AI.TaxType == 3 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                #endregion
                                CS.UserSLNo = AI.UserSLNo;
                                CS.EntryDate = DateTime.Now;
                                //db.ContractSchedules.Add(CS);
                                //db.SaveChanges();
                                //==Landlord Schedule
                                foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                {
                                    LS = new RMS.Models.LandlordSchedule();
                                    LS.ScheduleDate = ScheduleDate;
                                    LS.AgreementSLNo = AI.AgreementSLNo;
                                    LS.LandlordSLNo = LI.LandlordSLNo;
                                    LS.MonthNo = i;
                                    LS.Year = CS.ScheduleDate.Year;
                                    LS.Month = CS.ScheduleDate.ToString("MMMM");
                                    LS.ReviewNo = 0;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                    }
                                    LS.CostPerUnit = AI.CostPerUnit;
                                    LS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    if (CS.TaxAmount > 0)
                                    {
                                        LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                    }
                                    //==
                                    LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - (LS.AdvanceAdjustmentAmount);
                                    LS.UserSLNo = AI.UserSLNo;
                                    LS.EntryDate = DateTime.Now;
                                    db.LandlordSchedules.Add(LS);
                                    db.SaveChanges();
                                }
                                //==Cost Allocation Schedule
                                foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                {
                                    CCS = new RMS.Models.CostCenterSchedule();
                                    CCS.ScheduleDate = ScheduleDate;
                                    CCS.AgreementSLNo = AI.AgreementSLNo;
                                    CCS.CCSLNo = CC.CCSLNo;
                                    CCS.MonthNo = i;
                                    CCS.Year = CS.ScheduleDate.Year;
                                    CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CCS.ReviewNo = 0;
                                    CCS.CostPerUnit = AI.CostPerUnit;
                                    CCS.TotalRentAmount = CS.TotalRentAmount;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                    }
                                    //==
                                    CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                    CCS.UserSLNo = AI.UserSLNo;
                                    CCS.EntryDate = DateTime.Now;
                                    db.CostCenterSchedules.Add(CCS);
                                    db.SaveChanges();
                                }
                            }
                        }
                        else if (AI.ReviewFrequency > 0)
                        {
                            //==Review Frequency (Repeated)
                            int ReviewCount = AI.ReviewFrequency + 1;
                            int ReviewNo = 0;
                            double NewCPU = AI.CostPerUnit;
                            for (int i = 1; i <= AI.AgreementPeriod; i++)
                            {
                                CS = new RMS.Models.ContractSchedule();
                                if (i != 1)
                                {
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                }
                                if (i <= AI.ReviewFrequency)
                                {
                                    //==Contract Schedule
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    CS.CostPerUnit = NewCPU;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    if (i == 1)
                                    {
                                        //==Full Month
                                        if (ScheduleDate.Day != 1)
                                        {
                                            //==Fraction Date Rent Amount
                                            MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                            RentPerDay = CS.TotalRentAmount / MonthDays;
                                            CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                        }
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                                else if (i == ReviewCount)
                                {
                                    //==Contract Schedule
                                    if (i != AI.AgreementPeriod)
                                    {
                                        ReviewNo = ReviewNo + 1;
                                    }
                                    ReviewCount = ReviewCount + AI.ReviewFrequency;
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    //==xx
                                    //==Last Month
                                    if (i == AI.AgreementPeriod)
                                    {
                                        CS.CostPerUnit = NewCPU;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        //==Full Month
                                        if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                            CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                        }
                                    }
                                    else
                                    {
                                        //==Fraction Month
                                        if (ScheduleDate.Day != 1)
                                        {
                                            //==Before Review Amount
                                            MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                            RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                            BeforeReviewAmount = (ScheduleDate.Day - 1) * RentPerDay;
                                            //==After Review Amount
                                            NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                            AfterReviewAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                            CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                        }
                                        else
                                        {
                                            NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    //==xx
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                                else
                                {
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    CS.CostPerUnit = NewCPU;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    //==Last Month
                                    if (i == AI.AgreementPeriod)
                                    {
                                        //==Full Month
                                        if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                            CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                        }
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                        else if (AI.ReviewFrequency < 1 && lstReviewInfo.Count > 0)
                        {
                            //==Review Declaration Wise
                            int MonthNo = 0;
                            int ReviewNo = 0;
                            double NewCPU = AI.CostPerUnit;
                            //==Review Wise
                            foreach (RMS.Models.ReviewInfo RI in lstReviewInfo)
                            {
                                ReviewNo = ReviewNo + 1;
                                if (RI.ReviewNo == 1)
                                {
                                    //==Schedule without Review
                                    int ReviewStartMonth = ((RI.StartDate.Year - AI.AgreementStartDate.Year) * 12 + RI.StartDate.Month - AI.AgreementStartDate.Month) + 1;
                                    for (int i = 1; i < ReviewStartMonth; i++)
                                    {
                                        MonthNo = MonthNo + 1;
                                        CS = new RMS.Models.ContractSchedule();
                                        if (i != 1)
                                        {
                                            ScheduleDate = ScheduleDate.AddMonths(1);
                                        }
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = 0;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        CS.CostPerUnit = AI.CostPerUnit;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        if (i == 1)
                                        {
                                            //==Full Month
                                            if (ScheduleDate.Day != 1)
                                            {
                                                //==Fraction Date Rent Amount
                                                MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                                RentPerDay = CS.TotalRentAmount / MonthDays;
                                                CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                            }
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = 0;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = AI.CostPerUnit;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = 0;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = AI.CostPerUnit;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                    //==Schedule with Review
                                    for (int i = 1; i <= RI.Period; i++)
                                    {
                                        MonthNo = MonthNo + 1;
                                        CS = new RMS.Models.ContractSchedule();
                                        ScheduleDate = ScheduleDate.AddMonths(1);
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        //==Fraction Month
                                        if (i == 1)
                                        {
                                            if (RI.StartDate.Day != 1)
                                            {
                                                //==Before Review Amount
                                                MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                                RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                                BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                                //==After Review Amount                                            
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                                AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                                CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                            }
                                            else
                                            {
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        //==Review Last Month
                                        else if (i == RI.Period)
                                        {
                                            ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                            //==Full Month
                                            if (RI.EndDate.Day != ReviewMonthDaysCount)
                                            {
                                                //==Fraction Date Rent Amount
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                                CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                            }
                                            else
                                            {
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = NewCPU;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = NewCPU;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    //==Schedule rest of the Review
                                    for (int i = 1; i <= RI.Period; i++)
                                    {
                                        CS = new RMS.Models.ContractSchedule();
                                        //==Conditions applicable for multiple enhancement slots are two enhancements in the same month
                                        if (i == 1 && ScheduleDate.Year == RI.StartDate.Year && ScheduleDate.Month == RI.StartDate.Month)
                                        {
                                            //===MonthNo wise Delete from Contract Schedule
                                            db.ContractSchedules.RemoveRange(db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //===MonthNo wise Delete from Landlord Schedule
                                            db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //===MonthNo wise Delete from Cost Center Schedule
                                            db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //==
                                        }
                                        else
                                        {
                                            MonthNo = MonthNo + 1;
                                            ScheduleDate = ScheduleDate.AddMonths(1);
                                        }
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        //==Fraction Month
                                        if (i == 1)
                                        {
                                            if (RI.StartDate.Day != 1)
                                            {
                                                //==Before Review Amount
                                                MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                                RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                                BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                                //==After Review Amount                                            
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                                AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                                CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                            }
                                            else
                                            {
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        //==Review Last Month
                                        else if (i == RI.Period)
                                        {
                                            ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                            //==Full Month
                                            if (RI.EndDate.Day != ReviewMonthDaysCount)
                                            {
                                                //==Fraction Date Rent Amount
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                                CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                            }
                                            else
                                            {
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = NewCPU;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = NewCPU;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                            }
                        }
                        #region Advance Adjustment
                        //==Advance Info Loop
                        DateTime AdvStartDate = DateTime.Now;
                        int AdvYear = 0;
                        string AdvMonthName = String.Empty;
                        double AdvAdjPerDay = 0;
                        double AdvAdjAmount = 0;
                        double AdvanceMonthDaysCount = 0;
                        foreach (RMS.Models.AdvanceInfo AdvInfo in lstAdvanceInfo)
                        {
                            AdvStartDate = AdvInfo.StartDate;
                            for (int i = 1; i <= AdvInfo.AdvanceSlotPeriod; i++)
                            {
                                if (i != 1)
                                {
                                    AdvStartDate = AdvStartDate.AddMonths(1);
                                }
                                AdvYear = AdvStartDate.Year;
                                AdvMonthName = AdvStartDate.ToString("MMMM");
                                AdvAdjAmount = AdvInfo.AdvanceSlotAmount;
                                //==Fraction Advance Adjustment
                                //==First Month
                                if (i == 1)
                                {
                                    if (AdvStartDate.Day != 1)
                                    {
                                        MonthDays = DateTime.DaysInMonth(AdvStartDate.Year, AdvStartDate.Month);
                                        //==Fraction Date Adv Adj Amount
                                        AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / MonthDays;
                                        AdvAdjAmount = ((MonthDays - AdvStartDate.Day) + 1) * AdvAdjPerDay;
                                    }
                                }
                                else
                                {
                                    //==Last Month
                                    if (i == AdvInfo.AdvanceSlotPeriod)
                                    {
                                        AdvanceMonthDaysCount = DateTime.DaysInMonth(AdvInfo.EndDate.Year, AdvInfo.EndDate.Month);
                                        if (AdvInfo.EndDate.Day != AdvanceMonthDaysCount)
                                        {
                                            //==Fraction Date Adv Adj Amount
                                            AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / AdvanceMonthDaysCount;
                                            AdvAdjAmount = AdvInfo.EndDate.Day * AdvAdjPerDay;
                                        }
                                    }
                                }
                                //==Advance Process Contract Schedule
                                RMS.Models.ContractSchedule GCS = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).SingleOrDefault();
                                GCS.AdvanceAdjustmentAmount = AdvAdjAmount;
                                GCS.NetRentAmount = GCS.NetRentAmount - GCS.AdvanceAdjustmentAmount;
                                //db.Entry(GCS).State = EntityState.Modified;
                                //db.SaveChanges();
                                //==Advance Process Landlord Schedule
                                List<RMS.Models.LandlordSchedule> lstGLS = db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                                foreach (RMS.Models.LandlordSchedule GLS in lstGLS)
                                {
                                    var GLandlordInfo = db.LandlordInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.LandlordSLNo == GLS.LandlordSLNo).Select(x => new { x.AdvanceAdjustmentPC, x.RentPC }).SingleOrDefault();
                                    GLS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * GLandlordInfo.AdvanceAdjustmentPC) / 100;
                                    GLS.NetRentAmount = GLS.NetRentAmount - GLS.AdvanceAdjustmentAmount;
                                    db.Entry(GLS).State = EntityState.Modified;
                                    db.SaveChanges();
                                }
                                //==Advance Process Cost Center Schedule
                                double CCSharePC = 0;
                                List<RMS.Models.CostCenterSchedule> lstGCCS = db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                                foreach (RMS.Models.CostCenterSchedule GCCS in lstGCCS)
                                {
                                    CCSharePC = db.CostCenterInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.CCSLNo == GCCS.CCSLNo).Select(x => x.CCShareAllotment).SingleOrDefault();
                                    GCCS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * CCSharePC) / 100;
                                    GCCS.NetRentAmount = GCCS.NetRentAmount - GCCS.AdvanceAdjustmentAmount;
                                    db.Entry(GCCS).State = EntityState.Modified;
                                    db.SaveChanges();
                                }
                            }
                        }
                        #endregion
                        #region Utility Schedule
                        //ScheduleDate = AI.AgreementStartDate.AddMonths(-1);
                        //for (int i = 1; i <= AI.AgreementPeriod; i++)
                        //{
                        //    ScheduleDate = ScheduleDate.AddMonths(1);
                        //    //==Utility Schedule
                        //    foreach (RMS.Models.UtilityInfo UI in lstUtility)
                        //    {
                        //        US = new RMS.Models.UtilitySchedule();
                        //        US.ScheduleDate = ScheduleDate;
                        //        US.AgreementSLNo = AI.AgreementSLNo;
                        //        US.UtilitySLNo = UI.UtilitySLNo;
                        //        US.MonthNo = i;
                        //        US.Year = US.ScheduleDate.Year;
                        //        US.Month = US.ScheduleDate.ToString("MMMM");
                        //        US.ServiceChargeAmount = UI.ServiceChargeAmount;
                        //        US.OnlineTowerAmount = UI.OnlineTowerAmount;
                        //        US.GeneratorSpaceAmount = UI.GeneratorSpaceAmount;
                        //        US.CarParkingAmount = UI.CarParkingAmount;
                        //        US.TaxAmount = UI.TaxAmount;
                        //        US.VATAmount = UI.VATAmount;
                        //        US.UserSLNo = AI.UserSLNo;
                        //        US.EntryDate = DateTime.Now;
                        //        db.UtilitySchedules.Add(US);
                        //        db.SaveChanges();
                        //    }
                        //}
                        #endregion
                        //==Remove the posted months from the new schedule
                        var ContractSchedules = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == true);
                        foreach (var item in ContractSchedules)
                        {
                            //===Delete
                            db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                            db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                        }
                        db.SaveChanges();
                        //var UtilitySchedules = db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == true);
                        //foreach (var item in UtilitySchedules)
                        //{
                        //    //===Delete
                        //    db.UtilitySchedules.RemoveRange(db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                        //}
                        //db.SaveChanges();
                        //==
                    } //==End
                    AlertMsg = "The modified agreement: " + AI.AgreementName + " has been updated.";
                    return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ModEditAttach(RMS.Models.AgreementInfoDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = (string)Session["LoginUserID"];
                    //==If change xModifiedAgreementSLNo
                    //if (DTO.xModifiedAgreementSLNo != DTO.yModifiedAgreementSLNo)
                    //{
                    //    //==Check available xModifiedAgreementSLNo
                    //    if (db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xModifiedAgreementSLNo && (x.IsRenewal == true || x.IsModified == true)).Any() == true)
                    //    {
                    //        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    //    }
                    //    //==Update old xModifiedAgreementSLNo
                    //    RMS.Models.AgreementInfo xAI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.yModifiedAgreementSLNo).SingleOrDefault();
                    //    xAI.IsModified = false;
                    //    xAI.yModifiedAgreementSLNo = 0;
                    //    db.Entry(xAI).State = EntityState.Modified;
                    //    db.SaveChanges();
                    //    //==Update new selected xModifiedAgreementSLNo
                    //    RMS.Models.AgreementInfo yAI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xModifiedAgreementSLNo).SingleOrDefault();
                    //    yAI.IsModified = true;
                    //    yAI.yModifiedAgreementSLNo = DTO.AgreementSLNo;
                    //    db.Entry(yAI).State = EntityState.Modified;
                    //    db.SaveChanges();
                    //}
                    //==
                    RMS.Models.AgreementInfo AI = new RMS.Models.AgreementInfo();
                    AI = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).SingleOrDefault();
                    //==Basic Info
                    AI.PremiseTypeSLNo = DTO.PremiseTypeSLNo;
                    AI.PremiseName = DTO.PremiseName;
                    AI.PremiseAddress = DTO.PremiseAddress;
                    AI.ConcernBranch = DTO.ConcernBranch;
                    AI.InspectorName = DTO.InspectorName;
                    AI.InspectorContactNo = DTO.InspectorContactNo;
                    AI.ClusterGroup = DTO.ClusterGroup;
                    //==Agreement Info
                    //if (DTO.xModifiedAgreementSLNo != DTO.yModifiedAgreementSLNo)
                    //{
                    //    //==New selected xModifiedAgreementSLNo
                    //    var CodeInfo = db.AgreementInfos.Where(x => x.AgreementSLNo == DTO.xModifiedAgreementSLNo).Select(x => new { x.AgreementCode, x.AgreementVersion }).SingleOrDefault();
                    //    AI.AgreementCode = CodeInfo.AgreementCode;
                    //    AI.AgreementVersion = CodeInfo.AgreementVersion + 1;
                    //    AI.AliasCode = AI.AgreementCode + "-M" + AI.AgreementVersion;
                    //    AI.xModifiedAgreementSLNo = DTO.xModifiedAgreementSLNo;
                    //}
                    //==Agreement Status Wise Update
                    AI.RentDueDay = DTO.RentDueDay;
                    if (AI.AgreementStatus == 1)
                    {
                        //==Agreement Info
                        AI.AgreementName = DTO.AgreementName;
                        AI.AgreementStartDate = DateTime.ParseExact(DTO.AgreementStartDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        AI.AgreementEndDate = DateTime.ParseExact(DTO.AgreementEndDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        AI.AgreementPeriod = DTO.AgreementPeriod;
                        AI.RenewalFrequency = AI.AgreementPeriod;
                        AI.UOM = DTO.UOM;
                        AI.TotalArea = DTO.TotalArea;
                        AI.CostPerUnit = DTO.CostPerUnit;
                        AI.TotalRentAmount = DTO.TotalRentAmount;
                        AI.SecurityDepositAmount = DTO.SecurityDepositAmount;
                        AI.AdvanceAmount = DTO.AdvanceAmount;
                        AI.AdditionalAdvanceAmount = DTO.AdditionalAdvanceAmount;
                        AI.AdvanceAdjustmentPeriod = DTO.AdvanceAdjustmentPeriod;
                        AI.AdvanceAdjustmentAmount = DTO.AdvanceAdjustmentAmount;
                        AI.TaxPercentage = DTO.TaxPercentage;
                        AI.TaxAmount = DTO.TaxAmount;
                        AI.VATPercentage = DTO.VATPercentage;
                        AI.VATAmount = DTO.VATAmount;
                        AI.NetRentAmount = AI.TotalRentAmount - AI.AdvanceAdjustmentAmount;
                        AI.AgreementText = DTO.AgreementText;
                        //AI.Status = DTO.Status;
                        AI.TaxType = DTO.TaxType;
                        AI.VatType = DTO.VatType;
                        AI.CalculationMethod = DTO.CalculationMethod;
                        AI.BorrowingRate = DTO.BorrowingRate;
                        AI.IsIFRSEnable = DTO.IsIFRSEnable;
                        if (DTO.IFRSEffectiveDate != null && DTO.IsIFRSEnable == true)
                        {
                            AI.IFRSEffectiveDate = DateTime.ParseExact(DTO.IFRSEffectiveDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        }
                        else
                        {
                            AI.IFRSEffectiveDate = null;
                        }
                        AI.CorporateTaxRate = DTO.CorporateTaxRate;
                    }
                    //==Control Data
                    AI.CashGLCode = DTO.CashGLCode;
                    AI.BankGLCode = DTO.BankGLCode;
                    AI.AdvanceGLCode = DTO.AdvanceGLCode;
                    AI.AdvanceAdjustmentGLCode = DTO.AdvanceAdjustmentGLCode;
                    AI.RentGLCode = DTO.RentGLCode;
                    AI.ServiceChargeGLCode = DTO.ServiceChargeGLCode;
                    AI.TaxGLCode = DTO.TaxGLCode;
                    AI.VATGLCode = DTO.VATGLCode;
                    AI.ProvisionGLTax = DTO.ProvisionGLTax;
                    AI.ProvisionGLAP = DTO.ProvisionGLAP;
                    AI.RTGSGL = DTO.RTGSGL;
                    AI.EFTNGL = DTO.EFTNGL;
                    AI.PayOrderGL = DTO.PayOrderGL;
                    AI.IBBPaymentGL = DTO.IBBPaymentGL;
                    AI.CityBrokerageGL = DTO.CityBrokerageGL;
                    AI.CityCapitalGL = DTO.CityCapitalGL;
                    AI.OthersGL = DTO.OthersGL;
                    //if (DTO.Status == 0)
                    //{
                    //    AI.IsBlock = true;
                    //    AI.BlockDate = DateTime.Now;
                    //    AI.BlockUserSLNo = AI.UserSLNo;
                    //}
                    //else
                    //{
                    //    AI.IsBlock = false;
                    //    AI.BlockDate = null;
                    //    AI.BlockUserSLNo = null;
                    //}
                    AI.EditBy = (string)Session["LoginUserID"];
                    AI.EditDate = DateTime.Now;
                    AI.IsDeleted = false;
                    //==Utility Master Info
                    AI.ReviewFrequency = DTO.ReviewFrequency;
                    AI.ReviewPercentage = DTO.ReviewPercentage;
                    AI.ServiceCharge = DTO.ServiceCharge;
                    AI.OnlineTower = DTO.OnlineTower;
                    AI.GeneratorSpace = DTO.GeneratorSpace;
                    AI.CarParking = DTO.CarParking;
                    //=====
                    AI.PremiseAddressBangla = DTO.PremiseAddressBangla;
                    AI.AreaStatus = DTO.AreaStatus;
                    AI.RegionalOffice = DTO.RegionalOffice;
                    AI.PrimarySOL = DTO.PrimarySOL;
                    AI.AttachedControl = DTO.AttachedControl;
                    AI.ControllerOfficeDistance = DTO.ControllerOfficeDistance;
                    AI.RoutingNumber = DTO.RoutingNumber;
                    AI.Division = DTO.Division;
                    AI.District = DTO.District;
                    AI.Upazila = DTO.Upazila;
                    AI.Thana = DTO.Thana;
                    AI.ThanaCode = DTO.ThanaCode;
                    AI.Pourasabha = DTO.Pourasabha;
                    AI.PourasabhaType = DTO.PourasabhaType;
                    AI.UnionName = DTO.UnionName;
                    AI.WardNo = DTO.WardNo;
                    AI.PremisesTypeforAccounts = DTO.PremisesTypeforAccounts;
                    AI.ParentAgreementCode = DTO.ParentAgreementCode;
                    AI.ElectricityLoad = DTO.ElectricityLoad;
                    AI.ElectricityProvidedBy = DTO.ElectricityProvidedBy;
                    AI.AITBourneBy = DTO.AITBourneBy;
                    AI.CommercialPermission = DTO.CommercialPermission;
                    AI.BuildingPlan = DTO.BuildingPlan;
                    AI.PremisesSituatedFloor = DTO.PremisesSituatedFloor;
                    AI.BangladeshBankApproval = DTO.BangladeshBankApproval;
                    AI.BangladeshBankReference = DTO.BangladeshBankReference;
                    AI.ITTowerRentClause = DTO.ITTowerRentClause;
                    AI.TerminationClause = DTO.TerminationClause;
                    AI.TerminationNoticePeriod = DTO.TerminationNoticePeriod;
                    if (DTO.PremisesOpeningDate != null)
                    {
                        AI.PremisesOpeningDate = DateTime.ParseExact(DTO.PremisesOpeningDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.PremisesOpeningDate = null;
                    }
                    if (DTO.DocumentDate != null)
                    {
                        AI.DocumentDate = DateTime.ParseExact(DTO.DocumentDate, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                    }
                    else
                    {
                        AI.DocumentDate = null;
                    }
                    AI.Remarks = DTO.Remarks;
                    AI.AgreementRemarks = DTO.AgreementRemarks;
                    AI.AdvanceRemarks = DTO.AdvanceRemarks;
                    AI.ReviewRemarks = DTO.ReviewRemarks;
                    AI.LLRemarks = DTO.LLRemarks;
                    AI.CCRemarks = DTO.CCRemarks;
                    AI.UtilityRemarks = DTO.UtilityRemarks;
                    AI.ControlDataRemarks = DTO.ControlDataRemarks;

                    AI.PaymentMethod = DTO.PaymentMethod;
                    AI.WithHoldingCode = DTO.WithHoldingCode;
                    AI.AdditionalExpense = DTO.AdditionalExpense;
                    AI.InitialDirectCost = DTO.InitialDirectCost;
                    AI.DismantlingCost = DTO.DismantlingCost;
                    AI.CarParkingNo = DTO.CarParkingNo;
                    AI.WaterBillType = DTO.WaterBillType;
                    AI.WaterBillAmount = DTO.WaterBillAmount;
                    //=====
                    db.Entry(AI).State = EntityState.Modified;
                    db.SaveChanges();
                    //==Space Information
                    //===Delete Existing Space Info
                    db.SpaceInfos.RemoveRange(db.SpaceInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                    db.SaveChanges();
                    //==
                    string[] SpaceTypeList = null;
                    if (DTO.SpaceTypeList != null)
                    {
                        SpaceTypeList = DTO.SpaceTypeList.Split(',');
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            SpaceTypeList[i] = SpaceTypeList[i].Trim();
                        }
                    }
                    string[] SpaceAreaList = null;
                    if (DTO.SpaceAreaList != null)
                    {
                        SpaceAreaList = DTO.SpaceAreaList.Split(',');
                        for (int i = 0; i < SpaceAreaList.Length; i++)
                        {
                            SpaceAreaList[i] = SpaceAreaList[i].Trim();
                        }
                    }
                    string[] SpaceRateList = null;
                    if (DTO.SpaceRateList != null)
                    {
                        SpaceRateList = DTO.SpaceRateList.Split(',');
                        for (int i = 0; i < SpaceRateList.Length; i++)
                        {
                            SpaceRateList[i] = SpaceRateList[i].Trim();
                        }
                    }
                    string[] SpaceRentList = null;
                    if (DTO.SpaceRentList != null)
                    {
                        SpaceRentList = DTO.SpaceRentList.Split(',');
                        for (int i = 0; i < SpaceRentList.Length; i++)
                        {
                            SpaceRentList[i] = SpaceRentList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdvanceList = null;
                    if (DTO.SpaceTotalAdvanceList != null)
                    {
                        SpaceTotalAdvanceList = DTO.SpaceTotalAdvanceList.Split(',');
                        for (int i = 0; i < SpaceTotalAdvanceList.Length; i++)
                        {
                            SpaceTotalAdvanceList[i] = SpaceTotalAdvanceList[i].Trim();
                        }
                    }
                    string[] SpaceTotalAdjustmentList = null;
                    if (DTO.SpaceTotalAdjustmentList != null)
                    {
                        SpaceTotalAdjustmentList = DTO.SpaceTotalAdjustmentList.Split(',');
                        for (int i = 0; i < SpaceTotalAdjustmentList.Length; i++)
                        {
                            SpaceTotalAdjustmentList[i] = SpaceTotalAdjustmentList[i].Trim();
                        }
                    }
                    string[] SpaceRemarksList = null;
                    if (DTO.SpaceRemarksList != null)
                    {
                        SpaceRemarksList = DTO.SpaceRemarksList.Split(',');
                        for (int i = 0; i < SpaceRemarksList.Length; i++)
                        {
                            SpaceRemarksList[i] = SpaceRemarksList[i].Trim();
                        }
                    }
                    if (SpaceTypeList != null)
                    {
                        RMS.Models.SpaceInfo SpaceInfo;
                        for (int i = 0; i < SpaceTypeList.Length; i++)
                        {
                            if (SpaceTypeList[i] != null && SpaceTypeList[i] != "")
                            {
                                SpaceInfo = new RMS.Models.SpaceInfo();
                                SpaceInfo.AgreementSLNo = AI.AgreementSLNo;
                                SpaceInfo.SpaceType = (SpaceTypeList == null) ? null : SpaceTypeList[i].ToString();
                                SpaceInfo.SpaceArea = Convert.ToDouble(SpaceAreaList[i].ToString());
                                SpaceInfo.SpaceRate = Convert.ToDouble(SpaceRateList[i].ToString());
                                SpaceInfo.SpaceRent = Convert.ToDouble(SpaceRentList[i].ToString());
                                SpaceInfo.SpaceTotalAdvance = Convert.ToDouble(SpaceTotalAdvanceList[i].ToString());
                                SpaceInfo.SpaceTotalAdjustment = Convert.ToDouble(SpaceTotalAdjustmentList[i].ToString());
                                SpaceInfo.SpaceRemarks = (SpaceRemarksList == null) ? null : SpaceRemarksList[i].ToString();
                                db.SpaceInfos.Add(SpaceInfo);
                                db.SaveChanges();
                            }
                        }
                    }
                    if (AI.AgreementStatus == 1)
                    {
                        //==Advance Information
                        //===Delete Existing Advance Info
                        db.AdvanceInfos.RemoveRange(db.AdvanceInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                        //==
                        string[] AdvanceNoList = null;
                        if (DTO.AdvanceNoList != null)
                        {
                            AdvanceNoList = DTO.AdvanceNoList.Split(',');
                            for (int i = 0; i < AdvanceNoList.Length; i++)
                            {
                                AdvanceNoList[i] = AdvanceNoList[i].Trim();
                            }
                        }
                        string[] AdvanceSlotPeriodList = null;
                        if (DTO.AdvanceSlotPeriodList != null)
                        {
                            AdvanceSlotPeriodList = DTO.AdvanceSlotPeriodList.Split(',');
                            for (int i = 0; i < AdvanceSlotPeriodList.Length; i++)
                            {
                                AdvanceSlotPeriodList[i] = AdvanceSlotPeriodList[i].Trim();
                            }
                        }
                        string[] AdvanceStartDateList = null;
                        if (DTO.AdvanceStartDateList != null)
                        {
                            AdvanceStartDateList = DTO.AdvanceStartDateList.Split(',');
                            for (int i = 0; i < AdvanceStartDateList.Length; i++)
                            {
                                AdvanceStartDateList[i] = AdvanceStartDateList[i].Trim();
                            }
                        }
                        string[] AdvanceEndDateList = null;
                        if (DTO.AdvanceEndDateList != null)
                        {
                            AdvanceEndDateList = DTO.AdvanceEndDateList.Split(',');
                            for (int i = 0; i < AdvanceEndDateList.Length; i++)
                            {
                                AdvanceEndDateList[i] = AdvanceEndDateList[i].Trim();
                            }
                        }
                        string[] AdvanceNoteList = null;
                        if (DTO.AdvanceNoteList != null)
                        {
                            AdvanceNoteList = DTO.AdvanceNoteList.Split(',');
                            for (int i = 0; i < AdvanceNoteList.Length; i++)
                            {
                                AdvanceNoteList[i] = AdvanceNoteList[i].Trim();
                            }
                        }
                        string[] AdvanceSlotAmountList = null;
                        if (DTO.AdvanceSlotAmountList != null)
                        {
                            AdvanceSlotAmountList = DTO.AdvanceSlotAmountList.Split(',');
                            for (int i = 0; i < AdvanceSlotAmountList.Length; i++)
                            {
                                AdvanceSlotAmountList[i] = AdvanceSlotAmountList[i].Trim();
                            }
                        }
                        if (AdvanceNoList != null)
                        {
                            RMS.Models.AdvanceInfo AdvInfo;
                            for (int i = 0; i < AdvanceNoList.Length; i++)
                            {
                                if (AdvanceNoList[i] != null && AdvanceNoList[i] != "")
                                {
                                    AdvInfo = new RMS.Models.AdvanceInfo();
                                    AdvInfo.AgreementSLNo = AI.AgreementSLNo;
                                    AdvInfo.AdvanceNo = Convert.ToInt32(AdvanceNoList[i].ToString());
                                    AdvInfo.AdvanceSlotPeriod = Convert.ToInt32(AdvanceSlotPeriodList[i].ToString());
                                    AdvInfo.StartDate = DateTime.ParseExact(AdvanceStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    AdvInfo.EndDate = DateTime.ParseExact(AdvanceEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    AdvInfo.AdvanceSlotAmount = Convert.ToDouble(AdvanceSlotAmountList[i].ToString());
                                    AdvInfo.AdvanceNote = (AdvanceNoteList == null) ? null : AdvanceNoteList[i].ToString();
                                    db.AdvanceInfos.Add(AdvInfo);
                                    db.SaveChanges();
                                }
                            }
                        }
                        //==Review Info
                        //===Delete Existing Review Info
                        db.ReviewInfos.RemoveRange(db.ReviewInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                        //==
                        string[] ReviewNoList = null;
                        if (DTO.ReviewNoList != null)
                        {
                            ReviewNoList = DTO.ReviewNoList.Split(',');
                            for (int i = 0; i < ReviewNoList.Length; i++)
                            {
                                ReviewNoList[i] = ReviewNoList[i].Trim();
                            }
                        }
                        string[] ReviewStartDateList = null;
                        if (DTO.ReviewStartDateList != null)
                        {
                            ReviewStartDateList = DTO.ReviewStartDateList.Split(',');
                            for (int i = 0; i < ReviewStartDateList.Length; i++)
                            {
                                ReviewStartDateList[i] = ReviewStartDateList[i].Trim();
                            }
                        }
                        string[] ReviewEndDateList = null;
                        if (DTO.ReviewEndDateList != null)
                        {
                            ReviewEndDateList = DTO.ReviewEndDateList.Split(',');
                            for (int i = 0; i < ReviewEndDateList.Length; i++)
                            {
                                ReviewEndDateList[i] = ReviewEndDateList[i].Trim();
                            }
                        }
                        string[] ReviewPeriodList = null;
                        if (DTO.ReviewPeriodList != null)
                        {
                            ReviewPeriodList = DTO.ReviewPeriodList.Split(',');
                            for (int i = 0; i < ReviewPeriodList.Length; i++)
                            {
                                ReviewPeriodList[i] = ReviewPeriodList[i].Trim();
                            }
                        }
                        string[] ReviewIncreaseAmountList = null;
                        if (DTO.ReviewIncreaseAmountList != null)
                        {
                            ReviewIncreaseAmountList = DTO.ReviewIncreaseAmountList.Split(',');
                            for (int i = 0; i < ReviewIncreaseAmountList.Length; i++)
                            {
                                ReviewIncreaseAmountList[i] = ReviewIncreaseAmountList[i].Trim();
                            }
                        }
                        string[] ReviewIncreasePercentageList = null;
                        if (DTO.ReviewIncreasePercentageList != null)
                        {
                            ReviewIncreasePercentageList = DTO.ReviewIncreasePercentageList.Split(',');
                            for (int i = 0; i < ReviewIncreasePercentageList.Length; i++)
                            {
                                ReviewIncreasePercentageList[i] = ReviewIncreasePercentageList[i].Trim();
                            }
                        }
                        string[] ReviewNoteList = null;
                        if (DTO.ReviewNoteList != null)
                        {
                            ReviewNoteList = DTO.ReviewNoteList.Split(',');
                            for (int i = 0; i < ReviewNoteList.Length; i++)
                            {
                                ReviewNoteList[i] = ReviewNoteList[i].Trim();
                            }
                        }
                        if (ReviewNoList != null)
                        {
                            RMS.Models.ReviewInfo RI;
                            for (int i = 0; i < ReviewNoList.Length; i++)
                            {
                                if (ReviewNoList[i] != null && ReviewNoList[i] != "")
                                {
                                    RI = new RMS.Models.ReviewInfo();
                                    RI.AgreementSLNo = AI.AgreementSLNo;
                                    RI.ReviewNo = Convert.ToInt32(ReviewNoList[i].ToString());
                                    RI.Period = Convert.ToInt32(ReviewPeriodList[i].ToString());
                                    RI.StartDate = DateTime.ParseExact(ReviewStartDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    RI.EndDate = DateTime.ParseExact(ReviewEndDateList[i], "dd/MM/yyyy", CultureInfo.InvariantCulture);
                                    RI.IncreaseAmount = Convert.ToDouble(ReviewIncreaseAmountList[i].ToString());
                                    RI.IncreasePercentage = Convert.ToDouble(ReviewIncreasePercentageList[i].ToString());
                                    RI.ReviewNote = (ReviewNoteList == null) ? null : ReviewNoteList[i].ToString();
                                    db.ReviewInfos.Add(RI);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                    //==Landlord Information
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Landlord Info
                        db.LandlordInfos.RemoveRange(db.LandlordInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        //===Update Existing Landlord Info
                        List<RMS.Models.LandlordInfo> lstOldLandlord = db.LandlordInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstOldLandlord.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    string[] VendorCodeList = null;
                    if (DTO.VendorCodeList != null)
                    {
                        VendorCodeList = DTO.VendorCodeList.Split(',');
                        for (int i = 0; i < VendorCodeList.Length; i++)
                        {
                            VendorCodeList[i] = VendorCodeList[i].Trim();
                        }
                    }
                    string[] LandlordNameList = null;
                    if (DTO.LandlordNameList != null)
                    {
                        LandlordNameList = DTO.LandlordNameList.Split(',');
                        for (int i = 0; i < LandlordNameList.Length; i++)
                        {
                            LandlordNameList[i] = LandlordNameList[i].Trim();
                        }
                    }
                    string[] ModeOfPaymentList = null;
                    if (DTO.ModeOfPaymentList != null)
                    {
                        ModeOfPaymentList = DTO.ModeOfPaymentList.Split(',');
                        for (int i = 0; i < ModeOfPaymentList.Length; i++)
                        {
                            ModeOfPaymentList[i] = ModeOfPaymentList[i].Trim();
                        }
                    }
                    string[] VendorAdvancePCList = null;
                    if (DTO.VendorAdvancePCList != null)
                    {
                        VendorAdvancePCList = DTO.VendorAdvancePCList.Split(',');
                        for (int i = 0; i < VendorAdvancePCList.Length; i++)
                        {
                            VendorAdvancePCList[i] = VendorAdvancePCList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAmountList = null;
                    if (DTO.VendorAdvanceAmountList != null)
                    {
                        VendorAdvanceAmountList = DTO.VendorAdvanceAmountList.Split(',');
                        for (int i = 0; i < VendorAdvanceAmountList.Length; i++)
                        {
                            VendorAdvanceAmountList[i] = VendorAdvanceAmountList[i].Trim();
                        }
                    }
                    string[] VendorAdvanceAdjustmentPCList = null;
                    if (DTO.VendorAdvanceAdjustmentPCList != null)
                    {
                        VendorAdvanceAdjustmentPCList = DTO.VendorAdvanceAdjustmentPCList.Split(',');
                        for (int i = 0; i < VendorAdvanceAdjustmentPCList.Length; i++)
                        {
                            VendorAdvanceAdjustmentPCList[i] = VendorAdvanceAdjustmentPCList[i].Trim();
                        }
                    }
                    //string[] VendorAdvanceAdjustmentAmountList = null;
                    //if (DTO.VendorAdvanceAdjustmentAmountList != null)
                    //{
                    //    VendorAdvanceAdjustmentAmountList = DTO.VendorAdvanceAdjustmentAmountList.Split(',');
                    //    for (int i = 0; i < VendorAdvanceAdjustmentAmountList.Length; i++)
                    //    {
                    //        VendorAdvanceAdjustmentAmountList[i] = VendorAdvanceAdjustmentAmountList[i].Trim();
                    //    }
                    //}
                    string[] VendorTaxPCList = null;
                    if (DTO.VendorTaxPCList != null)
                    {
                        VendorTaxPCList = DTO.VendorTaxPCList.Split(',');
                        for (int i = 0; i < VendorTaxPCList.Length; i++)
                        {
                            VendorTaxPCList[i] = VendorTaxPCList[i].Trim();
                        }
                    }
                    string[] VendorTaxAmountList = null;
                    if (DTO.VendorTaxAmountList != null)
                    {
                        VendorTaxAmountList = DTO.VendorTaxAmountList.Split(',');
                        for (int i = 0; i < VendorTaxAmountList.Length; i++)
                        {
                            VendorTaxAmountList[i] = VendorTaxAmountList[i].Trim();
                        }
                    }
                    string[] VendorVATPCList = null;
                    if (DTO.VendorVATPCList != null)
                    {
                        VendorVATPCList = DTO.VendorVATPCList.Split(',');
                        for (int i = 0; i < VendorVATPCList.Length; i++)
                        {
                            VendorVATPCList[i] = VendorVATPCList[i].Trim();
                        }
                    }
                    string[] VendorVATAmountList = null;
                    if (DTO.VendorVATAmountList != null)
                    {
                        VendorVATAmountList = DTO.VendorVATAmountList.Split(',');
                        for (int i = 0; i < VendorVATAmountList.Length; i++)
                        {
                            VendorVATAmountList[i] = VendorVATAmountList[i].Trim();
                        }
                    }
                    string[] VendorRentPCList = null;
                    if (DTO.VendorRentPCList != null)
                    {
                        VendorRentPCList = DTO.VendorRentPCList.Split(',');
                        for (int i = 0; i < VendorRentPCList.Length; i++)
                        {
                            VendorRentPCList[i] = VendorRentPCList[i].Trim();
                        }
                    }
                    //string[] VendorRentAmountList = null;
                    //if (DTO.VendorRentAmountList != null)
                    //{
                    //    VendorRentAmountList = DTO.VendorRentAmountList.Split(',');
                    //    for (int i = 0; i < VendorRentAmountList.Length; i++)
                    //    {
                    //        VendorRentAmountList[i] = VendorRentAmountList[i].Trim();
                    //    }
                    //}
                    string[] AddressList = null;
                    if (DTO.LLAddressList != null)
                    {
                        AddressList = DTO.LLAddressList.Split(',');
                        for (int i = 0; i < AddressList.Length; i++)
                        {
                            AddressList[i] = AddressList[i].Trim();
                        }
                    }
                    string[] ContactNoList = null;
                    if (DTO.LLContactNoList != null)
                    {
                        ContactNoList = DTO.LLContactNoList.Split(',');
                        for (int i = 0; i < ContactNoList.Length; i++)
                        {
                            ContactNoList[i] = ContactNoList[i].Trim();
                        }
                    }
                    string[] EmailList = null;
                    if (DTO.LLEmailList != null)
                    {
                        EmailList = DTO.LLEmailList.Split(',');
                        for (int i = 0; i < EmailList.Length; i++)
                        {
                            EmailList[i] = EmailList[i].Trim();
                        }
                    }
                    string[] ACNoList = null;
                    if (DTO.ACNoList != null)
                    {
                        ACNoList = DTO.ACNoList.Split(',');
                        for (int i = 0; i < ACNoList.Length; i++)
                        {
                            ACNoList[i] = ACNoList[i].Trim();
                        }
                    }
                    string[] BankNameList = null;
                    if (DTO.BankNameList != null)
                    {
                        BankNameList = DTO.BankNameList.Split(',');
                        for (int i = 0; i < BankNameList.Length; i++)
                        {
                            BankNameList[i] = BankNameList[i].Trim();
                        }
                    }
                    string[] BranchNameList = null;
                    if (DTO.BranchNameList != null)
                    {
                        BranchNameList = DTO.BranchNameList.Split(',');
                        for (int i = 0; i < BranchNameList.Length; i++)
                        {
                            BranchNameList[i] = BranchNameList[i].Trim();
                        }
                    }
                    string[] RoutingNoList = null;
                    if (DTO.RoutingNoList != null)
                    {
                        RoutingNoList = DTO.RoutingNoList.Split(',');
                        for (int i = 0; i < RoutingNoList.Length; i++)
                        {
                            RoutingNoList[i] = RoutingNoList[i].Trim();
                        }
                    }
                    RMS.Models.LandlordInfo LInfo;
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    for (int i = 0; i < VendorCodeList.Length; i++)
                    {
                        if (VendorCodeList[i] != null && VendorCodeList[i] != "")
                        {
                            LInfo = new RMS.Models.LandlordInfo();
                            LInfo.AgreementSLNo = DTO.AgreementSLNo;
                            LInfo.VendorCode = (VendorCodeList == null) ? null : VendorCodeList[i].ToString();
                            LInfo.LandlordName = (LandlordNameList == null) ? null : LandlordNameList[i].ToString();
                            if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { LInfo.ModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { LInfo.ModeOfPayment = ModeOfPaymentLocation.RTGS; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { LInfo.ModeOfPayment = ModeOfPaymentLocation.EFTN; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { LInfo.ModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { LInfo.ModeOfPayment = ModeOfPaymentLocation.Cash; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { LInfo.ModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { LInfo.ModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { LInfo.ModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                            else if (ModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { LInfo.ModeOfPayment = ModeOfPaymentLocation.Others; }
                            LInfo.AdvancePC = Convert.ToDouble(VendorAdvancePCList[i].ToString());
                            LInfo.AdvanceAdjustmentPC = Convert.ToDouble(VendorAdvanceAdjustmentPCList[i].ToString());
                            LInfo.TaxPC = Convert.ToDouble(VendorTaxPCList[i].ToString());
                            LInfo.VATPC = Convert.ToDouble(VendorVATPCList[i].ToString());
                            LInfo.RentPC = Convert.ToDouble(VendorRentPCList[i].ToString());
                            //==PC Amount
                            LInfo.AdvanceAmount = ((AI.AdvanceAmount + AI.AdditionalAdvanceAmount) * LInfo.AdvancePC) / 100;
                            LInfo.TaxAmount = (AI.TaxAmount * LInfo.TaxPC) / 100;
                            LInfo.VATAmount = (AI.VATAmount * LInfo.VATPC) / 100;
                            //==
                            LInfo.LLAddress = (AddressList == null) ? null : AddressList[i].ToString();
                            LInfo.LLContactNo = (ContactNoList == null) ? null : ContactNoList[i].ToString();
                            LInfo.LLEmail = (EmailList == null) ? null : EmailList[i].ToString();
                            LInfo.ACNo = (ACNoList == null) ? null : ACNoList[i].ToString();
                            LInfo.BankName = (BankNameList == null) ? null : BankNameList[i].ToString();
                            LInfo.BranchName = (BranchNameList == null) ? null : BranchNameList[i].ToString();
                            LInfo.RoutingNo = (RoutingNoList == null) ? null : RoutingNoList[i].ToString();
                            db.LandlordInfos.Add(LInfo);
                            db.SaveChanges();
                        }
                    }
                    //==Cost Center
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Cost Center Info
                        db.CostCenterInfos.RemoveRange(db.CostCenterInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        List<RMS.Models.CostCenterInfo> lstCC = db.CostCenterInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstCC.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    //==Cost Center
                    string[] CCCodeList = null;
                    if (DTO.CCCodeList != null)
                    {
                        CCCodeList = DTO.CCCodeList.Split(',');
                        for (int i = 0; i < CCCodeList.Length; i++)
                        {
                            CCCodeList[i] = CCCodeList[i].Trim();
                        }
                    }
                    string[] CCNameList = null;
                    if (DTO.CCNameList != null)
                    {
                        CCNameList = DTO.CCNameList.Split(',');
                        for (int i = 0; i < CCNameList.Length; i++)
                        {
                            CCNameList[i] = CCNameList[i].Trim();
                        }
                    }
                    string[] SOLCodeList = null;
                    if (DTO.SOLCodeList != null)
                    {
                        SOLCodeList = DTO.SOLCodeList.Split(',');
                        for (int i = 0; i < SOLCodeList.Length; i++)
                        {
                            SOLCodeList[i] = SOLCodeList[i].Trim();
                        }
                    }
                    string[] SOLNameList = null;
                    if (DTO.SOLNameList != null)
                    {
                        SOLNameList = DTO.SOLNameList.Split(',');
                        for (int i = 0; i < SOLNameList.Length; i++)
                        {
                            SOLNameList[i] = SOLNameList[i].Trim();
                        }
                    }
                    string[] CCShareAllotmentList = null;
                    if (DTO.CCShareAllotmentList != null)
                    {
                        CCShareAllotmentList = DTO.CCShareAllotmentList.Split(',');
                        for (int i = 0; i < CCShareAllotmentList.Length; i++)
                        {
                            CCShareAllotmentList[i] = CCShareAllotmentList[i].Trim();
                        }
                    }
                    RMS.Models.CostCenterInfo CCinfo;
                    for (int i = 0; i < CCCodeList.Length; i++)
                    {
                        if (CCCodeList[i] != null && CCCodeList[i] != "")
                        {
                            CCinfo = new RMS.Models.CostCenterInfo();
                            CCinfo.AgreementSLNo = DTO.AgreementSLNo;
                            CCinfo.CCCode = (CCCodeList == null) ? null : CCCodeList[i].ToString();
                            CCinfo.CCName = (CCNameList == null) ? null : CCNameList[i].ToString();
                            CCinfo.SOLCode = (SOLCodeList == null) ? null : SOLCodeList[i].ToString();
                            CCinfo.SOLName = (SOLNameList == null) ? null : SOLNameList[i].ToString();
                            CCinfo.CCShareAllotment = Convert.ToDouble(CCShareAllotmentList[i].ToString());
                            db.CostCenterInfos.Add(CCinfo);
                            db.SaveChanges();
                        }
                    }
                    //==Utility Information
                    if (AI.AgreementStatus == 1)
                    {
                        //===Delete Existing Utility Info
                        db.UtilityInfos.RemoveRange(db.UtilityInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    else
                    {
                        List<RMS.Models.UtilityInfo> lstOldUtility = db.UtilityInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        lstOldUtility.ToList().ForEach(x => { x.IsOld = true; });
                        db.SaveChanges();
                    }
                    //==
                    string[] UtilityVendorCodeList = null;
                    if (DTO.UtilityVendorCodeList != null)
                    {
                        UtilityVendorCodeList = DTO.UtilityVendorCodeList.Split(',');
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            UtilityVendorCodeList[i] = UtilityVendorCodeList[i].Trim();
                        }
                    }
                    string[] UtilityLandlordNameList = null;
                    if (DTO.UtilityLandlordNameList != null)
                    {
                        UtilityLandlordNameList = DTO.UtilityLandlordNameList.Split(',');
                        for (int i = 0; i < UtilityLandlordNameList.Length; i++)
                        {
                            UtilityLandlordNameList[i] = UtilityLandlordNameList[i].Trim();
                        }
                    }
                    string[] UtilityModeOfPaymentList = null;
                    if (DTO.UtilityModeOfPaymentList != null)
                    {
                        UtilityModeOfPaymentList = DTO.UtilityModeOfPaymentList.Split(',');
                        for (int i = 0; i < UtilityModeOfPaymentList.Length; i++)
                        {
                            UtilityModeOfPaymentList[i] = UtilityModeOfPaymentList[i].Trim();
                        }
                    }

                    string[] ServiceChargePCList = null;
                    if (DTO.ServiceChargePCList != null)
                    {
                        ServiceChargePCList = DTO.ServiceChargePCList.Split(',');
                        for (int i = 0; i < ServiceChargePCList.Length; i++)
                        {
                            ServiceChargePCList[i] = ServiceChargePCList[i].Trim();
                        }
                    }
                    string[] ServiceChargeAmountList = null;
                    if (DTO.ServiceChargeAmountList != null)
                    {
                        ServiceChargeAmountList = DTO.ServiceChargeAmountList.Split(',');
                        for (int i = 0; i < ServiceChargeAmountList.Length; i++)
                        {
                            ServiceChargeAmountList[i] = ServiceChargeAmountList[i].Trim();
                        }
                    }

                    string[] OnlineTowerPCList = null;
                    if (DTO.OnlineTowerPCList != null)
                    {
                        OnlineTowerPCList = DTO.OnlineTowerPCList.Split(',');
                        for (int i = 0; i < OnlineTowerPCList.Length; i++)
                        {
                            OnlineTowerPCList[i] = OnlineTowerPCList[i].Trim();
                        }
                    }
                    string[] OnlineTowerAmountList = null;
                    if (DTO.OnlineTowerAmountList != null)
                    {
                        OnlineTowerAmountList = DTO.OnlineTowerAmountList.Split(',');
                        for (int i = 0; i < OnlineTowerAmountList.Length; i++)
                        {
                            OnlineTowerAmountList[i] = OnlineTowerAmountList[i].Trim();
                        }
                    }

                    string[] GeneratorSpacePCList = null;
                    if (DTO.GeneratorSpacePCList != null)
                    {
                        GeneratorSpacePCList = DTO.GeneratorSpacePCList.Split(',');
                        for (int i = 0; i < GeneratorSpacePCList.Length; i++)
                        {
                            GeneratorSpacePCList[i] = GeneratorSpacePCList[i].Trim();
                        }
                    }
                    string[] GeneratorSpaceAmountList = null;
                    if (DTO.GeneratorSpaceAmountList != null)
                    {
                        GeneratorSpaceAmountList = DTO.GeneratorSpaceAmountList.Split(',');
                        for (int i = 0; i < GeneratorSpaceAmountList.Length; i++)
                        {
                            GeneratorSpaceAmountList[i] = GeneratorSpaceAmountList[i].Trim();
                        }
                    }

                    string[] CarParkingPCList = null;
                    if (DTO.CarParkingPCList != null)
                    {
                        CarParkingPCList = DTO.CarParkingPCList.Split(',');
                        for (int i = 0; i < CarParkingPCList.Length; i++)
                        {
                            CarParkingPCList[i] = CarParkingPCList[i].Trim();
                        }
                    }
                    string[] CarParkingAmountList = null;
                    if (DTO.CarParkingAmountList != null)
                    {
                        CarParkingAmountList = DTO.CarParkingAmountList.Split(',');
                        for (int i = 0; i < CarParkingAmountList.Length; i++)
                        {
                            CarParkingAmountList[i] = CarParkingAmountList[i].Trim();
                        }
                    }
                    string[] UtilityTaxPCList = null;
                    if (DTO.UtilityTaxPCList != null)
                    {
                        UtilityTaxPCList = DTO.UtilityTaxPCList.Split(',');
                        for (int i = 0; i < UtilityTaxPCList.Length; i++)
                        {
                            UtilityTaxPCList[i] = UtilityTaxPCList[i].Trim();
                        }
                    }
                    string[] UtilityTaxAmountList = null;
                    if (DTO.UtilityTaxAmountList != null)
                    {
                        UtilityTaxAmountList = DTO.UtilityTaxAmountList.Split(',');
                        for (int i = 0; i < UtilityTaxAmountList.Length; i++)
                        {
                            UtilityTaxAmountList[i] = UtilityTaxAmountList[i].Trim();
                        }
                    }
                    string[] UtilityVATPCList = null;
                    if (DTO.UtilityVATPCList != null)
                    {
                        UtilityVATPCList = DTO.UtilityVATPCList.Split(',');
                        for (int i = 0; i < UtilityVATPCList.Length; i++)
                        {
                            UtilityVATPCList[i] = UtilityVATPCList[i].Trim();
                        }
                    }
                    string[] UtilityVATAmountList = null;
                    if (DTO.UtilityVATAmountList != null)
                    {
                        UtilityVATAmountList = DTO.UtilityVATAmountList.Split(',');
                        for (int i = 0; i < UtilityVATAmountList.Length; i++)
                        {
                            UtilityVATAmountList[i] = UtilityVATAmountList[i].Trim();
                        }
                    }
                    string[] UtilityAddressList = null;
                    if (DTO.UtilityAddressList != null)
                    {
                        UtilityAddressList = DTO.UtilityAddressList.Split(',');
                        for (int i = 0; i < UtilityAddressList.Length; i++)
                        {
                            UtilityAddressList[i] = UtilityAddressList[i].Trim();
                        }
                    }
                    string[] UtilityContactNoList = null;
                    if (DTO.UtilityContactNoList != null)
                    {
                        UtilityContactNoList = DTO.UtilityContactNoList.Split(',');
                        for (int i = 0; i < UtilityContactNoList.Length; i++)
                        {
                            UtilityContactNoList[i] = UtilityContactNoList[i].Trim();
                        }
                    }
                    string[] UtilityEmailList = null;
                    if (DTO.UtilityEmailList != null)
                    {
                        UtilityEmailList = DTO.UtilityEmailList.Split(',');
                        for (int i = 0; i < UtilityEmailList.Length; i++)
                        {
                            UtilityEmailList[i] = UtilityEmailList[i].Trim();
                        }
                    }
                    string[] UtilityACNoList = null;
                    if (DTO.UtilityACNoList != null)
                    {
                        UtilityACNoList = DTO.UtilityACNoList.Split(',');
                        for (int i = 0; i < UtilityACNoList.Length; i++)
                        {
                            UtilityACNoList[i] = UtilityACNoList[i].Trim();
                        }
                    }
                    string[] UtilityBankNameList = null;
                    if (DTO.UtilityBankNameList != null)
                    {
                        UtilityBankNameList = DTO.UtilityBankNameList.Split(',');
                        for (int i = 0; i < UtilityBankNameList.Length; i++)
                        {
                            UtilityBankNameList[i] = UtilityBankNameList[i].Trim();
                        }
                    }
                    string[] UtilityBranchNameList = null;
                    if (DTO.UtilityBranchNameList != null)
                    {
                        UtilityBranchNameList = DTO.UtilityBranchNameList.Split(',');
                        for (int i = 0; i < UtilityBranchNameList.Length; i++)
                        {
                            UtilityBranchNameList[i] = UtilityBranchNameList[i].Trim();
                        }
                    }
                    string[] UtilityRoutingNoList = null;
                    if (DTO.UtilityRoutingNoList != null)
                    {
                        UtilityRoutingNoList = DTO.UtilityRoutingNoList.Split(',');
                        for (int i = 0; i < UtilityRoutingNoList.Length; i++)
                        {
                            UtilityRoutingNoList[i] = UtilityRoutingNoList[i].Trim();
                        }
                    }
                    if (UtilityVendorCodeList != null)
                    {
                        RMS.Models.UtilityInfo UI;
                        for (int i = 0; i < UtilityVendorCodeList.Length; i++)
                        {
                            if (UtilityVendorCodeList[i] != null && UtilityVendorCodeList[i] != "")
                            {
                                UI = new RMS.Models.UtilityInfo();
                                UI.AgreementSLNo = AI.AgreementSLNo;
                                UI.UtilityVendorCode = (UtilityVendorCodeList == null) ? null : UtilityVendorCodeList[i].ToString();
                                UI.UtilityLandlordName = (UtilityLandlordNameList == null) ? null : UtilityLandlordNameList[i].ToString();
                                if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strAccountTransfer) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.AccountTransfer; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strRTGS) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.RTGS; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strEFTN) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.EFTN; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strPayOrder) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.PayOrder; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCash) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Cash; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strIBBPayment) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.IBBPayment; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityBrokerage) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityBrokerage; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strCityCapital) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.CityCapital; }
                                else if (UtilityModeOfPaymentList[i].ToString() == ModeOfPaymentLocation.strOthers) { UI.UtilityModeOfPayment = ModeOfPaymentLocation.Others; }

                                UI.ServiceChargePC = Convert.ToDouble(ServiceChargePCList[i].ToString());
                                UI.ServiceChargeAmount = Convert.ToDouble(ServiceChargeAmountList[i].ToString());

                                UI.OnlineTowerPC = Convert.ToDouble(OnlineTowerPCList[i].ToString());
                                UI.OnlineTowerAmount = Convert.ToDouble(OnlineTowerAmountList[i].ToString());

                                UI.GeneratorSpacePC = Convert.ToDouble(GeneratorSpacePCList[i].ToString());
                                UI.GeneratorSpaceAmount = Convert.ToDouble(GeneratorSpaceAmountList[i].ToString());

                                UI.CarParkingPC = Convert.ToDouble(CarParkingPCList[i].ToString());
                                UI.CarParkingAmount = Convert.ToDouble(CarParkingAmountList[i].ToString());

                                UI.TaxPC = Convert.ToDouble(UtilityTaxPCList[i].ToString());
                                UI.TaxAmount = Convert.ToDouble(UtilityTaxAmountList[i].ToString());
                                UI.VATPC = Convert.ToDouble(UtilityVATPCList[i].ToString());
                                UI.VATAmount = Convert.ToDouble(UtilityVATAmountList[i].ToString());
                                UI.UtilityAddress = (UtilityAddressList == null) ? null : UtilityAddressList[i].ToString();
                                UI.UtilityContactNo = (UtilityContactNoList == null) ? null : UtilityContactNoList[i].ToString();
                                UI.UtilityEmail = (UtilityEmailList == null) ? null : UtilityEmailList[i].ToString();
                                UI.UtilityACNo = (UtilityACNoList == null) ? null : UtilityACNoList[i].ToString();
                                UI.UtilityBankName = (UtilityBankNameList == null) ? null : UtilityBankNameList[i].ToString();
                                UI.UtilityBranchName = (UtilityBranchNameList == null) ? null : UtilityBranchNameList[i].ToString();
                                UI.UtilityRoutingNo = (UtilityRoutingNoList == null) ? null : UtilityRoutingNoList[i].ToString();
                                db.UtilityInfos.Add(UI);
                                db.SaveChanges();
                            }
                        }
                    }
                    //==Attach Documents
                    string[] FUFileNameList = null;
                    if (DTO.FUFileNameList != null)
                    {
                        FUFileNameList = DTO.FUFileNameList.Split(',');
                        for (int i = 0; i < FUFileNameList.Length; i++)
                        {
                            FUFileNameList[i] = FUFileNameList[i].Trim();
                        }
                    }
                    var originalDirectory = new DirectoryInfo(string.Format("{0}Content\\FileUpload\\", Server.MapPath(@"\")));
                    string pathString = Path.Combine(originalDirectory.ToString(), AI.AliasCode);
                    if (DTO.FUFileNameList != null)
                    {
                        //==Delete physical file
                        var xlstFU = db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && !FUFileNameList.Contains(x.FileName)).ToList();
                        foreach (var item in xlstFU)
                        {
                            //==Delete File
                            FileInfo file = new FileInfo(string.Format("{0}\\{1}", pathString, item.FileName));
                            if (file.Exists)//check file exsit or not  
                            {
                                file.Delete();
                            }
                            else
                            {
                                //==Nothing
                            }
                        }
                        //==Delete Existing Attached File
                        db.FileUploadInfos.RemoveRange(db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo && !FUFileNameList.Contains(x.FileName)));
                        db.SaveChanges();
                    }
                    else
                    {
                        //==Delete physical file
                        var xlstFU = db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo).ToList();
                        foreach (var item in xlstFU)
                        {
                            //==Delete File
                            FileInfo file = new FileInfo(string.Format("{0}\\{1}", pathString, item.FileName));
                            if (file.Exists)//check file exsit or not  
                            {
                                file.Delete();
                            }
                            else
                            {
                                //==Nothing
                            }
                        }
                        //==Delete Existing Attached File
                        db.FileUploadInfos.RemoveRange(db.FileUploadInfos.Where(x => x.AgreementSLNo == DTO.AgreementSLNo));
                        db.SaveChanges();
                    }
                    if (DTO.files != null)
                    {
                        RMS.Models.FileUploadInfo FU;
                        foreach (var file in DTO.files)
                        {
                            //Save file content goes here
                            if (file != null && file.ContentLength > 0)
                            {
                                //==table update
                                if (db.FileUploadInfos.Any(x => x.AgreementSLNo == AI.AgreementSLNo && x.FileName == file.FileName) == false)
                                {
                                    FU = new RMS.Models.FileUploadInfo();
                                    FU.AgreementSLNo = AI.AgreementSLNo;
                                    FU.FileName = file.FileName;
                                    FU.FilePath = "Content/FileUpload/" + AI.AliasCode + "/" + file.FileName;
                                    db.FileUploadInfos.Add(FU);
                                    db.SaveChanges();
                                }
                                //==Physical file save
                                bool isExists = System.IO.Directory.Exists(pathString);
                                if (!isExists)
                                    System.IO.Directory.CreateDirectory(pathString);
                                var path = string.Format("{0}\\{1}", pathString, file.FileName);
                                file.SaveAs(path);
                            }
                        }
                    }
                    //==Re-schedule Landlord, Cost Center, Utility if Agreement Activated
                    if (AI.AgreementStatus == 2)
                    {
                        //===Delete Existing Landlord Schedule
                        db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        db.SaveChanges();
                        //===Delete Existing Cost Center Schedule
                        db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        db.SaveChanges();
                        //===Delete Existing Utility Schedule
                        //db.UtilitySchedules.RemoveRange(db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false));
                        //db.SaveChanges();
                        //==Contract Rent Schedule
                        RMS.Models.ContractSchedule CS = new RMS.Models.ContractSchedule();
                        RMS.Models.LandlordSchedule LS = new RMS.Models.LandlordSchedule();
                        RMS.Models.CostCenterSchedule CCS = new RMS.Models.CostCenterSchedule();
                        //RMS.Models.UtilitySchedule US = new RMS.Models.UtilitySchedule();
                        RMS.Models.IFRSSchedule IFRS = new RMS.Models.IFRSSchedule();
                        List<RMS.Models.LandlordInfo> lstLandlords = db.LandlordInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        List<RMS.Models.CostCenterInfo> lstCostCenter = db.CostCenterInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        //List<RMS.Models.UtilityInfo> lstUtility = db.UtilityInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsOld == false).ToList();
                        List<RMS.Models.ReviewInfo> lstReviewInfo = db.ReviewInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).OrderBy(x => x.ReviewNo).ToList();
                        List<RMS.Models.AdvanceInfo> lstAdvanceInfo = db.AdvanceInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).OrderBy(x => x.AdvanceNo).ToList();
                        DateTime ScheduleDate = AI.AgreementStartDate;
                        //===xxx====
                        int LastMonthDaysCount = DateTime.DaysInMonth(AI.AgreementEndDate.Year, AI.AgreementEndDate.Month);
                        int ReviewMonthDaysCount = 0;
                        int MonthDays = 0;

                        double RentPerDay = 0;
                        double BeforeReviewAmount = 0;
                        double AfterReviewAmount = 0;
                        double NetCalcAmount = 0;
                        if (AI.ReviewFrequency < 1 && lstReviewInfo.Count == 0)
                        {
                            //==Without Review
                            for (int i = 1; i <= AI.AgreementPeriod; i++)
                            {
                                CS = new RMS.Models.ContractSchedule();
                                if (i != 1)
                                {
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                }
                                //==Contract Schedule
                                CS.ScheduleDate = ScheduleDate;
                                CS.AgreementSLNo = AI.AgreementSLNo;
                                CS.MonthNo = i;
                                CS.Year = CS.ScheduleDate.Year;
                                CS.Month = CS.ScheduleDate.ToString("MMMM");
                                CS.ReviewNo = 0;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                }
                                CS.CostPerUnit = AI.CostPerUnit;
                                CS.TotalRentAmount = AI.CostPerUnit * AI.TotalArea;
                                //==First Month
                                if (i == 1)
                                {
                                    //==Full Month
                                    if (ScheduleDate.Day != 1)
                                    {
                                        //==Fraction Date Rent Amount
                                        MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                        RentPerDay = CS.TotalRentAmount / MonthDays;
                                        CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                    }
                                }
                                //==Last Month
                                else if (i == AI.AgreementPeriod)
                                {
                                    //==Full Month
                                    if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                    {
                                        //==Fraction Date Rent Amount
                                        RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                        CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                    }
                                }
                                #region "Tax Type & VAT Type"
                                //1. Inclusive Inclusive
                                if (AI.TaxType == 1 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //2. Inclusive Exclusive
                                else if (AI.TaxType == 1 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //3. Inclusive Exempted
                                else if (AI.TaxType == 1 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //4. Exclusive Inclusive
                                else if (AI.TaxType == 2 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //5. Exclusive Exclusive
                                else if (AI.TaxType == 2 && AI.VatType == 2)
                                {
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //6. Exclusive Exempted
                                else if (AI.TaxType == 2 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //7. Exempted  Inclusive
                                else if (AI.TaxType == 3 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //8. Exempted  Exclusive
                                else if (AI.TaxType == 3 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //9. Exempted Exempted
                                else if (AI.TaxType == 3 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                #endregion
                                CS.UserSLNo = AI.UserSLNo;
                                CS.EntryDate = DateTime.Now;
                                //db.ContractSchedules.Add(CS);
                                //db.SaveChanges();
                                //==Landlord Schedule
                                foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                {
                                    LS = new RMS.Models.LandlordSchedule();
                                    LS.ScheduleDate = ScheduleDate;
                                    LS.AgreementSLNo = AI.AgreementSLNo;
                                    LS.LandlordSLNo = LI.LandlordSLNo;
                                    LS.MonthNo = i;
                                    LS.Year = CS.ScheduleDate.Year;
                                    LS.Month = CS.ScheduleDate.ToString("MMMM");
                                    LS.ReviewNo = 0;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                    }
                                    LS.CostPerUnit = AI.CostPerUnit;
                                    LS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    if (CS.TaxAmount > 0)
                                    {
                                        LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                    }
                                    //==
                                    LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - (LS.AdvanceAdjustmentAmount);
                                    LS.UserSLNo = AI.UserSLNo;
                                    LS.EntryDate = DateTime.Now;
                                    db.LandlordSchedules.Add(LS);
                                    db.SaveChanges();
                                }
                                //==Cost Allocation Schedule
                                foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                {
                                    CCS = new RMS.Models.CostCenterSchedule();
                                    CCS.ScheduleDate = ScheduleDate;
                                    CCS.AgreementSLNo = AI.AgreementSLNo;
                                    CCS.CCSLNo = CC.CCSLNo;
                                    CCS.MonthNo = i;
                                    CCS.Year = CS.ScheduleDate.Year;
                                    CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CCS.ReviewNo = 0;
                                    CCS.CostPerUnit = AI.CostPerUnit;
                                    CCS.TotalRentAmount = CS.TotalRentAmount;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                    }
                                    //==
                                    CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                    CCS.UserSLNo = AI.UserSLNo;
                                    CCS.EntryDate = DateTime.Now;
                                    db.CostCenterSchedules.Add(CCS);
                                    db.SaveChanges();
                                }
                            }
                        }
                        else if (AI.ReviewFrequency > 0)
                        {
                            //==Review Frequency (Repeated)
                            int ReviewCount = AI.ReviewFrequency + 1;
                            int ReviewNo = 0;
                            double NewCPU = AI.CostPerUnit;
                            for (int i = 1; i <= AI.AgreementPeriod; i++)
                            {
                                CS = new RMS.Models.ContractSchedule();
                                if (i != 1)
                                {
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                }
                                if (i <= AI.ReviewFrequency)
                                {
                                    //==Contract Schedule
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    CS.CostPerUnit = NewCPU;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    if (i == 1)
                                    {
                                        //==Full Month
                                        if (ScheduleDate.Day != 1)
                                        {
                                            //==Fraction Date Rent Amount
                                            MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                            RentPerDay = CS.TotalRentAmount / MonthDays;
                                            CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                        }
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                                else if (i == ReviewCount)
                                {
                                    //==Contract Schedule
                                    if (i != AI.AgreementPeriod)
                                    {
                                        ReviewNo = ReviewNo + 1;
                                    }
                                    ReviewCount = ReviewCount + AI.ReviewFrequency;
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    //==xx
                                    //==Last Month
                                    if (i == AI.AgreementPeriod)
                                    {
                                        CS.CostPerUnit = NewCPU;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        //==Full Month
                                        if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                            CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                        }
                                    }
                                    else
                                    {
                                        //==Fraction Month
                                        if (ScheduleDate.Day != 1)
                                        {
                                            //==Before Review Amount
                                            MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                            RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                            BeforeReviewAmount = (ScheduleDate.Day - 1) * RentPerDay;
                                            //==After Review Amount
                                            NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                            AfterReviewAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                            CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                        }
                                        else
                                        {
                                            NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    //==xx
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                                else
                                {
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = i;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    CS.CostPerUnit = NewCPU;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    //==Last Month
                                    if (i == AI.AgreementPeriod)
                                    {
                                        //==Full Month
                                        if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                            CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                        }
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    //db.ContractSchedules.Add(CS);
                                    //db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = i;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = i;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (i <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                        else if (AI.ReviewFrequency < 1 && lstReviewInfo.Count > 0)
                        {
                            //==Review Declaration Wise
                            int MonthNo = 0;
                            int ReviewNo = 0;
                            double NewCPU = AI.CostPerUnit;
                            //==Review Wise
                            foreach (RMS.Models.ReviewInfo RI in lstReviewInfo)
                            {
                                ReviewNo = ReviewNo + 1;
                                if (RI.ReviewNo == 1)
                                {
                                    //==Schedule without Review
                                    int ReviewStartMonth = ((RI.StartDate.Year - AI.AgreementStartDate.Year) * 12 + RI.StartDate.Month - AI.AgreementStartDate.Month) + 1;
                                    for (int i = 1; i < ReviewStartMonth; i++)
                                    {
                                        MonthNo = MonthNo + 1;
                                        CS = new RMS.Models.ContractSchedule();
                                        if (i != 1)
                                        {
                                            ScheduleDate = ScheduleDate.AddMonths(1);
                                        }
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = 0;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        CS.CostPerUnit = AI.CostPerUnit;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        if (i == 1)
                                        {
                                            //==Full Month
                                            if (ScheduleDate.Day != 1)
                                            {
                                                //==Fraction Date Rent Amount
                                                MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                                RentPerDay = CS.TotalRentAmount / MonthDays;
                                                CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                            }
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = 0;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = AI.CostPerUnit;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = 0;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = AI.CostPerUnit;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                    //==Schedule with Review
                                    for (int i = 1; i <= RI.Period; i++)
                                    {
                                        MonthNo = MonthNo + 1;
                                        CS = new RMS.Models.ContractSchedule();
                                        ScheduleDate = ScheduleDate.AddMonths(1);
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        //==Fraction Month
                                        if (i == 1)
                                        {
                                            if (RI.StartDate.Day != 1)
                                            {
                                                //==Before Review Amount
                                                MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                                RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                                BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                                //==After Review Amount                                            
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                                AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                                CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                            }
                                            else
                                            {
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        //==Review Last Month
                                        else if (i == RI.Period)
                                        {
                                            ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                            //==Full Month
                                            if (RI.EndDate.Day != ReviewMonthDaysCount)
                                            {
                                                //==Fraction Date Rent Amount
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                                CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                            }
                                            else
                                            {
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = NewCPU;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = NewCPU;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                                else
                                {
                                    //==Schedule rest of the Review
                                    for (int i = 1; i <= RI.Period; i++)
                                    {
                                        CS = new RMS.Models.ContractSchedule();
                                        //==Conditions applicable for multiple enhancement slots are two enhancements in the same month
                                        if (i == 1 && ScheduleDate.Year == RI.StartDate.Year && ScheduleDate.Month == RI.StartDate.Month)
                                        {
                                            //===MonthNo wise Delete from Contract Schedule
                                            db.ContractSchedules.RemoveRange(db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //===MonthNo wise Delete from Landlord Schedule
                                            db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //===MonthNo wise Delete from Cost Center Schedule
                                            db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.MonthNo == MonthNo));
                                            db.SaveChanges();
                                            //==
                                        }
                                        else
                                        {
                                            MonthNo = MonthNo + 1;
                                            ScheduleDate = ScheduleDate.AddMonths(1);
                                        }
                                        //==Contract Schedule
                                        CS.ScheduleDate = ScheduleDate;
                                        CS.AgreementSLNo = AI.AgreementSLNo;
                                        CS.MonthNo = MonthNo;
                                        CS.Year = CS.ScheduleDate.Year;
                                        CS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                        }
                                        //==Fraction Month
                                        if (i == 1)
                                        {
                                            if (RI.StartDate.Day != 1)
                                            {
                                                //==Before Review Amount
                                                MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                                RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                                BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                                //==After Review Amount                                            
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                                AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                                CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                            }
                                            else
                                            {
                                                if (RI.IncreaseAmount > 0)
                                                {
                                                    NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                                }
                                                else
                                                {
                                                    NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                                }
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        //==Review Last Month
                                        else if (i == RI.Period)
                                        {
                                            ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                            //==Full Month
                                            if (RI.EndDate.Day != ReviewMonthDaysCount)
                                            {
                                                //==Fraction Date Rent Amount
                                                CS.CostPerUnit = NewCPU;
                                                RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                                CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                            }
                                            else
                                            {
                                                CS.CostPerUnit = NewCPU;
                                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                            }
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                        #region "Tax Type & VAT Type"
                                        //1. Inclusive Inclusive
                                        if (AI.TaxType == 1 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //2. Inclusive Exclusive
                                        else if (AI.TaxType == 1 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //3. Inclusive Exempted
                                        else if (AI.TaxType == 1 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //4. Exclusive Inclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                            CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //5. Exclusive Exclusive
                                        else if (AI.TaxType == 2 && AI.VatType == 2)
                                        {
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //6. Exclusive Exempted
                                        else if (AI.TaxType == 2 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //7. Exempted  Inclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 1)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //8. Exempted  Exclusive
                                        else if (AI.TaxType == 3 && AI.VatType == 2)
                                        {
                                            CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        //9. Exempted Exempted
                                        else if (AI.TaxType == 3 && AI.VatType == 3)
                                        {
                                            CS.VATAmount = 0;
                                            CS.TaxAmount = 0;
                                            NetCalcAmount = CS.TotalRentAmount;
                                            CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                            CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                        }
                                        #endregion
                                        CS.UserSLNo = AI.UserSLNo;
                                        CS.EntryDate = DateTime.Now;
                                        //db.ContractSchedules.Add(CS);
                                        //db.SaveChanges();
                                        //==Landlord Schedule
                                        foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                        {
                                            LS = new RMS.Models.LandlordSchedule();
                                            LS.ScheduleDate = ScheduleDate;
                                            LS.AgreementSLNo = AI.AgreementSLNo;
                                            LS.LandlordSLNo = LI.LandlordSLNo;
                                            LS.MonthNo = MonthNo;
                                            LS.Year = CS.ScheduleDate.Year;
                                            LS.Month = CS.ScheduleDate.ToString("MMMM");
                                            LS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                            }
                                            LS.CostPerUnit = NewCPU;
                                            LS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                            LS.UserSLNo = AI.UserSLNo;
                                            LS.EntryDate = DateTime.Now;
                                            db.LandlordSchedules.Add(LS);
                                            db.SaveChanges();
                                        }
                                        //==Cost Allocation Schedule
                                        foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                        {
                                            CCS = new RMS.Models.CostCenterSchedule();
                                            CCS.ScheduleDate = ScheduleDate;
                                            CCS.AgreementSLNo = AI.AgreementSLNo;
                                            CCS.CCSLNo = CC.CCSLNo;
                                            CCS.MonthNo = MonthNo;
                                            CCS.Year = CS.ScheduleDate.Year;
                                            CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                            CCS.ReviewNo = ReviewNo;
                                            if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                            {
                                                CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.TaxAmount > 0)
                                            {
                                                CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                            }
                                            if (CS.VATAmount > 0)
                                            {
                                                CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                            }
                                            CCS.CostPerUnit = NewCPU;
                                            CCS.TotalRentAmount = CS.TotalRentAmount;
                                            //==
                                            CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                            CCS.UserSLNo = AI.UserSLNo;
                                            CCS.EntryDate = DateTime.Now;
                                            db.CostCenterSchedules.Add(CCS);
                                            db.SaveChanges();
                                        }
                                    }
                                }
                            }
                        }
                        #region Advance Adjustment
                        //==Advance Info Loop
                        DateTime AdvStartDate = DateTime.Now;
                        int AdvYear = 0;
                        string AdvMonthName = String.Empty;
                        double AdvAdjPerDay = 0;
                        double AdvAdjAmount = 0;
                        double AdvanceMonthDaysCount = 0;
                        foreach (RMS.Models.AdvanceInfo AdvInfo in lstAdvanceInfo)
                        {
                            AdvStartDate = AdvInfo.StartDate;
                            for (int i = 1; i <= AdvInfo.AdvanceSlotPeriod; i++)
                            {
                                if (i != 1)
                                {
                                    AdvStartDate = AdvStartDate.AddMonths(1);
                                }
                                AdvYear = AdvStartDate.Year;
                                AdvMonthName = AdvStartDate.ToString("MMMM");
                                AdvAdjAmount = AdvInfo.AdvanceSlotAmount;
                                //==Fraction Advance Adjustment
                                //==First Month
                                if (i == 1)
                                {
                                    if (AdvStartDate.Day != 1)
                                    {
                                        MonthDays = DateTime.DaysInMonth(AdvStartDate.Year, AdvStartDate.Month);
                                        //==Fraction Date Adv Adj Amount
                                        AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / MonthDays;
                                        AdvAdjAmount = ((MonthDays - AdvStartDate.Day) + 1) * AdvAdjPerDay;
                                    }
                                }
                                else
                                {
                                    //==Last Month
                                    if (i == AdvInfo.AdvanceSlotPeriod)
                                    {
                                        AdvanceMonthDaysCount = DateTime.DaysInMonth(AdvInfo.EndDate.Year, AdvInfo.EndDate.Month);
                                        if (AdvInfo.EndDate.Day != AdvanceMonthDaysCount)
                                        {
                                            //==Fraction Date Adv Adj Amount
                                            AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / AdvanceMonthDaysCount;
                                            AdvAdjAmount = AdvInfo.EndDate.Day * AdvAdjPerDay;
                                        }
                                    }
                                }
                                //==Advance Process Contract Schedule
                                RMS.Models.ContractSchedule GCS = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).SingleOrDefault();
                                GCS.AdvanceAdjustmentAmount = AdvAdjAmount;
                                GCS.NetRentAmount = GCS.NetRentAmount - GCS.AdvanceAdjustmentAmount;
                                //db.Entry(GCS).State = EntityState.Modified;
                                //db.SaveChanges();
                                //==Advance Process Landlord Schedule
                                List<RMS.Models.LandlordSchedule> lstGLS = db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                                foreach (RMS.Models.LandlordSchedule GLS in lstGLS)
                                {
                                    var GLandlordInfo = db.LandlordInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.LandlordSLNo == GLS.LandlordSLNo).Select(x => new { x.AdvanceAdjustmentPC, x.RentPC }).SingleOrDefault();
                                    GLS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * GLandlordInfo.AdvanceAdjustmentPC) / 100;
                                    GLS.NetRentAmount = GLS.NetRentAmount - GLS.AdvanceAdjustmentAmount;
                                    db.Entry(GLS).State = EntityState.Modified;
                                    db.SaveChanges();
                                }
                                //==Advance Process Cost Center Schedule
                                double CCSharePC = 0;
                                List<RMS.Models.CostCenterSchedule> lstGCCS = db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                                foreach (RMS.Models.CostCenterSchedule GCCS in lstGCCS)
                                {
                                    CCSharePC = db.CostCenterInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.CCSLNo == GCCS.CCSLNo).Select(x => x.CCShareAllotment).SingleOrDefault();
                                    GCCS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * CCSharePC) / 100;
                                    GCCS.NetRentAmount = GCCS.NetRentAmount - GCCS.AdvanceAdjustmentAmount;
                                    db.Entry(GCCS).State = EntityState.Modified;
                                    db.SaveChanges();
                                }
                            }
                        }
                        #endregion
                        #region Utility Schedule
                        //ScheduleDate = AI.AgreementStartDate.AddMonths(-1);
                        //for (int i = 1; i <= AI.AgreementPeriod; i++)
                        //{
                        //    ScheduleDate = ScheduleDate.AddMonths(1);
                        //    //==Utility Schedule
                        //    foreach (RMS.Models.UtilityInfo UI in lstUtility)
                        //    {
                        //        US = new RMS.Models.UtilitySchedule();
                        //        US.ScheduleDate = ScheduleDate;
                        //        US.AgreementSLNo = AI.AgreementSLNo;
                        //        US.UtilitySLNo = UI.UtilitySLNo;
                        //        US.MonthNo = i;
                        //        US.Year = US.ScheduleDate.Year;
                        //        US.Month = US.ScheduleDate.ToString("MMMM");
                        //        US.ServiceChargeAmount = UI.ServiceChargeAmount;
                        //        US.OnlineTowerAmount = UI.OnlineTowerAmount;
                        //        US.GeneratorSpaceAmount = UI.GeneratorSpaceAmount;
                        //        US.CarParkingAmount = UI.CarParkingAmount;
                        //        US.TaxAmount = UI.TaxAmount;
                        //        US.VATAmount = UI.VATAmount;
                        //        US.UserSLNo = AI.UserSLNo;
                        //        US.EntryDate = DateTime.Now;
                        //        db.UtilitySchedules.Add(US);
                        //        db.SaveChanges();
                        //    }
                        //}
                        #endregion
                        //==Remove the posted months from the new schedule
                        var ContractSchedules = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == true);
                        foreach (var item in ContractSchedules)
                        {
                            //===Delete
                            db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                            db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                        }
                        db.SaveChanges();
                        //var UtilitySchedules = db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == true);
                        //foreach (var item in UtilitySchedules)
                        //{
                        //    //===Delete
                        //    db.UtilitySchedules.RemoveRange(db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo && x.IsPosted == false && x.Year == item.Year && x.Month == item.Month).ToList());
                        //}
                        //db.SaveChanges();
                        //==
                    } //==End
                    AlertMsg = "The modified agreement: " + AI.AgreementName + " has been updated.";
                    return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }


        [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
        public sealed class ValidateHeaderAntiForgeryTokenAttribute : FilterAttribute, IAuthorizationFilter
        {
            public void OnAuthorization(AuthorizationContext filterContext)
            {
                if (filterContext == null)
                {
                    throw new ArgumentNullException("filterContext");
                }

                var httpContext = filterContext.HttpContext;
                var cookie = httpContext.Request.Cookies[AntiForgeryConfig.CookieName];
                AntiForgery.Validate(cookie != null ? cookie.Value : null, httpContext.Request.Headers["__RequestVerificationToken"]);
            }
        }

        [HttpGet]
        public ActionResult RedirectAgreementDetails(int AgreementSLNo, int ClickIndex)
        {
            TempData.Remove("AgreementSLNo");
            TempData.Remove("ClickIndex");
            TempData.Add("AgreementSLNo", AgreementSLNo);
            TempData.Add("ClickIndex", ClickIndex);
            return RedirectToAction("AgreementDetails");
        }

        [HttpGet]
        public ActionResult AgreementDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strAgreementSLNo = TempData["AgreementSLNo"];
                    if (strAgreementSLNo == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int AgreementSLNo = Convert.ToInt32(strAgreementSLNo);
                    var strClickIndex = TempData["ClickIndex"];
                    if (strClickIndex == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int ClickIndex = Convert.ToInt32(strClickIndex);
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    DTOBasic DTOBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    if (ClickIndex == 15)
                    {
                        ViewBag.URLPath = "AgreementInfo/RedirectReAgreementIndex?ViewID=5";
                    }
                    else
                    {
                        ViewBag.URLPath = "AgreementInfo/RedirectAgreementIndex?ViewID=" + ClickIndex;
                    }
                    //==Status
                    ViewBag.Status = (List<RMS.Models.StatusInfo>)db.StatusInfos.ToList();
                    //==Water Bill Type meter reading
                    IList<SelectListItem> WaterBillTypeList = new List<SelectListItem>();
                    WaterBillTypeList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Meter Reading", Value = "Meter Reading" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Fixed Value", Value = "Fixed Value" });
                    SelectList WaterBillTypeStatus = new SelectList(WaterBillTypeList, "Value", "Text");
                    ViewBag.WaterBillTypeList = WaterBillTypeStatus;
                    //======Lookup
                    var lstLookup = db.Lookups
                        .Where(x => (x.GroupName == "Cost Center" || x.GroupName == "SOL" || x.GroupName == "Bank" || x.GroupName == "Regional Office"
                        || x.GroupName == "Division" || x.GroupName == "District" || x.GroupName == "Upazila" || x.GroupName == "Thana"
                        || x.GroupName == "Premises Type for Accounts" || x.GroupName == "Sub Premises Type" || x.GroupName == "Payment Method") &&
                        x.Status == DTOBasic.active && x.IsDeleted == false).ToList();
                    //==Bank Info
                    ViewBag.BankInfoList = lstLookup.Where(x => x.GroupName == "Bank").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==CC Info
                    ViewBag.CCInfoList = lstLookup.Where(x => x.GroupName == "Cost Center").Select(x => new { CCSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==SOL Info
                    ViewBag.SOLInfoList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { SOLSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premise Type
                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();
                    //==Area Status
                    IList<SelectListItem> AreaStatusList = new List<SelectListItem>();
                    AreaStatusList.Add(new SelectListItem { Text = "Select Area Status", Value = "0" });
                    AreaStatusList.Add(new SelectListItem { Text = "Urban", Value = "Urban" });
                    AreaStatusList.Add(new SelectListItem { Text = "Rural", Value = "Rural" });
                    SelectList AreaStatus = new SelectList(AreaStatusList, "Value", "Text");
                    ViewBag.AreaStatusList = AreaStatus;
                    //==Regional Office 
                    ViewBag.RegionalOfficeList = lstLookup.Where(x => x.GroupName == "Regional Office").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Primary SOL 
                    ViewBag.PrimarySOLList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Attached Control
                    ViewBag.AttachedControlList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Division
                    ViewBag.DivisionList = lstLookup.Where(x => x.GroupName == "Division").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==District
                    ViewBag.DistrictList = lstLookup.Where(x => x.GroupName == "District").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Upazila
                    ViewBag.UpazilaList = lstLookup.Where(x => x.GroupName == "Upazila").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Thana
                    ViewBag.ThanaList = lstLookup.Where(x => x.GroupName == "Thana").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premises Type for Accounts
                    ViewBag.PremisesTypeforAccountsList = lstLookup.Where(x => x.GroupName == "Premises Type for Accounts").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Provided By
                    IList<SelectListItem> ProvidedByList = new List<SelectListItem>();
                    ProvidedByList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    ProvidedByList.Add(new SelectListItem { Text = "Company", Value = "1" });
                    ProvidedByList.Add(new SelectListItem { Text = "Landlord", Value = "2" });
                    ProvidedByList.Add(new SelectListItem { Text = "Others", Value = "3" });
                    SelectList ProvidedByStatus = new SelectList(ProvidedByList, "Value", "Text");
                    ViewBag.ProvidedByList = ProvidedByStatus;
                    //==Yes No
                    IList<SelectListItem> YesNoList = new List<SelectListItem>();
                    YesNoList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    YesNoList.Add(new SelectListItem { Text = "Yes", Value = "1" });
                    YesNoList.Add(new SelectListItem { Text = "No", Value = "2" });
                    SelectList YesNoStatus = new SelectList(YesNoList, "Value", "Text");
                    ViewBag.YesNoList = YesNoStatus;
                    //==Sub Premises Type
                    ViewBag.SubPremisesTypeList = lstLookup.Where(x => x.GroupName == "Sub Premises Type").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Payment Method
                    ViewBag.PaymentMethodList = lstLookup.Where(x => x.GroupName == "Payment Method").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Calculation Method
                    IList<SelectListItem> CalculationMethodList = new List<SelectListItem>();
                    CalculationMethodList.Add(new SelectListItem { Text = "Current Month", Value = "Current Month" });
                    CalculationMethodList.Add(new SelectListItem { Text = "Following Month", Value = "Following Month" });
                    SelectList CalculationMethod = new SelectList(CalculationMethodList, "Value", "Text");
                    ViewBag.CalculationMethodList = CalculationMethod;
                    //======Lookup
                    //==UOM
                    IList<SelectListItem> UOMList = new List<SelectListItem>();
                    UOMList.Add(new SelectListItem { Text = "Select Unit of Measurement", Value = "0" });
                    UOMList.Add(new SelectListItem { Text = "Square Feet", Value = "1" });
                    UOMList.Add(new SelectListItem { Text = "Square Meter", Value = "2" });
                    SelectList UOM = new SelectList(UOMList, "Value", "Text");
                    ViewBag.UOMList = UOM;
                    //==Tax Type
                    IList<SelectListItem> TaxTypeList = new List<SelectListItem>();
                    //TaxTypeList.Add(new SelectListItem { Text = "Select Tax Type", Value = "0" });
                    TaxTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList TaxType = new SelectList(TaxTypeList, "Value", "Text");
                    ViewBag.TaxTypeList = TaxType;
                    //==Vat Type
                    IList<SelectListItem> VatTypeList = new List<SelectListItem>();
                    //VatTypeList.Add(new SelectListItem { Text = "Select VAT Type", Value = "0" });
                    VatTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    VatTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    VatTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList VatType = new SelectList(VatTypeList, "Value", "Text");
                    ViewBag.VatTypeList = VatType;
                    //==Mode of Payment
                    IList<SelectListItem> ModeOfPaymentList = new List<SelectListItem>();
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Select Mode of Payment", Value = "0" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Account Transfer", Value = "Account Transfer" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "RTGS", Value = "RTGS" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "EFTN", Value = "EFTN" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Pay Order", Value = "Pay Order" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Cash", Value = "Cash" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "IBB Payment", Value = "IBB Payment" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Brokerage", Value = "City Brokerage" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Capital", Value = "City Capital" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Others", Value = "Others" });
                    SelectList ModeOfPayment = new SelectList(ModeOfPaymentList, "Value", "Text");
                    ViewBag.ModeOfPaymentList = ModeOfPayment;
                    //==Space Info
                    List<RMS.Models.SpaceInfoDTO> lstSpace = new List<RMS.Models.SpaceInfoDTO>();
                    var querySpace = from SP in db.SpaceInfos
                                     where SP.AgreementSLNo == AgreementSLNo
                                     orderby SP.SpaceSLNo ascending
                                     select new
                                     {
                                         SP.SpaceType,
                                         SP.SpaceArea,
                                         SP.SpaceRate,
                                         SP.SpaceRent,
                                         SP.SpaceTotalAdvance,
                                         SP.SpaceTotalAdjustment,
                                         SP.SpaceRemarks,
                                     };
                    lstSpace = querySpace.AsEnumerable().Select(x => new RMS.Models.SpaceInfoDTO
                    {
                        SpaceType = x.SpaceType,
                        SpaceArea = x.SpaceArea,
                        SpaceRate = x.SpaceRate,
                        SpaceRent = x.SpaceRent,
                        SpaceTotalAdvance = x.SpaceTotalAdvance,
                        SpaceTotalAdjustment = x.SpaceTotalAdjustment,
                        SpaceRemarks = x.SpaceRemarks,
                    }).ToList();
                    if (lstSpace.Count > 0)
                    {
                        for (int i = 0; i < lstSpace.Count; i++)
                        {
                            lstSpace[i].SpaceRowNumber = "_" + (i + 1).ToString();
                            lstSpace[i].SpaceftrCount = lstSpace.Count;
                        }
                    }
                    ViewBag.lstSpace = lstSpace;
                    //==Advance Info
                    List<RMS.Models.AdvanceInfoDTO> lstAdvance = new List<RMS.Models.AdvanceInfoDTO>();
                    var queryAdvance = from Adv in db.AdvanceInfos
                                       where Adv.AgreementSLNo == AgreementSLNo
                                       orderby Adv.AdvanceSLNo ascending
                                       select new
                                       {
                                           Adv.AdvanceNo,
                                           Adv.AdvanceSlotPeriod,
                                           Adv.StartDate,
                                           Adv.EndDate,
                                           Adv.AdvanceNote,
                                           Adv.AdvanceSlotAmount,
                                       };
                    lstAdvance = queryAdvance.AsEnumerable().Select(x => new RMS.Models.AdvanceInfoDTO
                    {
                        AdvanceNo = x.AdvanceNo,
                        AdvanceSlotPeriod = x.AdvanceSlotPeriod,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        AdvanceNote = x.AdvanceNote,
                        AdvanceSlotAmount = x.AdvanceSlotAmount,
                    }).ToList();
                    if (lstAdvance.Count > 0)
                    {
                        for (int i = 0; i < lstAdvance.Count; i++)
                        {
                            lstAdvance[i].AdvanceRowNumber = "_" + (i + 1).ToString();
                            lstAdvance[i].AdvanceftrCount = lstAdvance.Count;
                        }
                    }
                    ViewBag.lstAdvance = lstAdvance;
                    //==Review Info
                    List<RMS.Models.ReviewInfoDTO> lstReview = new List<RMS.Models.ReviewInfoDTO>();
                    var queryReview = from RI in db.ReviewInfos
                                      where RI.AgreementSLNo == AgreementSLNo
                                      orderby RI.ReviewSLNo ascending
                                      select new
                                      {
                                          RI.ReviewNo,
                                          RI.StartDate,
                                          RI.EndDate,
                                          RI.Period,
                                          RI.IncreaseAmount,
                                          RI.IncreasePercentage,
                                          RI.ReviewNote,
                                      };
                    lstReview = queryReview.AsEnumerable().Select(x => new RMS.Models.ReviewInfoDTO
                    {
                        ReviewNo = x.ReviewNo,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        Period = x.Period,
                        IncreaseAmount = x.IncreaseAmount,
                        IncreasePercentage = x.IncreasePercentage,
                        ReviewNote = x.ReviewNote,
                    }).ToList();
                    if (lstReview.Count > 0)
                    {
                        for (int i = 0; i < lstReview.Count; i++)
                        {
                            lstReview[i].ReviewRowNumber = "_" + (i + 1).ToString();
                            lstReview[i].ReviewftrCount = lstReview.Count;
                        }
                    }
                    ViewBag.lstReview = lstReview;
                    //==Landlord Information
                    List<RMS.Models.LandlordInfoDTO> lstLandlord = new List<RMS.Models.LandlordInfoDTO>();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    var queryLandlord = from LI in db.LandlordInfos
                                        where LI.AgreementSLNo == AgreementSLNo && LI.IsOld == false
                                        orderby LI.LandlordSLNo ascending
                                        select new
                                        {
                                            //==Landlord Info
                                            LI.LandlordSLNo,
                                            LI.AgreementSLNo,
                                            LI.VendorCode,
                                            LI.LandlordName,
                                            LI.ModeOfPayment,
                                            LI.AdvancePC,
                                            LI.AdvanceAmount,
                                            LI.AdvanceAdjustmentPC,
                                            LI.AdvanceAdjustmentAmount,
                                            LI.TaxPC,
                                            LI.TaxAmount,
                                            LI.VATPC,
                                            LI.VATAmount,
                                            LI.RentPC,
                                            LI.RentAmount,
                                            LI.LLAddress,
                                            LI.LLContactNo,
                                            LI.LLEmail,
                                            LI.ACNo,
                                            LI.BankName,
                                            LI.BranchName,
                                            LI.RoutingNo,
                                        };
                    lstLandlord = queryLandlord.AsEnumerable().Select(x => new RMS.Models.LandlordInfoDTO
                    {
                        //==Landlord Info
                        LandlordSLNo = x.AgreementSLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        VendorCode = x.VendorCode,
                        LandlordName = x.LandlordName,
                        ModeOfPayment = x.ModeOfPayment,
                        VendorAdvancePC = x.AdvancePC,
                        VendorAdvanceAmount = x.AdvanceAmount,
                        VendorAdvanceAdjustmentPC = x.AdvanceAdjustmentPC,
                        VendorAdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        VendorTaxPC = x.TaxPC,
                        VendorTaxAmount = x.TaxAmount,
                        VendorVATPC = x.VATPC,
                        VendorVATAmount = x.VATAmount,
                        VendorRentPC = x.RentPC,
                        VendorRentAmount = x.RentAmount,
                        LLAddress = x.LLAddress,
                        LLContactNo = x.LLContactNo,
                        LLEmail = x.LLEmail,
                        ACNo = x.ACNo,
                        BankName = x.BankName,
                        BranchName = x.BranchName,
                        RoutingNo = x.RoutingNo,
                    }).ToList();
                    if (lstLandlord.Count > 0)
                    {
                        for (int i = 0; i < lstLandlord.Count; i++)
                        {
                            lstLandlord[i].LIRowNumber = "_" + (i + 1).ToString();
                            lstLandlord[i].LIftrCount = lstLandlord.Count;
                            if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.RTGS) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.EFTN) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Cash) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Others) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstLandlord = lstLandlord;
                    //==Cost Center Info
                    List<RMS.Models.CostCenterInfoDTO> lstCC = new List<RMS.Models.CostCenterInfoDTO>();
                    var queryCC = from CC in db.CostCenterInfos
                                  where CC.AgreementSLNo == AgreementSLNo && CC.IsOld == false
                                  orderby CC.CCSLNo ascending
                                  select new
                                  {
                                      CC.CCCode,
                                      CC.CCName,
                                      CC.SOLCode,
                                      CC.SOLName,
                                      CC.CCShareAllotment,
                                      CC.CCText,
                                  };
                    lstCC = queryCC.AsEnumerable().Select(x => new RMS.Models.CostCenterInfoDTO
                    {
                        CCCode = x.CCCode,
                        CCName = x.CCName,
                        SOLCode = x.SOLCode,
                        SOLName = x.SOLName,
                        CCShareAllotment = x.CCShareAllotment,
                        CCText = x.CCText,
                    }).ToList();
                    if (lstCC.Count > 0)
                    {
                        for (int i = 0; i < lstCC.Count; i++)
                        {
                            lstCC[i].CCRowNumber = "_" + (i + 1).ToString();
                            lstCC[i].CCftrCount = lstCC.Count;
                        }
                    }
                    ViewBag.lstCC = lstCC;
                    //==Utility Information
                    List<RMS.Models.UtilityInfoDTO> lstUtility = new List<RMS.Models.UtilityInfoDTO>();
                    var queryUtility = from UI in db.UtilityInfos
                                       where UI.AgreementSLNo == AgreementSLNo && UI.IsOld == false
                                       orderby UI.UtilitySLNo ascending
                                       select new
                                       {
                                           //==Landlord Info
                                           UI.UtilitySLNo,
                                           UI.AgreementSLNo,
                                           UI.UtilityVendorCode,
                                           UI.UtilityLandlordName,
                                           UI.UtilityModeOfPayment,
                                           UI.ServiceChargePC,
                                           UI.ServiceChargeAmount,
                                           UI.OnlineTowerPC,
                                           UI.OnlineTowerAmount,
                                           UI.GeneratorSpacePC,
                                           UI.GeneratorSpaceAmount,
                                           UI.CarParkingPC,
                                           UI.CarParkingAmount,
                                           UI.TaxPC,
                                           UI.TaxAmount,
                                           UI.VATPC,
                                           UI.VATAmount,
                                           UI.UtilityAddress,
                                           UI.UtilityContactNo,
                                           UI.UtilityEmail,
                                           UI.UtilityACNo,
                                           UI.UtilityBankName,
                                           UI.UtilityBranchName,
                                           UI.UtilityRoutingNo,
                                       };
                    lstUtility = queryUtility.AsEnumerable().Select(x => new RMS.Models.UtilityInfoDTO
                    {
                        UtilitySLNo = x.UtilitySLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        UtilityVendorCode = x.UtilityVendorCode,
                        UtilityLandlordName = x.UtilityLandlordName,
                        UtilityModeOfPayment = x.UtilityModeOfPayment,
                        ServiceChargePC = x.ServiceChargePC,
                        ServiceChargeAmount = x.ServiceChargeAmount,
                        OnlineTowerPC = x.OnlineTowerPC,
                        OnlineTowerAmount = x.OnlineTowerAmount,
                        GeneratorSpacePC = x.GeneratorSpacePC,
                        GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                        CarParkingPC = x.CarParkingPC,
                        CarParkingAmount = x.CarParkingAmount,
                        UtilityTaxPC = x.TaxPC,
                        UtilityTaxAmount = x.TaxAmount,
                        UtilityVATPC = x.VATPC,
                        UtilityVATAmount = x.VATAmount,
                        UtilityAddress = x.UtilityAddress,
                        UtilityContactNo = x.UtilityContactNo,
                        UtilityEmail = x.UtilityEmail,
                        UtilityACNo = x.UtilityACNo,
                        UtilityBankName = x.UtilityBankName,
                        UtilityBranchName = x.UtilityBranchName,
                        UtilityRoutingNo = x.UtilityRoutingNo,
                    }).ToList();
                    if (lstUtility.Count > 0)
                    {
                        for (int i = 0; i < lstUtility.Count; i++)
                        {
                            lstUtility[i].UtilityRowNumber = "_" + (i + 1).ToString();
                            lstUtility[i].UtilityftrCount = lstUtility.Count;
                            if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.RTGS) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.EFTN) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Cash) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Others) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstUtility = lstUtility;
                    //==Attach Documents
                    List<RMS.Models.FileUploadInfoDTO> lstFU = new List<RMS.Models.FileUploadInfoDTO>();
                    var queryFU = from FU in db.FileUploadInfos
                                  where FU.AgreementSLNo == AgreementSLNo
                                  orderby FU.SLNo ascending
                                  select new
                                  {
                                      FU.SLNo,
                                      FU.FileName,
                                  };
                    lstFU = queryFU.AsEnumerable().Select(x => new RMS.Models.FileUploadInfoDTO
                    {
                        SLNo = x.SLNo,
                        FileName = x.FileName,
                    }).ToList();
                    if (lstFU.Count > 0)
                    {
                        for (int i = 0; i < lstFU.Count; i++)
                        {
                            lstFU[i].FURowNumber = "_" + (i + 1).ToString();
                            lstFU[i].FUftrCount = lstFU.Count;
                        }
                    }
                    ViewBag.lstFU = lstFU;
                    //==Agreement Info
                    List<RMS.Models.AgreementInfoDTO> lstAgreement = new List<RMS.Models.AgreementInfoDTO>();
                    var query = from AI in db.AgreementInfos
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                where AI.AgreementSLNo == AgreementSLNo
                                select new
                                {
                                    AI.AgreementSLNo,
                                    //==Basic Info
                                    AI.PremiseTypeSLNo,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.PremiseAddress,
                                    AI.ConcernBranch,
                                    AI.InspectorName,
                                    AI.InspectorContactNo,
                                    AI.ClusterGroup,
                                    //==Agreement Info
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.AgreementStartDate,
                                    AI.AgreementEndDate,
                                    AI.AgreementPeriod,
                                    AI.RenewalFrequency,
                                    AI.RentDueDay,
                                    AI.UOM,
                                    AI.TotalArea,
                                    AI.CostPerUnit,
                                    AI.TotalRentAmount,
                                    AI.SecurityDepositAmount,
                                    AI.AdvanceAmount,
                                    AI.AdvanceAdjustmentPeriod,
                                    AI.AdvanceAdjustmentAmount,
                                    AI.TaxPercentage,
                                    RentTaxAmount = AI.TaxAmount,
                                    AI.VATPercentage,
                                    RentVATAMount = AI.VATAmount,
                                    AI.ServiceCharge,
                                    AI.OnlineTower,
                                    AI.GeneratorSpace,
                                    AI.CarParking,
                                    AI.NetRentAmount,
                                    AI.AgreementStatus,
                                    AI.AgreementText,
                                    AI.Status,
                                    AI.UserSLNo,
                                    AI.EntryDate,
                                    AI.IsDeleted,
                                    S.StatusName,
                                    AI.ReviewFrequency,
                                    AI.ReviewPercentage,
                                    AI.TaxType,
                                    AI.VatType,
                                    //==Control Data
                                    AI.CashGLCode,
                                    AI.BankGLCode,
                                    AI.AdvanceGLCode,
                                    AI.AdvanceAdjustmentGLCode,
                                    AI.RentGLCode,
                                    AI.ServiceChargeGLCode,
                                    AI.TaxGLCode,
                                    AI.VATGLCode,
                                    AI.ProvisionGLTax,
                                    AI.ProvisionGLAP,
                                    AI.RTGSGL,
                                    AI.EFTNGL,
                                    AI.PayOrderGL,
                                    AI.IBBPaymentGL,
                                    AI.CityBrokerageGL,
                                    AI.CityCapitalGL,
                                    AI.OthersGL,
                                    //====
                                    AI.PremiseAddressBangla,
                                    AI.AreaStatus,
                                    AI.RegionalOffice,
                                    AI.PrimarySOL,
                                    AI.AttachedControl,
                                    AI.ControllerOfficeDistance,
                                    AI.RoutingNumber,
                                    AI.Division,
                                    AI.District,
                                    AI.Upazila,
                                    AI.Thana,
                                    AI.ThanaCode,
                                    AI.Pourasabha,
                                    AI.PourasabhaType,
                                    AI.UnionName,
                                    AI.WardNo,
                                    AI.PremisesTypeforAccounts,
                                    AI.ParentAgreementCode,
                                    AI.ElectricityLoad,
                                    AI.ElectricityProvidedBy,
                                    AI.AITBourneBy,
                                    AI.CommercialPermission,
                                    AI.BuildingPlan,
                                    AI.PremisesSituatedFloor,
                                    AI.BangladeshBankApproval,
                                    AI.BangladeshBankReference,
                                    AI.ITTowerRentClause,
                                    AI.TerminationClause,
                                    AI.TerminationNoticePeriod,
                                    AI.PremisesOpeningDate,
                                    AI.DocumentDate,
                                    AI.Remarks,
                                    AI.AgreementRemarks,
                                    AI.AdvanceRemarks,
                                    AI.ReviewRemarks,
                                    AI.LLRemarks,
                                    AI.CCRemarks,
                                    AI.UtilityRemarks,
                                    AI.ControlDataRemarks,
                                    //====
                                    AI.BorrowingRate,
                                    AI.PaymentMethod,
                                    AI.IsIFRSEnable,
                                    AI.CalculationMethod,
                                    AI.WithHoldingCode,
                                    AI.AdditionalExpense,
                                    AI.InitialDirectCost,
                                    AI.DismantlingCost,
                                    AI.CarParkingNo,
                                    AI.WaterBillType,
                                    AI.WaterBillAmount,
                                    AI.IFRSEffectiveDate,
                                    AI.CorporateTaxRate,
                                };
                    lstAgreement = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        //==Basic Info
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        ConcernBranch = x.ConcernBranch,
                        InspectorName = x.InspectorName,
                        InspectorContactNo = x.InspectorContactNo,
                        ClusterGroup = x.ClusterGroup,
                        //==Agreement Info
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        RenewalFrequency = x.RenewalFrequency,
                        RentDueDay = x.RentDueDay,
                        UOM = x.UOM,
                        TotalArea = x.TotalArea,
                        CostPerUnit = x.CostPerUnit,
                        RentAmount = x.TotalArea * x.CostPerUnit,
                        TotalRentAmount = x.TotalRentAmount,
                        SecurityDepositAmount = x.SecurityDepositAmount,
                        AdvanceAmount = x.AdvanceAmount,
                        AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                        AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        TaxPercentage = x.TaxPercentage,
                        TaxAmount = x.RentTaxAmount,
                        VATPercentage = x.VATPercentage,
                        VATAmount = x.RentVATAMount,
                        ServiceCharge = x.ServiceCharge,
                        OnlineTower = x.OnlineTower,
                        GeneratorSpace = x.GeneratorSpace,
                        CarParking = x.CarParking,
                        NetRentAmount = x.NetRentAmount,
                        AgreementStatus = x.AgreementStatus,
                        AgreementText = x.AgreementText,
                        Status = x.Status,
                        UserSLNo = x.UserSLNo,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        IsDeleted = x.IsDeleted,
                        StatusName = x.StatusName,
                        ReviewFrequency = x.ReviewFrequency,
                        ReviewPercentage = x.ReviewPercentage,
                        TaxType = x.TaxType,
                        xTaxType = x.TaxType,
                        VatType = x.VatType,
                        //==Control Data
                        CashGLCode = x.CashGLCode,
                        BankGLCode = x.BankGLCode,
                        AdvanceGLCode = x.AdvanceGLCode,
                        AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                        RentGLCode = x.RentGLCode,
                        ServiceChargeGLCode = x.ServiceChargeGLCode,
                        TaxGLCode = x.TaxGLCode,
                        VATGLCode = x.VATGLCode,
                        ProvisionGLTax = x.ProvisionGLTax,
                        ProvisionGLAP = x.ProvisionGLAP,
                        RTGSGL = x.RTGSGL,
                        EFTNGL = x.EFTNGL,
                        PayOrderGL = x.PayOrderGL,
                        IBBPaymentGL = x.IBBPaymentGL,
                        CityBrokerageGL = x.CityBrokerageGL,
                        CityCapitalGL = x.CityCapitalGL,
                        OthersGL = x.OthersGL,
                        SpaceftrCount = lstSpace.Count(),
                        RIftrCount = lstReview.Count(),
                        LIftrCount = lstLandlord.Count(),
                        CCftrCount = lstCC.Count(),
                        UIftrCount = lstUtility.Count(),
                        //======
                        PremiseAddressBangla = x.PremiseAddressBangla,
                        AreaStatus = x.AreaStatus,
                        RegionalOffice = x.RegionalOffice,
                        PrimarySOL = x.PrimarySOL,
                        AttachedControl = x.AttachedControl,
                        ControllerOfficeDistance = x.ControllerOfficeDistance,
                        RoutingNumber = x.RoutingNumber,
                        Division = x.Division,
                        District = x.District,
                        Upazila = x.Upazila,
                        Thana = x.Thana,
                        ThanaCode = x.ThanaCode,
                        Pourasabha = x.Pourasabha,
                        PourasabhaType = x.PourasabhaType,
                        UnionName = x.UnionName,
                        WardNo = x.WardNo,
                        PremisesTypeforAccounts = x.PremisesTypeforAccounts,
                        ParentAgreementCode = x.ParentAgreementCode,
                        ElectricityLoad = x.ElectricityLoad,
                        ElectricityProvidedBy = x.ElectricityProvidedBy,
                        AITBourneBy = x.AITBourneBy,
                        CommercialPermission = x.CommercialPermission,
                        BuildingPlan = x.BuildingPlan,
                        PremisesSituatedFloor = x.PremisesSituatedFloor,
                        BangladeshBankApproval = x.BangladeshBankApproval,
                        BangladeshBankReference = x.BangladeshBankReference,
                        ITTowerRentClause = x.ITTowerRentClause,
                        TerminationClause = x.TerminationClause,
                        TerminationNoticePeriod = x.TerminationNoticePeriod,
                        PremisesOpeningDate = x.PremisesOpeningDate?.ToString("dd/MM/yyyy"),
                        DocumentDate = x.DocumentDate?.ToString("dd/MM/yyyy"),
                        Remarks = x.Remarks,
                        AgreementRemarks = x.AgreementRemarks,
                        AdvanceRemarks = x.AdvanceRemarks,
                        ReviewRemarks = x.ReviewRemarks,
                        LLRemarks = x.LLRemarks,
                        CCRemarks = x.CCRemarks,
                        UtilityRemarks = x.UtilityRemarks,
                        ControlDataRemarks = x.ControlDataRemarks,
                        //======
                        BorrowingRate = x.BorrowingRate,
                        PaymentMethod = x.PaymentMethod,
                        IsIFRSEnable = x.IsIFRSEnable,
                        CalculationMethod = x.CalculationMethod,
                        WithHoldingCode = x.WithHoldingCode,
                        AdditionalExpense = x.AdditionalExpense,
                        InitialDirectCost = x.InitialDirectCost,
                        DismantlingCost = x.DismantlingCost,
                        CarParkingNo = x.CarParkingNo,
                        WaterBillType = x.WaterBillType,
                        WaterBillAmount = x.WaterBillAmount,
                        IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        CorporateTaxRate = x.CorporateTaxRate,
                    }).ToList();
                    ViewBag.ClickIndex = ClickIndex;
                    return View(AgreementInfoPath.AgreementDetailsCreate, lstAgreement);
                    //if (ClickIndex == 1)
                    //{
                    //    return View(AgreementInfoPath.AgreementDetailsCreate, lstAgreement);
                    //}
                    //else if (ClickIndex == 3)
                    //{
                    //    return View(AgreementInfoPath.AgreementDetailsDelete, lstAgreement);
                    //}
                    //else if (ClickIndex == 4)
                    //{
                    //    return View(AgreementInfoPath.AgreementDetailsActivate, lstAgreement);
                    //}
                    //else if (ClickIndex == 5)
                    //{
                    //    return View(AgreementInfoPath.AgreementDetailsBlock, lstAgreement);
                    //}
                    //else if (ClickIndex == 6)
                    //{
                    //    return View(AgreementInfoPath.AgreementDetailsUnblock, lstAgreement);
                    //}
                    //else
                    //{
                    //    return View(AgreementInfoPath.AgreementDetails, lstAgreement);
                    //}
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectReAgreementDetails(int AgreementSLNo, int ClickIndex)
        {
            TempData.Remove("AgreementSLNo");
            TempData.Remove("ClickIndex");
            TempData.Add("AgreementSLNo", AgreementSLNo);
            TempData.Add("ClickIndex", ClickIndex);
            return RedirectToAction("ReAgreementDetails");
        }

        [HttpGet]
        public ActionResult ReAgreementDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strAgreementSLNo = TempData["AgreementSLNo"];
                    if (strAgreementSLNo == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int AgreementSLNo = Convert.ToInt32(strAgreementSLNo);
                    var strClickIndex = TempData["ClickIndex"];
                    if (strClickIndex == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int ClickIndex = Convert.ToInt32(strClickIndex);
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    DTOBasic DTOBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    if (ClickIndex == 15)
                    {
                        ViewBag.URLPath = "AgreementInfo/RedirectReAgreementIndex?ViewID=5";
                    }
                    else
                    {
                        ViewBag.URLPath = "AgreementInfo/RedirectReAgreementIndex?ViewID=" + ClickIndex;
                    }
                    //==Status
                    ViewBag.Status = (List<RMS.Models.StatusInfo>)db.StatusInfos.ToList();
                    //==Water Bill Type meter reading
                    IList<SelectListItem> WaterBillTypeList = new List<SelectListItem>();
                    WaterBillTypeList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Meter Reading", Value = "Meter Reading" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Fixed Value", Value = "Fixed Value" });
                    SelectList WaterBillTypeStatus = new SelectList(WaterBillTypeList, "Value", "Text");
                    ViewBag.WaterBillTypeList = WaterBillTypeStatus;
                    //======Lookup
                    var lstLookup = db.Lookups
                        .Where(x => (x.GroupName == "Cost Center" || x.GroupName == "SOL" || x.GroupName == "Bank" || x.GroupName == "Regional Office"
                        || x.GroupName == "Division" || x.GroupName == "District" || x.GroupName == "Upazila" || x.GroupName == "Thana"
                        || x.GroupName == "Premises Type for Accounts" || x.GroupName == "Sub Premises Type" || x.GroupName == "Payment Method") &&
                        x.Status == DTOBasic.active && x.IsDeleted == false).ToList();
                    //==Bank Info
                    ViewBag.BankInfoList = lstLookup.Where(x => x.GroupName == "Bank").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==CC Info
                    ViewBag.CCInfoList = lstLookup.Where(x => x.GroupName == "Cost Center").Select(x => new { CCSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==SOL Info
                    ViewBag.SOLInfoList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { SOLSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premise Type
                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();
                    //==Area Status
                    IList<SelectListItem> AreaStatusList = new List<SelectListItem>();
                    AreaStatusList.Add(new SelectListItem { Text = "Select Area Status", Value = "0" });
                    AreaStatusList.Add(new SelectListItem { Text = "Urban", Value = "Urban" });
                    AreaStatusList.Add(new SelectListItem { Text = "Rural", Value = "Rural" });
                    SelectList AreaStatus = new SelectList(AreaStatusList, "Value", "Text");
                    ViewBag.AreaStatusList = AreaStatus;
                    //==Regional Office 
                    ViewBag.RegionalOfficeList = lstLookup.Where(x => x.GroupName == "Regional Office").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Primary SOL 
                    ViewBag.PrimarySOLList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Attached Control
                    ViewBag.AttachedControlList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Division
                    ViewBag.DivisionList = lstLookup.Where(x => x.GroupName == "Division").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==District
                    ViewBag.DistrictList = lstLookup.Where(x => x.GroupName == "District").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Upazila
                    ViewBag.UpazilaList = lstLookup.Where(x => x.GroupName == "Upazila").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Thana
                    ViewBag.ThanaList = lstLookup.Where(x => x.GroupName == "Thana").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premises Type for Accounts
                    ViewBag.PremisesTypeforAccountsList = lstLookup.Where(x => x.GroupName == "Premises Type for Accounts").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Provided By
                    IList<SelectListItem> ProvidedByList = new List<SelectListItem>();
                    ProvidedByList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    ProvidedByList.Add(new SelectListItem { Text = "Company", Value = "1" });
                    ProvidedByList.Add(new SelectListItem { Text = "Landlord", Value = "2" });
                    ProvidedByList.Add(new SelectListItem { Text = "Others", Value = "3" });
                    SelectList ProvidedByStatus = new SelectList(ProvidedByList, "Value", "Text");
                    ViewBag.ProvidedByList = ProvidedByStatus;
                    //==Yes No
                    IList<SelectListItem> YesNoList = new List<SelectListItem>();
                    YesNoList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    YesNoList.Add(new SelectListItem { Text = "Yes", Value = "1" });
                    YesNoList.Add(new SelectListItem { Text = "No", Value = "2" });
                    SelectList YesNoStatus = new SelectList(YesNoList, "Value", "Text");
                    ViewBag.YesNoList = YesNoStatus;
                    //==Sub Premises Type
                    ViewBag.SubPremisesTypeList = lstLookup.Where(x => x.GroupName == "Sub Premises Type").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Payment Method
                    ViewBag.PaymentMethodList = lstLookup.Where(x => x.GroupName == "Payment Method").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Calculation Method
                    IList<SelectListItem> CalculationMethodList = new List<SelectListItem>();
                    CalculationMethodList.Add(new SelectListItem { Text = "Current Month", Value = "Current Month" });
                    CalculationMethodList.Add(new SelectListItem { Text = "Following Month", Value = "Following Month" });
                    SelectList CalculationMethod = new SelectList(CalculationMethodList, "Value", "Text");
                    ViewBag.CalculationMethodList = CalculationMethod;
                    //======Lookup
                    //==UOM
                    IList<SelectListItem> UOMList = new List<SelectListItem>();
                    UOMList.Add(new SelectListItem { Text = "Select Unit of Measurement", Value = "0" });
                    UOMList.Add(new SelectListItem { Text = "Square Feet", Value = "1" });
                    UOMList.Add(new SelectListItem { Text = "Square Meter", Value = "2" });
                    SelectList UOM = new SelectList(UOMList, "Value", "Text");
                    ViewBag.UOMList = UOM;
                    //==Tax Type
                    IList<SelectListItem> TaxTypeList = new List<SelectListItem>();
                    //TaxTypeList.Add(new SelectListItem { Text = "Select Tax Type", Value = "0" });
                    TaxTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList TaxType = new SelectList(TaxTypeList, "Value", "Text");
                    ViewBag.TaxTypeList = TaxType;
                    //==Vat Type
                    IList<SelectListItem> VatTypeList = new List<SelectListItem>();
                    //VatTypeList.Add(new SelectListItem { Text = "Select VAT Type", Value = "0" });
                    VatTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    VatTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    VatTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList VatType = new SelectList(VatTypeList, "Value", "Text");
                    ViewBag.VatTypeList = VatType;
                    //==Mode of Payment
                    IList<SelectListItem> ModeOfPaymentList = new List<SelectListItem>();
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Select Mode of Payment", Value = "0" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Account Transfer", Value = "Account Transfer" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "RTGS", Value = "RTGS" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "EFTN", Value = "EFTN" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Pay Order", Value = "Pay Order" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Cash", Value = "Cash" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "IBB Payment", Value = "IBB Payment" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Brokerage", Value = "City Brokerage" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Capital", Value = "City Capital" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Others", Value = "Others" });
                    SelectList ModeOfPayment = new SelectList(ModeOfPaymentList, "Value", "Text");
                    ViewBag.ModeOfPaymentList = ModeOfPayment;
                    //==Space Info
                    List<RMS.Models.SpaceInfoDTO> lstSpace = new List<RMS.Models.SpaceInfoDTO>();
                    var querySpace = from SP in db.SpaceInfos
                                     where SP.AgreementSLNo == AgreementSLNo
                                     orderby SP.SpaceSLNo ascending
                                     select new
                                     {
                                         SP.SpaceType,
                                         SP.SpaceArea,
                                         SP.SpaceRate,
                                         SP.SpaceRent,
                                         SP.SpaceTotalAdvance,
                                         SP.SpaceTotalAdjustment,
                                         SP.SpaceRemarks,
                                     };
                    lstSpace = querySpace.AsEnumerable().Select(x => new RMS.Models.SpaceInfoDTO
                    {
                        SpaceType = x.SpaceType,
                        SpaceArea = x.SpaceArea,
                        SpaceRate = x.SpaceRate,
                        SpaceRent = x.SpaceRent,
                        SpaceTotalAdvance = x.SpaceTotalAdvance,
                        SpaceTotalAdjustment = x.SpaceTotalAdjustment,
                        SpaceRemarks = x.SpaceRemarks,
                    }).ToList();
                    if (lstSpace.Count > 0)
                    {
                        for (int i = 0; i < lstSpace.Count; i++)
                        {
                            lstSpace[i].SpaceRowNumber = "_" + (i + 1).ToString();
                            lstSpace[i].SpaceftrCount = lstSpace.Count;
                        }
                    }
                    ViewBag.lstSpace = lstSpace;
                    //==Advance Info
                    List<RMS.Models.AdvanceInfoDTO> lstAdvance = new List<RMS.Models.AdvanceInfoDTO>();
                    var queryAdvance = from Adv in db.AdvanceInfos
                                       where Adv.AgreementSLNo == AgreementSLNo
                                       orderby Adv.AdvanceSLNo ascending
                                       select new
                                       {
                                           Adv.AdvanceNo,
                                           Adv.AdvanceSlotPeriod,
                                           Adv.StartDate,
                                           Adv.EndDate,
                                           Adv.AdvanceNote,
                                           Adv.AdvanceSlotAmount,
                                       };
                    lstAdvance = queryAdvance.AsEnumerable().Select(x => new RMS.Models.AdvanceInfoDTO
                    {
                        AdvanceNo = x.AdvanceNo,
                        AdvanceSlotPeriod = x.AdvanceSlotPeriod,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        AdvanceNote = x.AdvanceNote,
                        AdvanceSlotAmount = x.AdvanceSlotAmount,
                    }).ToList();
                    if (lstAdvance.Count > 0)
                    {
                        for (int i = 0; i < lstAdvance.Count; i++)
                        {
                            lstAdvance[i].AdvanceRowNumber = "_" + (i + 1).ToString();
                            lstAdvance[i].AdvanceftrCount = lstAdvance.Count;
                        }
                    }
                    ViewBag.lstAdvance = lstAdvance;
                    //==Review Info
                    List<RMS.Models.ReviewInfoDTO> lstReview = new List<RMS.Models.ReviewInfoDTO>();
                    var queryReview = from RI in db.ReviewInfos
                                      where RI.AgreementSLNo == AgreementSLNo
                                      orderby RI.ReviewSLNo ascending
                                      select new
                                      {
                                          RI.ReviewNo,
                                          RI.StartDate,
                                          RI.EndDate,
                                          RI.Period,
                                          RI.IncreaseAmount,
                                          RI.IncreasePercentage,
                                          RI.ReviewNote,
                                      };
                    lstReview = queryReview.AsEnumerable().Select(x => new RMS.Models.ReviewInfoDTO
                    {
                        ReviewNo = x.ReviewNo,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        Period = x.Period,
                        IncreaseAmount = x.IncreaseAmount,
                        IncreasePercentage = x.IncreasePercentage,
                        ReviewNote = x.ReviewNote,
                    }).ToList();
                    if (lstReview.Count > 0)
                    {
                        for (int i = 0; i < lstReview.Count; i++)
                        {
                            lstReview[i].ReviewRowNumber = "_" + (i + 1).ToString();
                            lstReview[i].ReviewftrCount = lstReview.Count;
                        }
                    }
                    ViewBag.lstReview = lstReview;
                    //==Landlord Information
                    List<RMS.Models.LandlordInfoDTO> lstLandlord = new List<RMS.Models.LandlordInfoDTO>();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    var queryLandlord = from LI in db.LandlordInfos
                                        where LI.AgreementSLNo == AgreementSLNo && LI.IsOld == false
                                        orderby LI.LandlordSLNo ascending
                                        select new
                                        {
                                            //==Landlord Info
                                            LI.LandlordSLNo,
                                            LI.AgreementSLNo,
                                            LI.VendorCode,
                                            LI.LandlordName,
                                            LI.ModeOfPayment,
                                            LI.AdvancePC,
                                            LI.AdvanceAmount,
                                            LI.AdvanceAdjustmentPC,
                                            LI.AdvanceAdjustmentAmount,
                                            LI.TaxPC,
                                            LI.TaxAmount,
                                            LI.VATPC,
                                            LI.VATAmount,
                                            LI.RentPC,
                                            LI.RentAmount,
                                            LI.LLAddress,
                                            LI.LLContactNo,
                                            LI.LLEmail,
                                            LI.ACNo,
                                            LI.BankName,
                                            LI.BranchName,
                                            LI.RoutingNo,
                                        };
                    lstLandlord = queryLandlord.AsEnumerable().Select(x => new RMS.Models.LandlordInfoDTO
                    {
                        //==Landlord Info
                        LandlordSLNo = x.AgreementSLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        VendorCode = x.VendorCode,
                        LandlordName = x.LandlordName,
                        ModeOfPayment = x.ModeOfPayment,
                        VendorAdvancePC = x.AdvancePC,
                        VendorAdvanceAmount = x.AdvanceAmount,
                        VendorAdvanceAdjustmentPC = x.AdvanceAdjustmentPC,
                        VendorAdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        VendorTaxPC = x.TaxPC,
                        VendorTaxAmount = x.TaxAmount,
                        VendorVATPC = x.VATPC,
                        VendorVATAmount = x.VATAmount,
                        VendorRentPC = x.RentPC,
                        VendorRentAmount = x.RentAmount,
                        LLAddress = x.LLAddress,
                        LLContactNo = x.LLContactNo,
                        LLEmail = x.LLEmail,
                        ACNo = x.ACNo,
                        BankName = x.BankName,
                        BranchName = x.BranchName,
                        RoutingNo = x.RoutingNo,
                    }).ToList();
                    if (lstLandlord.Count > 0)
                    {
                        for (int i = 0; i < lstLandlord.Count; i++)
                        {
                            lstLandlord[i].LIRowNumber = "_" + (i + 1).ToString();
                            lstLandlord[i].LIftrCount = lstLandlord.Count;
                            if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.RTGS) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.EFTN) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Cash) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Others) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstLandlord = lstLandlord;
                    //==Cost Center Info
                    List<RMS.Models.CostCenterInfoDTO> lstCC = new List<RMS.Models.CostCenterInfoDTO>();
                    var queryCC = from CC in db.CostCenterInfos
                                  where CC.AgreementSLNo == AgreementSLNo && CC.IsOld == false
                                  orderby CC.CCSLNo ascending
                                  select new
                                  {
                                      CC.CCCode,
                                      CC.CCName,
                                      CC.SOLCode,
                                      CC.SOLName,
                                      CC.CCShareAllotment,
                                      CC.CCText,
                                  };
                    lstCC = queryCC.AsEnumerable().Select(x => new RMS.Models.CostCenterInfoDTO
                    {
                        CCCode = x.CCCode,
                        CCName = x.CCName,
                        SOLCode = x.SOLCode,
                        SOLName = x.SOLName,
                        CCShareAllotment = x.CCShareAllotment,
                        CCText = x.CCText,
                    }).ToList();
                    if (lstCC.Count > 0)
                    {
                        for (int i = 0; i < lstCC.Count; i++)
                        {
                            lstCC[i].CCRowNumber = "_" + (i + 1).ToString();
                            lstCC[i].CCftrCount = lstCC.Count;
                        }
                    }
                    ViewBag.lstCC = lstCC;
                    //==Utility Information
                    List<RMS.Models.UtilityInfoDTO> lstUtility = new List<RMS.Models.UtilityInfoDTO>();
                    var queryUtility = from UI in db.UtilityInfos
                                       where UI.AgreementSLNo == AgreementSLNo && UI.IsOld == false
                                       orderby UI.UtilitySLNo ascending
                                       select new
                                       {
                                           //==Landlord Info
                                           UI.UtilitySLNo,
                                           UI.AgreementSLNo,
                                           UI.UtilityVendorCode,
                                           UI.UtilityLandlordName,
                                           UI.UtilityModeOfPayment,
                                           UI.ServiceChargePC,
                                           UI.ServiceChargeAmount,
                                           UI.OnlineTowerPC,
                                           UI.OnlineTowerAmount,
                                           UI.GeneratorSpacePC,
                                           UI.GeneratorSpaceAmount,
                                           UI.CarParkingPC,
                                           UI.CarParkingAmount,
                                           UI.TaxPC,
                                           UI.TaxAmount,
                                           UI.VATPC,
                                           UI.VATAmount,
                                           UI.UtilityAddress,
                                           UI.UtilityContactNo,
                                           UI.UtilityEmail,
                                           UI.UtilityACNo,
                                           UI.UtilityBankName,
                                           UI.UtilityBranchName,
                                           UI.UtilityRoutingNo,
                                       };
                    lstUtility = queryUtility.AsEnumerable().Select(x => new RMS.Models.UtilityInfoDTO
                    {
                        UtilitySLNo = x.UtilitySLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        UtilityVendorCode = x.UtilityVendorCode,
                        UtilityLandlordName = x.UtilityLandlordName,
                        UtilityModeOfPayment = x.UtilityModeOfPayment,
                        ServiceChargePC = x.ServiceChargePC,
                        ServiceChargeAmount = x.ServiceChargeAmount,
                        OnlineTowerPC = x.OnlineTowerPC,
                        OnlineTowerAmount = x.OnlineTowerAmount,
                        GeneratorSpacePC = x.GeneratorSpacePC,
                        GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                        CarParkingPC = x.CarParkingPC,
                        CarParkingAmount = x.CarParkingAmount,
                        UtilityTaxPC = x.TaxPC,
                        UtilityTaxAmount = x.TaxAmount,
                        UtilityVATPC = x.VATPC,
                        UtilityVATAmount = x.VATAmount,
                        UtilityAddress = x.UtilityAddress,
                        UtilityContactNo = x.UtilityContactNo,
                        UtilityEmail = x.UtilityEmail,
                        UtilityACNo = x.UtilityACNo,
                        UtilityBankName = x.UtilityBankName,
                        UtilityBranchName = x.UtilityBranchName,
                        UtilityRoutingNo = x.UtilityRoutingNo,
                    }).ToList();
                    if (lstUtility.Count > 0)
                    {
                        for (int i = 0; i < lstUtility.Count; i++)
                        {
                            lstUtility[i].UtilityRowNumber = "_" + (i + 1).ToString();
                            lstUtility[i].UtilityftrCount = lstUtility.Count;
                            if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.RTGS) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.EFTN) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Cash) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Others) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstUtility = lstUtility;
                    //==Attach Documents
                    List<RMS.Models.FileUploadInfoDTO> lstFU = new List<RMS.Models.FileUploadInfoDTO>();
                    var queryFU = from FU in db.FileUploadInfos
                                  where FU.AgreementSLNo == AgreementSLNo
                                  orderby FU.SLNo ascending
                                  select new
                                  {
                                      FU.SLNo,
                                      FU.FileName,
                                  };
                    lstFU = queryFU.AsEnumerable().Select(x => new RMS.Models.FileUploadInfoDTO
                    {
                        SLNo = x.SLNo,
                        FileName = x.FileName,
                    }).ToList();
                    if (lstFU.Count > 0)
                    {
                        for (int i = 0; i < lstFU.Count; i++)
                        {
                            lstFU[i].FURowNumber = "_" + (i + 1).ToString();
                            lstFU[i].FUftrCount = lstFU.Count;
                        }
                    }
                    ViewBag.lstFU = lstFU;
                    //==Agreement Info
                    List<RMS.Models.AgreementInfoDTO> lstAgreement = new List<RMS.Models.AgreementInfoDTO>();
                    var query = from AI in db.AgreementInfos
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                where AI.AgreementSLNo == AgreementSLNo
                                select new
                                {
                                    AI.AgreementSLNo,
                                    //==Basic Info
                                    AI.PremiseTypeSLNo,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.PremiseAddress,
                                    AI.ConcernBranch,
                                    AI.InspectorName,
                                    AI.InspectorContactNo,
                                    AI.ClusterGroup,
                                    //==Agreement Info
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.AgreementStartDate,
                                    AI.AgreementEndDate,
                                    AI.AgreementPeriod,
                                    AI.RenewalFrequency,
                                    AI.RentDueDay,
                                    AI.UOM,
                                    AI.TotalArea,
                                    AI.CostPerUnit,
                                    AI.TotalRentAmount,
                                    AI.SecurityDepositAmount,
                                    AI.AdvanceAmount,
                                    AI.AdvanceAdjustmentPeriod,
                                    AI.AdvanceAdjustmentAmount,
                                    AI.TaxPercentage,
                                    RentTaxAmount = AI.TaxAmount,
                                    AI.VATPercentage,
                                    RentVATAMount = AI.VATAmount,
                                    AI.ServiceCharge,
                                    AI.OnlineTower,
                                    AI.GeneratorSpace,
                                    AI.CarParking,
                                    AI.NetRentAmount,
                                    AI.AgreementStatus,
                                    AI.AgreementText,
                                    AI.Status,
                                    AI.UserSLNo,
                                    AI.EntryDate,
                                    AI.IsDeleted,
                                    S.StatusName,
                                    AI.ReviewFrequency,
                                    AI.ReviewPercentage,
                                    AI.TaxType,
                                    AI.VatType,
                                    //==Control Data
                                    AI.CashGLCode,
                                    AI.BankGLCode,
                                    AI.AdvanceGLCode,
                                    AI.AdvanceAdjustmentGLCode,
                                    AI.RentGLCode,
                                    AI.ServiceChargeGLCode,
                                    AI.TaxGLCode,
                                    AI.VATGLCode,
                                    AI.ProvisionGLTax,
                                    AI.ProvisionGLAP,
                                    AI.RTGSGL,
                                    AI.EFTNGL,
                                    AI.PayOrderGL,
                                    AI.IBBPaymentGL,
                                    AI.CityBrokerageGL,
                                    AI.CityCapitalGL,
                                    AI.OthersGL,
                                    //====
                                    AI.PremiseAddressBangla,
                                    AI.AreaStatus,
                                    AI.RegionalOffice,
                                    AI.PrimarySOL,
                                    AI.AttachedControl,
                                    AI.ControllerOfficeDistance,
                                    AI.RoutingNumber,
                                    AI.Division,
                                    AI.District,
                                    AI.Upazila,
                                    AI.Thana,
                                    AI.ThanaCode,
                                    AI.Pourasabha,
                                    AI.PourasabhaType,
                                    AI.UnionName,
                                    AI.WardNo,
                                    AI.PremisesTypeforAccounts,
                                    AI.ParentAgreementCode,
                                    AI.ElectricityLoad,
                                    AI.ElectricityProvidedBy,
                                    AI.AITBourneBy,
                                    AI.CommercialPermission,
                                    AI.BuildingPlan,
                                    AI.PremisesSituatedFloor,
                                    AI.BangladeshBankApproval,
                                    AI.BangladeshBankReference,
                                    AI.ITTowerRentClause,
                                    AI.TerminationClause,
                                    AI.TerminationNoticePeriod,
                                    AI.PremisesOpeningDate,
                                    AI.DocumentDate,
                                    AI.Remarks,
                                    AI.AgreementRemarks,
                                    AI.AdvanceRemarks,
                                    AI.ReviewRemarks,
                                    AI.LLRemarks,
                                    AI.CCRemarks,
                                    AI.UtilityRemarks,
                                    AI.ControlDataRemarks,
                                    //====
                                    AI.BorrowingRate,
                                    AI.PaymentMethod,
                                    AI.IsIFRSEnable,
                                    AI.CalculationMethod,
                                    AI.WithHoldingCode,
                                    AI.AdditionalExpense,
                                    AI.InitialDirectCost,
                                    AI.DismantlingCost,
                                    AI.CarParkingNo,
                                    AI.WaterBillType,
                                    AI.WaterBillAmount,
                                    AI.IFRSEffectiveDate,
                                    AI.CorporateTaxRate,
                                    AI.Special,
                                };
                    lstAgreement = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        //==Basic Info
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        ConcernBranch = x.ConcernBranch,
                        InspectorName = x.InspectorName,
                        InspectorContactNo = x.InspectorContactNo,
                        ClusterGroup = x.ClusterGroup,
                        //==Agreement Info
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        RenewalFrequency = x.RenewalFrequency,
                        RentDueDay = x.RentDueDay,
                        UOM = x.UOM,
                        TotalArea = x.TotalArea,
                        CostPerUnit = x.CostPerUnit,
                        RentAmount = x.TotalArea * x.CostPerUnit,
                        TotalRentAmount = x.TotalRentAmount,
                        SecurityDepositAmount = x.SecurityDepositAmount,
                        AdvanceAmount = x.AdvanceAmount,
                        AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                        AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        TaxPercentage = x.TaxPercentage,
                        TaxAmount = x.RentTaxAmount,
                        VATPercentage = x.VATPercentage,
                        VATAmount = x.RentVATAMount,
                        ServiceCharge = x.ServiceCharge,
                        OnlineTower = x.OnlineTower,
                        GeneratorSpace = x.GeneratorSpace,
                        CarParking = x.CarParking,
                        NetRentAmount = x.NetRentAmount,
                        AgreementStatus = x.AgreementStatus,
                        AgreementText = x.AgreementText,
                        Status = x.Status,
                        UserSLNo = x.UserSLNo,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        IsDeleted = x.IsDeleted,
                        StatusName = x.StatusName,
                        ReviewFrequency = x.ReviewFrequency,
                        ReviewPercentage = x.ReviewPercentage,
                        TaxType = x.TaxType,
                        xTaxType = x.TaxType,
                        VatType = x.VatType,
                        //==Control Data
                        CashGLCode = x.CashGLCode,
                        BankGLCode = x.BankGLCode,
                        AdvanceGLCode = x.AdvanceGLCode,
                        AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                        RentGLCode = x.RentGLCode,
                        ServiceChargeGLCode = x.ServiceChargeGLCode,
                        TaxGLCode = x.TaxGLCode,
                        VATGLCode = x.VATGLCode,
                        ProvisionGLTax = x.ProvisionGLTax,
                        ProvisionGLAP = x.ProvisionGLAP,
                        RTGSGL = x.RTGSGL,
                        EFTNGL = x.EFTNGL,
                        PayOrderGL = x.PayOrderGL,
                        IBBPaymentGL = x.IBBPaymentGL,
                        CityBrokerageGL = x.CityBrokerageGL,
                        CityCapitalGL = x.CityCapitalGL,
                        OthersGL = x.OthersGL,
                        SpaceftrCount = lstSpace.Count(),
                        RIftrCount = lstReview.Count(),
                        LIftrCount = lstLandlord.Count(),
                        CCftrCount = lstCC.Count(),
                        UIftrCount = lstUtility.Count(),
                        //======
                        PremiseAddressBangla = x.PremiseAddressBangla,
                        AreaStatus = x.AreaStatus,
                        RegionalOffice = x.RegionalOffice,
                        PrimarySOL = x.PrimarySOL,
                        AttachedControl = x.AttachedControl,
                        ControllerOfficeDistance = x.ControllerOfficeDistance,
                        RoutingNumber = x.RoutingNumber,
                        Division = x.Division,
                        District = x.District,
                        Upazila = x.Upazila,
                        Thana = x.Thana,
                        ThanaCode = x.ThanaCode,
                        Pourasabha = x.Pourasabha,
                        PourasabhaType = x.PourasabhaType,
                        UnionName = x.UnionName,
                        WardNo = x.WardNo,
                        PremisesTypeforAccounts = x.PremisesTypeforAccounts,
                        ParentAgreementCode = x.ParentAgreementCode,
                        ElectricityLoad = x.ElectricityLoad,
                        ElectricityProvidedBy = x.ElectricityProvidedBy,
                        AITBourneBy = x.AITBourneBy,
                        CommercialPermission = x.CommercialPermission,
                        BuildingPlan = x.BuildingPlan,
                        PremisesSituatedFloor = x.PremisesSituatedFloor,
                        BangladeshBankApproval = x.BangladeshBankApproval,
                        BangladeshBankReference = x.BangladeshBankReference,
                        ITTowerRentClause = x.ITTowerRentClause,
                        TerminationClause = x.TerminationClause,
                        TerminationNoticePeriod = x.TerminationNoticePeriod,
                        PremisesOpeningDate = x.PremisesOpeningDate?.ToString("dd/MM/yyyy"),
                        DocumentDate = x.DocumentDate?.ToString("dd/MM/yyyy"),
                        Remarks = x.Remarks,
                        AgreementRemarks = x.AgreementRemarks,
                        AdvanceRemarks = x.AdvanceRemarks,
                        ReviewRemarks = x.ReviewRemarks,
                        LLRemarks = x.LLRemarks,
                        CCRemarks = x.CCRemarks,
                        UtilityRemarks = x.UtilityRemarks,
                        ControlDataRemarks = x.ControlDataRemarks,
                        //======
                        BorrowingRate = x.BorrowingRate,
                        PaymentMethod = x.PaymentMethod,
                        IsIFRSEnable = x.IsIFRSEnable,
                        CalculationMethod = x.CalculationMethod,
                        WithHoldingCode = x.WithHoldingCode,
                        AdditionalExpense = x.AdditionalExpense,
                        InitialDirectCost = x.InitialDirectCost,
                        DismantlingCost = x.DismantlingCost,
                        CarParkingNo = x.CarParkingNo,
                        WaterBillType = x.WaterBillType,
                        WaterBillAmount = x.WaterBillAmount,
                        IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        CorporateTaxRate = x.CorporateTaxRate,
                        Special = x.Special,
                    }).ToList();
                    ViewBag.ClickIndex = ClickIndex;
                    return View(AgreementInfoPath.ReAgreementDetailsCreate, lstAgreement);
                    //if (ClickIndex == 1)
                    //{
                    //    return View(AgreementInfoPath.ReAgreementDetailsCreate, lstAgreement);
                    //}
                    //else if (ClickIndex == 3)
                    //{
                    //    return View(AgreementInfoPath.ReAgreementDetailsDelete, lstAgreement);
                    //}
                    //else if (ClickIndex == 4)
                    //{
                    //    return View(AgreementInfoPath.ReAgreementDetailsActivate, lstAgreement);
                    //}
                    //else if (ClickIndex == 5)
                    //{
                    //    return View(AgreementInfoPath.ReAgreementDetailsBlock, lstAgreement);
                    //}
                    //else if (ClickIndex == 6)
                    //{
                    //    return View(AgreementInfoPath.ReAgreementDetailsUnblock, lstAgreement);
                    //}
                    //else
                    //{
                    //    return View(AgreementInfoPath.ReAgreementDetails, lstAgreement);
                    //}
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectModAgreementDetails(int AgreementSLNo, int ClickIndex)
        {
            TempData.Remove("AgreementSLNo");
            TempData.Remove("ClickIndex");
            TempData.Add("AgreementSLNo", AgreementSLNo);
            TempData.Add("ClickIndex", ClickIndex);
            return RedirectToAction("ModAgreementDetails");
        }

        [HttpGet]
        public ActionResult ModAgreementDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strAgreementSLNo = TempData["AgreementSLNo"];
                    if (strAgreementSLNo == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int AgreementSLNo = Convert.ToInt32(strAgreementSLNo);
                    var strClickIndex = TempData["ClickIndex"];
                    if (strClickIndex == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int ClickIndex = Convert.ToInt32(strClickIndex);
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    DTOBasic DTOBasic = new DTOBasic();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    if (ClickIndex == 15)
                    {
                        ViewBag.URLPath = "AgreementInfo/RedirectReAgreementIndex?ViewID=5";
                    }
                    else
                    {
                        ViewBag.URLPath = "AgreementInfo/RedirectModAgreementIndex?ViewID=" + ClickIndex;
                    }
                    //==Status
                    ViewBag.Status = (List<RMS.Models.StatusInfo>)db.StatusInfos.ToList();
                    //==Water Bill Type meter reading
                    IList<SelectListItem> WaterBillTypeList = new List<SelectListItem>();
                    WaterBillTypeList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Meter Reading", Value = "Meter Reading" });
                    WaterBillTypeList.Add(new SelectListItem { Text = "Fixed Value", Value = "Fixed Value" });
                    SelectList WaterBillTypeStatus = new SelectList(WaterBillTypeList, "Value", "Text");
                    ViewBag.WaterBillTypeList = WaterBillTypeStatus;
                    //======Lookup
                    var lstLookup = db.Lookups
                        .Where(x => (x.GroupName == "Cost Center" || x.GroupName == "SOL" || x.GroupName == "Bank" || x.GroupName == "Regional Office"
                        || x.GroupName == "Division" || x.GroupName == "District" || x.GroupName == "Upazila" || x.GroupName == "Thana"
                        || x.GroupName == "Premises Type for Accounts" || x.GroupName == "Sub Premises Type" || x.GroupName == "Payment Method") &&
                        x.Status == DTOBasic.active && x.IsDeleted == false).ToList();
                    //==Bank Info
                    ViewBag.BankInfoList = lstLookup.Where(x => x.GroupName == "Bank").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==CC Info
                    ViewBag.CCInfoList = lstLookup.Where(x => x.GroupName == "Cost Center").Select(x => new { CCSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==SOL Info
                    ViewBag.SOLInfoList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { SOLSLNo = x.LookupSLNo, x.Description, FullName = x.Code + " - " + x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premise Type
                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == DTOBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();
                    //==Area Status
                    IList<SelectListItem> AreaStatusList = new List<SelectListItem>();
                    AreaStatusList.Add(new SelectListItem { Text = "Select Area Status", Value = "0" });
                    AreaStatusList.Add(new SelectListItem { Text = "Urban", Value = "Urban" });
                    AreaStatusList.Add(new SelectListItem { Text = "Rural", Value = "Rural" });
                    SelectList AreaStatus = new SelectList(AreaStatusList, "Value", "Text");
                    ViewBag.AreaStatusList = AreaStatus;
                    //==Regional Office 
                    ViewBag.RegionalOfficeList = lstLookup.Where(x => x.GroupName == "Regional Office").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Primary SOL 
                    ViewBag.PrimarySOLList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Attached Control
                    ViewBag.AttachedControlList = lstLookup.Where(x => x.GroupName == "SOL").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Division
                    ViewBag.DivisionList = lstLookup.Where(x => x.GroupName == "Division").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==District
                    ViewBag.DistrictList = lstLookup.Where(x => x.GroupName == "District").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Upazila
                    ViewBag.UpazilaList = lstLookup.Where(x => x.GroupName == "Upazila").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Thana
                    ViewBag.ThanaList = lstLookup.Where(x => x.GroupName == "Thana").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Premises Type for Accounts
                    ViewBag.PremisesTypeforAccountsList = lstLookup.Where(x => x.GroupName == "Premises Type for Accounts").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Provided By
                    IList<SelectListItem> ProvidedByList = new List<SelectListItem>();
                    ProvidedByList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    ProvidedByList.Add(new SelectListItem { Text = "Company", Value = "1" });
                    ProvidedByList.Add(new SelectListItem { Text = "Landlord", Value = "2" });
                    ProvidedByList.Add(new SelectListItem { Text = "Others", Value = "3" });
                    SelectList ProvidedByStatus = new SelectList(ProvidedByList, "Value", "Text");
                    ViewBag.ProvidedByList = ProvidedByStatus;
                    //==Yes No
                    IList<SelectListItem> YesNoList = new List<SelectListItem>();
                    YesNoList.Add(new SelectListItem { Text = "Select Option", Value = "0" });
                    YesNoList.Add(new SelectListItem { Text = "Yes", Value = "1" });
                    YesNoList.Add(new SelectListItem { Text = "No", Value = "2" });
                    SelectList YesNoStatus = new SelectList(YesNoList, "Value", "Text");
                    ViewBag.YesNoList = YesNoStatus;
                    //==Sub Premises Type
                    ViewBag.SubPremisesTypeList = lstLookup.Where(x => x.GroupName == "Sub Premises Type").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Payment Method
                    ViewBag.PaymentMethodList = lstLookup.Where(x => x.GroupName == "Payment Method").Select(x => new { Code = x.Code, Description = x.Description }).OrderBy(x => x.Description).ToList();
                    //==Calculation Method
                    IList<SelectListItem> CalculationMethodList = new List<SelectListItem>();
                    CalculationMethodList.Add(new SelectListItem { Text = "Current Month", Value = "Current Month" });
                    CalculationMethodList.Add(new SelectListItem { Text = "Following Month", Value = "Following Month" });
                    SelectList CalculationMethod = new SelectList(CalculationMethodList, "Value", "Text");
                    ViewBag.CalculationMethodList = CalculationMethod;
                    //======Lookup
                    //==UOM
                    IList<SelectListItem> UOMList = new List<SelectListItem>();
                    UOMList.Add(new SelectListItem { Text = "Select Unit of Measurement", Value = "0" });
                    UOMList.Add(new SelectListItem { Text = "Square Feet", Value = "1" });
                    UOMList.Add(new SelectListItem { Text = "Square Meter", Value = "2" });
                    SelectList UOM = new SelectList(UOMList, "Value", "Text");
                    ViewBag.UOMList = UOM;
                    //==Tax Type
                    IList<SelectListItem> TaxTypeList = new List<SelectListItem>();
                    //TaxTypeList.Add(new SelectListItem { Text = "Select Tax Type", Value = "0" });
                    TaxTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    TaxTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList TaxType = new SelectList(TaxTypeList, "Value", "Text");
                    ViewBag.TaxTypeList = TaxType;
                    //==Vat Type
                    IList<SelectListItem> VatTypeList = new List<SelectListItem>();
                    //VatTypeList.Add(new SelectListItem { Text = "Select VAT Type", Value = "0" });
                    VatTypeList.Add(new SelectListItem { Text = "Inclusive", Value = "1" });
                    VatTypeList.Add(new SelectListItem { Text = "Exclusive", Value = "2" });
                    VatTypeList.Add(new SelectListItem { Text = "Exempted", Value = "3" });
                    SelectList VatType = new SelectList(VatTypeList, "Value", "Text");
                    ViewBag.VatTypeList = VatType;
                    //==Mode of Payment
                    IList<SelectListItem> ModeOfPaymentList = new List<SelectListItem>();
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Select Mode of Payment", Value = "0" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Account Transfer", Value = "Account Transfer" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "RTGS", Value = "RTGS" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "EFTN", Value = "EFTN" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Pay Order", Value = "Pay Order" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Cash", Value = "Cash" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "IBB Payment", Value = "IBB Payment" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Brokerage", Value = "City Brokerage" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "City Capital", Value = "City Capital" });
                    ModeOfPaymentList.Add(new SelectListItem { Text = "Others", Value = "Others" });
                    SelectList ModeOfPayment = new SelectList(ModeOfPaymentList, "Value", "Text");
                    ViewBag.ModeOfPaymentList = ModeOfPayment;
                    //==Space Info
                    List<RMS.Models.SpaceInfoDTO> lstSpace = new List<RMS.Models.SpaceInfoDTO>();
                    var querySpace = from SP in db.SpaceInfos
                                     where SP.AgreementSLNo == AgreementSLNo
                                     orderby SP.SpaceSLNo ascending
                                     select new
                                     {
                                         SP.SpaceType,
                                         SP.SpaceArea,
                                         SP.SpaceRate,
                                         SP.SpaceRent,
                                         SP.SpaceTotalAdvance,
                                         SP.SpaceTotalAdjustment,
                                         SP.SpaceRemarks,
                                     };
                    lstSpace = querySpace.AsEnumerable().Select(x => new RMS.Models.SpaceInfoDTO
                    {
                        SpaceType = x.SpaceType,
                        SpaceArea = x.SpaceArea,
                        SpaceRate = x.SpaceRate,
                        SpaceRent = x.SpaceRent,
                        SpaceTotalAdvance = x.SpaceTotalAdvance,
                        SpaceTotalAdjustment = x.SpaceTotalAdjustment,
                        SpaceRemarks = x.SpaceRemarks,
                    }).ToList();
                    if (lstSpace.Count > 0)
                    {
                        for (int i = 0; i < lstSpace.Count; i++)
                        {
                            lstSpace[i].SpaceRowNumber = "_" + (i + 1).ToString();
                            lstSpace[i].SpaceftrCount = lstSpace.Count;
                        }
                    }
                    ViewBag.lstSpace = lstSpace;
                    //==Advance Info
                    List<RMS.Models.AdvanceInfoDTO> lstAdvance = new List<RMS.Models.AdvanceInfoDTO>();
                    var queryAdvance = from Adv in db.AdvanceInfos
                                       where Adv.AgreementSLNo == AgreementSLNo
                                       orderby Adv.AdvanceSLNo ascending
                                       select new
                                       {
                                           Adv.AdvanceNo,
                                           Adv.AdvanceSlotPeriod,
                                           Adv.StartDate,
                                           Adv.EndDate,
                                           Adv.AdvanceNote,
                                           Adv.AdvanceSlotAmount,
                                       };
                    lstAdvance = queryAdvance.AsEnumerable().Select(x => new RMS.Models.AdvanceInfoDTO
                    {
                        AdvanceNo = x.AdvanceNo,
                        AdvanceSlotPeriod = x.AdvanceSlotPeriod,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        AdvanceNote = x.AdvanceNote,
                        AdvanceSlotAmount = x.AdvanceSlotAmount,
                    }).ToList();
                    if (lstAdvance.Count > 0)
                    {
                        for (int i = 0; i < lstAdvance.Count; i++)
                        {
                            lstAdvance[i].AdvanceRowNumber = "_" + (i + 1).ToString();
                            lstAdvance[i].AdvanceftrCount = lstAdvance.Count;
                        }
                    }
                    ViewBag.lstAdvance = lstAdvance;
                    //==Review Info
                    List<RMS.Models.ReviewInfoDTO> lstReview = new List<RMS.Models.ReviewInfoDTO>();
                    var queryReview = from RI in db.ReviewInfos
                                      where RI.AgreementSLNo == AgreementSLNo
                                      orderby RI.ReviewSLNo ascending
                                      select new
                                      {
                                          RI.ReviewNo,
                                          RI.StartDate,
                                          RI.EndDate,
                                          RI.Period,
                                          RI.IncreaseAmount,
                                          RI.IncreasePercentage,
                                          RI.ReviewNote,
                                      };
                    lstReview = queryReview.AsEnumerable().Select(x => new RMS.Models.ReviewInfoDTO
                    {
                        ReviewNo = x.ReviewNo,
                        StartDate = x.StartDate.ToString("dd/MM/yyyy"),
                        EndDate = x.EndDate.ToString("dd/MM/yyyy"),
                        Period = x.Period,
                        IncreaseAmount = x.IncreaseAmount,
                        IncreasePercentage = x.IncreasePercentage,
                        ReviewNote = x.ReviewNote,
                    }).ToList();
                    if (lstReview.Count > 0)
                    {
                        for (int i = 0; i < lstReview.Count; i++)
                        {
                            lstReview[i].ReviewRowNumber = "_" + (i + 1).ToString();
                            lstReview[i].ReviewftrCount = lstReview.Count;
                        }
                    }
                    ViewBag.lstReview = lstReview;
                    //==Landlord Information
                    List<RMS.Models.LandlordInfoDTO> lstLandlord = new List<RMS.Models.LandlordInfoDTO>();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    var queryLandlord = from LI in db.LandlordInfos
                                        where LI.AgreementSLNo == AgreementSLNo && LI.IsOld == false
                                        orderby LI.LandlordSLNo ascending
                                        select new
                                        {
                                            //==Landlord Info
                                            LI.LandlordSLNo,
                                            LI.AgreementSLNo,
                                            LI.VendorCode,
                                            LI.LandlordName,
                                            LI.ModeOfPayment,
                                            LI.AdvancePC,
                                            LI.AdvanceAmount,
                                            LI.AdvanceAdjustmentPC,
                                            LI.AdvanceAdjustmentAmount,
                                            LI.TaxPC,
                                            LI.TaxAmount,
                                            LI.VATPC,
                                            LI.VATAmount,
                                            LI.RentPC,
                                            LI.RentAmount,
                                            LI.LLAddress,
                                            LI.LLContactNo,
                                            LI.LLEmail,
                                            LI.ACNo,
                                            LI.BankName,
                                            LI.BranchName,
                                            LI.RoutingNo,
                                        };
                    lstLandlord = queryLandlord.AsEnumerable().Select(x => new RMS.Models.LandlordInfoDTO
                    {
                        //==Landlord Info
                        LandlordSLNo = x.AgreementSLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        VendorCode = x.VendorCode,
                        LandlordName = x.LandlordName,
                        ModeOfPayment = x.ModeOfPayment,
                        VendorAdvancePC = x.AdvancePC,
                        VendorAdvanceAmount = x.AdvanceAmount,
                        VendorAdvanceAdjustmentPC = x.AdvanceAdjustmentPC,
                        VendorAdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        VendorTaxPC = x.TaxPC,
                        VendorTaxAmount = x.TaxAmount,
                        VendorVATPC = x.VATPC,
                        VendorVATAmount = x.VATAmount,
                        VendorRentPC = x.RentPC,
                        VendorRentAmount = x.RentAmount,
                        LLAddress = x.LLAddress,
                        LLContactNo = x.LLContactNo,
                        LLEmail = x.LLEmail,
                        ACNo = x.ACNo,
                        BankName = x.BankName,
                        BranchName = x.BranchName,
                        RoutingNo = x.RoutingNo,
                    }).ToList();
                    if (lstLandlord.Count > 0)
                    {
                        for (int i = 0; i < lstLandlord.Count; i++)
                        {
                            lstLandlord[i].LIRowNumber = "_" + (i + 1).ToString();
                            lstLandlord[i].LIftrCount = lstLandlord.Count;
                            if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.RTGS) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.EFTN) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Cash) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstLandlord[i].ModeOfPayment == ModeOfPaymentLocation.Others) { lstLandlord[i].ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstLandlord = lstLandlord;
                    //==Cost Center Info
                    List<RMS.Models.CostCenterInfoDTO> lstCC = new List<RMS.Models.CostCenterInfoDTO>();
                    var queryCC = from CC in db.CostCenterInfos
                                  where CC.AgreementSLNo == AgreementSLNo && CC.IsOld == false
                                  orderby CC.CCSLNo ascending
                                  select new
                                  {
                                      CC.CCCode,
                                      CC.CCName,
                                      CC.SOLCode,
                                      CC.SOLName,
                                      CC.CCShareAllotment,
                                      CC.CCText,
                                  };
                    lstCC = queryCC.AsEnumerable().Select(x => new RMS.Models.CostCenterInfoDTO
                    {
                        CCCode = x.CCCode,
                        CCName = x.CCName,
                        SOLCode = x.SOLCode,
                        SOLName = x.SOLName,
                        CCShareAllotment = x.CCShareAllotment,
                        CCText = x.CCText,
                    }).ToList();
                    if (lstCC.Count > 0)
                    {
                        for (int i = 0; i < lstCC.Count; i++)
                        {
                            lstCC[i].CCRowNumber = "_" + (i + 1).ToString();
                            lstCC[i].CCftrCount = lstCC.Count;
                        }
                    }
                    ViewBag.lstCC = lstCC;
                    //==Utility Information
                    List<RMS.Models.UtilityInfoDTO> lstUtility = new List<RMS.Models.UtilityInfoDTO>();
                    var queryUtility = from UI in db.UtilityInfos
                                       where UI.AgreementSLNo == AgreementSLNo && UI.IsOld == false
                                       orderby UI.UtilitySLNo ascending
                                       select new
                                       {
                                           //==Landlord Info
                                           UI.UtilitySLNo,
                                           UI.AgreementSLNo,
                                           UI.UtilityVendorCode,
                                           UI.UtilityLandlordName,
                                           UI.UtilityModeOfPayment,
                                           UI.ServiceChargePC,
                                           UI.ServiceChargeAmount,
                                           UI.OnlineTowerPC,
                                           UI.OnlineTowerAmount,
                                           UI.GeneratorSpacePC,
                                           UI.GeneratorSpaceAmount,
                                           UI.CarParkingPC,
                                           UI.CarParkingAmount,
                                           UI.TaxPC,
                                           UI.TaxAmount,
                                           UI.VATPC,
                                           UI.VATAmount,
                                           UI.UtilityAddress,
                                           UI.UtilityContactNo,
                                           UI.UtilityEmail,
                                           UI.UtilityACNo,
                                           UI.UtilityBankName,
                                           UI.UtilityBranchName,
                                           UI.UtilityRoutingNo,
                                       };
                    lstUtility = queryUtility.AsEnumerable().Select(x => new RMS.Models.UtilityInfoDTO
                    {
                        UtilitySLNo = x.UtilitySLNo,
                        AgreementSLNo = x.AgreementSLNo,
                        UtilityVendorCode = x.UtilityVendorCode,
                        UtilityLandlordName = x.UtilityLandlordName,
                        UtilityModeOfPayment = x.UtilityModeOfPayment,
                        ServiceChargePC = x.ServiceChargePC,
                        ServiceChargeAmount = x.ServiceChargeAmount,
                        OnlineTowerPC = x.OnlineTowerPC,
                        OnlineTowerAmount = x.OnlineTowerAmount,
                        GeneratorSpacePC = x.GeneratorSpacePC,
                        GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                        CarParkingPC = x.CarParkingPC,
                        CarParkingAmount = x.CarParkingAmount,
                        UtilityTaxPC = x.TaxPC,
                        UtilityTaxAmount = x.TaxAmount,
                        UtilityVATPC = x.VATPC,
                        UtilityVATAmount = x.VATAmount,
                        UtilityAddress = x.UtilityAddress,
                        UtilityContactNo = x.UtilityContactNo,
                        UtilityEmail = x.UtilityEmail,
                        UtilityACNo = x.UtilityACNo,
                        UtilityBankName = x.UtilityBankName,
                        UtilityBranchName = x.UtilityBranchName,
                        UtilityRoutingNo = x.UtilityRoutingNo,
                    }).ToList();
                    if (lstUtility.Count > 0)
                    {
                        for (int i = 0; i < lstUtility.Count; i++)
                        {
                            lstUtility[i].UtilityRowNumber = "_" + (i + 1).ToString();
                            lstUtility[i].UtilityftrCount = lstUtility.Count;
                            if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.RTGS) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.EFTN) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.PayOrder) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Cash) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.IBBPayment) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.CityCapital) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (lstUtility[i].UtilityModeOfPayment == ModeOfPaymentLocation.Others) { lstUtility[i].UtilityModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                        }
                    }
                    ViewBag.lstUtility = lstUtility;
                    //==Attach Documents
                    List<RMS.Models.FileUploadInfoDTO> lstFU = new List<RMS.Models.FileUploadInfoDTO>();
                    var queryFU = from FU in db.FileUploadInfos
                                  where FU.AgreementSLNo == AgreementSLNo
                                  orderby FU.SLNo ascending
                                  select new
                                  {
                                      FU.SLNo,
                                      FU.FileName,
                                  };
                    lstFU = queryFU.AsEnumerable().Select(x => new RMS.Models.FileUploadInfoDTO
                    {
                        SLNo = x.SLNo,
                        FileName = x.FileName,
                    }).ToList();
                    if (lstFU.Count > 0)
                    {
                        for (int i = 0; i < lstFU.Count; i++)
                        {
                            lstFU[i].FURowNumber = "_" + (i + 1).ToString();
                            lstFU[i].FUftrCount = lstFU.Count;
                        }
                    }
                    ViewBag.lstFU = lstFU;
                    //==Agreement Info
                    List<RMS.Models.AgreementInfoDTO> lstAgreement = new List<RMS.Models.AgreementInfoDTO>();
                    var query = from AI in db.AgreementInfos
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join S in db.StatusInfos on AI.Status equals S.StatusValue
                                where AI.AgreementSLNo == AgreementSLNo
                                select new
                                {
                                    AI.AgreementSLNo,
                                    //==Basic Info
                                    AI.PremiseTypeSLNo,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.PremiseAddress,
                                    AI.ConcernBranch,
                                    AI.InspectorName,
                                    AI.InspectorContactNo,
                                    AI.ClusterGroup,
                                    //==Agreement Info
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.AgreementStartDate,
                                    AI.AgreementEndDate,
                                    AI.AgreementPeriod,
                                    AI.RenewalFrequency,
                                    AI.RentDueDay,
                                    AI.UOM,
                                    AI.TotalArea,
                                    AI.CostPerUnit,
                                    AI.TotalRentAmount,
                                    AI.SecurityDepositAmount,
                                    AI.AdvanceAmount,
                                    AI.AdditionalAdvanceAmount,
                                    AI.AdvanceAdjustmentPeriod,
                                    AI.AdvanceAdjustmentAmount,
                                    AI.TaxPercentage,
                                    RentTaxAmount = AI.TaxAmount,
                                    AI.VATPercentage,
                                    RentVATAMount = AI.VATAmount,
                                    AI.ServiceCharge,
                                    AI.OnlineTower,
                                    AI.GeneratorSpace,
                                    AI.CarParking,
                                    AI.NetRentAmount,
                                    AI.AgreementStatus,
                                    AI.AgreementText,
                                    AI.Status,
                                    AI.UserSLNo,
                                    AI.EntryDate,
                                    AI.IsDeleted,
                                    S.StatusName,
                                    AI.ReviewFrequency,
                                    AI.ReviewPercentage,
                                    AI.TaxType,
                                    AI.VatType,
                                    //==Control Data
                                    AI.CashGLCode,
                                    AI.BankGLCode,
                                    AI.AdvanceGLCode,
                                    AI.AdvanceAdjustmentGLCode,
                                    AI.RentGLCode,
                                    AI.ServiceChargeGLCode,
                                    AI.TaxGLCode,
                                    AI.VATGLCode,
                                    AI.ProvisionGLTax,
                                    AI.ProvisionGLAP,
                                    AI.RTGSGL,
                                    AI.EFTNGL,
                                    AI.PayOrderGL,
                                    AI.IBBPaymentGL,
                                    AI.CityBrokerageGL,
                                    AI.CityCapitalGL,
                                    AI.OthersGL,
                                    //====
                                    AI.PremiseAddressBangla,
                                    AI.AreaStatus,
                                    AI.RegionalOffice,
                                    AI.PrimarySOL,
                                    AI.AttachedControl,
                                    AI.ControllerOfficeDistance,
                                    AI.RoutingNumber,
                                    AI.Division,
                                    AI.District,
                                    AI.Upazila,
                                    AI.Thana,
                                    AI.ThanaCode,
                                    AI.Pourasabha,
                                    AI.PourasabhaType,
                                    AI.UnionName,
                                    AI.WardNo,
                                    AI.PremisesTypeforAccounts,
                                    AI.ParentAgreementCode,
                                    AI.ElectricityLoad,
                                    AI.ElectricityProvidedBy,
                                    AI.AITBourneBy,
                                    AI.CommercialPermission,
                                    AI.BuildingPlan,
                                    AI.PremisesSituatedFloor,
                                    AI.BangladeshBankApproval,
                                    AI.BangladeshBankReference,
                                    AI.ITTowerRentClause,
                                    AI.TerminationClause,
                                    AI.TerminationNoticePeriod,
                                    AI.PremisesOpeningDate,
                                    AI.DocumentDate,
                                    AI.Remarks,
                                    AI.AgreementRemarks,
                                    AI.AdvanceRemarks,
                                    AI.ReviewRemarks,
                                    AI.LLRemarks,
                                    AI.CCRemarks,
                                    AI.UtilityRemarks,
                                    AI.ControlDataRemarks,
                                    //====
                                    AI.BorrowingRate,
                                    AI.PaymentMethod,
                                    AI.IsIFRSEnable,
                                    AI.CalculationMethod,
                                    AI.WithHoldingCode,
                                    AI.AdditionalExpense,
                                    AI.InitialDirectCost,
                                    AI.DismantlingCost,
                                    AI.CarParkingNo,
                                    AI.WaterBillType,
                                    AI.WaterBillAmount,
                                    AI.IFRSEffectiveDate,
                                    AI.CorporateTaxRate,
                                };
                    lstAgreement = query.AsEnumerable().Select(x => new RMS.Models.AgreementInfoDTO
                    {
                        AgreementSLNo = x.AgreementSLNo,
                        //==Basic Info
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        PremiseAddress = x.PremiseAddress,
                        ConcernBranch = x.ConcernBranch,
                        InspectorName = x.InspectorName,
                        InspectorContactNo = x.InspectorContactNo,
                        ClusterGroup = x.ClusterGroup,
                        //==Agreement Info
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                        AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                        AgreementPeriod = x.AgreementPeriod,
                        RenewalFrequency = x.RenewalFrequency,
                        RentDueDay = x.RentDueDay,
                        UOM = x.UOM,
                        TotalArea = x.TotalArea,
                        CostPerUnit = x.CostPerUnit,
                        RentAmount = x.TotalArea * x.CostPerUnit,
                        TotalRentAmount = x.TotalRentAmount,
                        SecurityDepositAmount = x.SecurityDepositAmount,
                        AdvanceAmount = x.AdvanceAmount,
                        AdditionalAdvanceAmount = x.AdditionalAdvanceAmount,
                        AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                        AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                        TaxPercentage = x.TaxPercentage,
                        TaxAmount = x.RentTaxAmount,
                        VATPercentage = x.VATPercentage,
                        VATAmount = x.RentVATAMount,
                        ServiceCharge = x.ServiceCharge,
                        OnlineTower = x.OnlineTower,
                        GeneratorSpace = x.GeneratorSpace,
                        CarParking = x.CarParking,
                        NetRentAmount = x.NetRentAmount,
                        AgreementStatus = x.AgreementStatus,
                        AgreementText = x.AgreementText,
                        Status = x.Status,
                        UserSLNo = x.UserSLNo,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        IsDeleted = x.IsDeleted,
                        StatusName = x.StatusName,
                        ReviewFrequency = x.ReviewFrequency,
                        ReviewPercentage = x.ReviewPercentage,
                        TaxType = x.TaxType,
                        xTaxType = x.TaxType,
                        VatType = x.VatType,
                        //==Control Data
                        CashGLCode = x.CashGLCode,
                        BankGLCode = x.BankGLCode,
                        AdvanceGLCode = x.AdvanceGLCode,
                        AdvanceAdjustmentGLCode = x.AdvanceAdjustmentGLCode,
                        RentGLCode = x.RentGLCode,
                        ServiceChargeGLCode = x.ServiceChargeGLCode,
                        TaxGLCode = x.TaxGLCode,
                        VATGLCode = x.VATGLCode,
                        ProvisionGLTax = x.ProvisionGLTax,
                        ProvisionGLAP = x.ProvisionGLAP,
                        RTGSGL = x.RTGSGL,
                        EFTNGL = x.EFTNGL,
                        PayOrderGL = x.PayOrderGL,
                        IBBPaymentGL = x.IBBPaymentGL,
                        CityBrokerageGL = x.CityBrokerageGL,
                        CityCapitalGL = x.CityCapitalGL,
                        OthersGL = x.OthersGL,
                        SpaceftrCount = lstSpace.Count(),
                        RIftrCount = lstReview.Count(),
                        LIftrCount = lstLandlord.Count(),
                        CCftrCount = lstCC.Count(),
                        UIftrCount = lstUtility.Count(),
                        //======
                        PremiseAddressBangla = x.PremiseAddressBangla,
                        AreaStatus = x.AreaStatus,
                        RegionalOffice = x.RegionalOffice,
                        PrimarySOL = x.PrimarySOL,
                        AttachedControl = x.AttachedControl,
                        ControllerOfficeDistance = x.ControllerOfficeDistance,
                        RoutingNumber = x.RoutingNumber,
                        Division = x.Division,
                        District = x.District,
                        Upazila = x.Upazila,
                        Thana = x.Thana,
                        ThanaCode = x.ThanaCode,
                        Pourasabha = x.Pourasabha,
                        PourasabhaType = x.PourasabhaType,
                        UnionName = x.UnionName,
                        WardNo = x.WardNo,
                        PremisesTypeforAccounts = x.PremisesTypeforAccounts,
                        ParentAgreementCode = x.ParentAgreementCode,
                        ElectricityLoad = x.ElectricityLoad,
                        ElectricityProvidedBy = x.ElectricityProvidedBy,
                        AITBourneBy = x.AITBourneBy,
                        CommercialPermission = x.CommercialPermission,
                        BuildingPlan = x.BuildingPlan,
                        PremisesSituatedFloor = x.PremisesSituatedFloor,
                        BangladeshBankApproval = x.BangladeshBankApproval,
                        BangladeshBankReference = x.BangladeshBankReference,
                        ITTowerRentClause = x.ITTowerRentClause,
                        TerminationClause = x.TerminationClause,
                        TerminationNoticePeriod = x.TerminationNoticePeriod,
                        PremisesOpeningDate = x.PremisesOpeningDate?.ToString("dd/MM/yyyy"),
                        DocumentDate = x.DocumentDate?.ToString("dd/MM/yyyy"),
                        Remarks = x.Remarks,
                        AgreementRemarks = x.AgreementRemarks,
                        AdvanceRemarks = x.AdvanceRemarks,
                        ReviewRemarks = x.ReviewRemarks,
                        LLRemarks = x.LLRemarks,
                        CCRemarks = x.CCRemarks,
                        UtilityRemarks = x.UtilityRemarks,
                        ControlDataRemarks = x.ControlDataRemarks,
                        //======
                        BorrowingRate = x.BorrowingRate,
                        PaymentMethod = x.PaymentMethod,
                        IsIFRSEnable = x.IsIFRSEnable,
                        CalculationMethod = x.CalculationMethod,
                        WithHoldingCode = x.WithHoldingCode,
                        AdditionalExpense = x.AdditionalExpense,
                        InitialDirectCost = x.InitialDirectCost,
                        DismantlingCost = x.DismantlingCost,
                        CarParkingNo = x.CarParkingNo,
                        WaterBillType = x.WaterBillType,
                        WaterBillAmount = x.WaterBillAmount,
                        IFRSEffectiveDate = x.IFRSEffectiveDate?.ToString("dd/MM/yyyy"),
                        CorporateTaxRate = x.CorporateTaxRate,
                    }).ToList();
                    ViewBag.ClickIndex = ClickIndex;
                    return View(AgreementInfoPath.ModAgreementDetailsCreate, lstAgreement);
                    //if (ClickIndex == 1)
                    //{
                    //    return View(AgreementInfoPath.ModAgreementDetailsCreate, lstAgreement);
                    //}
                    //else if (ClickIndex == 3)
                    //{
                    //    return View(AgreementInfoPath.ModAgreementDetailsDelete, lstAgreement);
                    //}
                    //else if (ClickIndex == 4)
                    //{
                    //    return View(AgreementInfoPath.ModAgreementDetailsActivate, lstAgreement);
                    //}
                    //else if (ClickIndex == 5)
                    //{
                    //    return View(AgreementInfoPath.ModAgreementDetailsBlock, lstAgreement);
                    //}
                    //else if (ClickIndex == 6)
                    //{
                    //    return View(AgreementInfoPath.ModAgreementDetailsUnblock, lstAgreement);
                    //}
                    //else
                    //{
                    //    return View(AgreementInfoPath.ModAgreementDetails, lstAgreement);
                    //}
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult Delete(int? AgreementSLNo)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    if (db.ContractSchedules.Any(x => x.AgreementSLNo == AgreementSLNo && x.IsPosted == true) == true)
                    {
                        return Json(new { CheckPosted = true }, JsonRequestBehavior.AllowGet);
                    }
                    //===Delete Existing
                    db.ContractSchedules.RemoveRange(db.ContractSchedules.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    //db.UtilitySchedules.RemoveRange(db.UtilitySchedules.Where(x => x.AgreementSLNo == AgreementSLNo));
                    //db.SaveChanges();
                    //==
                    db.IFRSSchedules.RemoveRange(db.IFRSSchedules.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.BorrowingRateDetails.RemoveRange(db.BorrowingRateDetails.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //=====
                    db.AdvanceInfos.RemoveRange(db.AdvanceInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.ReviewInfos.RemoveRange(db.ReviewInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.LandlordInfos.RemoveRange(db.LandlordInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.CostCenterInfos.RemoveRange(db.CostCenterInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.UtilityInfos.RemoveRange(db.UtilityInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.SpaceInfos.RemoveRange(db.SpaceInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.AgreementInfos.RemoveRange(db.AgreementInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    AlertMsg = "The agreement has been deleted.";
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult DeleteRentAPLog(int LogID)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==Delete PreviewRentAPJournalInfo
                    db.PreviewRentAPJournalInfos.RemoveRange(db.PreviewRentAPJournalInfos.Where(x => x.PostingID == LogID.ToString()));
                    db.SaveChanges();
                    //==Contract Schedule Update
                    IList<RMS.Models.RentAPExecuteLog> lstRentAPLog = db.RentAPExecuteLogs.Where(x => x.LogID == LogID).ToList();
                    RMS.Models.ContractSchedule CS = new RMS.Models.ContractSchedule();
                    foreach (RMS.Models.RentAPExecuteLog item in lstRentAPLog.OrderBy(x => x.AgreementSLNo))
                    {
                        CS = db.ContractSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == item.Year && x.Month == item.Month).SingleOrDefault();
                        CS.IsLog = false;
                        db.Entry(CS).State = EntityState.Modified;
                        db.SaveChanges();
                    }
                    //==Delete RentAPExecuteLog
                    db.RentAPExecuteLogs.RemoveRange(db.RentAPExecuteLogs.Where(x => x.LogID == LogID));
                    db.SaveChanges();
                    //==
                    AlertMsg = "The Rent AP Log has been deleted.";
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult DeleteRentPaymentLog(int LogID)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==Delete PreviewRentVendorPJInfo
                    db.PreviewRentVendorPJInfos.RemoveRange(db.PreviewRentVendorPJInfos.Where(x => x.PostingID == LogID.ToString()));
                    db.SaveChanges();
                    //==Delete PreviewRentGovtPJInfo
                    db.PreviewRentGovtPJInfos.RemoveRange(db.PreviewRentGovtPJInfos.Where(x => x.PostingID == LogID.ToString()));
                    db.SaveChanges();
                    //==Delete RentVendorPJExecuteLogs
                    db.RentVendorPJExecuteLogs.RemoveRange(db.RentVendorPJExecuteLogs.Where(x => x.LogID == LogID));
                    db.SaveChanges();
                    //==
                    AlertMsg = "The Rent Payment Log has been deleted.";
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult Close(int? AgreementSLNo)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    RMS.Models.AgreementInfo AI = db.AgreementInfos.Where(x => x.AgreementSLNo == AgreementSLNo).SingleOrDefault();
                    AI.IsClosed = true;
                    db.Entry(AI).State = EntityState.Modified;
                    db.SaveChanges();
                    AlertMsg = "The agreement: " + AI.AgreementCode + " - " + AI.AgreementName + " has been closed.";
                    return Json(new { CheckStatus = true, AgreementCode = AI.AgreementCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectPremiseTypeEdit(int PremiseTypeSLNo)
        {
            TempData.Remove("PremiseTypeSLNo");
            TempData.Add("PremiseTypeSLNo", PremiseTypeSLNo);
            return RedirectToAction("PremiseTypeEdit");
        }

        [HttpGet]
        public ActionResult PremiseTypeEdit()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.URLPath = "AgreementInfo/PremiseTypeIndex";
                    ViewBag.Status = (List<RMS.Models.StatusInfo>)db.StatusInfos.ToList();
                    var strPremiseTypeSLNo = TempData["PremiseTypeSLNo"];
                    if (strPremiseTypeSLNo == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int PremiseTypeSLNo = Convert.ToInt32(strPremiseTypeSLNo);
                    List<RMS.Models.PremiseTypeInfoDTO> lst = new List<RMS.Models.PremiseTypeInfoDTO>();
                    var query = from PT in db.PremiseTypeInfos
                                join S in db.StatusInfos on PT.Status equals S.StatusValue
                                where PT.PremiseTypeSLNo == PremiseTypeSLNo
                                select new
                                {
                                    PT.PremiseTypeSLNo,
                                    PT.PremiseTypeCode,
                                    PT.PremiseType,
                                    PT.Status,
                                    S.StatusName,
                                };
                    lst = query.AsEnumerable().Select(x => new RMS.Models.PremiseTypeInfoDTO
                    {
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseTypeCode = x.PremiseTypeCode,
                        PremiseType = x.PremiseType,
                        Status = x.Status,
                        StatusName = x.StatusName,
                    }).ToList();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.PremiseTypeEdit, lst);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectLookupEdit(int LookupSLNo)
        {
            TempData.Remove("LookupSLNo");
            TempData.Add("LookupSLNo", LookupSLNo);
            return RedirectToAction("LookupEdit");
        }

        [HttpGet]
        public ActionResult LookupEdit()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    ViewBag.LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.URLPath = "AgreementInfo/LookupIndex";
                    ViewBag.Status = (List<RMS.Models.StatusInfo>)db.StatusInfos.ToList();
                    var strLookupSLNo = TempData["LookupSLNo"];
                    if (strLookupSLNo == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int LookupSLNo = Convert.ToInt32(strLookupSLNo);
                    List<RMS.Models.LookupDTO> lst = new List<RMS.Models.LookupDTO>();
                    var query = from L in db.Lookups
                                join S in db.StatusInfos on L.Status equals S.StatusValue
                                where L.LookupSLNo == LookupSLNo
                                select new
                                {
                                    L.LookupSLNo,
                                    L.GroupName,
                                    L.Code,
                                    L.Description,
                                    L.ParentCode,
                                    L.Status,
                                    S.StatusName,
                                };
                    lst = query.AsEnumerable().Select(x => new RMS.Models.LookupDTO
                    {
                        LookupSLNo = x.LookupSLNo,
                        GroupName = x.GroupName,
                        Code = x.Code,
                        Description = x.Description,
                        ParentCode = x.ParentCode,
                        Status = x.Status,
                        StatusName = x.StatusName,
                    }).ToList();
                    //==Lookup
                    IList<SelectListItem> LookupList = new List<SelectListItem>();
                    LookupList.Add(new SelectListItem { Text = "Cost Center", Value = "Cost Center" });
                    LookupList.Add(new SelectListItem { Text = "SOL", Value = "SOL" });
                    LookupList.Add(new SelectListItem { Text = "Bank", Value = "Bank" });
                    LookupList.Add(new SelectListItem { Text = "Regional Office", Value = "Regional Office" });
                    LookupList.Add(new SelectListItem { Text = "Division", Value = "Division" });
                    LookupList.Add(new SelectListItem { Text = "District", Value = "District" });
                    LookupList.Add(new SelectListItem { Text = "Upazila", Value = "Upazila" });
                    LookupList.Add(new SelectListItem { Text = "Thana", Value = "Thana" });
                    LookupList.Add(new SelectListItem { Text = "Premises Type for Accounts", Value = "Premises Type for Accounts" });
                    LookupList.Add(new SelectListItem { Text = "Sub Premises Type", Value = "Sub Premises Type" });
                    LookupList.Add(new SelectListItem { Text = "Payment Method", Value = "Payment Method" });
                    SelectList Lookup = new SelectList(LookupList, "Text", "Value");
                    ViewBag.LookupList = Lookup;
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.LookupEdit, lst);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult PremiseTypeEdit(int PremiseTypeSLNo, int PremiseTypeCode, string PremiseType, int Status)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    DTOBasic dtoBasic = new DTOBasic();
                    RMS.Models.PremiseTypeInfo PT = new RMS.Models.PremiseTypeInfo();
                    PT = db.PremiseTypeInfos.Where(x => x.PremiseTypeSLNo == PremiseTypeSLNo).SingleOrDefault();
                    PT.PremiseTypeCode = PremiseTypeCode;
                    PT.PremiseType = PremiseType;
                    PT.EditBy = (string)Session["LoginUserID"];
                    PT.EditDate = DateTime.Now;
                    PT.Status = Status;
                    db.Entry(PT).State = EntityState.Modified;
                    db.SaveChanges();
                    AlertMsg = "The premise type " + PremiseType + " has been updated.";
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult LookupEdit(RMS.Models.LookupDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    DTOBasic dtoBasic = new DTOBasic();
                    RMS.Models.Lookup L = new RMS.Models.Lookup();
                    L = db.Lookups.Where(x => x.LookupSLNo == DTO.LookupSLNo).SingleOrDefault();
                    L.GroupName = DTO.GroupName;
                    L.Code = DTO.Code;
                    L.Description = DTO.Description;
                    L.ParentCode = DTO.ParentCode;
                    L.EditBy = (string)Session["LoginUserID"];
                    L.EditDate = DateTime.Now;
                    L.Status = DTO.Status;
                    db.Entry(L).State = EntityState.Modified;
                    db.SaveChanges();
                    AlertMsg = "Lookup " + L.Description + " has been updated.";
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult PremiseTypeDelete(int PremiseTypeSLNo, string PremiseType)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    RMS.Models.PremiseTypeInfo PT = db.PremiseTypeInfos.Where(x => x.PremiseTypeSLNo == PremiseTypeSLNo).SingleOrDefault();
                    PT.UserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    PT.EntryDate = DateTime.Now;
                    PT.IsDeleted = true;
                    db.Entry(PT).State = EntityState.Modified;
                    db.SaveChanges();
                    AlertMsg = "The premise type: " + PremiseType + " has been deleted.";
                    return Json(new { CheckStatus = true, PremiseType = PremiseType }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult LookupDelete(int LookupSLNo, string Description)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==Check Lookup already used or not
                    var LookupInfo = db.Lookups.Where(x => x.LookupSLNo == LookupSLNo).Select(x => new { x.GroupName, x.Description }).SingleOrDefault();
                    if (LookupInfo.GroupName == "Cost Center")
                    {
                        if (db.CostCenterInfos.Any(x => x.CCName == LookupInfo.Description) == true)
                        {
                            return Json(new { LookupExist = true }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else if (LookupInfo.GroupName == "SOL")
                    {
                        if (db.CostCenterInfos.Any(x => x.SOLName == LookupInfo.Description) == true)
                        {
                            return Json(new { LookupExist = true }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else if (LookupInfo.GroupName == "Bank")
                    {
                        if (db.LandlordInfos.Any(x => x.BankName == LookupInfo.Description) == true)
                        {
                            return Json(new { LookupExist = true }, JsonRequestBehavior.AllowGet);
                        }
                        else if (db.UtilityInfos.Any(x => x.UtilityBankName == LookupInfo.Description) == true)
                        {
                            return Json(new { LookupExist = true }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else if (LookupInfo.GroupName == "Regional Office")
                    {
                        if (db.AgreementInfos.Any(x => x.RegionalOffice == LookupInfo.Description) == true)
                        {
                            return Json(new { LookupExist = true }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else if (LookupInfo.GroupName == "Division")
                    {
                        if (db.AgreementInfos.Any(x => x.Division == LookupInfo.Description) == true)
                        {
                            return Json(new { LookupExist = true }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else if (LookupInfo.GroupName == "District")
                    {
                        if (db.AgreementInfos.Any(x => x.District == LookupInfo.Description) == true)
                        {
                            return Json(new { LookupExist = true }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else if (LookupInfo.GroupName == "Upazila")
                    {
                        if (db.AgreementInfos.Any(x => x.Upazila == LookupInfo.Description) == true)
                        {
                            return Json(new { LookupExist = true }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else if (LookupInfo.GroupName == "Thana")
                    {
                        if (db.AgreementInfos.Any(x => x.Thana == LookupInfo.Description) == true)
                        {
                            return Json(new { LookupExist = true }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else if (LookupInfo.GroupName == "Premises Type for Accounts")
                    {
                        if (db.AgreementInfos.Any(x => x.PremisesTypeforAccounts == LookupInfo.Description) == true)
                        {
                            return Json(new { LookupExist = true }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else if (LookupInfo.GroupName == "Sub Premises Type")
                    {
                        if (db.SpaceInfos.Any(x => x.SpaceType == LookupInfo.Description) == true)
                        {
                            return Json(new { LookupExist = true }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else if (LookupInfo.GroupName == "Payment Method")
                    {
                        if (db.AgreementInfos.Any(x => x.PaymentMethod == LookupInfo.Description) == true)
                        {
                            return Json(new { LookupExist = true }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    //==Delete Record
                    db.Lookups.RemoveRange(db.Lookups.Where(x => x.LookupSLNo == LookupSLNo));
                    db.SaveChanges();
                    //==
                    AlertMsg = "Lookup: " + Description + " has been deleted.";
                    return Json(new { CheckStatus = true, Description = Description }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult DraftDelete(int? AgreementSLNo, string AgreementName)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //===Delete Existing Draft Advance Info
                    db.DraftAdvanceInfos.RemoveRange(db.DraftAdvanceInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //===Delete Existing Draft Review Info
                    db.DraftReviewInfos.RemoveRange(db.DraftReviewInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //===Delete Existing Draft Landlord Info
                    db.DraftLandlordInfos.RemoveRange(db.DraftLandlordInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //===Delete Existing Draft Cost Center Info
                    db.DraftCostCenterInfos.RemoveRange(db.DraftCostCenterInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //===Delete Existing Utility Info
                    db.DraftUtilityInfos.RemoveRange(db.DraftUtilityInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //===Delete Existing Draft Space Info
                    db.DraftSpaceInfos.RemoveRange(db.DraftSpaceInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //===Delete Existing Draft Agreement Info
                    db.DraftAgreementInfos.RemoveRange(db.DraftAgreementInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    AlertMsg = "The draft agreement: " + AgreementName + " has been deleted.";
                    return Json(new { CheckStatus = true, AgreementName = AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult ReDelete(int? AgreementSLNo)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    if (db.ContractSchedules.Any(x => x.AgreementSLNo == AgreementSLNo && x.IsPosted == true) == true)
                    {
                        return Json(new { CheckPosted = true }, JsonRequestBehavior.AllowGet);
                    }
                    //===Delete Existing
                    db.ContractSchedules.RemoveRange(db.ContractSchedules.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    //db.UtilitySchedules.RemoveRange(db.UtilitySchedules.Where(x => x.AgreementSLNo == AgreementSLNo));
                    //db.SaveChanges();
                    //==
                    db.IFRSSchedules.RemoveRange(db.IFRSSchedules.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.BorrowingRateDetails.RemoveRange(db.BorrowingRateDetails.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //=====
                    db.AdvanceInfos.RemoveRange(db.AdvanceInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.ReviewInfos.RemoveRange(db.ReviewInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.LandlordInfos.RemoveRange(db.LandlordInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.CostCenterInfos.RemoveRange(db.CostCenterInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.UtilityInfos.RemoveRange(db.UtilityInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.SpaceInfos.RemoveRange(db.SpaceInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.AgreementInfos.RemoveRange(db.AgreementInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    AlertMsg = "The renewal agreement has been deleted.";
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult ModDelete(int? AgreementSLNo)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    if (db.ContractSchedules.Any(x => x.AgreementSLNo == AgreementSLNo && x.IsPosted == true) == true)
                    {
                        return Json(new { CheckPosted = true }, JsonRequestBehavior.AllowGet);
                    }
                    //===Delete Existing
                    db.ContractSchedules.RemoveRange(db.ContractSchedules.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    //db.UtilitySchedules.RemoveRange(db.UtilitySchedules.Where(x => x.AgreementSLNo == AgreementSLNo));
                    //db.SaveChanges();
                    //==
                    db.IFRSSchedules.RemoveRange(db.IFRSSchedules.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.BorrowingRateDetails.RemoveRange(db.BorrowingRateDetails.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //=====
                    db.AdvanceInfos.RemoveRange(db.AdvanceInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.ReviewInfos.RemoveRange(db.ReviewInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.LandlordInfos.RemoveRange(db.LandlordInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.CostCenterInfos.RemoveRange(db.CostCenterInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.UtilityInfos.RemoveRange(db.UtilityInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.SpaceInfos.RemoveRange(db.SpaceInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    db.AgreementInfos.RemoveRange(db.AgreementInfos.Where(x => x.AgreementSLNo == AgreementSLNo));
                    db.SaveChanges();
                    //==
                    AlertMsg = "The modified agreement has been deleted.";
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult Activate(int AgreementSLNo)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    RMS.Models.AgreementInfo AI = db.AgreementInfos.Where(x => x.AgreementSLNo == AgreementSLNo).SingleOrDefault();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    string LoginUserID = (string)Session["LoginUserID"];
                    AI.ActivateBy = (string)Session["LoginUserID"];
                    AI.ActivateDate = DateTime.Now;
                    AI.AgreementStatus = AgreementStatus.Activate;
                    db.Entry(AI).State = EntityState.Modified;
                    db.SaveChanges();
                    //==Contract Rent Schedule
                    RMS.Models.ContractSchedule CS = new RMS.Models.ContractSchedule();
                    RMS.Models.LandlordSchedule LS = new RMS.Models.LandlordSchedule();
                    RMS.Models.CostCenterSchedule CCS = new RMS.Models.CostCenterSchedule();
                    //RMS.Models.UtilitySchedule US = new RMS.Models.UtilitySchedule();
                    RMS.Models.IFRSSchedule IFRS = new RMS.Models.IFRSSchedule();
                    List<RMS.Models.LandlordInfo> lstLandlords = db.LandlordInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).ToList();
                    List<RMS.Models.CostCenterInfo> lstCostCenter = db.CostCenterInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).ToList();
                    //List<RMS.Models.UtilityInfo> lstUtility = db.UtilityInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).ToList();
                    List<RMS.Models.ReviewInfo> lstReviewInfo = db.ReviewInfos.Where(x => x.AgreementSLNo == AgreementSLNo).OrderBy(x => x.ReviewNo).ToList();
                    List<RMS.Models.AdvanceInfo> lstAdvanceInfo = db.AdvanceInfos.Where(x => x.AgreementSLNo == AgreementSLNo).OrderBy(x => x.AdvanceNo).ToList();
                    DateTime ScheduleDate = AI.AgreementStartDate;
                    //===xxx====
                    int LastMonthDaysCount = DateTime.DaysInMonth(AI.AgreementEndDate.Year, AI.AgreementEndDate.Month);
                    int ReviewMonthDaysCount = 0;
                    int MonthDays = 0;

                    double RentPerDay = 0;
                    double BeforeReviewAmount = 0;
                    double AfterReviewAmount = 0;
                    double NetCalcAmount = 0;
                    if (AI.ReviewFrequency < 1 && lstReviewInfo.Count == 0)
                    {
                        //==Without Review
                        for (int i = 1; i <= AI.AgreementPeriod; i++)
                        {
                            CS = new RMS.Models.ContractSchedule();
                            if (i != 1)
                            {
                                ScheduleDate = ScheduleDate.AddMonths(1);
                            }
                            //==Contract Schedule
                            CS.ScheduleDate = ScheduleDate;
                            CS.AgreementSLNo = AI.AgreementSLNo;
                            CS.MonthNo = i;
                            CS.Year = CS.ScheduleDate.Year;
                            CS.Month = CS.ScheduleDate.ToString("MMMM");
                            CS.ReviewNo = 0;
                            if (i <= AI.AdvanceAdjustmentPeriod)
                            {
                                CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                            }
                            CS.CostPerUnit = AI.CostPerUnit;
                            CS.TotalRentAmount = AI.CostPerUnit * AI.TotalArea;
                            //==First Month
                            if (i == 1)
                            {
                                //==Full Month
                                if (ScheduleDate.Day != 1)
                                {
                                    //==Fraction Date Rent Amount
                                    MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                    RentPerDay = CS.TotalRentAmount / MonthDays;
                                    CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                }
                            }
                            //==Last Month
                            else if (i == AI.AgreementPeriod)
                            {
                                //==Full Month
                                if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                {
                                    //==Fraction Date Rent Amount
                                    RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                    CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                }
                            }
                            #region "Tax Type & VAT Type"
                            //1. Inclusive Inclusive
                            if (AI.TaxType == 1 && AI.VatType == 1)
                            {
                                CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //2. Inclusive Exclusive
                            else if (AI.TaxType == 1 && AI.VatType == 2)
                            {
                                CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //3. Inclusive Exempted
                            else if (AI.TaxType == 1 && AI.VatType == 3)
                            {
                                CS.VATAmount = 0;
                                CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //4. Exclusive Inclusive
                            else if (AI.TaxType == 2 && AI.VatType == 1)
                            {
                                CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //5. Exclusive Exclusive
                            else if (AI.TaxType == 2 && AI.VatType == 2)
                            {
                                CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                NetCalcAmount = CS.TotalRentAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //6. Exclusive Exempted
                            else if (AI.TaxType == 2 && AI.VatType == 3)
                            {
                                CS.VATAmount = 0;
                                CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                NetCalcAmount = CS.TotalRentAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //7. Exempted  Inclusive
                            else if (AI.TaxType == 3 && AI.VatType == 1)
                            {
                                CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                CS.TaxAmount = 0;
                                NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //8. Exempted  Exclusive
                            else if (AI.TaxType == 3 && AI.VatType == 2)
                            {
                                CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                CS.TaxAmount = 0;
                                NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //9. Exempted Exempted
                            else if (AI.TaxType == 3 && AI.VatType == 3)
                            {
                                CS.VATAmount = 0;
                                CS.TaxAmount = 0;
                                NetCalcAmount = CS.TotalRentAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            #endregion
                            CS.UserSLNo = AI.UserSLNo;
                            CS.EntryDate = DateTime.Now;
                            db.ContractSchedules.Add(CS);
                            db.SaveChanges();
                            //==Landlord Schedule
                            foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                            {
                                LS = new RMS.Models.LandlordSchedule();
                                LS.ScheduleDate = ScheduleDate;
                                LS.AgreementSLNo = AI.AgreementSLNo;
                                LS.LandlordSLNo = LI.LandlordSLNo;
                                LS.MonthNo = i;
                                LS.Year = CS.ScheduleDate.Year;
                                LS.Month = CS.ScheduleDate.ToString("MMMM");
                                LS.ReviewNo = 0;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                }
                                LS.CostPerUnit = AI.CostPerUnit;
                                LS.TotalRentAmount = CS.TotalRentAmount;
                                //==
                                if (CS.TaxAmount > 0)
                                {
                                    LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                }
                                if (CS.VATAmount > 0)
                                {
                                    LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                }
                                //==
                                LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - (LS.AdvanceAdjustmentAmount);
                                LS.UserSLNo = AI.UserSLNo;
                                LS.EntryDate = DateTime.Now;
                                db.LandlordSchedules.Add(LS);
                                db.SaveChanges();
                            }
                            //==Cost Allocation Schedule
                            foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                            {
                                CCS = new RMS.Models.CostCenterSchedule();
                                CCS.ScheduleDate = ScheduleDate;
                                CCS.AgreementSLNo = AI.AgreementSLNo;
                                CCS.CCSLNo = CC.CCSLNo;
                                CCS.MonthNo = i;
                                CCS.Year = CS.ScheduleDate.Year;
                                CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                CCS.ReviewNo = 0;
                                CCS.CostPerUnit = AI.CostPerUnit;
                                CCS.TotalRentAmount = CS.TotalRentAmount;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                }
                                if (CS.TaxAmount > 0)
                                {
                                    CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                }
                                if (CS.VATAmount > 0)
                                {
                                    CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                }
                                //==
                                CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                CCS.UserSLNo = AI.UserSLNo;
                                CCS.EntryDate = DateTime.Now;
                                db.CostCenterSchedules.Add(CCS);
                                db.SaveChanges();
                            }
                        }
                    }
                    else if (AI.ReviewFrequency > 0)
                    {
                        //==Review Frequency (Repeated)
                        int ReviewCount = AI.ReviewFrequency + 1;
                        int ReviewNo = 0;
                        double NewCPU = AI.CostPerUnit;
                        for (int i = 1; i <= AI.AgreementPeriod; i++)
                        {
                            CS = new RMS.Models.ContractSchedule();
                            if (i != 1)
                            {
                                ScheduleDate = ScheduleDate.AddMonths(1);
                            }
                            if (i <= AI.ReviewFrequency)
                            {
                                //==Contract Schedule
                                CS.ScheduleDate = ScheduleDate;
                                CS.AgreementSLNo = AI.AgreementSLNo;
                                CS.MonthNo = i;
                                CS.Year = CS.ScheduleDate.Year;
                                CS.Month = CS.ScheduleDate.ToString("MMMM");
                                CS.ReviewNo = ReviewNo;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                }
                                CS.CostPerUnit = NewCPU;
                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                if (i == 1)
                                {
                                    //==Full Month
                                    if (ScheduleDate.Day != 1)
                                    {
                                        //==Fraction Date Rent Amount
                                        MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                        RentPerDay = CS.TotalRentAmount / MonthDays;
                                        CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                    }
                                }
                                #region "Tax Type & VAT Type"
                                //1. Inclusive Inclusive
                                if (AI.TaxType == 1 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //2. Inclusive Exclusive
                                else if (AI.TaxType == 1 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //3. Inclusive Exempted
                                else if (AI.TaxType == 1 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //4. Exclusive Inclusive
                                else if (AI.TaxType == 2 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //5. Exclusive Exclusive
                                else if (AI.TaxType == 2 && AI.VatType == 2)
                                {
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //6. Exclusive Exempted
                                else if (AI.TaxType == 2 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //7. Exempted  Inclusive
                                else if (AI.TaxType == 3 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //8. Exempted  Exclusive
                                else if (AI.TaxType == 3 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //9. Exempted Exempted
                                else if (AI.TaxType == 3 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                #endregion
                                CS.UserSLNo = AI.UserSLNo;
                                CS.EntryDate = DateTime.Now;
                                db.ContractSchedules.Add(CS);
                                db.SaveChanges();
                                //==Landlord Schedule
                                foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                {
                                    LS = new RMS.Models.LandlordSchedule();
                                    LS.ScheduleDate = ScheduleDate;
                                    LS.AgreementSLNo = AI.AgreementSLNo;
                                    LS.LandlordSLNo = LI.LandlordSLNo;
                                    LS.MonthNo = i;
                                    LS.Year = CS.ScheduleDate.Year;
                                    LS.Month = CS.ScheduleDate.ToString("MMMM");
                                    LS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                    }
                                    LS.CostPerUnit = NewCPU;
                                    LS.TotalRentAmount = CS.TotalRentAmount;
                                    if (CS.TaxAmount > 0)
                                    {
                                        LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                    }
                                    //==
                                    LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                    LS.UserSLNo = AI.UserSLNo;
                                    LS.EntryDate = DateTime.Now;
                                    db.LandlordSchedules.Add(LS);
                                    db.SaveChanges();
                                }
                                //==Cost Allocation Schedule
                                foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                {
                                    CCS = new RMS.Models.CostCenterSchedule();
                                    CCS.ScheduleDate = ScheduleDate;
                                    CCS.AgreementSLNo = AI.AgreementSLNo;
                                    CCS.CCSLNo = CC.CCSLNo;
                                    CCS.MonthNo = i;
                                    CCS.Year = CS.ScheduleDate.Year;
                                    CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CCS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                    }
                                    CCS.CostPerUnit = NewCPU;
                                    CCS.TotalRentAmount = CS.TotalRentAmount;
                                    if (CS.TaxAmount > 0)
                                    {
                                        CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                    }
                                    //==
                                    CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                    CCS.UserSLNo = AI.UserSLNo;
                                    CCS.EntryDate = DateTime.Now;
                                    db.CostCenterSchedules.Add(CCS);
                                    db.SaveChanges();
                                }
                            }
                            else if (i == ReviewCount)
                            {
                                //==Contract Schedule
                                if (i != AI.AgreementPeriod)
                                {
                                    ReviewNo = ReviewNo + 1;
                                }
                                ReviewCount = ReviewCount + AI.ReviewFrequency;
                                CS.ScheduleDate = ScheduleDate;
                                CS.AgreementSLNo = AI.AgreementSLNo;
                                CS.MonthNo = i;
                                CS.Year = CS.ScheduleDate.Year;
                                CS.Month = CS.ScheduleDate.ToString("MMMM");
                                CS.ReviewNo = ReviewNo;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                }
                                //==xx
                                //==Last Month
                                if (i == AI.AgreementPeriod)
                                {
                                    CS.CostPerUnit = NewCPU;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    //==Full Month
                                    if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                    {
                                        //==Fraction Date Rent Amount
                                        RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                        CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                    }
                                }
                                else
                                {
                                    //==Fraction Month
                                    if (ScheduleDate.Day != 1)
                                    {
                                        //==Before Review Amount
                                        MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                        RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                        BeforeReviewAmount = (ScheduleDate.Day - 1) * RentPerDay;
                                        //==After Review Amount
                                        NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                        CS.CostPerUnit = NewCPU;
                                        RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                        AfterReviewAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                        CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                    }
                                    else
                                    {
                                        NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                        CS.CostPerUnit = NewCPU;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    }
                                }
                                //==xx
                                #region "Tax Type & VAT Type"
                                //1. Inclusive Inclusive
                                if (AI.TaxType == 1 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //2. Inclusive Exclusive
                                else if (AI.TaxType == 1 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //3. Inclusive Exempted
                                else if (AI.TaxType == 1 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //4. Exclusive Inclusive
                                else if (AI.TaxType == 2 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //5. Exclusive Exclusive
                                else if (AI.TaxType == 2 && AI.VatType == 2)
                                {
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //6. Exclusive Exempted
                                else if (AI.TaxType == 2 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //7. Exempted  Inclusive
                                else if (AI.TaxType == 3 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //8. Exempted  Exclusive
                                else if (AI.TaxType == 3 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //9. Exempted Exempted
                                else if (AI.TaxType == 3 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                #endregion
                                CS.UserSLNo = AI.UserSLNo;
                                CS.EntryDate = DateTime.Now;
                                db.ContractSchedules.Add(CS);
                                db.SaveChanges();
                                //==Landlord Schedule
                                foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                {
                                    LS = new RMS.Models.LandlordSchedule();
                                    LS.ScheduleDate = ScheduleDate;
                                    LS.AgreementSLNo = AI.AgreementSLNo;
                                    LS.LandlordSLNo = LI.LandlordSLNo;
                                    LS.MonthNo = i;
                                    LS.Year = CS.ScheduleDate.Year;
                                    LS.Month = CS.ScheduleDate.ToString("MMMM");
                                    LS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                    }
                                    LS.CostPerUnit = NewCPU;
                                    LS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                    LS.UserSLNo = AI.UserSLNo;
                                    LS.EntryDate = DateTime.Now;
                                    db.LandlordSchedules.Add(LS);
                                    db.SaveChanges();
                                }
                                //==Cost Allocation Schedule
                                foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                {
                                    CCS = new RMS.Models.CostCenterSchedule();
                                    CCS.ScheduleDate = ScheduleDate;
                                    CCS.AgreementSLNo = AI.AgreementSLNo;
                                    CCS.CCSLNo = CC.CCSLNo;
                                    CCS.MonthNo = i;
                                    CCS.Year = CS.ScheduleDate.Year;
                                    CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CCS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                    }
                                    CCS.CostPerUnit = NewCPU;
                                    CCS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                    CCS.UserSLNo = AI.UserSLNo;
                                    CCS.EntryDate = DateTime.Now;
                                    db.CostCenterSchedules.Add(CCS);
                                    db.SaveChanges();
                                }
                            }
                            else
                            {
                                CS.ScheduleDate = ScheduleDate;
                                CS.AgreementSLNo = AI.AgreementSLNo;
                                CS.MonthNo = i;
                                CS.Year = CS.ScheduleDate.Year;
                                CS.Month = CS.ScheduleDate.ToString("MMMM");
                                CS.ReviewNo = ReviewNo;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                }
                                CS.CostPerUnit = NewCPU;
                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                //==Last Month
                                if (i == AI.AgreementPeriod)
                                {
                                    //==Full Month
                                    if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                    {
                                        //==Fraction Date Rent Amount
                                        RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                        CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                    }
                                }
                                #region "Tax Type & VAT Type"
                                //1. Inclusive Inclusive
                                if (AI.TaxType == 1 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //2. Inclusive Exclusive
                                else if (AI.TaxType == 1 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //3. Inclusive Exempted
                                else if (AI.TaxType == 1 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //4. Exclusive Inclusive
                                else if (AI.TaxType == 2 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //5. Exclusive Exclusive
                                else if (AI.TaxType == 2 && AI.VatType == 2)
                                {
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //6. Exclusive Exempted
                                else if (AI.TaxType == 2 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //7. Exempted  Inclusive
                                else if (AI.TaxType == 3 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //8. Exempted  Exclusive
                                else if (AI.TaxType == 3 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //9. Exempted Exempted
                                else if (AI.TaxType == 3 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                #endregion
                                CS.UserSLNo = AI.UserSLNo;
                                CS.EntryDate = DateTime.Now;
                                db.ContractSchedules.Add(CS);
                                db.SaveChanges();
                                //==Landlord Schedule
                                foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                {
                                    LS = new RMS.Models.LandlordSchedule();
                                    LS.ScheduleDate = ScheduleDate;
                                    LS.AgreementSLNo = AI.AgreementSLNo;
                                    LS.LandlordSLNo = LI.LandlordSLNo;
                                    LS.MonthNo = i;
                                    LS.Year = CS.ScheduleDate.Year;
                                    LS.Month = CS.ScheduleDate.ToString("MMMM");
                                    LS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                    }
                                    LS.CostPerUnit = NewCPU;
                                    LS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                    LS.UserSLNo = AI.UserSLNo;
                                    LS.EntryDate = DateTime.Now;
                                    db.LandlordSchedules.Add(LS);
                                    db.SaveChanges();
                                }
                                //==Cost Allocation Schedule
                                foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                {
                                    CCS = new RMS.Models.CostCenterSchedule();
                                    CCS.ScheduleDate = ScheduleDate;
                                    CCS.AgreementSLNo = AI.AgreementSLNo;
                                    CCS.CCSLNo = CC.CCSLNo;
                                    CCS.MonthNo = i;
                                    CCS.Year = CS.ScheduleDate.Year;
                                    CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CCS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                    }
                                    CCS.CostPerUnit = NewCPU;
                                    CCS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                    CCS.UserSLNo = AI.UserSLNo;
                                    CCS.EntryDate = DateTime.Now;
                                    db.CostCenterSchedules.Add(CCS);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                    else if (AI.ReviewFrequency < 1 && lstReviewInfo.Count > 0)
                    {
                        //==Review Declaration Wise
                        int MonthNo = 0;
                        int ReviewNo = 0;
                        double NewCPU = AI.CostPerUnit;
                        //==Review Wise
                        foreach (RMS.Models.ReviewInfo RI in lstReviewInfo)
                        {
                            ReviewNo = ReviewNo + 1;
                            if (RI.ReviewNo == 1)
                            {
                                //==Schedule without Review
                                int ReviewStartMonth = ((RI.StartDate.Year - AI.AgreementStartDate.Year) * 12 + RI.StartDate.Month - AI.AgreementStartDate.Month) + 1;
                                for (int i = 1; i < ReviewStartMonth; i++)
                                {
                                    MonthNo = MonthNo + 1;
                                    CS = new RMS.Models.ContractSchedule();
                                    if (i != 1)
                                    {
                                        ScheduleDate = ScheduleDate.AddMonths(1);
                                    }
                                    //==Contract Schedule
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = MonthNo;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = 0;
                                    if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    CS.CostPerUnit = AI.CostPerUnit;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    if (i == 1)
                                    {
                                        //==Full Month
                                        if (ScheduleDate.Day != 1)
                                        {
                                            //==Fraction Date Rent Amount
                                            MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                            RentPerDay = CS.TotalRentAmount / MonthDays;
                                            CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                        }
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    db.ContractSchedules.Add(CS);
                                    db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = MonthNo;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = 0;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = AI.CostPerUnit;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = MonthNo;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = 0;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = AI.CostPerUnit;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                                //==Schedule with Review
                                for (int i = 1; i <= RI.Period; i++)
                                {
                                    MonthNo = MonthNo + 1;
                                    CS = new RMS.Models.ContractSchedule();
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                    //==Contract Schedule
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = MonthNo;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    //==Fraction Month
                                    if (i == 1)
                                    {
                                        if (RI.StartDate.Day != 1)
                                        {
                                            //==Before Review Amount
                                            MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                            RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                            BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                            //==After Review Amount                                            
                                            if (RI.IncreaseAmount > 0)
                                            {
                                                NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                            }
                                            else
                                            {
                                                NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                            }
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                            AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                            CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                        }
                                        else
                                        {
                                            if (RI.IncreaseAmount > 0)
                                            {
                                                NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                            }
                                            else
                                            {
                                                NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                            }
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    //==Review Last Month
                                    else if (i == RI.Period)
                                    {
                                        ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                        //==Full Month
                                        if (RI.EndDate.Day != ReviewMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                            CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    else
                                    {
                                        CS.CostPerUnit = NewCPU;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    db.ContractSchedules.Add(CS);
                                    db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = MonthNo;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = MonthNo;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                            }
                            else
                            {
                                //==Schedule rest of the Review
                                for (int i = 1; i <= RI.Period; i++)
                                {
                                    CS = new RMS.Models.ContractSchedule();
                                    //==Conditions applicable for multiple enhancement slots are two enhancements in the same month
                                    if (i == 1 && ScheduleDate.Year == RI.StartDate.Year && ScheduleDate.Month == RI.StartDate.Month)
                                    {
                                        //===MonthNo wise Delete from Contract Schedule
                                        db.ContractSchedules.RemoveRange(db.ContractSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.MonthNo == MonthNo));
                                        db.SaveChanges();
                                        //===MonthNo wise Delete from Landlord Schedule
                                        db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.MonthNo == MonthNo));
                                        db.SaveChanges();
                                        //===MonthNo wise Delete from Cost Center Schedule
                                        db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.MonthNo == MonthNo));
                                        db.SaveChanges();
                                        //==
                                    }
                                    else
                                    {
                                        MonthNo = MonthNo + 1;
                                        ScheduleDate = ScheduleDate.AddMonths(1);
                                    }
                                    //==Contract Schedule
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = MonthNo;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    //==Fraction Month
                                    if (i == 1)
                                    {
                                        if (RI.StartDate.Day != 1)
                                        {
                                            //==Before Review Amount
                                            MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                            RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                            BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                            //==After Review Amount                                            
                                            if (RI.IncreaseAmount > 0)
                                            {
                                                NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                            }
                                            else
                                            {
                                                NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                            }
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                            AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                            CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                        }
                                        else
                                        {
                                            if (RI.IncreaseAmount > 0)
                                            {
                                                NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                            }
                                            else
                                            {
                                                NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                            }
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    //==Review Last Month
                                    else if (i == RI.Period)
                                    {
                                        ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                        //==Full Month
                                        if (RI.EndDate.Day != ReviewMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                            CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    else
                                    {
                                        CS.CostPerUnit = NewCPU;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    db.ContractSchedules.Add(CS);
                                    db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = MonthNo;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = MonthNo;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                    }
                    #region Advance Adjustment
                    //==Advance Info Loop
                    DateTime AdvStartDate = DateTime.Now;
                    int AdvYear = 0;
                    string AdvMonthName = String.Empty;
                    double AdvAdjPerDay = 0;
                    double AdvAdjAmount = 0;
                    double AdvanceMonthDaysCount = 0;
                    foreach (RMS.Models.AdvanceInfo AdvInfo in lstAdvanceInfo)
                    {
                        AdvStartDate = AdvInfo.StartDate;
                        for (int i = 1; i <= AdvInfo.AdvanceSlotPeriod; i++)
                        {
                            if (i != 1)
                            {
                                AdvStartDate = AdvStartDate.AddMonths(1);
                            }
                            AdvYear = AdvStartDate.Year;
                            AdvMonthName = AdvStartDate.ToString("MMMM");
                            AdvAdjAmount = AdvInfo.AdvanceSlotAmount;
                            //==Fraction Advance Adjustment
                            //==First Month
                            if (i == 1)
                            {
                                if (AdvStartDate.Day != 1)
                                {
                                    MonthDays = DateTime.DaysInMonth(AdvStartDate.Year, AdvStartDate.Month);
                                    //==Fraction Date Adv Adj Amount
                                    AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / MonthDays;
                                    AdvAdjAmount = ((MonthDays - AdvStartDate.Day) + 1) * AdvAdjPerDay;
                                }
                            }
                            else
                            {
                                //==Last Month
                                if (i == AdvInfo.AdvanceSlotPeriod)
                                {
                                    AdvanceMonthDaysCount = DateTime.DaysInMonth(AdvInfo.EndDate.Year, AdvInfo.EndDate.Month);
                                    if (AdvInfo.EndDate.Day != AdvanceMonthDaysCount)
                                    {
                                        //==Fraction Date Adv Adj Amount
                                        AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / AdvanceMonthDaysCount;
                                        AdvAdjAmount = AdvInfo.EndDate.Day * AdvAdjPerDay;
                                    }
                                }
                            }
                            //==Advance Process Contract Schedule
                            RMS.Models.ContractSchedule GCS = db.ContractSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).SingleOrDefault();
                            GCS.AdvanceAdjustmentAmount = AdvAdjAmount;
                            GCS.NetRentAmount = GCS.NetRentAmount - GCS.AdvanceAdjustmentAmount;
                            db.Entry(GCS).State = EntityState.Modified;
                            db.SaveChanges();
                            //==Advance Process Landlord Schedule
                            List<RMS.Models.LandlordSchedule> lstGLS = db.LandlordSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                            foreach (RMS.Models.LandlordSchedule GLS in lstGLS)
                            {
                                var GLandlordInfo = db.LandlordInfos.Where(x => x.AgreementSLNo == AgreementSLNo && x.LandlordSLNo == GLS.LandlordSLNo).Select(x => new { x.AdvanceAdjustmentPC, x.RentPC }).SingleOrDefault();
                                GLS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * GLandlordInfo.AdvanceAdjustmentPC) / 100;
                                GLS.NetRentAmount = GLS.NetRentAmount - GLS.AdvanceAdjustmentAmount;
                                db.Entry(GLS).State = EntityState.Modified;
                                db.SaveChanges();
                            }
                            //==Advance Process Cost Center Schedule
                            double CCSharePC = 0;
                            List<RMS.Models.CostCenterSchedule> lstGCCS = db.CostCenterSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                            foreach (RMS.Models.CostCenterSchedule GCCS in lstGCCS)
                            {
                                CCSharePC = db.CostCenterInfos.Where(x => x.AgreementSLNo == AgreementSLNo && x.CCSLNo == GCCS.CCSLNo).Select(x => x.CCShareAllotment).SingleOrDefault();
                                GCCS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * CCSharePC) / 100;
                                GCCS.NetRentAmount = GCCS.NetRentAmount - GCCS.AdvanceAdjustmentAmount;
                                db.Entry(GCCS).State = EntityState.Modified;
                                db.SaveChanges();
                            }
                        }
                    }
                    #endregion
                    #region Utility Schedule
                    //ScheduleDate = AI.AgreementStartDate.AddMonths(-1);
                    //for (int i = 1; i <= AI.AgreementPeriod; i++)
                    //{
                    //    ScheduleDate = ScheduleDate.AddMonths(1);
                    //    //==Utility Schedule
                    //    foreach (RMS.Models.UtilityInfo UI in lstUtility)
                    //    {
                    //        US = new RMS.Models.UtilitySchedule();
                    //        US.ScheduleDate = ScheduleDate;
                    //        US.AgreementSLNo = AI.AgreementSLNo;
                    //        US.UtilitySLNo = UI.UtilitySLNo;
                    //        US.MonthNo = i;
                    //        US.Year = US.ScheduleDate.Year;
                    //        US.Month = US.ScheduleDate.ToString("MMMM");
                    //        US.ServiceChargeAmount = UI.ServiceChargeAmount;
                    //        US.OnlineTowerAmount = UI.OnlineTowerAmount;
                    //        US.GeneratorSpaceAmount = UI.GeneratorSpaceAmount;
                    //        US.CarParkingAmount = UI.CarParkingAmount;
                    //        US.TaxAmount = UI.TaxAmount;
                    //        US.VATAmount = UI.VATAmount;
                    //        US.UserSLNo = AI.UserSLNo;
                    //        US.EntryDate = DateTime.Now;
                    //        db.UtilitySchedules.Add(US);
                    //        db.SaveChanges();
                    //    }
                    //}
                    #endregion
                    //==IFRS Schedule
                    if (AI.IsIFRSEnable == true)
                    {
                        List<RMS.Models.ContractSchedule> lstContractSchedule = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo).ToList();
                        DateTime IFRSEffectiveDate = Convert.ToDateTime(AI.IFRSEffectiveDate);
                        int IFRSPeriod = AI.AgreementPeriod;
                        ScheduleDate = AI.AgreementStartDate;
                        int IFRS_Start_MonthNo = 1;
                        if (AI.AgreementStartDate != IFRSEffectiveDate)
                        {
                            IFRS_Start_MonthNo = ((IFRSEffectiveDate.Year - AI.AgreementStartDate.Year) * 12 + IFRSEffectiveDate.Month - AI.AgreementStartDate.Month) + 1;
                            IFRSPeriod = (AI.AgreementPeriod - IFRS_Start_MonthNo) + 1;
                            ScheduleDate = IFRSEffectiveDate;
                        }
                        //==Save New Data into BorrowingRateDetails
                        List<RMS.Models.BorrowingRateDetails> lstBRDetails = new List<RMS.Models.BorrowingRateDetails>();
                        RMS.Models.BorrowingRateDetails BRD;
                        for (int i = 1; i <= IFRSPeriod; i++)
                        {
                            BRD = new RMS.Models.BorrowingRateDetails();
                            BRD.MonthNo = i;
                            BRD.Rate = AI.BorrowingRate;
                            BRD.PV1 = Math.Pow(1 / (1 + (AI.BorrowingRate / 100) / 12), i - 1);
                            BRD.PV2 = Math.Pow(1 / (1 + (AI.BorrowingRate / 100) / 12), i);
                            BRD.AgreementSLNo = AgreementSLNo;
                            lstBRDetails.Add(BRD);
                        }
                        db.BorrowingRateDetails.AddRange(lstBRDetails);
                        db.SaveChanges();
                        //==
                        double PaymentAmount = 0;
                        double PV = 0; //Present value
                        double OBLeaseLiability = 0;
                        double CBLeaseLiability = 0;
                        double CBROU = 0;
                        double CBAdvance = 0;
                        double Depreciation = 0;
                        double AdvanceDepreciation = 0;
                        double Rate = AI.BorrowingRate / 100;
                        //==IFRS Schedule finding the OBLeaseLiability by Current Month or Following Month
                        //==Current Month (PV1) Calculation Method
                        if (AI.CalculationMethod == "Current Month")
                        {
                            for (int i = 1; i <= IFRSPeriod; i++)
                            {
                                PaymentAmount = lstContractSchedule.Where(x => x.MonthNo == IFRS_Start_MonthNo).Select(x => x.TotalRentAmount - x.AdvanceAdjustmentAmount - x.VATAmount).SingleOrDefault();
                                PV = lstBRDetails.Where(x => x.MonthNo == i).Select(x => x.PV1).SingleOrDefault();
                                OBLeaseLiability = OBLeaseLiability + (PaymentAmount * PV);
                                IFRS_Start_MonthNo = IFRS_Start_MonthNo + 1;
                            }
                        }
                        //==Following Month (PV2) Calculation Method
                        else if (AI.CalculationMethod == "Following Month")
                        {
                            for (int i = 1; i <= IFRSPeriod; i++)
                            {
                                PaymentAmount = lstContractSchedule.Where(x => x.MonthNo == IFRS_Start_MonthNo).Select(x => x.TotalRentAmount - x.AdvanceAdjustmentAmount - x.VATAmount).SingleOrDefault();
                                PV = lstBRDetails.Where(x => x.MonthNo == i).Select(x => x.PV2).SingleOrDefault();
                                OBLeaseLiability = OBLeaseLiability + (PaymentAmount * PV);
                                IFRS_Start_MonthNo = IFRS_Start_MonthNo + 1;
                            }
                        }
                        IFRS_Start_MonthNo = 1;
                        if (AI.AgreementStartDate != IFRSEffectiveDate)
                        {
                            IFRS_Start_MonthNo = ((IFRSEffectiveDate.Year - AI.AgreementStartDate.Year) * 12 + IFRSEffectiveDate.Month - AI.AgreementStartDate.Month) + 1;
                        }
                        //===IFRS Schedule
                        for (int i = 1; i <= IFRSPeriod; i++)
                        {
                            var ItemContractShecule = lstContractSchedule.Where(x => x.MonthNo == IFRS_Start_MonthNo).SingleOrDefault();
                            IFRS = new RMS.Models.IFRSSchedule();
                            if (i != 1)
                            {
                                ScheduleDate = ScheduleDate.AddMonths(1);
                            }
                            if (i == 1)
                            {
                                //==IFRS Schedule
                                IFRS.ScheduleDate = ScheduleDate;
                                IFRS.AgreementSLNo = AI.AgreementSLNo;
                                IFRS.MonthNo = i;
                                IFRS.Year = IFRS.ScheduleDate.Year;
                                IFRS.Month = IFRS.ScheduleDate.ToString("MMMM");
                                IFRS.ReviewNo = ItemContractShecule.ReviewNo;
                                IFRS.CostPerUnit = ItemContractShecule.CostPerUnit;
                                IFRS.AdvanceAdjustmentAmount = ItemContractShecule.AdvanceAdjustmentAmount;
                                IFRS.PaymentAmount = ItemContractShecule.TotalRentAmount - (ItemContractShecule.AdvanceAdjustmentAmount + ItemContractShecule.VATAmount);
                                //Current Month (PV1) Calculation Method
                                if (AI.CalculationMethod == "Current Month")
                                {
                                    IFRS.DiscountFactor = lstBRDetails.Where(x => x.MonthNo == IFRS.MonthNo).Select(x => x.PV1).SingleOrDefault();
                                }
                                //Following Month (PV2) Calculation Method
                                else if (AI.CalculationMethod == "Following Month")
                                {
                                    IFRS.DiscountFactor = lstBRDetails.Where(x => x.MonthNo == IFRS.MonthNo).Select(x => x.PV2).SingleOrDefault();
                                }
                                IFRS.PresentValue = IFRS.PaymentAmount * IFRS.DiscountFactor;
                                IFRS.OBLeaseLiability = OBLeaseLiability;
                                IFRS.LeasePayment = IFRS.PaymentAmount;
                                //Current Month Interest Expense = 0 only for the 1st Month (Month No = 1)
                                if (AI.CalculationMethod == "Current Month")
                                {
                                    IFRS.InteresetExpense = 0;
                                }
                                else
                                {
                                    IFRS.InteresetExpense = IFRS.OBLeaseLiability * Rate / 12;
                                }
                                IFRS.SettlementofLeaseLiabilities = IFRS.LeasePayment - IFRS.InteresetExpense;
                                IFRS.CBLeaseLiability = IFRS.OBLeaseLiability - IFRS.SettlementofLeaseLiabilities;
                                CBLeaseLiability = IFRS.CBLeaseLiability;

                                IFRS.OBROU = IFRS.OBLeaseLiability;
                                IFRS.Depreciation = IFRS.OBROU / IFRSPeriod;
                                Depreciation = IFRS.Depreciation;
                                IFRS.CBROU = IFRS.OBROU - IFRS.Depreciation;
                                CBROU = IFRS.CBROU;

                                //== Advance
                                IFRS.OBAdvance = AI.AdvanceAmount;
                                IFRS.AdvanceDepreciation = IFRS.OBAdvance / IFRSPeriod;
                                AdvanceDepreciation = IFRS.AdvanceDepreciation;
                                IFRS.CBAdvance = IFRS.OBAdvance - IFRS.AdvanceDepreciation;
                                CBAdvance = IFRS.CBAdvance;

                                IFRS.UserSLNo = AI.UserSLNo;
                                IFRS.EntryDate = DateTime.Now;
                                db.IFRSSchedules.Add(IFRS);
                                db.SaveChanges();
                                IFRS_Start_MonthNo = IFRS_Start_MonthNo + 1;
                            }
                            else
                            {
                                //==IFRS Schedule
                                IFRS.ScheduleDate = ScheduleDate;
                                IFRS.AgreementSLNo = AI.AgreementSLNo;
                                IFRS.MonthNo = i;
                                IFRS.Year = IFRS.ScheduleDate.Year;
                                IFRS.Month = IFRS.ScheduleDate.ToString("MMMM");
                                IFRS.ReviewNo = ItemContractShecule.ReviewNo;
                                IFRS.CostPerUnit = ItemContractShecule.CostPerUnit;
                                IFRS.AdvanceAdjustmentAmount = ItemContractShecule.AdvanceAdjustmentAmount;
                                IFRS.PaymentAmount = ItemContractShecule.TotalRentAmount - (ItemContractShecule.AdvanceAdjustmentAmount + ItemContractShecule.VATAmount);
                                //Current Month (PV1) Calculation Method
                                if (AI.CalculationMethod == "Current Month")
                                {
                                    IFRS.DiscountFactor = lstBRDetails.Where(x => x.MonthNo == IFRS.MonthNo).Select(x => x.PV1).SingleOrDefault();
                                }
                                //Following Month (PV2) Calculation Method
                                else if (AI.CalculationMethod == "Following Month")
                                {
                                    IFRS.DiscountFactor = lstBRDetails.Where(x => x.MonthNo == IFRS.MonthNo).Select(x => x.PV2).SingleOrDefault();
                                }
                                IFRS.PresentValue = IFRS.PaymentAmount * IFRS.DiscountFactor;
                                IFRS.OBLeaseLiability = CBLeaseLiability;
                                IFRS.LeasePayment = IFRS.PaymentAmount;
                                IFRS.InteresetExpense = IFRS.OBLeaseLiability * Rate / 12;
                                IFRS.SettlementofLeaseLiabilities = IFRS.LeasePayment - IFRS.InteresetExpense;
                                IFRS.CBLeaseLiability = IFRS.OBLeaseLiability - IFRS.SettlementofLeaseLiabilities;
                                CBLeaseLiability = IFRS.CBLeaseLiability;

                                IFRS.OBROU = CBROU;
                                IFRS.Depreciation = Depreciation;
                                Depreciation = IFRS.Depreciation;
                                IFRS.CBROU = IFRS.OBROU - IFRS.Depreciation;
                                CBROU = IFRS.CBROU;

                                //== Advance
                                IFRS.OBAdvance = CBAdvance;
                                IFRS.AdvanceDepreciation = AdvanceDepreciation;
                                AdvanceDepreciation = IFRS.AdvanceDepreciation;
                                IFRS.CBAdvance = IFRS.OBAdvance - IFRS.AdvanceDepreciation;
                                CBAdvance = IFRS.CBAdvance;

                                IFRS.UserSLNo = AI.UserSLNo;
                                IFRS.EntryDate = DateTime.Now;
                                db.IFRSSchedules.Add(IFRS);
                                db.SaveChanges();
                                IFRS_Start_MonthNo = IFRS_Start_MonthNo + 1;
                            }
                        }
                        //==
                    }
                    //==End IFRS Schedule
                    AlertMsg = "The agreement: " + AI.AgreementCode + " - " + AI.AgreementName + " has been activated.";
                    return Json(new { CheckStatus = true, AgreementCode = AI.AgreementCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult ReActivate(int AgreementSLNo)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    RMS.Models.AgreementInfo AI = db.AgreementInfos.Where(x => x.AgreementSLNo == AgreementSLNo).SingleOrDefault();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    string LoginUserID = (string)Session["LoginUserID"];
                    AI.ActivateBy = (string)Session["LoginUserID"];
                    AI.ActivateDate = DateTime.Now;
                    AI.AgreementStatus = AgreementStatus.Activate;
                    db.Entry(AI).State = EntityState.Modified;
                    db.SaveChanges();
                    //==Contract Rent Schedule
                    RMS.Models.ContractSchedule CS = new RMS.Models.ContractSchedule();
                    RMS.Models.LandlordSchedule LS = new RMS.Models.LandlordSchedule();
                    RMS.Models.CostCenterSchedule CCS = new RMS.Models.CostCenterSchedule();
                    //RMS.Models.UtilitySchedule US = new RMS.Models.UtilitySchedule();
                    RMS.Models.IFRSSchedule IFRS = new RMS.Models.IFRSSchedule();
                    List<RMS.Models.LandlordInfo> lstLandlords = db.LandlordInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).ToList();
                    List<RMS.Models.CostCenterInfo> lstCostCenter = db.CostCenterInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).ToList();
                    //List<RMS.Models.UtilityInfo> lstUtility = db.UtilityInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).ToList();
                    List<RMS.Models.ReviewInfo> lstReviewInfo = db.ReviewInfos.Where(x => x.AgreementSLNo == AgreementSLNo).OrderBy(x => x.ReviewNo).ToList();
                    List<RMS.Models.AdvanceInfo> lstAdvanceInfo = db.AdvanceInfos.Where(x => x.AgreementSLNo == AgreementSLNo).OrderBy(x => x.AdvanceNo).ToList();
                    DateTime ScheduleDate = AI.AgreementStartDate;
                    //===xxx====
                    int LastMonthDaysCount = DateTime.DaysInMonth(AI.AgreementEndDate.Year, AI.AgreementEndDate.Month);
                    int ReviewMonthDaysCount = 0;
                    int MonthDays = 0;

                    double RentPerDay = 0;
                    double BeforeReviewAmount = 0;
                    double AfterReviewAmount = 0;
                    double NetCalcAmount = 0;
                    if (AI.ReviewFrequency < 1 && lstReviewInfo.Count == 0)
                    {
                        //==Without Review
                        for (int i = 1; i <= AI.AgreementPeriod; i++)
                        {
                            CS = new RMS.Models.ContractSchedule();
                            if (i != 1)
                            {
                                ScheduleDate = ScheduleDate.AddMonths(1);
                            }
                            //==Contract Schedule
                            CS.ScheduleDate = ScheduleDate;
                            CS.AgreementSLNo = AI.AgreementSLNo;
                            CS.MonthNo = i;
                            CS.Year = CS.ScheduleDate.Year;
                            CS.Month = CS.ScheduleDate.ToString("MMMM");
                            CS.ReviewNo = 0;
                            if (i <= AI.AdvanceAdjustmentPeriod)
                            {
                                CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                            }
                            CS.CostPerUnit = AI.CostPerUnit;
                            CS.TotalRentAmount = AI.CostPerUnit * AI.TotalArea;
                            //==First Month
                            if (i == 1)
                            {
                                //==Full Month
                                if (ScheduleDate.Day != 1)
                                {
                                    //==Fraction Date Rent Amount
                                    MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                    RentPerDay = CS.TotalRentAmount / MonthDays;
                                    CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                }
                            }
                            //==Last Month
                            else if (i == AI.AgreementPeriod)
                            {
                                //==Full Month
                                if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                {
                                    //==Fraction Date Rent Amount
                                    RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                    CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                }
                            }
                            #region "Tax Type & VAT Type"
                            //1. Inclusive Inclusive
                            if (AI.TaxType == 1 && AI.VatType == 1)
                            {
                                CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //2. Inclusive Exclusive
                            else if (AI.TaxType == 1 && AI.VatType == 2)
                            {
                                CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //3. Inclusive Exempted
                            else if (AI.TaxType == 1 && AI.VatType == 3)
                            {
                                CS.VATAmount = 0;
                                CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //4. Exclusive Inclusive
                            else if (AI.TaxType == 2 && AI.VatType == 1)
                            {
                                CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //5. Exclusive Exclusive
                            else if (AI.TaxType == 2 && AI.VatType == 2)
                            {
                                CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                NetCalcAmount = CS.TotalRentAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //6. Exclusive Exempted
                            else if (AI.TaxType == 2 && AI.VatType == 3)
                            {
                                CS.VATAmount = 0;
                                CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                NetCalcAmount = CS.TotalRentAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //7. Exempted  Inclusive
                            else if (AI.TaxType == 3 && AI.VatType == 1)
                            {
                                CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                CS.TaxAmount = 0;
                                NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //8. Exempted  Exclusive
                            else if (AI.TaxType == 3 && AI.VatType == 2)
                            {
                                CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                CS.TaxAmount = 0;
                                NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //9. Exempted Exempted
                            else if (AI.TaxType == 3 && AI.VatType == 3)
                            {
                                CS.VATAmount = 0;
                                CS.TaxAmount = 0;
                                NetCalcAmount = CS.TotalRentAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            #endregion
                            CS.UserSLNo = AI.UserSLNo;
                            CS.EntryDate = DateTime.Now;
                            db.ContractSchedules.Add(CS);
                            db.SaveChanges();
                            //==Landlord Schedule
                            foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                            {
                                LS = new RMS.Models.LandlordSchedule();
                                LS.ScheduleDate = ScheduleDate;
                                LS.AgreementSLNo = AI.AgreementSLNo;
                                LS.LandlordSLNo = LI.LandlordSLNo;
                                LS.MonthNo = i;
                                LS.Year = CS.ScheduleDate.Year;
                                LS.Month = CS.ScheduleDate.ToString("MMMM");
                                LS.ReviewNo = 0;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                }
                                LS.CostPerUnit = AI.CostPerUnit;
                                LS.TotalRentAmount = CS.TotalRentAmount;
                                //==
                                if (CS.TaxAmount > 0)
                                {
                                    LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                }
                                if (CS.VATAmount > 0)
                                {
                                    LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                }
                                //==
                                LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - (LS.AdvanceAdjustmentAmount);
                                LS.UserSLNo = AI.UserSLNo;
                                LS.EntryDate = DateTime.Now;
                                db.LandlordSchedules.Add(LS);
                                db.SaveChanges();
                            }
                            //==Cost Allocation Schedule
                            foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                            {
                                CCS = new RMS.Models.CostCenterSchedule();
                                CCS.ScheduleDate = ScheduleDate;
                                CCS.AgreementSLNo = AI.AgreementSLNo;
                                CCS.CCSLNo = CC.CCSLNo;
                                CCS.MonthNo = i;
                                CCS.Year = CS.ScheduleDate.Year;
                                CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                CCS.ReviewNo = 0;
                                CCS.CostPerUnit = AI.CostPerUnit;
                                CCS.TotalRentAmount = CS.TotalRentAmount;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                }
                                if (CS.TaxAmount > 0)
                                {
                                    CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                }
                                if (CS.VATAmount > 0)
                                {
                                    CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                }
                                //==
                                CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                CCS.UserSLNo = AI.UserSLNo;
                                CCS.EntryDate = DateTime.Now;
                                db.CostCenterSchedules.Add(CCS);
                                db.SaveChanges();
                            }
                        }
                    }
                    else if (AI.ReviewFrequency > 0)
                    {
                        //==Review Frequency (Repeated)
                        int ReviewCount = AI.ReviewFrequency + 1;
                        int ReviewNo = 0;
                        double NewCPU = AI.CostPerUnit;
                        for (int i = 1; i <= AI.AgreementPeriod; i++)
                        {
                            CS = new RMS.Models.ContractSchedule();
                            if (i != 1)
                            {
                                ScheduleDate = ScheduleDate.AddMonths(1);
                            }
                            if (i <= AI.ReviewFrequency)
                            {
                                //==Contract Schedule
                                CS.ScheduleDate = ScheduleDate;
                                CS.AgreementSLNo = AI.AgreementSLNo;
                                CS.MonthNo = i;
                                CS.Year = CS.ScheduleDate.Year;
                                CS.Month = CS.ScheduleDate.ToString("MMMM");
                                CS.ReviewNo = ReviewNo;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                }
                                CS.CostPerUnit = NewCPU;
                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                if (i == 1)
                                {
                                    //==Full Month
                                    if (ScheduleDate.Day != 1)
                                    {
                                        //==Fraction Date Rent Amount
                                        MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                        RentPerDay = CS.TotalRentAmount / MonthDays;
                                        CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                    }
                                }
                                #region "Tax Type & VAT Type"
                                //1. Inclusive Inclusive
                                if (AI.TaxType == 1 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //2. Inclusive Exclusive
                                else if (AI.TaxType == 1 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //3. Inclusive Exempted
                                else if (AI.TaxType == 1 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //4. Exclusive Inclusive
                                else if (AI.TaxType == 2 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //5. Exclusive Exclusive
                                else if (AI.TaxType == 2 && AI.VatType == 2)
                                {
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //6. Exclusive Exempted
                                else if (AI.TaxType == 2 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //7. Exempted  Inclusive
                                else if (AI.TaxType == 3 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //8. Exempted  Exclusive
                                else if (AI.TaxType == 3 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //9. Exempted Exempted
                                else if (AI.TaxType == 3 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                #endregion
                                CS.UserSLNo = AI.UserSLNo;
                                CS.EntryDate = DateTime.Now;
                                db.ContractSchedules.Add(CS);
                                db.SaveChanges();
                                //==Landlord Schedule
                                foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                {
                                    LS = new RMS.Models.LandlordSchedule();
                                    LS.ScheduleDate = ScheduleDate;
                                    LS.AgreementSLNo = AI.AgreementSLNo;
                                    LS.LandlordSLNo = LI.LandlordSLNo;
                                    LS.MonthNo = i;
                                    LS.Year = CS.ScheduleDate.Year;
                                    LS.Month = CS.ScheduleDate.ToString("MMMM");
                                    LS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                    }
                                    LS.CostPerUnit = NewCPU;
                                    LS.TotalRentAmount = CS.TotalRentAmount;
                                    if (CS.TaxAmount > 0)
                                    {
                                        LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                    }
                                    //==
                                    LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                    LS.UserSLNo = AI.UserSLNo;
                                    LS.EntryDate = DateTime.Now;
                                    db.LandlordSchedules.Add(LS);
                                    db.SaveChanges();
                                }
                                //==Cost Allocation Schedule
                                foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                {
                                    CCS = new RMS.Models.CostCenterSchedule();
                                    CCS.ScheduleDate = ScheduleDate;
                                    CCS.AgreementSLNo = AI.AgreementSLNo;
                                    CCS.CCSLNo = CC.CCSLNo;
                                    CCS.MonthNo = i;
                                    CCS.Year = CS.ScheduleDate.Year;
                                    CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CCS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                    }
                                    CCS.CostPerUnit = NewCPU;
                                    CCS.TotalRentAmount = CS.TotalRentAmount;
                                    if (CS.TaxAmount > 0)
                                    {
                                        CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                    }
                                    //==
                                    CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                    CCS.UserSLNo = AI.UserSLNo;
                                    CCS.EntryDate = DateTime.Now;
                                    db.CostCenterSchedules.Add(CCS);
                                    db.SaveChanges();
                                }
                            }
                            else if (i == ReviewCount)
                            {
                                //==Contract Schedule
                                if (i != AI.AgreementPeriod)
                                {
                                    ReviewNo = ReviewNo + 1;
                                }
                                ReviewCount = ReviewCount + AI.ReviewFrequency;
                                CS.ScheduleDate = ScheduleDate;
                                CS.AgreementSLNo = AI.AgreementSLNo;
                                CS.MonthNo = i;
                                CS.Year = CS.ScheduleDate.Year;
                                CS.Month = CS.ScheduleDate.ToString("MMMM");
                                CS.ReviewNo = ReviewNo;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                }
                                //==xx
                                //==Last Month
                                if (i == AI.AgreementPeriod)
                                {
                                    CS.CostPerUnit = NewCPU;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    //==Full Month
                                    if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                    {
                                        //==Fraction Date Rent Amount
                                        RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                        CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                    }
                                }
                                else
                                {
                                    //==Fraction Month
                                    if (ScheduleDate.Day != 1)
                                    {
                                        //==Before Review Amount
                                        MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                        RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                        BeforeReviewAmount = (ScheduleDate.Day - 1) * RentPerDay;
                                        //==After Review Amount
                                        NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                        CS.CostPerUnit = NewCPU;
                                        RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                        AfterReviewAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                        CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                    }
                                    else
                                    {
                                        NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                        CS.CostPerUnit = NewCPU;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    }
                                }
                                #region "Tax Type & VAT Type"
                                //1. Inclusive Inclusive
                                if (AI.TaxType == 1 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //2. Inclusive Exclusive
                                else if (AI.TaxType == 1 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //3. Inclusive Exempted
                                else if (AI.TaxType == 1 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //4. Exclusive Inclusive
                                else if (AI.TaxType == 2 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //5. Exclusive Exclusive
                                else if (AI.TaxType == 2 && AI.VatType == 2)
                                {
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //6. Exclusive Exempted
                                else if (AI.TaxType == 2 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //7. Exempted  Inclusive
                                else if (AI.TaxType == 3 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //8. Exempted  Exclusive
                                else if (AI.TaxType == 3 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //9. Exempted Exempted
                                else if (AI.TaxType == 3 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                #endregion
                                CS.UserSLNo = AI.UserSLNo;
                                CS.EntryDate = DateTime.Now;
                                db.ContractSchedules.Add(CS);
                                db.SaveChanges();
                                //==Landlord Schedule
                                foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                {
                                    LS = new RMS.Models.LandlordSchedule();
                                    LS.ScheduleDate = ScheduleDate;
                                    LS.AgreementSLNo = AI.AgreementSLNo;
                                    LS.LandlordSLNo = LI.LandlordSLNo;
                                    LS.MonthNo = i;
                                    LS.Year = CS.ScheduleDate.Year;
                                    LS.Month = CS.ScheduleDate.ToString("MMMM");
                                    LS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                    }
                                    LS.CostPerUnit = NewCPU;
                                    LS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                    LS.UserSLNo = AI.UserSLNo;
                                    LS.EntryDate = DateTime.Now;
                                    db.LandlordSchedules.Add(LS);
                                    db.SaveChanges();
                                }
                                //==Cost Allocation Schedule
                                foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                {
                                    CCS = new RMS.Models.CostCenterSchedule();
                                    CCS.ScheduleDate = ScheduleDate;
                                    CCS.AgreementSLNo = AI.AgreementSLNo;
                                    CCS.CCSLNo = CC.CCSLNo;
                                    CCS.MonthNo = i;
                                    CCS.Year = CS.ScheduleDate.Year;
                                    CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CCS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                    }
                                    CCS.CostPerUnit = NewCPU;
                                    CCS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                    CCS.UserSLNo = AI.UserSLNo;
                                    CCS.EntryDate = DateTime.Now;
                                    db.CostCenterSchedules.Add(CCS);
                                    db.SaveChanges();
                                }
                            }
                            else
                            {
                                CS.ScheduleDate = ScheduleDate;
                                CS.AgreementSLNo = AI.AgreementSLNo;
                                CS.MonthNo = i;
                                CS.Year = CS.ScheduleDate.Year;
                                CS.Month = CS.ScheduleDate.ToString("MMMM");
                                CS.ReviewNo = ReviewNo;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                }
                                CS.CostPerUnit = NewCPU;
                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                //==Last Month
                                if (i == AI.AgreementPeriod)
                                {
                                    //==Full Month
                                    if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                    {
                                        //==Fraction Date Rent Amount
                                        RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                        CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                    }
                                }
                                #region "Tax Type & VAT Type"
                                //1. Inclusive Inclusive
                                if (AI.TaxType == 1 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //2. Inclusive Exclusive
                                else if (AI.TaxType == 1 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //3. Inclusive Exempted
                                else if (AI.TaxType == 1 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //4. Exclusive Inclusive
                                else if (AI.TaxType == 2 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //5. Exclusive Exclusive
                                else if (AI.TaxType == 2 && AI.VatType == 2)
                                {
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //6. Exclusive Exempted
                                else if (AI.TaxType == 2 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //7. Exempted  Inclusive
                                else if (AI.TaxType == 3 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //8. Exempted  Exclusive
                                else if (AI.TaxType == 3 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //9. Exempted Exempted
                                else if (AI.TaxType == 3 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                #endregion
                                CS.UserSLNo = AI.UserSLNo;
                                CS.EntryDate = DateTime.Now;
                                db.ContractSchedules.Add(CS);
                                db.SaveChanges();
                                //==Landlord Schedule
                                foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                {
                                    LS = new RMS.Models.LandlordSchedule();
                                    LS.ScheduleDate = ScheduleDate;
                                    LS.AgreementSLNo = AI.AgreementSLNo;
                                    LS.LandlordSLNo = LI.LandlordSLNo;
                                    LS.MonthNo = i;
                                    LS.Year = CS.ScheduleDate.Year;
                                    LS.Month = CS.ScheduleDate.ToString("MMMM");
                                    LS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                    }
                                    LS.CostPerUnit = NewCPU;
                                    LS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                    LS.UserSLNo = AI.UserSLNo;
                                    LS.EntryDate = DateTime.Now;
                                    db.LandlordSchedules.Add(LS);
                                    db.SaveChanges();
                                }
                                //==Cost Allocation Schedule
                                foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                {
                                    CCS = new RMS.Models.CostCenterSchedule();
                                    CCS.ScheduleDate = ScheduleDate;
                                    CCS.AgreementSLNo = AI.AgreementSLNo;
                                    CCS.CCSLNo = CC.CCSLNo;
                                    CCS.MonthNo = i;
                                    CCS.Year = CS.ScheduleDate.Year;
                                    CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CCS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                    }
                                    CCS.CostPerUnit = NewCPU;
                                    CCS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                    CCS.UserSLNo = AI.UserSLNo;
                                    CCS.EntryDate = DateTime.Now;
                                    db.CostCenterSchedules.Add(CCS);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                    else if (AI.ReviewFrequency < 1 && lstReviewInfo.Count > 0)
                    {
                        //==Review Declaration Wise
                        int MonthNo = 0;
                        int ReviewNo = 0;
                        double NewCPU = AI.CostPerUnit;
                        //==Review Wise
                        foreach (RMS.Models.ReviewInfo RI in lstReviewInfo)
                        {
                            ReviewNo = ReviewNo + 1;
                            if (RI.ReviewNo == 1)
                            {
                                //==Schedule without Review
                                int ReviewStartMonth = ((RI.StartDate.Year - AI.AgreementStartDate.Year) * 12 + RI.StartDate.Month - AI.AgreementStartDate.Month) + 1;
                                for (int i = 1; i < ReviewStartMonth; i++)
                                {
                                    MonthNo = MonthNo + 1;
                                    CS = new RMS.Models.ContractSchedule();
                                    if (i != 1)
                                    {
                                        ScheduleDate = ScheduleDate.AddMonths(1);
                                    }
                                    //==Contract Schedule
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = MonthNo;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = 0;
                                    if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    CS.CostPerUnit = AI.CostPerUnit;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    if (i == 1)
                                    {
                                        //==Full Month
                                        if (ScheduleDate.Day != 1)
                                        {
                                            //==Fraction Date Rent Amount
                                            MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                            RentPerDay = CS.TotalRentAmount / MonthDays;
                                            CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                        }
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    db.ContractSchedules.Add(CS);
                                    db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = MonthNo;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = 0;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = AI.CostPerUnit;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = MonthNo;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = 0;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = AI.CostPerUnit;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                                //==Schedule with Review
                                for (int i = 1; i <= RI.Period; i++)
                                {
                                    MonthNo = MonthNo + 1;
                                    CS = new RMS.Models.ContractSchedule();
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                    //==Contract Schedule
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = MonthNo;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    //==Fraction Month
                                    if (i == 1)
                                    {
                                        if (RI.StartDate.Day != 1)
                                        {
                                            //==Before Review Amount
                                            MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                            RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                            BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                            //==After Review Amount
                                            if (RI.IncreaseAmount > 0)
                                            {
                                                NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                            }
                                            else
                                            {
                                                NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                            }
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                            AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                            CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                        }
                                        else
                                        {
                                            if (RI.IncreaseAmount > 0)
                                            {
                                                NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                            }
                                            else
                                            {
                                                NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                            }
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    //==Review Last Month
                                    else if (i == RI.Period)
                                    {
                                        ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                        //==Full Month
                                        if (RI.EndDate.Day != ReviewMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                            CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    else
                                    {
                                        CS.CostPerUnit = NewCPU;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    db.ContractSchedules.Add(CS);
                                    db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = MonthNo;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = MonthNo;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                            }
                            else
                            {
                                CS = new RMS.Models.ContractSchedule();
                                //==Schedule rest of the Review
                                for (int i = 1; i <= RI.Period; i++)
                                {
                                    //==Conditions applicable for multiple enhancement slots are two enhancements in the same month
                                    if (i == 1 && ScheduleDate.Year == RI.StartDate.Year && ScheduleDate.Month == RI.StartDate.Month)
                                    {
                                        //===MonthNo wise Delete from Contract Schedule
                                        db.ContractSchedules.RemoveRange(db.ContractSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.MonthNo == MonthNo));
                                        db.SaveChanges();
                                        //===MonthNo wise Delete from Landlord Schedule
                                        db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.MonthNo == MonthNo));
                                        db.SaveChanges();
                                        //===MonthNo wise Delete from Cost Center Schedule
                                        db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.MonthNo == MonthNo));
                                        db.SaveChanges();
                                        //==
                                    }
                                    else
                                    {
                                        MonthNo = MonthNo + 1;
                                        ScheduleDate = ScheduleDate.AddMonths(1);
                                    }
                                    //==Contract Schedule
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = MonthNo;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    //==Fraction Month
                                    if (i == 1)
                                    {
                                        if (RI.StartDate.Day != 1)
                                        {
                                            //==Before Review Amount
                                            MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                            RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                            BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                            //==After Review Amount
                                            if (RI.IncreaseAmount > 0)
                                            {
                                                NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                            }
                                            else
                                            {
                                                NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                            }
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                            AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                            CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                        }
                                        else
                                        {
                                            if (RI.IncreaseAmount > 0)
                                            {
                                                NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                            }
                                            else
                                            {
                                                NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                            }
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    //==Review Last Month
                                    else if (i == RI.Period)
                                    {
                                        ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                        //==Full Month
                                        if (RI.EndDate.Day != ReviewMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                            CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    else
                                    {
                                        CS.CostPerUnit = NewCPU;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    db.ContractSchedules.Add(CS);
                                    db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = MonthNo;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = MonthNo;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                    }
                    #region Advance Adjustment
                    //==Advance Info Loop
                    DateTime AdvStartDate = DateTime.Now;
                    int AdvYear = 0;
                    string AdvMonthName = String.Empty;
                    double AdvAdjPerDay = 0;
                    double AdvAdjAmount = 0;
                    double AdvanceMonthDaysCount = 0;
                    foreach (RMS.Models.AdvanceInfo AdvInfo in lstAdvanceInfo)
                    {
                        AdvStartDate = AdvInfo.StartDate;
                        for (int i = 1; i <= AdvInfo.AdvanceSlotPeriod; i++)
                        {
                            if (i != 1)
                            {
                                AdvStartDate = AdvStartDate.AddMonths(1);
                            }
                            AdvYear = AdvStartDate.Year;
                            AdvMonthName = AdvStartDate.ToString("MMMM");
                            AdvAdjAmount = AdvInfo.AdvanceSlotAmount;
                            //==Fraction Advance Adjustment
                            //==First Month
                            if (i == 1)
                            {
                                if (AdvStartDate.Day != 1)
                                {
                                    MonthDays = DateTime.DaysInMonth(AdvStartDate.Year, AdvStartDate.Month);
                                    //==Fraction Date Adv Adj Amount
                                    AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / MonthDays;
                                    AdvAdjAmount = ((MonthDays - AdvStartDate.Day) + 1) * AdvAdjPerDay;
                                }
                            }
                            else
                            {
                                //==Last Month
                                if (i == AdvInfo.AdvanceSlotPeriod)
                                {
                                    AdvanceMonthDaysCount = DateTime.DaysInMonth(AdvInfo.EndDate.Year, AdvInfo.EndDate.Month);
                                    if (AdvInfo.EndDate.Day != AdvanceMonthDaysCount)
                                    {
                                        //==Fraction Date Adv Adj Amount
                                        AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / AdvanceMonthDaysCount;
                                        AdvAdjAmount = AdvInfo.EndDate.Day * AdvAdjPerDay;
                                    }
                                }
                            }
                            //==Advance Process Contract Schedule
                            RMS.Models.ContractSchedule GCS = db.ContractSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).SingleOrDefault();
                            GCS.AdvanceAdjustmentAmount = AdvAdjAmount;
                            GCS.NetRentAmount = GCS.NetRentAmount - GCS.AdvanceAdjustmentAmount;
                            db.Entry(GCS).State = EntityState.Modified;
                            db.SaveChanges();
                            //==Advance Process Landlord Schedule
                            List<RMS.Models.LandlordSchedule> lstGLS = db.LandlordSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                            foreach (RMS.Models.LandlordSchedule GLS in lstGLS)
                            {
                                var GLandlordInfo = db.LandlordInfos.Where(x => x.AgreementSLNo == AgreementSLNo && x.LandlordSLNo == GLS.LandlordSLNo).Select(x => new { x.AdvanceAdjustmentPC, x.RentPC }).SingleOrDefault();
                                GLS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * GLandlordInfo.AdvanceAdjustmentPC) / 100;
                                GLS.NetRentAmount = GLS.NetRentAmount - GLS.AdvanceAdjustmentAmount;
                                db.Entry(GLS).State = EntityState.Modified;
                                db.SaveChanges();
                            }
                            //==Advance Process Cost Center Schedule
                            double CCSharePC = 0;
                            List<RMS.Models.CostCenterSchedule> lstGCCS = db.CostCenterSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                            foreach (RMS.Models.CostCenterSchedule GCCS in lstGCCS)
                            {
                                CCSharePC = db.CostCenterInfos.Where(x => x.AgreementSLNo == AgreementSLNo && x.CCSLNo == GCCS.CCSLNo).Select(x => x.CCShareAllotment).SingleOrDefault();
                                GCCS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * CCSharePC) / 100;
                                GCCS.NetRentAmount = GCCS.NetRentAmount - GCCS.AdvanceAdjustmentAmount;
                                db.Entry(GCCS).State = EntityState.Modified;
                                db.SaveChanges();
                            }
                        }
                    }
                    #endregion
                    #region Utility Schedule
                    //ScheduleDate = AI.AgreementStartDate.AddMonths(-1);
                    //for (int i = 1; i <= AI.AgreementPeriod; i++)
                    //{
                    //    ScheduleDate = ScheduleDate.AddMonths(1);
                    //    //==Utility Schedule
                    //    foreach (RMS.Models.UtilityInfo UI in lstUtility)
                    //    {
                    //        US = new RMS.Models.UtilitySchedule();
                    //        US.ScheduleDate = ScheduleDate;
                    //        US.AgreementSLNo = AI.AgreementSLNo;
                    //        US.UtilitySLNo = UI.UtilitySLNo;
                    //        US.MonthNo = i;
                    //        US.Year = US.ScheduleDate.Year;
                    //        US.Month = US.ScheduleDate.ToString("MMMM");
                    //        US.ServiceChargeAmount = UI.ServiceChargeAmount;
                    //        US.OnlineTowerAmount = UI.OnlineTowerAmount;
                    //        US.GeneratorSpaceAmount = UI.GeneratorSpaceAmount;
                    //        US.CarParkingAmount = UI.CarParkingAmount;
                    //        US.TaxAmount = UI.TaxAmount;
                    //        US.VATAmount = UI.VATAmount;
                    //        US.UserSLNo = AI.UserSLNo;
                    //        US.EntryDate = DateTime.Now;
                    //        db.UtilitySchedules.Add(US);
                    //        db.SaveChanges();
                    //    }
                    //}
                    #endregion
                    //==End Utility Schedule
                    if (AI.Special == false)
                    {
                        //==IFRS Schedule
                        if (AI.IsIFRSEnable == true)
                        {
                            List<RMS.Models.ContractSchedule> lstContractSchedule = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo).ToList();
                            DateTime IFRSEffectiveDate = Convert.ToDateTime(AI.IFRSEffectiveDate);
                            int IFRSPeriod = AI.AgreementPeriod;
                            ScheduleDate = AI.AgreementStartDate;
                            int IFRS_Start_MonthNo = 1;
                            if (AI.AgreementStartDate != IFRSEffectiveDate)
                            {
                                IFRS_Start_MonthNo = ((IFRSEffectiveDate.Year - AI.AgreementStartDate.Year) * 12 + IFRSEffectiveDate.Month - AI.AgreementStartDate.Month) + 1;
                                IFRSPeriod = (AI.AgreementPeriod - IFRS_Start_MonthNo) + 1;
                                ScheduleDate = IFRSEffectiveDate;
                            }
                            //==Save New Data into BorrowingRateDetails
                            List<RMS.Models.BorrowingRateDetails> lstBRDetails = new List<RMS.Models.BorrowingRateDetails>();
                            RMS.Models.BorrowingRateDetails BRD;
                            for (int i = 1; i <= IFRSPeriod; i++)
                            {
                                BRD = new RMS.Models.BorrowingRateDetails();
                                BRD.MonthNo = i;
                                BRD.Rate = AI.BorrowingRate;
                                BRD.PV1 = Math.Pow(1 / (1 + (AI.BorrowingRate / 100) / 12), i - 1);
                                BRD.PV2 = Math.Pow(1 / (1 + (AI.BorrowingRate / 100) / 12), i);
                                BRD.AgreementSLNo = AgreementSLNo;
                                lstBRDetails.Add(BRD);
                            }
                            db.BorrowingRateDetails.AddRange(lstBRDetails);
                            db.SaveChanges();
                            //==
                            double PaymentAmount = 0;
                            double PV = 0; //Present value
                            double OBLeaseLiability = 0;
                            double CBLeaseLiability = 0;
                            double CBROU = 0;
                            double CBAdvance = 0;
                            double Depreciation = 0;
                            double AdvanceDepreciation = 0;
                            double Rate = AI.BorrowingRate / 100;
                            //==IFRS Schedule finding the OBLeaseLiability by Current Month or Following Month
                            //==Current Month (PV1) Calculation Method
                            if (AI.CalculationMethod == "Current Month")
                            {
                                for (int i = 1; i <= IFRSPeriod; i++)
                                {
                                    PaymentAmount = lstContractSchedule.Where(x => x.MonthNo == IFRS_Start_MonthNo).Select(x => x.TotalRentAmount - x.AdvanceAdjustmentAmount - x.VATAmount).SingleOrDefault();
                                    PV = lstBRDetails.Where(x => x.MonthNo == i).Select(x => x.PV1).SingleOrDefault();
                                    OBLeaseLiability = OBLeaseLiability + (PaymentAmount * PV);
                                    IFRS_Start_MonthNo = IFRS_Start_MonthNo + 1;
                                }
                            }
                            //==Following Month (PV2) Calculation Method
                            else if (AI.CalculationMethod == "Following Month")
                            {
                                for (int i = 1; i <= IFRSPeriod; i++)
                                {
                                    PaymentAmount = lstContractSchedule.Where(x => x.MonthNo == IFRS_Start_MonthNo).Select(x => x.TotalRentAmount - x.AdvanceAdjustmentAmount - x.VATAmount).SingleOrDefault();
                                    PV = lstBRDetails.Where(x => x.MonthNo == i).Select(x => x.PV2).SingleOrDefault();
                                    OBLeaseLiability = OBLeaseLiability + (PaymentAmount * PV);
                                    IFRS_Start_MonthNo = IFRS_Start_MonthNo + 1;
                                }
                            }
                            IFRS_Start_MonthNo = 1;
                            if (AI.AgreementStartDate != IFRSEffectiveDate)
                            {
                                IFRS_Start_MonthNo = ((IFRSEffectiveDate.Year - AI.AgreementStartDate.Year) * 12 + IFRSEffectiveDate.Month - AI.AgreementStartDate.Month) + 1;
                            }
                            //===IFRS Schedule
                            for (int i = 1; i <= IFRSPeriod; i++)
                            {
                                var ItemContractShecule = lstContractSchedule.Where(x => x.MonthNo == IFRS_Start_MonthNo).SingleOrDefault();
                                IFRS = new RMS.Models.IFRSSchedule();
                                if (i != 1)
                                {
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                }
                                if (i == 1)
                                {
                                    //==IFRS Schedule
                                    IFRS.ScheduleDate = ScheduleDate;
                                    IFRS.AgreementSLNo = AI.AgreementSLNo;
                                    IFRS.MonthNo = i;
                                    IFRS.Year = IFRS.ScheduleDate.Year;
                                    IFRS.Month = IFRS.ScheduleDate.ToString("MMMM");
                                    IFRS.ReviewNo = ItemContractShecule.ReviewNo;
                                    IFRS.CostPerUnit = ItemContractShecule.CostPerUnit;
                                    IFRS.AdvanceAdjustmentAmount = ItemContractShecule.AdvanceAdjustmentAmount;
                                    IFRS.PaymentAmount = ItemContractShecule.TotalRentAmount - (ItemContractShecule.AdvanceAdjustmentAmount + ItemContractShecule.VATAmount);
                                    //Current Month (PV1) Calculation Method
                                    if (AI.CalculationMethod == "Current Month")
                                    {
                                        IFRS.DiscountFactor = lstBRDetails.Where(x => x.MonthNo == IFRS.MonthNo).Select(x => x.PV1).SingleOrDefault();
                                    }
                                    //Following Month (PV2) Calculation Method
                                    else if (AI.CalculationMethod == "Following Month")
                                    {
                                        IFRS.DiscountFactor = lstBRDetails.Where(x => x.MonthNo == IFRS.MonthNo).Select(x => x.PV2).SingleOrDefault();
                                    }
                                    IFRS.PresentValue = IFRS.PaymentAmount * IFRS.DiscountFactor;
                                    IFRS.OBLeaseLiability = OBLeaseLiability;
                                    IFRS.LeasePayment = IFRS.PaymentAmount;
                                    //Current Month Interest Expense = 0 only for the 1st Month (Month No = 1)
                                    if (AI.CalculationMethod == "Current Month")
                                    {
                                        IFRS.InteresetExpense = 0;
                                    }
                                    else
                                    {
                                        IFRS.InteresetExpense = IFRS.OBLeaseLiability * Rate / 12;
                                    }
                                    IFRS.SettlementofLeaseLiabilities = IFRS.LeasePayment - IFRS.InteresetExpense;
                                    IFRS.CBLeaseLiability = IFRS.OBLeaseLiability - IFRS.SettlementofLeaseLiabilities;
                                    CBLeaseLiability = IFRS.CBLeaseLiability;

                                    IFRS.OBROU = IFRS.OBLeaseLiability;
                                    IFRS.Depreciation = IFRS.OBROU / IFRSPeriod;
                                    Depreciation = IFRS.Depreciation;
                                    IFRS.CBROU = IFRS.OBROU - IFRS.Depreciation;
                                    CBROU = IFRS.CBROU;

                                    //== Advance
                                    IFRS.OBAdvance = AI.AdvanceAmount;
                                    IFRS.AdvanceDepreciation = IFRS.OBAdvance / IFRSPeriod;
                                    AdvanceDepreciation = IFRS.AdvanceDepreciation;
                                    IFRS.CBAdvance = IFRS.OBAdvance - IFRS.AdvanceDepreciation;
                                    CBAdvance = IFRS.CBAdvance;

                                    IFRS.UserSLNo = AI.UserSLNo;
                                    IFRS.EntryDate = DateTime.Now;
                                    db.IFRSSchedules.Add(IFRS);
                                    db.SaveChanges();
                                    IFRS_Start_MonthNo = IFRS_Start_MonthNo + 1;
                                }
                                else
                                {
                                    //==IFRS Schedule
                                    IFRS.ScheduleDate = ScheduleDate;
                                    IFRS.AgreementSLNo = AI.AgreementSLNo;
                                    IFRS.MonthNo = i;
                                    IFRS.Year = IFRS.ScheduleDate.Year;
                                    IFRS.Month = IFRS.ScheduleDate.ToString("MMMM");
                                    IFRS.ReviewNo = ItemContractShecule.ReviewNo;
                                    IFRS.CostPerUnit = ItemContractShecule.CostPerUnit;
                                    IFRS.AdvanceAdjustmentAmount = ItemContractShecule.AdvanceAdjustmentAmount;
                                    IFRS.PaymentAmount = ItemContractShecule.TotalRentAmount - (ItemContractShecule.AdvanceAdjustmentAmount + ItemContractShecule.VATAmount);
                                    //Current Month (PV1) Calculation Method
                                    if (AI.CalculationMethod == "Current Month")
                                    {
                                        IFRS.DiscountFactor = lstBRDetails.Where(x => x.MonthNo == IFRS.MonthNo).Select(x => x.PV1).SingleOrDefault();
                                    }
                                    //Following Month (PV2) Calculation Method
                                    else if (AI.CalculationMethod == "Following Month")
                                    {
                                        IFRS.DiscountFactor = lstBRDetails.Where(x => x.MonthNo == IFRS.MonthNo).Select(x => x.PV2).SingleOrDefault();
                                    }
                                    IFRS.PresentValue = IFRS.PaymentAmount * IFRS.DiscountFactor;
                                    IFRS.OBLeaseLiability = CBLeaseLiability;
                                    IFRS.LeasePayment = IFRS.PaymentAmount;
                                    IFRS.InteresetExpense = IFRS.OBLeaseLiability * Rate / 12;
                                    IFRS.SettlementofLeaseLiabilities = IFRS.LeasePayment - IFRS.InteresetExpense;
                                    IFRS.CBLeaseLiability = IFRS.OBLeaseLiability - IFRS.SettlementofLeaseLiabilities;
                                    CBLeaseLiability = IFRS.CBLeaseLiability;

                                    IFRS.OBROU = CBROU;
                                    IFRS.Depreciation = Depreciation;
                                    Depreciation = IFRS.Depreciation;
                                    IFRS.CBROU = IFRS.OBROU - IFRS.Depreciation;
                                    CBROU = IFRS.CBROU;

                                    //== Advance
                                    IFRS.OBAdvance = CBAdvance;
                                    IFRS.AdvanceDepreciation = AdvanceDepreciation;
                                    AdvanceDepreciation = IFRS.AdvanceDepreciation;
                                    IFRS.CBAdvance = IFRS.OBAdvance - IFRS.AdvanceDepreciation;
                                    CBAdvance = IFRS.CBAdvance;

                                    IFRS.UserSLNo = AI.UserSLNo;
                                    IFRS.EntryDate = DateTime.Now;
                                    db.IFRSSchedules.Add(IFRS);
                                    db.SaveChanges();
                                    IFRS_Start_MonthNo = IFRS_Start_MonthNo + 1;
                                }
                            }
                            //==
                        }
                        //==End IFRS Schedule
                    }
                    //==Special Agreement Block 
                    bool xSpecial = db.AgreementInfos.Where(x => x.AgreementSLNo == AI.xRenewalAgreementSLNo).Select(x => x.Special).SingleOrDefault();
                    if (xSpecial == true)
                    {
                        //xPosted to Renewal Posted
                        int PostedMonths = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.xRenewalAgreementSLNo && x.IsPJPosted == true).Count();
                        //==Post yContract Schedule
                        List<RMS.Models.ContractSchedule> lstMaster_CS = db.ContractSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.MonthNo >= 1 && x.MonthNo <= PostedMonths).ToList();
                        lstMaster_CS.ForEach(x =>
                        {
                            x.IsPosted = true;
                            x.PostingID = "123";
                            x.PostingDate = Convert.ToDateTime("01/01/2021");
                            x.PostingUserSLNo = 1;
                            x.IsPJPosted = true;
                            x.PJPostingID = "456";
                            x.PJPostingDate = Convert.ToDateTime("01/01/2021");
                            x.PJPostingUserSLNo = 1;
                        });
                        db.SaveChanges();
                        //==Post yLandlord Schedule
                        List<RMS.Models.LandlordSchedule> lstMaster_LI = db.LandlordSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.MonthNo >= 1 && x.MonthNo <= PostedMonths).ToList();
                        lstMaster_LI.ForEach(x =>
                        {
                            x.IsPosted = true;
                            x.PostingID = "123";
                            x.PostingDate = Convert.ToDateTime("01/01/2021");
                            x.PostingUserSLNo = 1;
                            x.IsPJPosted = true;
                            x.PJPostingID = "456";
                            x.PJPostingDate = Convert.ToDateTime("01/01/2021");
                            x.PJPostingUserSLNo = 1;
                        });
                        db.SaveChanges();
                        //==Post yCostCenter Schedule
                        List<RMS.Models.CostCenterSchedule> lstMaster_CC = db.CostCenterSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.MonthNo >= 1 && x.MonthNo <= PostedMonths).ToList();
                        lstMaster_CC.ForEach(x =>
                        {
                            x.IsPosted = true;
                            x.PostingID = "123";
                            x.PostingDate = Convert.ToDateTime("01/01/2021");
                            x.PostingUserSLNo = 1;
                            x.IsPJPosted = true;
                            x.PJPostingID = "456";
                            x.PJPostingDate = Convert.ToDateTime("01/01/2021");
                            x.PJPostingUserSLNo = 1;
                        });
                        db.SaveChanges();
                        //==Post yUtility Schedule
                        //List<RMS.Models.UtilitySchedule> lstMaster_UI = db.UtilitySchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.MonthNo >= 1 && x.MonthNo <= PostedMonths).ToList();
                        //lstMaster_UI.ForEach(x =>
                        //{
                        //    x.IsPosted = true;
                        //    x.PostingID = "123";
                        //    x.PostingDate = Convert.ToDateTime("01/01/2021");
                        //    x.PostingUserSLNo = 1;
                        //    x.IsPJPosted = true;
                        //    x.PJPostingID = "456";
                        //    x.PJPostingDate = Convert.ToDateTime("01/01/2021");
                        //    x.PJPostingUserSLNo = 1;
                        //});
                        //db.SaveChanges();
                        //==================================
                        //==Get the Adjustment Amount
                        double xPostedAmount = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.xRenewalAgreementSLNo && x.IsPJPosted == true).Sum(x => (double?)x.TotalRentAmount) ?? 0;
                        double yPostedAmount = db.ContractSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.IsPJPosted == true).Sum(x => (double?)x.TotalRentAmount) ?? 0;
                        double AdjustmentAmount = yPostedAmount - xPostedAmount;
                        //==Merge AdjustAmount to Contract Schedule
                        var ContractMonth = db.ContractSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.IsPJPosted == false).OrderBy(x => x.ContractScheduleSLNo).Take(1).ToList();
                        if (AdjustmentAmount < 0)
                        {
                            ContractMonth.ForEach(x =>
                            {
                                x.TotalRentAmount = x.TotalRentAmount - AdjustmentAmount;
                                x.NetRentAmount = x.NetRentAmount - AdjustmentAmount;
                            });
                        }
                        else
                        {
                            ContractMonth.ForEach(x =>
                            {
                                x.TotalRentAmount = x.TotalRentAmount + AdjustmentAmount;
                                x.NetRentAmount = x.NetRentAmount + AdjustmentAmount;
                            });
                        }
                        db.SaveChanges();
                        //==Merge AdjustAmount to Landlord Schedule
                        List<RMS.Models.LandlordInfo> lstLandlordAjustmentUpdate = db.LandlordInfos.Where(x => x.AgreementSLNo == AgreementSLNo).ToList();
                        foreach (RMS.Models.LandlordInfo LI in lstLandlordAjustmentUpdate)
                        {
                            //==Get the Ratio of AdjustmentAmount
                            var RatioAdjustmentAmount = AdjustmentAmount * LI.RentPC / 100;
                            var LanlordMonth = db.LandlordSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.LandlordSLNo == LI.LandlordSLNo && x.IsPJPosted == false).OrderBy(x => x.LScheduleSLNo).Take(1).ToList();
                            if (AdjustmentAmount < 0)
                            {
                                LanlordMonth.ForEach(x =>
                                {
                                    x.TotalRentAmount = x.TotalRentAmount - RatioAdjustmentAmount;
                                    x.NetRentAmount = x.NetRentAmount - RatioAdjustmentAmount;
                                });
                            }
                            else
                            {
                                LanlordMonth.ForEach(x =>
                                {
                                    x.TotalRentAmount = x.TotalRentAmount + RatioAdjustmentAmount;
                                    x.NetRentAmount = x.NetRentAmount + RatioAdjustmentAmount;
                                });
                            }
                            db.SaveChanges();
                        }
                        //==Merge AdjustAmount to CostCenter Schedule
                        List<RMS.Models.CostCenterInfo> lstCCAjustmentUpdate = db.CostCenterInfos.Where(x => x.AgreementSLNo == AgreementSLNo).ToList();
                        foreach (RMS.Models.CostCenterInfo CC in lstCCAjustmentUpdate)
                        {
                            //==Get the Ratio of AdjustmentAmount
                            var RatioAdjustmentAmount = AdjustmentAmount * CC.CCShareAllotment / 100;
                            var CCMonth = db.CostCenterSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.CCSLNo == CC.CCSLNo && x.IsPJPosted == false).OrderBy(x => x.CCScheduleSLNo).Take(1).ToList();
                            if (AdjustmentAmount < 0)
                            {
                                CCMonth.ForEach(x =>
                                {
                                    x.TotalRentAmount = x.TotalRentAmount - RatioAdjustmentAmount;
                                    x.NetRentAmount = x.NetRentAmount - RatioAdjustmentAmount;
                                });
                            }
                            else
                            {
                                CCMonth.ForEach(x =>
                                {
                                    x.TotalRentAmount = x.TotalRentAmount + RatioAdjustmentAmount;
                                    x.NetRentAmount = x.NetRentAmount + RatioAdjustmentAmount;
                                });
                            }
                            db.SaveChanges();
                        }
                        //==================================
                        //==xContract Schedule Block
                        List<RMS.Models.ContractSchedule> lstCS = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.xRenewalAgreementSLNo && x.IsPJPosted == false).ToList();
                        lstCS.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = AI.UserSLNo; });
                        db.SaveChanges();
                        //==xLandlord Schedule Block
                        List<RMS.Models.LandlordSchedule> lstLandlord = db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.xRenewalAgreementSLNo && x.IsPJPosted == false).ToList();
                        lstLandlord.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = AI.UserSLNo; });
                        db.SaveChanges();
                        //==xCost Center Schedule Block
                        List<RMS.Models.CostCenterSchedule> lstCC = db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.xRenewalAgreementSLNo && x.IsPJPosted == false).ToList();
                        lstCC.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = AI.UserSLNo; });
                        db.SaveChanges();
                        //==xUtility Schedule Block
                        //List<RMS.Models.UtilitySchedule> lstU = db.UtilitySchedules.Where(x => x.AgreementSLNo == AI.xModifiedAgreementSLNo && x.IsPJPosted == false).ToList();
                        //lstU.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = AI.UserSLNo; });
                        //db.SaveChanges();
                    }
                    //==End Special Agreement Block
                    AlertMsg = "The renewal agreement: " + AI.AliasCode + " " + AI.AgreementName + " has been activated.";
                    return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult ModActivate(int AgreementSLNo)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==Activate Modified Agreement
                    RMS.Models.AgreementInfo AI = db.AgreementInfos.Where(x => x.AgreementSLNo == AgreementSLNo).SingleOrDefault();
                    AgreementStatus AgreementStatus = new AgreementStatus();
                    string LoginUserID = (string)Session["LoginUserID"];
                    AI.ActivateBy = (string)Session["LoginUserID"];
                    AI.ActivateDate = DateTime.Now;
                    AI.AgreementStatus = AgreementStatus.Activate;
                    db.Entry(AI).State = EntityState.Modified;
                    db.SaveChanges();
                    //==Block series of xModifiedAgreementSLNo
                    DateTime PVDate = Convert.ToDateTime("01/01/2019");
                    //==Contract Schedule
                    //RMS.Models.IFRSSchedule xIFRSInfo = new RMS.Models.IFRSSchedule();
                    var xIFRSInfo = (dynamic)null;
                    string NewMonthName = AI.AgreementStartDate.ToString("MMMM");
                    int NewFromMonthNo = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.xModifiedAgreementSLNo && x.Year == AI.AgreementStartDate.Year && x.Month == NewMonthName).Select(x => x.MonthNo).SingleOrDefault();
                    //==Contract Schedule
                    List<RMS.Models.ContractSchedule> lstCS = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.xModifiedAgreementSLNo && x.MonthNo >= NewFromMonthNo && x.IsPosted == false && x.IsPJPosted == false).ToList();
                    lstCS.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = AI.UserSLNo; });
                    db.SaveChanges();
                    //==Landlord Schedule
                    List<RMS.Models.LandlordSchedule> lstLandlord = db.LandlordSchedules.Where(x => x.AgreementSLNo == AI.xModifiedAgreementSLNo && x.MonthNo >= NewFromMonthNo && x.IsPosted == false && x.IsPJPosted == false).ToList();
                    lstLandlord.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = AI.UserSLNo; });
                    db.SaveChanges();
                    //==Cost Center Schedule
                    List<RMS.Models.CostCenterSchedule> lstCC = db.CostCenterSchedules.Where(x => x.AgreementSLNo == AI.xModifiedAgreementSLNo && x.MonthNo >= NewFromMonthNo && x.IsPosted == false && x.IsPJPosted == false).ToList();
                    lstCC.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = AI.UserSLNo; });
                    db.SaveChanges();
                    //==IFRS Schedule
                    var xModifiedAgreementInfo = db.AgreementInfos.Where(x => x.AgreementSLNo == AI.xModifiedAgreementSLNo).Select(x => new { x.AgreementStartDate, x.IFRSEffectiveDate, x.IsIFRSEnable }).SingleOrDefault();
                    if (xModifiedAgreementInfo.IsIFRSEnable == true && AI.IsIFRSEnable == true)
                    {
                        DateTime NewIFRSEffectiveDate = Convert.ToDateTime(AI.IFRSEffectiveDate);
                        string NewIFRSMonthName = NewIFRSEffectiveDate.ToString("MMMM");
                        if (xModifiedAgreementInfo.IFRSEffectiveDate < PVDate)
                        {
                            xIFRSInfo = db.IFRSSchedules.Where(x => x.AgreementSLNo == AI.xModifiedAgreementSLNo && x.Year == PVDate.Year && x.Month == "January").Select(x => new { x.MonthNo, x.OBROU, x.OBAdvance }).SingleOrDefault();
                            NewFromMonthNo = xIFRSInfo.MonthNo;
                        }
                        else
                        {
                            xIFRSInfo = db.IFRSSchedules.Where(x => x.AgreementSLNo == AI.xModifiedAgreementSLNo && x.Year == NewIFRSEffectiveDate.Year && x.Month == NewIFRSMonthName).Select(x => new { x.MonthNo, x.OBROU, x.OBAdvance }).SingleOrDefault();
                            NewFromMonthNo = xIFRSInfo.MonthNo;
                        }
                        List<RMS.Models.IFRSSchedule> lstIFRS = db.IFRSSchedules.Where(x => x.AgreementSLNo == AI.xModifiedAgreementSLNo && x.MonthNo >= NewFromMonthNo).ToList();
                        lstIFRS.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = AI.UserSLNo; });
                        db.SaveChanges();
                    }
                    else if (xModifiedAgreementInfo.IsIFRSEnable == true && AI.IsIFRSEnable == false)
                    {
                        if (xModifiedAgreementInfo.IFRSEffectiveDate < PVDate)
                        {
                            xIFRSInfo = db.IFRSSchedules.Where(x => x.AgreementSLNo == AI.xModifiedAgreementSLNo && x.Year == PVDate.Year && x.Month == "January").Select(x => new { x.MonthNo, x.OBROU, x.OBAdvance }).SingleOrDefault();
                            NewFromMonthNo = xIFRSInfo.MonthNo;
                        }
                        else
                        {
                            xIFRSInfo = db.IFRSSchedules.Where(x => x.AgreementSLNo == AI.xModifiedAgreementSLNo && x.MonthNo >= NewFromMonthNo).Select(x => new { x.MonthNo, x.OBROU, x.OBAdvance }).SingleOrDefault();
                            NewFromMonthNo = xIFRSInfo.MonthNo;
                        }
                        List<RMS.Models.IFRSSchedule> lstIFRS = db.IFRSSchedules.Where(x => x.AgreementSLNo == AI.xModifiedAgreementSLNo && x.MonthNo >= NewFromMonthNo).ToList();
                        lstIFRS.ToList().ForEach(x => { x.IsBlock = true; x.BlockDate = DateTime.Now; x.BlockUserSLNo = AI.UserSLNo; });
                        db.SaveChanges();
                    }
                    //==Contract Rent Schedule
                    RMS.Models.ContractSchedule CS = new RMS.Models.ContractSchedule();
                    RMS.Models.LandlordSchedule LS = new RMS.Models.LandlordSchedule();
                    RMS.Models.CostCenterSchedule CCS = new RMS.Models.CostCenterSchedule();
                    //RMS.Models.UtilitySchedule US = new RMS.Models.UtilitySchedule();
                    RMS.Models.IFRSSchedule IFRS = new RMS.Models.IFRSSchedule();
                    List<RMS.Models.LandlordInfo> lstLandlords = db.LandlordInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).ToList();
                    List<RMS.Models.CostCenterInfo> lstCostCenter = db.CostCenterInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).ToList();
                    //List<RMS.Models.UtilityInfo> lstUtility = db.UtilityInfos.Where(x => x.AgreementSLNo == AI.AgreementSLNo).ToList();
                    List<RMS.Models.ReviewInfo> lstReviewInfo = db.ReviewInfos.Where(x => x.AgreementSLNo == AgreementSLNo).OrderBy(x => x.ReviewNo).ToList();
                    List<RMS.Models.AdvanceInfo> lstAdvanceInfo = db.AdvanceInfos.Where(x => x.AgreementSLNo == AgreementSLNo).OrderBy(x => x.AdvanceNo).ToList();
                    DateTime ScheduleDate = AI.AgreementStartDate;
                    //===xxx====
                    int LastMonthDaysCount = DateTime.DaysInMonth(AI.AgreementEndDate.Year, AI.AgreementEndDate.Month);
                    int ReviewMonthDaysCount = 0;
                    int MonthDays = 0;

                    double RentPerDay = 0;
                    double BeforeReviewAmount = 0;
                    double AfterReviewAmount = 0;
                    double NetCalcAmount = 0;
                    if (AI.ReviewFrequency < 1 && lstReviewInfo.Count == 0)
                    {
                        //==Without Review
                        for (int i = 1; i <= AI.AgreementPeriod; i++)
                        {
                            CS = new RMS.Models.ContractSchedule();
                            if (i != 1)
                            {
                                ScheduleDate = ScheduleDate.AddMonths(1);
                            }
                            //==Contract Schedule
                            CS.ScheduleDate = ScheduleDate;
                            CS.AgreementSLNo = AI.AgreementSLNo;
                            CS.MonthNo = i;
                            CS.Year = CS.ScheduleDate.Year;
                            CS.Month = CS.ScheduleDate.ToString("MMMM");
                            CS.ReviewNo = 0;
                            if (i <= AI.AdvanceAdjustmentPeriod)
                            {
                                CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                            }
                            CS.CostPerUnit = AI.CostPerUnit;
                            CS.TotalRentAmount = AI.CostPerUnit * AI.TotalArea;
                            //==First Month
                            if (i == 1)
                            {
                                //==Full Month
                                if (ScheduleDate.Day != 1)
                                {
                                    //==Fraction Date Rent Amount
                                    MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                    RentPerDay = CS.TotalRentAmount / MonthDays;
                                    CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                }
                            }
                            //==Last Month
                            else if (i == AI.AgreementPeriod)
                            {
                                //==Full Month
                                if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                {
                                    //==Fraction Date Rent Amount
                                    RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                    CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                }
                            }
                            #region "Tax Type & VAT Type"
                            //1. Inclusive Inclusive
                            if (AI.TaxType == 1 && AI.VatType == 1)
                            {
                                CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //2. Inclusive Exclusive
                            else if (AI.TaxType == 1 && AI.VatType == 2)
                            {
                                CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //3. Inclusive Exempted
                            else if (AI.TaxType == 1 && AI.VatType == 3)
                            {
                                CS.VATAmount = 0;
                                CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //4. Exclusive Inclusive
                            else if (AI.TaxType == 2 && AI.VatType == 1)
                            {
                                CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //5. Exclusive Exclusive
                            else if (AI.TaxType == 2 && AI.VatType == 2)
                            {
                                CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                NetCalcAmount = CS.TotalRentAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //6. Exclusive Exempted
                            else if (AI.TaxType == 2 && AI.VatType == 3)
                            {
                                CS.VATAmount = 0;
                                CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                NetCalcAmount = CS.TotalRentAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //7. Exempted  Inclusive
                            else if (AI.TaxType == 3 && AI.VatType == 1)
                            {
                                CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                CS.TaxAmount = 0;
                                NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //8. Exempted  Exclusive
                            else if (AI.TaxType == 3 && AI.VatType == 2)
                            {
                                CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                CS.TaxAmount = 0;
                                NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            //9. Exempted Exempted
                            else if (AI.TaxType == 3 && AI.VatType == 3)
                            {
                                CS.VATAmount = 0;
                                CS.TaxAmount = 0;
                                NetCalcAmount = CS.TotalRentAmount;
                                CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                            }
                            #endregion
                            CS.UserSLNo = AI.UserSLNo;
                            CS.EntryDate = DateTime.Now;
                            db.ContractSchedules.Add(CS);
                            db.SaveChanges();
                            //==Landlord Schedule
                            foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                            {
                                LS = new RMS.Models.LandlordSchedule();
                                LS.ScheduleDate = ScheduleDate;
                                LS.AgreementSLNo = AI.AgreementSLNo;
                                LS.LandlordSLNo = LI.LandlordSLNo;
                                LS.MonthNo = i;
                                LS.Year = CS.ScheduleDate.Year;
                                LS.Month = CS.ScheduleDate.ToString("MMMM");
                                LS.ReviewNo = 0;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                }
                                LS.CostPerUnit = AI.CostPerUnit;
                                LS.TotalRentAmount = CS.TotalRentAmount;
                                //==
                                if (CS.TaxAmount > 0)
                                {
                                    LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                }
                                if (CS.VATAmount > 0)
                                {
                                    LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                }
                                //==
                                LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - (LS.AdvanceAdjustmentAmount);
                                LS.UserSLNo = AI.UserSLNo;
                                LS.EntryDate = DateTime.Now;
                                db.LandlordSchedules.Add(LS);
                                db.SaveChanges();
                            }
                            //==Cost Allocation Schedule
                            foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                            {
                                CCS = new RMS.Models.CostCenterSchedule();
                                CCS.ScheduleDate = ScheduleDate;
                                CCS.AgreementSLNo = AI.AgreementSLNo;
                                CCS.CCSLNo = CC.CCSLNo;
                                CCS.MonthNo = i;
                                CCS.Year = CS.ScheduleDate.Year;
                                CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                CCS.ReviewNo = 0;
                                CCS.CostPerUnit = AI.CostPerUnit;
                                CCS.TotalRentAmount = CS.TotalRentAmount;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                }
                                if (CS.TaxAmount > 0)
                                {
                                    CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                }
                                if (CS.VATAmount > 0)
                                {
                                    CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                }
                                //==
                                CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                CCS.UserSLNo = AI.UserSLNo;
                                CCS.EntryDate = DateTime.Now;
                                db.CostCenterSchedules.Add(CCS);
                                db.SaveChanges();
                            }
                        }
                    }
                    else if (AI.ReviewFrequency > 0)
                    {
                        //==Review Frequency (Repeated)
                        int ReviewCount = AI.ReviewFrequency + 1;
                        int ReviewNo = 0;
                        double NewCPU = AI.CostPerUnit;
                        for (int i = 1; i <= AI.AgreementPeriod; i++)
                        {
                            CS = new RMS.Models.ContractSchedule();
                            if (i != 1)
                            {
                                ScheduleDate = ScheduleDate.AddMonths(1);
                            }
                            if (i <= AI.ReviewFrequency)
                            {
                                //==Contract Schedule
                                CS.ScheduleDate = ScheduleDate;
                                CS.AgreementSLNo = AI.AgreementSLNo;
                                CS.MonthNo = i;
                                CS.Year = CS.ScheduleDate.Year;
                                CS.Month = CS.ScheduleDate.ToString("MMMM");
                                CS.ReviewNo = ReviewNo;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                }
                                CS.CostPerUnit = NewCPU;
                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                if (i == 1)
                                {
                                    //==Full Month
                                    if (ScheduleDate.Day != 1)
                                    {
                                        //==Fraction Date Rent Amount
                                        MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                        RentPerDay = CS.TotalRentAmount / MonthDays;
                                        CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                    }
                                }
                                #region "Tax Type & VAT Type"
                                //1. Inclusive Inclusive
                                if (AI.TaxType == 1 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //2. Inclusive Exclusive
                                else if (AI.TaxType == 1 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //3. Inclusive Exempted
                                else if (AI.TaxType == 1 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //4. Exclusive Inclusive
                                else if (AI.TaxType == 2 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //5. Exclusive Exclusive
                                else if (AI.TaxType == 2 && AI.VatType == 2)
                                {
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //6. Exclusive Exempted
                                else if (AI.TaxType == 2 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //7. Exempted  Inclusive
                                else if (AI.TaxType == 3 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //8. Exempted  Exclusive
                                else if (AI.TaxType == 3 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //9. Exempted Exempted
                                else if (AI.TaxType == 3 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                #endregion
                                CS.UserSLNo = AI.UserSLNo;
                                CS.EntryDate = DateTime.Now;
                                db.ContractSchedules.Add(CS);
                                db.SaveChanges();
                                //==Landlord Schedule
                                foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                {
                                    LS = new RMS.Models.LandlordSchedule();
                                    LS.ScheduleDate = ScheduleDate;
                                    LS.AgreementSLNo = AI.AgreementSLNo;
                                    LS.LandlordSLNo = LI.LandlordSLNo;
                                    LS.MonthNo = i;
                                    LS.Year = CS.ScheduleDate.Year;
                                    LS.Month = CS.ScheduleDate.ToString("MMMM");
                                    LS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                    }
                                    LS.CostPerUnit = NewCPU;
                                    LS.TotalRentAmount = CS.TotalRentAmount;
                                    if (CS.TaxAmount > 0)
                                    {
                                        LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                    }
                                    //==
                                    LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                    LS.UserSLNo = AI.UserSLNo;
                                    LS.EntryDate = DateTime.Now;
                                    db.LandlordSchedules.Add(LS);
                                    db.SaveChanges();
                                }
                                //==Cost Allocation Schedule
                                foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                {
                                    CCS = new RMS.Models.CostCenterSchedule();
                                    CCS.ScheduleDate = ScheduleDate;
                                    CCS.AgreementSLNo = AI.AgreementSLNo;
                                    CCS.CCSLNo = CC.CCSLNo;
                                    CCS.MonthNo = i;
                                    CCS.Year = CS.ScheduleDate.Year;
                                    CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CCS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                    }
                                    CCS.CostPerUnit = NewCPU;
                                    CCS.TotalRentAmount = CS.TotalRentAmount;
                                    if (CS.TaxAmount > 0)
                                    {
                                        CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                    }
                                    //==
                                    CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                    CCS.UserSLNo = AI.UserSLNo;
                                    CCS.EntryDate = DateTime.Now;
                                    db.CostCenterSchedules.Add(CCS);
                                    db.SaveChanges();
                                }
                            }
                            else if (i == ReviewCount)
                            {
                                //==Contract Schedule
                                if (i != AI.AgreementPeriod)
                                {
                                    ReviewNo = ReviewNo + 1;
                                }
                                ReviewCount = ReviewCount + AI.ReviewFrequency;
                                CS.ScheduleDate = ScheduleDate;
                                CS.AgreementSLNo = AI.AgreementSLNo;
                                CS.MonthNo = i;
                                CS.Year = CS.ScheduleDate.Year;
                                CS.Month = CS.ScheduleDate.ToString("MMMM");
                                CS.ReviewNo = ReviewNo;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                }
                                //==xx
                                //==Last Month
                                if (i == AI.AgreementPeriod)
                                {
                                    CS.CostPerUnit = NewCPU;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    //==Full Month
                                    if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                    {
                                        //==Fraction Date Rent Amount
                                        RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                        CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                    }
                                }
                                else
                                {
                                    //==Fraction Month
                                    if (ScheduleDate.Day != 1)
                                    {
                                        //==Before Review Amount
                                        MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                        RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                        BeforeReviewAmount = (ScheduleDate.Day - 1) * RentPerDay;
                                        //==After Review Amount
                                        NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                        CS.CostPerUnit = NewCPU;
                                        RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                        AfterReviewAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                        CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                    }
                                    else
                                    {
                                        NewCPU = NewCPU + (NewCPU * AI.ReviewPercentage) / 100;
                                        CS.CostPerUnit = NewCPU;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    }
                                }
                                #region "Tax Type & VAT Type"
                                //1. Inclusive Inclusive
                                if (AI.TaxType == 1 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //2. Inclusive Exclusive
                                else if (AI.TaxType == 1 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //3. Inclusive Exempted
                                else if (AI.TaxType == 1 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //4. Exclusive Inclusive
                                else if (AI.TaxType == 2 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //5. Exclusive Exclusive
                                else if (AI.TaxType == 2 && AI.VatType == 2)
                                {
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //6. Exclusive Exempted
                                else if (AI.TaxType == 2 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //7. Exempted  Inclusive
                                else if (AI.TaxType == 3 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //8. Exempted  Exclusive
                                else if (AI.TaxType == 3 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //9. Exempted Exempted
                                else if (AI.TaxType == 3 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                #endregion
                                CS.UserSLNo = AI.UserSLNo;
                                CS.EntryDate = DateTime.Now;
                                db.ContractSchedules.Add(CS);
                                db.SaveChanges();
                                //==Landlord Schedule
                                foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                {
                                    LS = new RMS.Models.LandlordSchedule();
                                    LS.ScheduleDate = ScheduleDate;
                                    LS.AgreementSLNo = AI.AgreementSLNo;
                                    LS.LandlordSLNo = LI.LandlordSLNo;
                                    LS.MonthNo = i;
                                    LS.Year = CS.ScheduleDate.Year;
                                    LS.Month = CS.ScheduleDate.ToString("MMMM");
                                    LS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                    }
                                    LS.CostPerUnit = NewCPU;
                                    LS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                    LS.UserSLNo = AI.UserSLNo;
                                    LS.EntryDate = DateTime.Now;
                                    db.LandlordSchedules.Add(LS);
                                    db.SaveChanges();
                                }
                                //==Cost Allocation Schedule
                                foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                {
                                    CCS = new RMS.Models.CostCenterSchedule();
                                    CCS.ScheduleDate = ScheduleDate;
                                    CCS.AgreementSLNo = AI.AgreementSLNo;
                                    CCS.CCSLNo = CC.CCSLNo;
                                    CCS.MonthNo = i;
                                    CCS.Year = CS.ScheduleDate.Year;
                                    CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CCS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                    }
                                    CCS.CostPerUnit = NewCPU;
                                    CCS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                    CCS.UserSLNo = AI.UserSLNo;
                                    CCS.EntryDate = DateTime.Now;
                                    db.CostCenterSchedules.Add(CCS);
                                    db.SaveChanges();
                                }
                            }
                            else
                            {
                                CS.ScheduleDate = ScheduleDate;
                                CS.AgreementSLNo = AI.AgreementSLNo;
                                CS.MonthNo = i;
                                CS.Year = CS.ScheduleDate.Year;
                                CS.Month = CS.ScheduleDate.ToString("MMMM");
                                CS.ReviewNo = ReviewNo;
                                if (i <= AI.AdvanceAdjustmentPeriod)
                                {
                                    CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                }
                                CS.CostPerUnit = NewCPU;
                                CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                //==Last Month
                                if (i == AI.AgreementPeriod)
                                {
                                    //==Full Month
                                    if (AI.AgreementEndDate.Day != LastMonthDaysCount)
                                    {
                                        //==Fraction Date Rent Amount
                                        RentPerDay = CS.TotalRentAmount / LastMonthDaysCount;
                                        CS.TotalRentAmount = AI.AgreementEndDate.Day * RentPerDay;
                                    }
                                }
                                #region "Tax Type & VAT Type"
                                //1. Inclusive Inclusive
                                if (AI.TaxType == 1 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //2. Inclusive Exclusive
                                else if (AI.TaxType == 1 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //3. Inclusive Exempted
                                else if (AI.TaxType == 1 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //4. Exclusive Inclusive
                                else if (AI.TaxType == 2 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                    CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //5. Exclusive Exclusive
                                else if (AI.TaxType == 2 && AI.VatType == 2)
                                {
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //6. Exclusive Exempted
                                else if (AI.TaxType == 2 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //7. Exempted  Inclusive
                                else if (AI.TaxType == 3 && AI.VatType == 1)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //8. Exempted  Exclusive
                                else if (AI.TaxType == 3 && AI.VatType == 2)
                                {
                                    CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                //9. Exempted Exempted
                                else if (AI.TaxType == 3 && AI.VatType == 3)
                                {
                                    CS.VATAmount = 0;
                                    CS.TaxAmount = 0;
                                    NetCalcAmount = CS.TotalRentAmount;
                                    CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                    CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                }
                                #endregion
                                CS.UserSLNo = AI.UserSLNo;
                                CS.EntryDate = DateTime.Now;
                                db.ContractSchedules.Add(CS);
                                db.SaveChanges();
                                //==Landlord Schedule
                                foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                {
                                    LS = new RMS.Models.LandlordSchedule();
                                    LS.ScheduleDate = ScheduleDate;
                                    LS.AgreementSLNo = AI.AgreementSLNo;
                                    LS.LandlordSLNo = LI.LandlordSLNo;
                                    LS.MonthNo = i;
                                    LS.Year = CS.ScheduleDate.Year;
                                    LS.Month = CS.ScheduleDate.ToString("MMMM");
                                    LS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                    }
                                    LS.CostPerUnit = NewCPU;
                                    LS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                    LS.UserSLNo = AI.UserSLNo;
                                    LS.EntryDate = DateTime.Now;
                                    db.LandlordSchedules.Add(LS);
                                    db.SaveChanges();
                                }
                                //==Cost Allocation Schedule
                                foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                {
                                    CCS = new RMS.Models.CostCenterSchedule();
                                    CCS.ScheduleDate = ScheduleDate;
                                    CCS.AgreementSLNo = AI.AgreementSLNo;
                                    CCS.CCSLNo = CC.CCSLNo;
                                    CCS.MonthNo = i;
                                    CCS.Year = CS.ScheduleDate.Year;
                                    CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CCS.ReviewNo = ReviewNo;
                                    if (i <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.TaxAmount > 0)
                                    {
                                        CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                    }
                                    if (CS.VATAmount > 0)
                                    {
                                        CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                    }
                                    CCS.CostPerUnit = NewCPU;
                                    CCS.TotalRentAmount = CS.TotalRentAmount;
                                    //==
                                    CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                    CCS.UserSLNo = AI.UserSLNo;
                                    CCS.EntryDate = DateTime.Now;
                                    db.CostCenterSchedules.Add(CCS);
                                    db.SaveChanges();
                                }
                            }
                        }
                    }
                    else if (AI.ReviewFrequency < 1 && lstReviewInfo.Count > 0)
                    {
                        //==Review Declaration Wise
                        int MonthNo = 0;
                        int ReviewNo = 0;
                        double NewCPU = AI.CostPerUnit;
                        //==Review Wise
                        foreach (RMS.Models.ReviewInfo RI in lstReviewInfo)
                        {
                            ReviewNo = ReviewNo + 1;
                            if (RI.ReviewNo == 1)
                            {
                                //==Schedule without Review
                                int ReviewStartMonth = ((RI.StartDate.Year - AI.AgreementStartDate.Year) * 12 + RI.StartDate.Month - AI.AgreementStartDate.Month) + 1;
                                for (int i = 1; i < ReviewStartMonth; i++)
                                {
                                    MonthNo = MonthNo + 1;
                                    CS = new RMS.Models.ContractSchedule();
                                    if (i != 1)
                                    {
                                        ScheduleDate = ScheduleDate.AddMonths(1);
                                    }
                                    //==Contract Schedule
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = MonthNo;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = 0;
                                    if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    CS.CostPerUnit = AI.CostPerUnit;
                                    CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    if (i == 1)
                                    {
                                        //==Full Month
                                        if (ScheduleDate.Day != 1)
                                        {
                                            //==Fraction Date Rent Amount
                                            MonthDays = DateTime.DaysInMonth(ScheduleDate.Year, ScheduleDate.Month);
                                            RentPerDay = CS.TotalRentAmount / MonthDays;
                                            CS.TotalRentAmount = ((MonthDays - ScheduleDate.Day) + 1) * RentPerDay;
                                        }
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    db.ContractSchedules.Add(CS);
                                    db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = MonthNo;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = 0;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = AI.CostPerUnit;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = MonthNo;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = 0;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = AI.CostPerUnit;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                                //==Schedule with Review
                                for (int i = 1; i <= RI.Period; i++)
                                {
                                    MonthNo = MonthNo + 1;
                                    CS = new RMS.Models.ContractSchedule();
                                    ScheduleDate = ScheduleDate.AddMonths(1);
                                    //==Contract Schedule
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = MonthNo;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    //==Fraction Month
                                    if (i == 1)
                                    {
                                        if (RI.StartDate.Day != 1)
                                        {
                                            //==Before Review Amount
                                            MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                            RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                            BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                            //==After Review Amount
                                            if (RI.IncreaseAmount > 0)
                                            {
                                                NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                            }
                                            else
                                            {
                                                NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                            }
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                            AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                            CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                        }
                                        else
                                        {
                                            if (RI.IncreaseAmount > 0)
                                            {
                                                NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                            }
                                            else
                                            {
                                                NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                            }
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    //==Review Last Month
                                    else if (i == RI.Period)
                                    {
                                        ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                        //==Full Month
                                        if (RI.EndDate.Day != ReviewMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                            CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    else
                                    {
                                        CS.CostPerUnit = NewCPU;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    db.ContractSchedules.Add(CS);
                                    db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = MonthNo;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = MonthNo;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                            }
                            else
                            {
                                //==Schedule rest of the Review
                                for (int i = 1; i <= RI.Period; i++)
                                {
                                    CS = new RMS.Models.ContractSchedule();
                                    //==Conditions applicable for multiple enhancement slots are two enhancements in the same month
                                    if (i == 1 && ScheduleDate.Year == RI.StartDate.Year && ScheduleDate.Month == RI.StartDate.Month)
                                    {
                                        //===MonthNo wise Delete from Contract Schedule
                                        db.ContractSchedules.RemoveRange(db.ContractSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.MonthNo == MonthNo));
                                        db.SaveChanges();
                                        //===MonthNo wise Delete from Landlord Schedule
                                        db.LandlordSchedules.RemoveRange(db.LandlordSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.MonthNo == MonthNo));
                                        db.SaveChanges();
                                        //===MonthNo wise Delete from Cost Center Schedule
                                        db.CostCenterSchedules.RemoveRange(db.CostCenterSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.MonthNo == MonthNo));
                                        db.SaveChanges();
                                        //==
                                    }
                                    else
                                    {
                                        MonthNo = MonthNo + 1;
                                        ScheduleDate = ScheduleDate.AddMonths(1);
                                    }
                                    //==Contract Schedule
                                    CS.ScheduleDate = ScheduleDate;
                                    CS.AgreementSLNo = AI.AgreementSLNo;
                                    CS.MonthNo = MonthNo;
                                    CS.Year = CS.ScheduleDate.Year;
                                    CS.Month = CS.ScheduleDate.ToString("MMMM");
                                    CS.ReviewNo = ReviewNo;
                                    if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                    {
                                        CS.AdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount;
                                    }
                                    //==Fraction Month
                                    if (i == 1)
                                    {
                                        if (RI.StartDate.Day != 1)
                                        {
                                            //==Before Review Amount
                                            MonthDays = DateTime.DaysInMonth(RI.StartDate.Year, RI.StartDate.Month);
                                            RentPerDay = (NewCPU * AI.TotalArea) / MonthDays;
                                            BeforeReviewAmount = (RI.StartDate.Day - 1) * RentPerDay;
                                            //==After Review Amount
                                            if (RI.IncreaseAmount > 0)
                                            {
                                                NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                            }
                                            else
                                            {
                                                NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                            }
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / MonthDays;
                                            AfterReviewAmount = ((MonthDays - RI.StartDate.Day) + 1) * RentPerDay;
                                            CS.TotalRentAmount = BeforeReviewAmount + AfterReviewAmount;
                                        }
                                        else
                                        {
                                            if (RI.IncreaseAmount > 0)
                                            {
                                                NewCPU = NewCPU + (RI.IncreaseAmount / AI.TotalArea);
                                            }
                                            else
                                            {
                                                NewCPU = NewCPU + ((NewCPU * RI.IncreasePercentage) / 100);
                                            }
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    //==Review Last Month
                                    else if (i == RI.Period)
                                    {
                                        ReviewMonthDaysCount = DateTime.DaysInMonth(RI.EndDate.Year, RI.EndDate.Month);
                                        //==Full Month
                                        if (RI.EndDate.Day != ReviewMonthDaysCount)
                                        {
                                            //==Fraction Date Rent Amount
                                            CS.CostPerUnit = NewCPU;
                                            RentPerDay = (CS.CostPerUnit * AI.TotalArea) / ReviewMonthDaysCount;
                                            CS.TotalRentAmount = RI.EndDate.Day * RentPerDay;
                                        }
                                        else
                                        {
                                            CS.CostPerUnit = NewCPU;
                                            CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                        }
                                    }
                                    else
                                    {
                                        CS.CostPerUnit = NewCPU;
                                        CS.TotalRentAmount = CS.CostPerUnit * AI.TotalArea;
                                    }
                                    #region "Tax Type & VAT Type"
                                    //1. Inclusive Inclusive
                                    if (AI.TaxType == 1 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) * AI.TaxPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //2. Inclusive Exclusive
                                    else if (AI.TaxType == 1 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //3. Inclusive Exempted
                                    else if (AI.TaxType == 1 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount * AI.TaxPercentage) / 100;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //4. Exclusive Inclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - AI.TaxPercentage)) * AI.VATPercentage;
                                        CS.TaxAmount = (CS.TotalRentAmount - CS.VATAmount) / (100 - AI.TaxPercentage) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //5. Exclusive Exclusive
                                    else if (AI.TaxType == 2 && AI.VatType == 2)
                                    {
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        CS.VATAmount = (CS.TotalRentAmount + CS.TaxAmount) * AI.VATPercentage / 100;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //6. Exclusive Exempted
                                    else if (AI.TaxType == 2 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = (CS.TotalRentAmount / (100 - AI.TaxPercentage)) * AI.TaxPercentage;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //7. Exempted  Inclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 1)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount / (100 + AI.VATPercentage - 0)) * AI.VATPercentage;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.VATAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //8. Exempted  Exclusive
                                    else if (AI.TaxType == 3 && AI.VatType == 2)
                                    {
                                        CS.VATAmount = (CS.TotalRentAmount * AI.VATPercentage) / 100;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount - CS.TaxAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    //9. Exempted Exempted
                                    else if (AI.TaxType == 3 && AI.VatType == 3)
                                    {
                                        CS.VATAmount = 0;
                                        CS.TaxAmount = 0;
                                        NetCalcAmount = CS.TotalRentAmount;
                                        CS.TotalRentAmount = CS.VATAmount + CS.TaxAmount + NetCalcAmount;
                                        CS.NetRentAmount = CS.TotalRentAmount - CS.AdvanceAdjustmentAmount;
                                    }
                                    #endregion
                                    CS.UserSLNo = AI.UserSLNo;
                                    CS.EntryDate = DateTime.Now;
                                    db.ContractSchedules.Add(CS);
                                    db.SaveChanges();
                                    //==Landlord Schedule
                                    foreach (RMS.Models.LandlordInfo LI in lstLandlords)
                                    {
                                        LS = new RMS.Models.LandlordSchedule();
                                        LS.ScheduleDate = ScheduleDate;
                                        LS.AgreementSLNo = AI.AgreementSLNo;
                                        LS.LandlordSLNo = LI.LandlordSLNo;
                                        LS.MonthNo = MonthNo;
                                        LS.Year = CS.ScheduleDate.Year;
                                        LS.Month = CS.ScheduleDate.ToString("MMMM");
                                        LS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            LS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * LI.AdvanceAdjustmentPC) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            LS.TaxAmount = (CS.TaxAmount * LI.TaxPC) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            LS.VATAmount = (CS.VATAmount * LI.VATPC) / 100;
                                        }
                                        LS.CostPerUnit = NewCPU;
                                        LS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        LS.NetRentAmount = (LS.TotalRentAmount * LI.RentPC / 100) - LS.AdvanceAdjustmentAmount;
                                        LS.UserSLNo = AI.UserSLNo;
                                        LS.EntryDate = DateTime.Now;
                                        db.LandlordSchedules.Add(LS);
                                        db.SaveChanges();
                                    }
                                    //==Cost Allocation Schedule
                                    foreach (RMS.Models.CostCenterInfo CC in lstCostCenter)
                                    {
                                        CCS = new RMS.Models.CostCenterSchedule();
                                        CCS.ScheduleDate = ScheduleDate;
                                        CCS.AgreementSLNo = AI.AgreementSLNo;
                                        CCS.CCSLNo = CC.CCSLNo;
                                        CCS.MonthNo = MonthNo;
                                        CCS.Year = CS.ScheduleDate.Year;
                                        CCS.Month = CS.ScheduleDate.ToString("MMMM");
                                        CCS.ReviewNo = ReviewNo;
                                        if (MonthNo <= AI.AdvanceAdjustmentPeriod)
                                        {
                                            CCS.AdvanceAdjustmentAmount = (CS.AdvanceAdjustmentAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.TaxAmount > 0)
                                        {
                                            CCS.TaxAmount = (CS.TaxAmount * CC.CCShareAllotment) / 100;
                                        }
                                        if (CS.VATAmount > 0)
                                        {
                                            CCS.VATAmount = (CS.VATAmount * CC.CCShareAllotment) / 100;
                                        }
                                        CCS.CostPerUnit = NewCPU;
                                        CCS.TotalRentAmount = CS.TotalRentAmount;
                                        //==
                                        CCS.NetRentAmount = (CCS.TotalRentAmount * CC.CCShareAllotment / 100) - CCS.AdvanceAdjustmentAmount;
                                        CCS.UserSLNo = AI.UserSLNo;
                                        CCS.EntryDate = DateTime.Now;
                                        db.CostCenterSchedules.Add(CCS);
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                    }
                    #region Advance Adjustment
                    //==Advance Info Loop
                    DateTime AdvStartDate = DateTime.Now;
                    int AdvYear = 0;
                    string AdvMonthName = String.Empty;
                    double AdvAdjPerDay = 0;
                    double AdvAdjAmount = 0;
                    double AdvanceMonthDaysCount = 0;
                    foreach (RMS.Models.AdvanceInfo AdvInfo in lstAdvanceInfo)
                    {
                        AdvStartDate = AdvInfo.StartDate;
                        for (int i = 1; i <= AdvInfo.AdvanceSlotPeriod; i++)
                        {
                            if (i != 1)
                            {
                                AdvStartDate = AdvStartDate.AddMonths(1);
                            }
                            AdvYear = AdvStartDate.Year;
                            AdvMonthName = AdvStartDate.ToString("MMMM");
                            AdvAdjAmount = AdvInfo.AdvanceSlotAmount;
                            //==Fraction Advance Adjustment
                            //==First Month
                            if (i == 1)
                            {
                                if (AdvStartDate.Day != 1)
                                {
                                    MonthDays = DateTime.DaysInMonth(AdvStartDate.Year, AdvStartDate.Month);
                                    //==Fraction Date Adv Adj Amount
                                    AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / MonthDays;
                                    AdvAdjAmount = ((MonthDays - AdvStartDate.Day) + 1) * AdvAdjPerDay;
                                }
                            }
                            else
                            {
                                //==Last Month
                                if (i == AdvInfo.AdvanceSlotPeriod)
                                {
                                    AdvanceMonthDaysCount = DateTime.DaysInMonth(AdvInfo.EndDate.Year, AdvInfo.EndDate.Month);
                                    if (AdvInfo.EndDate.Day != AdvanceMonthDaysCount)
                                    {
                                        //==Fraction Date Adv Adj Amount
                                        AdvAdjPerDay = AdvInfo.AdvanceSlotAmount / AdvanceMonthDaysCount;
                                        AdvAdjAmount = AdvInfo.EndDate.Day * AdvAdjPerDay;
                                    }
                                }
                            }
                            //==Advance Process Contract Schedule
                            RMS.Models.ContractSchedule GCS = db.ContractSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).SingleOrDefault();
                            GCS.AdvanceAdjustmentAmount = AdvAdjAmount;
                            GCS.NetRentAmount = GCS.NetRentAmount - GCS.AdvanceAdjustmentAmount;
                            db.Entry(GCS).State = EntityState.Modified;
                            db.SaveChanges();
                            //==Advance Process Landlord Schedule
                            List<RMS.Models.LandlordSchedule> lstGLS = db.LandlordSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                            foreach (RMS.Models.LandlordSchedule GLS in lstGLS)
                            {
                                var GLandlordInfo = db.LandlordInfos.Where(x => x.AgreementSLNo == AgreementSLNo && x.LandlordSLNo == GLS.LandlordSLNo).Select(x => new { x.AdvanceAdjustmentPC, x.RentPC }).SingleOrDefault();
                                GLS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * GLandlordInfo.AdvanceAdjustmentPC) / 100;
                                GLS.NetRentAmount = GLS.NetRentAmount - GLS.AdvanceAdjustmentAmount;
                                db.Entry(GLS).State = EntityState.Modified;
                                db.SaveChanges();
                            }
                            //==Advance Process Cost Center Schedule
                            double CCSharePC = 0;
                            List<RMS.Models.CostCenterSchedule> lstGCCS = db.CostCenterSchedules.Where(x => x.AgreementSLNo == AgreementSLNo && x.Year == AdvYear && x.Month == AdvMonthName).ToList();
                            foreach (RMS.Models.CostCenterSchedule GCCS in lstGCCS)
                            {
                                CCSharePC = db.CostCenterInfos.Where(x => x.AgreementSLNo == AgreementSLNo && x.CCSLNo == GCCS.CCSLNo).Select(x => x.CCShareAllotment).SingleOrDefault();
                                GCCS.AdvanceAdjustmentAmount = (GCS.AdvanceAdjustmentAmount * CCSharePC) / 100;
                                GCCS.NetRentAmount = GCCS.NetRentAmount - GCCS.AdvanceAdjustmentAmount;
                                db.Entry(GCCS).State = EntityState.Modified;
                                db.SaveChanges();
                            }
                        }
                    }
                    #endregion
                    #region Utility Schedule
                    //ScheduleDate = AI.AgreementStartDate.AddMonths(-1);
                    //for (int i = 1; i <= AI.AgreementPeriod; i++)
                    //{
                    //    ScheduleDate = ScheduleDate.AddMonths(1);
                    //    //==Utility Schedule
                    //    foreach (RMS.Models.UtilityInfo UI in lstUtility)
                    //    {
                    //        US = new RMS.Models.UtilitySchedule();
                    //        US.ScheduleDate = ScheduleDate;
                    //        US.AgreementSLNo = AI.AgreementSLNo;
                    //        US.UtilitySLNo = UI.UtilitySLNo;
                    //        US.MonthNo = i;
                    //        US.Year = US.ScheduleDate.Year;
                    //        US.Month = US.ScheduleDate.ToString("MMMM");
                    //        US.ServiceChargeAmount = UI.ServiceChargeAmount;
                    //        US.OnlineTowerAmount = UI.OnlineTowerAmount;
                    //        US.GeneratorSpaceAmount = UI.GeneratorSpaceAmount;
                    //        US.CarParkingAmount = UI.CarParkingAmount;
                    //        US.TaxAmount = UI.TaxAmount;
                    //        US.VATAmount = UI.VATAmount;
                    //        US.UserSLNo = AI.UserSLNo;
                    //        US.EntryDate = DateTime.Now;
                    //        db.UtilitySchedules.Add(US);
                    //        db.SaveChanges();
                    //    }
                    //}
                    #endregion
                    //==IFRS Schedule
                    //==IFRS Schedule
                    if (AI.IsIFRSEnable == true)
                    {
                        List<RMS.Models.ContractSchedule> lstContractSchedule = db.ContractSchedules.Where(x => x.AgreementSLNo == AI.AgreementSLNo).ToList();
                        DateTime IFRSEffectiveDate = Convert.ToDateTime(AI.IFRSEffectiveDate);
                        int IFRSPeriod = AI.AgreementPeriod;
                        ScheduleDate = AI.AgreementStartDate;
                        int IFRS_Start_MonthNo = 1;
                        if (AI.AgreementStartDate != IFRSEffectiveDate)
                        {
                            IFRS_Start_MonthNo = ((IFRSEffectiveDate.Year - AI.AgreementStartDate.Year) * 12 + IFRSEffectiveDate.Month - AI.AgreementStartDate.Month) + 1;
                            IFRSPeriod = (AI.AgreementPeriod - IFRS_Start_MonthNo) + 1;
                            ScheduleDate = IFRSEffectiveDate;
                        }
                        //==Save New Data into BorrowingRateDetails
                        List<RMS.Models.BorrowingRateDetails> lstBRDetails = new List<RMS.Models.BorrowingRateDetails>();
                        RMS.Models.BorrowingRateDetails BRD;
                        for (int i = 1; i <= IFRSPeriod; i++)
                        {
                            BRD = new RMS.Models.BorrowingRateDetails();
                            BRD.MonthNo = i;
                            BRD.Rate = AI.BorrowingRate;
                            BRD.PV1 = Math.Pow(1 / (1 + (AI.BorrowingRate / 100) / 12), i - 1);
                            BRD.PV2 = Math.Pow(1 / (1 + (AI.BorrowingRate / 100) / 12), i);
                            BRD.AgreementSLNo = AgreementSLNo;
                            lstBRDetails.Add(BRD);
                        }
                        db.BorrowingRateDetails.AddRange(lstBRDetails);
                        db.SaveChanges();
                        //==
                        double PaymentAmount = 0;
                        double PV = 0; //Present value
                        double OBLeaseLiability = 0;
                        double CBLeaseLiability = 0;
                        double CBROU = 0;
                        double CBAdvance = 0;
                        double Depreciation = 0;
                        double AdvanceDepreciation = 0;
                        double Rate = AI.BorrowingRate / 100;
                        //==IFRS Schedule finding the OBLeaseLiability by Current Month or Following Month
                        //==Current Month (PV1) Calculation Method
                        if (AI.CalculationMethod == "Current Month")
                        {
                            for (int i = 1; i <= IFRSPeriod; i++)
                            {
                                PaymentAmount = lstContractSchedule.Where(x => x.MonthNo == IFRS_Start_MonthNo).Select(x => x.TotalRentAmount - x.AdvanceAdjustmentAmount - x.VATAmount).SingleOrDefault();
                                PV = lstBRDetails.Where(x => x.MonthNo == i).Select(x => x.PV1).SingleOrDefault();
                                OBLeaseLiability = OBLeaseLiability + (PaymentAmount * PV);
                                IFRS_Start_MonthNo = IFRS_Start_MonthNo + 1;
                            }
                        }
                        //==Following Month (PV2) Calculation Method
                        else if (AI.CalculationMethod == "Following Month")
                        {
                            for (int i = 1; i <= IFRSPeriod; i++)
                            {
                                PaymentAmount = lstContractSchedule.Where(x => x.MonthNo == IFRS_Start_MonthNo).Select(x => x.TotalRentAmount - x.AdvanceAdjustmentAmount - x.VATAmount).SingleOrDefault();
                                PV = lstBRDetails.Where(x => x.MonthNo == i).Select(x => x.PV2).SingleOrDefault();
                                OBLeaseLiability = OBLeaseLiability + (PaymentAmount * PV);
                                IFRS_Start_MonthNo = IFRS_Start_MonthNo + 1;
                            }
                        }
                        IFRS_Start_MonthNo = 1;
                        if (AI.AgreementStartDate != IFRSEffectiveDate)
                        {
                            IFRS_Start_MonthNo = ((IFRSEffectiveDate.Year - AI.AgreementStartDate.Year) * 12 + IFRSEffectiveDate.Month - AI.AgreementStartDate.Month) + 1;
                        }
                        //===IFRS Schedule
                        for (int i = 1; i <= IFRSPeriod; i++)
                        {
                            var ItemContractShecule = lstContractSchedule.Where(x => x.MonthNo == IFRS_Start_MonthNo).SingleOrDefault();
                            IFRS = new RMS.Models.IFRSSchedule();
                            if (i != 1)
                            {
                                ScheduleDate = ScheduleDate.AddMonths(1);
                            }
                            if (i == 1)
                            {
                                //==IFRS Schedule
                                IFRS.ScheduleDate = ScheduleDate;
                                IFRS.AgreementSLNo = AI.AgreementSLNo;
                                IFRS.MonthNo = i;
                                IFRS.Year = IFRS.ScheduleDate.Year;
                                IFRS.Month = IFRS.ScheduleDate.ToString("MMMM");
                                IFRS.ReviewNo = ItemContractShecule.ReviewNo;
                                IFRS.CostPerUnit = ItemContractShecule.CostPerUnit;
                                IFRS.AdvanceAdjustmentAmount = ItemContractShecule.AdvanceAdjustmentAmount;
                                IFRS.PaymentAmount = ItemContractShecule.TotalRentAmount - (ItemContractShecule.AdvanceAdjustmentAmount + ItemContractShecule.VATAmount);
                                //Current Month (PV1) Calculation Method
                                if (AI.CalculationMethod == "Current Month")
                                {
                                    IFRS.DiscountFactor = lstBRDetails.Where(x => x.MonthNo == IFRS.MonthNo).Select(x => x.PV1).SingleOrDefault();
                                }
                                //Following Month (PV2) Calculation Method
                                else if (AI.CalculationMethod == "Following Month")
                                {
                                    IFRS.DiscountFactor = lstBRDetails.Where(x => x.MonthNo == IFRS.MonthNo).Select(x => x.PV2).SingleOrDefault();
                                }
                                IFRS.PresentValue = IFRS.PaymentAmount * IFRS.DiscountFactor;
                                IFRS.OBLeaseLiability = OBLeaseLiability;
                                IFRS.LeasePayment = IFRS.PaymentAmount;
                                //Current Month Interest Expense = 0 only for the 1st Month (Month No = 1)
                                if (AI.CalculationMethod == "Current Month")
                                {
                                    IFRS.InteresetExpense = 0;
                                }
                                else
                                {
                                    IFRS.InteresetExpense = IFRS.OBLeaseLiability * Rate / 12;
                                }
                                IFRS.SettlementofLeaseLiabilities = IFRS.LeasePayment - IFRS.InteresetExpense;
                                IFRS.CBLeaseLiability = IFRS.OBLeaseLiability - IFRS.SettlementofLeaseLiabilities;
                                CBLeaseLiability = IFRS.CBLeaseLiability;

                                IFRS.OBROU = IFRS.OBLeaseLiability;
                                IFRS.Depreciation = IFRS.OBROU / IFRSPeriod;
                                Depreciation = IFRS.Depreciation;
                                IFRS.CBROU = IFRS.OBROU - IFRS.Depreciation;
                                CBROU = IFRS.CBROU;

                                //== Advance
                                IFRS.OBAdvance = AI.AdvanceAmount;
                                IFRS.AdvanceDepreciation = IFRS.OBAdvance / IFRSPeriod;
                                AdvanceDepreciation = IFRS.AdvanceDepreciation;
                                IFRS.CBAdvance = IFRS.OBAdvance - IFRS.AdvanceDepreciation;
                                CBAdvance = IFRS.CBAdvance;

                                IFRS.UserSLNo = AI.UserSLNo;
                                IFRS.EntryDate = DateTime.Now;
                                db.IFRSSchedules.Add(IFRS);
                                db.SaveChanges();
                                IFRS_Start_MonthNo = IFRS_Start_MonthNo + 1;
                            }
                            else
                            {
                                //==IFRS Schedule
                                IFRS.ScheduleDate = ScheduleDate;
                                IFRS.AgreementSLNo = AI.AgreementSLNo;
                                IFRS.MonthNo = i;
                                IFRS.Year = IFRS.ScheduleDate.Year;
                                IFRS.Month = IFRS.ScheduleDate.ToString("MMMM");
                                IFRS.ReviewNo = ItemContractShecule.ReviewNo;
                                IFRS.CostPerUnit = ItemContractShecule.CostPerUnit;
                                IFRS.AdvanceAdjustmentAmount = ItemContractShecule.AdvanceAdjustmentAmount;
                                IFRS.PaymentAmount = ItemContractShecule.TotalRentAmount - (ItemContractShecule.AdvanceAdjustmentAmount + ItemContractShecule.VATAmount);
                                //Current Month (PV1) Calculation Method
                                if (AI.CalculationMethod == "Current Month")
                                {
                                    IFRS.DiscountFactor = lstBRDetails.Where(x => x.MonthNo == IFRS.MonthNo).Select(x => x.PV1).SingleOrDefault();
                                }
                                //Following Month (PV2) Calculation Method
                                else if (AI.CalculationMethod == "Following Month")
                                {
                                    IFRS.DiscountFactor = lstBRDetails.Where(x => x.MonthNo == IFRS.MonthNo).Select(x => x.PV2).SingleOrDefault();
                                }
                                IFRS.PresentValue = IFRS.PaymentAmount * IFRS.DiscountFactor;
                                IFRS.OBLeaseLiability = CBLeaseLiability;
                                IFRS.LeasePayment = IFRS.PaymentAmount;
                                IFRS.InteresetExpense = IFRS.OBLeaseLiability * Rate / 12;
                                IFRS.SettlementofLeaseLiabilities = IFRS.LeasePayment - IFRS.InteresetExpense;
                                IFRS.CBLeaseLiability = IFRS.OBLeaseLiability - IFRS.SettlementofLeaseLiabilities;
                                CBLeaseLiability = IFRS.CBLeaseLiability;

                                IFRS.OBROU = CBROU;
                                IFRS.Depreciation = Depreciation;
                                Depreciation = IFRS.Depreciation;
                                IFRS.CBROU = IFRS.OBROU - IFRS.Depreciation;
                                CBROU = IFRS.CBROU;

                                //== Advance
                                IFRS.OBAdvance = CBAdvance;
                                IFRS.AdvanceDepreciation = AdvanceDepreciation;
                                AdvanceDepreciation = IFRS.AdvanceDepreciation;
                                IFRS.CBAdvance = IFRS.OBAdvance - IFRS.AdvanceDepreciation;
                                CBAdvance = IFRS.CBAdvance;

                                IFRS.UserSLNo = AI.UserSLNo;
                                IFRS.EntryDate = DateTime.Now;
                                db.IFRSSchedules.Add(IFRS);
                                db.SaveChanges();
                                IFRS_Start_MonthNo = IFRS_Start_MonthNo + 1;
                            }
                        }
                        //==
                    }
                    //==End IFRS Schedule
                    AlertMsg = "The modified agreement: " + AI.AliasCode + " " + AI.AgreementName + " has been activated.";
                    return Json(new { CheckStatus = true, AliasCode = AI.AliasCode, AgreementName = AI.AgreementName }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectUtilityAPLogDetails(int LogID)
        {
            TempData.Remove("LogID");
            TempData.Add("LogID", LogID);
            return RedirectToAction("UtilityAPLogDetails");
        }

        [HttpGet]
        public ActionResult UtilityAPLogDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strLogID = TempData["LogID"];
                    if (strLogID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int LogID = Convert.ToInt32(strLogID);
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityAPPostLog";
                    IList<RMS.Models.UtilityAPExecuteLogDTO> lstLog = new List<RMS.Models.UtilityAPExecuteLogDTO>();
                    var query = from UPL in db.UtilityAPExecuteLogs
                                join AI in db.AgreementInfos on UPL.AgreementSLNo equals AI.AgreementSLNo
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                where UPL.LogID == LogID
                                orderby UPL.LogID ascending
                                select new
                                {
                                    UPL.LogID,
                                    UPL.LogName,
                                    UPL.LogDate,
                                    UPL.Year,
                                    UPL.Month,
                                    UPL.EntryBy,
                                    UPL.EntryDate,
                                    AI.AgreementSLNo,
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    PT.PremiseTypeSLNo,
                                    PT.PremiseTypeCode,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                };
                    lstLog = query.AsEnumerable().Select(x => new RMS.Models.UtilityAPExecuteLogDTO
                    {
                        LogID = x.LogID,
                        LogName = x.LogName,
                        LogDate = x.LogDate.ToString("dd/MM/yyyy"),
                        Year = x.Year,
                        Month = x.Month,
                        EntryBy = x.EntryBy,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        AgreementSLNo = x.AgreementSLNo,
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseTypeCode = x.PremiseTypeCode,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                    }).ToList();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityAPLogDetails, lstLog);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult UtilityAPPostLog()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityAPPostLog";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 59 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    IList<RMS.Models.UtilityAPExecuteLogDTO> lstLog = new List<RMS.Models.UtilityAPExecuteLogDTO>();
                    var query = from UPL in db.UtilityAPExecuteLogs
                                where UPL.LogStatus == "Created"
                                orderby UPL.LogID ascending
                                select new
                                {
                                    UPL.LogID,
                                    UPL.LogName,
                                    UPL.LogDate,
                                    UPL.Year,
                                    UPL.Month,
                                    UPL.EntryBy,
                                    UPL.EntryDate,
                                };
                    lstLog = query.AsEnumerable().Select(x => new RMS.Models.UtilityAPExecuteLogDTO
                    {
                        LogID = x.LogID,
                        LogName = x.LogName,
                        LogDate = x.LogDate.ToString("dd/MM/yyyy"),
                        Year = x.Year,
                        Month = x.Month,
                        EntryBy = x.EntryBy,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                    }).ToList();
                    lstLog = lstLog.GroupBy(x => x.LogID).Select(x => x.First()).Distinct().ToList();
                    int row = 0;
                    foreach (RMS.Models.UtilityAPExecuteLogDTO item in lstLog)
                    {
                        item.RowNumber = row++;
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityAPPostLog, lstLog);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult UtilityAPPostLog(List<int> LogIDCheckList)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    int UserSLNo = db.UserInfos.Where(x => x.UserID == LoginUserID).Select(x => x.UserSLNo).SingleOrDefault();
                    DebitCredit DebitCredit = new DebitCredit();
                    DTOBasic dtoBasic = new DTOBasic();
                    List<RMS.Models.UtilitySchedule> lstUtilitySchedule = new List<RMS.Models.UtilitySchedule>();
                    List<RMS.Models.CostCenterInfo> lstCC = new List<RMS.Models.CostCenterInfo>();
                    RMS.Models.UtilityAPJournalInfo ji = new RMS.Models.UtilityAPJournalInfo();
                    //==All Log Loop - separate posting id for each log
                    string PostingID;
                    double Max;
                    foreach (int LogID in LogIDCheckList)
                    {
                        //==Log wise Journal Posting ID
                        Max = Convert.ToDouble(db.UtilityAPJournalInfos.Max(x => x.PostingID));
                        if (Max == 0)
                        {
                            PostingID = "50001";
                        }
                        else
                        {
                            PostingID = (Max + 1).ToString();
                        }
                        //==Update UtilityAPExecuteLog table LogID wise LogStatus Created to Posted
                        var lstUPLLog = db.UtilityAPExecuteLogs.Where(x => x.LogID == LogID).ToList();
                        lstUPLLog.ForEach(x => { x.LogStatus = "Posted"; x.ExecuteDate = DateTime.Now; x.ExecuteBy = LoginUserID; });
                        db.SaveChanges();
                        //==Each log details
                        foreach (var item in lstUPLLog)
                        {
                            //==Update IsLog to Posted UtilitySchedule table AgreementSLNo wise
                            var lstUpdateUtilitySchedule = db.UtilitySchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo &&
                                                    x.Year == item.Year && x.Month == item.Month && x.IsLog == true).ToList();
                            lstUpdateUtilitySchedule.ForEach(x =>
                            {
                                x.IsPosted = true; x.PostingID = PostingID;
                                x.PostingDate = DateTime.Now; x.PostingUserSLNo = UserSLNo;
                            });
                            db.SaveChanges();
                            //==UtilityAPJournalInfo for Cost Center
                            var AgreementControlData = db.AgreementInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo).Select(x => new { x.ServiceChargeGLCode, x.TaxGLCode, x.VATGLCode, x.ServiceCharge, x.OnlineTower, x.GeneratorSpace, x.CarParking }).SingleOrDefault();
                            lstCC = db.CostCenterInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo).ToList();
                            foreach (RMS.Models.CostCenterInfo CC in lstCC.OrderBy(x => x.CCSLNo))
                            {
                                //==Debit Journal
                                ji = new RMS.Models.UtilityAPJournalInfo();
                                ji.PostingID = PostingID;
                                ji.PostingDate = DateTime.Now;
                                ji.AgreementSLNo = item.AgreementSLNo;
                                ji.Year = item.Year;
                                ji.Month = item.Month;
                                ji.GLCode = AgreementControlData.ServiceChargeGLCode;
                                ji.GLName = "Utility GL";
                                ji.DrCrID = DebitCredit.Debit;
                                ji.Amount = ((AgreementControlData.ServiceCharge + AgreementControlData.OnlineTower + AgreementControlData.GeneratorSpace + AgreementControlData.CarParking) * CC.CCShareAllotment) / 100;
                                ji.CCSLNo = CC.CCSLNo;
                                ji.UtilitySLNo = 0;
                                ji.Remarks = "Cost Center Utility";
                                ji.UserSLNo = UserSLNo;
                                db.UtilityAPJournalInfos.Add(ji);
                                db.SaveChanges();
                            }
                            //==UtilityAPJournalInfo for Utility Tax, VAT, Vendor
                            lstUtilitySchedule = db.UtilitySchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == item.Year && x.Month == item.Month).ToList();
                            foreach (RMS.Models.UtilitySchedule US in lstUtilitySchedule)
                            {
                                var UtilityInfo = db.UtilityInfos.Where(x => x.UtilitySLNo == US.UtilitySLNo).SingleOrDefault();
                                //==Credit Journal - Tax
                                if (UtilityInfo.TaxAmount > 0)
                                {
                                    ji = new RMS.Models.UtilityAPJournalInfo();
                                    ji.PostingID = PostingID;
                                    ji.PostingDate = DateTime.Now;
                                    ji.AgreementSLNo = item.AgreementSLNo;
                                    ji.Year = item.Year;
                                    ji.Month = item.Month;
                                    ji.GLCode = AgreementControlData.TaxGLCode;
                                    ji.GLName = "Tax GL";
                                    ji.DrCrID = DebitCredit.Credit;
                                    ji.Amount = UtilityInfo.TaxAmount;
                                    ji.CCSLNo = 0;
                                    ji.UtilitySLNo = US.UtilitySLNo;
                                    ji.Remarks = "Vendor Tax";
                                    ji.UserSLNo = UserSLNo;
                                    db.UtilityAPJournalInfos.Add(ji);
                                    db.SaveChanges();
                                }
                                //==Credit Journal - VAT
                                if (UtilityInfo.VATAmount > 0)
                                {
                                    ji = new RMS.Models.UtilityAPJournalInfo();
                                    ji.PostingID = PostingID;
                                    ji.PostingDate = DateTime.Now;
                                    ji.AgreementSLNo = item.AgreementSLNo;
                                    ji.Year = item.Year;
                                    ji.Month = item.Month;
                                    ji.GLCode = AgreementControlData.VATGLCode;
                                    ji.GLName = "VAT GL";
                                    ji.DrCrID = DebitCredit.Credit;
                                    ji.Amount = UtilityInfo.VATAmount;
                                    ji.CCSLNo = 0;
                                    ji.UtilitySLNo = US.UtilitySLNo;
                                    ji.Remarks = "Vendor VAT";
                                    ji.UserSLNo = UserSLNo;
                                    db.UtilityAPJournalInfos.Add(ji);
                                    db.SaveChanges();
                                }
                                //==Credit Journal - Utitlity Vendor
                                ji = new RMS.Models.UtilityAPJournalInfo();
                                ji.PostingID = PostingID;
                                ji.PostingDate = DateTime.Now;
                                ji.AgreementSLNo = item.AgreementSLNo;
                                ji.Year = item.Year;
                                ji.Month = item.Month;
                                ji.GLCode = UtilityInfo.UtilityVendorCode;
                                ji.GLName = UtilityInfo.UtilityLandlordName;
                                ji.DrCrID = DebitCredit.Credit;
                                ji.Amount = (UtilityInfo.ServiceChargeAmount + UtilityInfo.OnlineTowerAmount + UtilityInfo.GeneratorSpaceAmount + UtilityInfo.CarParkingAmount) - (UtilityInfo.TaxAmount + UtilityInfo.VATAmount);
                                ji.CCSLNo = 0;
                                ji.UtilitySLNo = US.UtilitySLNo;
                                ji.Remarks = "Vendor Utility";
                                ji.UserSLNo = UserSLNo;
                                db.UtilityAPJournalInfos.Add(ji);
                                db.SaveChanges();
                            }
                            //==
                        }
                    }
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult UtilityAPReport()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityAPReport";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 61 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;
                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();
                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate &&
                    x.IsBlock == false && x.IsRenewal == false && x.IsModified == false && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();


                    ViewBag.UtilityVendorList = db.UtilityInfos
                        .Select(x => new { x.UtilitySLNo, x.UtilityVendorCode, x.UtilityLandlordName })
                        //.GroupBy(y => y.VendorCode)
                        .GroupBy(y => new { y.UtilitySLNo, y.UtilityVendorCode, y.UtilityLandlordName })
                        .Select(y => new { UtilitySLNo = y.FirstOrDefault().UtilitySLNo, UtilityVendorCode = y.FirstOrDefault().UtilityVendorCode, FullName = y.FirstOrDefault().UtilityVendorCode + " - " + y.FirstOrDefault().UtilityLandlordName }).OrderBy(x => x.FullName).ToList(); ;

                    RMS.Models.CostCenterScheduleDTO DTO = new RMS.Models.CostCenterScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityAPReport, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult UtilityAPReport(RMS.Models.CostCenterScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityAPReport";
                    IList<RMS.Models.UtilityAPJournalInfoDTO> lstjs = new List<RMS.Models.UtilityAPJournalInfoDTO>();
                    int FromMonthNumber = Convert.ToDateTime("01-" + DTO.FromMonthName + "2021").Month;
                    int ToMonthNumber = Convert.ToDateTime("01-" + DTO.ToMonthName + "2021").Month;
                    if (DTO.AgreementSLNoCheckList != null)
                    {
                        var query = from ji in db.UtilityAPJournalInfos
                                    join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                    where DTO.AgreementSLNoCheckList.Contains(ji.AgreementSLNo) && ji.Year == DTO.Year &&
                                            ji.PostingDate.Month >= FromMonthNumber && ji.PostingDate.Month <= ToMonthNumber
                                    orderby ji.PostingID ascending
                                    select new
                                    {
                                        ji.PostingID,
                                        ji.PostingDate,
                                        AI.AgreementCode,
                                        AI.AliasCode,
                                        AI.AgreementName,
                                        PT.PremiseType,
                                        AI.PremiseName,
                                        ji.Year,
                                        ji.Month,
                                        U.UserID,
                                    };
                        lstjs = query.AsEnumerable().Select(x => new RMS.Models.UtilityAPJournalInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            Year = x.Year,
                            Month = x.Month,
                            UserID = x.UserID,
                        }).ToList();
                    }
                    else if (DTO.LandlordSLNoCheckList != null)
                    {
                        var query = from ji in db.UtilityAPJournalInfos
                                    join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                    where DTO.LandlordSLNoCheckList.Contains(ji.UtilitySLNo) && ji.Year == DTO.Year &&
                                            ji.PostingDate.Month >= FromMonthNumber && ji.PostingDate.Month <= ToMonthNumber
                                    orderby ji.PostingID ascending
                                    select new
                                    {
                                        ji.PostingID,
                                        ji.PostingDate,
                                        AI.AgreementCode,
                                        AI.AliasCode,
                                        AI.AgreementName,
                                        PT.PremiseType,
                                        AI.PremiseName,
                                        ji.Year,
                                        ji.Month,
                                        U.UserID,
                                    };
                        lstjs = query.AsEnumerable().Select(x => new RMS.Models.UtilityAPJournalInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            Year = x.Year,
                            Month = x.Month,
                            UserID = x.UserID,
                        }).ToList();
                    }
                    else
                    {
                        var queryAll = from ji in db.UtilityAPJournalInfos
                                       join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                       join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                       join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                       where ji.Year == DTO.Year &&
                                               ji.PostingDate.Month >= FromMonthNumber && ji.PostingDate.Month <= ToMonthNumber
                                       orderby ji.PostingID ascending
                                       select new
                                       {
                                           ji.PostingID,
                                           ji.PostingDate,
                                           AI.AgreementCode,
                                           AI.AliasCode,
                                           AI.AgreementName,
                                           PT.PremiseType,
                                           AI.PremiseName,
                                           ji.Year,
                                           ji.Month,
                                           U.UserID,
                                       };
                        lstjs = queryAll.AsEnumerable().Select(x => new RMS.Models.UtilityAPJournalInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            Year = x.Year,
                            Month = x.Month,
                            UserID = x.UserID,
                        }).ToList();
                    }
                    lstjs = lstjs.GroupBy(x => x.PostingID).Select(x => x.First()).Distinct().ToList();
                    ViewBag.DateRange = DTO.FromMonthName + "-" + DTO.ToMonthName + ", " + DTO.Year;
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityAPJournalReport, lstjs);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectUtilityAPJournalDetails(string PostingID)
        {
            TempData.Remove("PostingID");
            TempData.Add("PostingID", PostingID);
            return RedirectToAction("UtilityAPJournalDetails");
        }

        [HttpGet]
        public ActionResult UtilityAPJournalDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strPostingID = TempData["PostingID"];
                    if (strPostingID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    string PostingID = strPostingID.ToString();
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityAPReport";
                    IList<RMS.Models.UtilityAPJournalInfoDTO> lstUtilityAPJournalDetails = new List<RMS.Models.UtilityAPJournalInfoDTO>();
                    var query = from ji in db.UtilityAPJournalInfos
                                join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                where ji.PostingID == PostingID
                                orderby ji.UtilityAPJournalSLNo ascending
                                select new
                                {
                                    ji.UtilityAPJournalSLNo,
                                    ji.PostingID,
                                    ji.PostingDate,
                                    ji.AgreementSLNo,
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    ji.Year,
                                    ji.Month,
                                    ji.GLCode,
                                    ji.GLName,
                                    ji.DrCrID,
                                    ji.Amount,
                                    ji.CCSLNo,
                                    ji.UtilitySLNo,
                                    ji.Remarks,
                                    U.UserID,
                                };
                    lstUtilityAPJournalDetails = query.AsEnumerable().Select(x => new RMS.Models.UtilityAPJournalInfoDTO
                    {
                        UtilityAPJournalSLNo = x.UtilityAPJournalSLNo,
                        PostingID = x.PostingID,
                        PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                        AgreementSLNo = x.AgreementSLNo,
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        Year = x.Year,
                        Month = x.Month,
                        GLCode = x.GLCode,
                        GLName = x.GLName,
                        DrCrID = x.DrCrID,
                        Amount = x.Amount,
                        CCSLNo = x.CCSLNo,
                        UtilitySLNo = x.UtilitySLNo,
                        Remarks = x.Remarks,
                        UserID = x.UserID,
                    }).ToList();
                    foreach (RMS.Models.UtilityAPJournalInfoDTO item in lstUtilityAPJournalDetails)
                    {
                        var CCInfo = db.CostCenterInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.CCSLNo == item.CCSLNo).SingleOrDefault();
                        var UtilityInfo = db.UtilityInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.UtilitySLNo == item.UtilitySLNo).Select(x => new { x.UtilityVendorCode, x.UtilityLandlordName }).SingleOrDefault();
                        if (CCInfo != null)
                        {
                            item.CCCode = CCInfo.CCCode;
                            item.CCName = CCInfo.CCName;
                            item.SOLCode = CCInfo.SOLCode;
                            item.SOLName = CCInfo.SOLName;
                        }
                        if (UtilityInfo != null)
                        {
                            item.VendorCode = UtilityInfo.UtilityVendorCode;
                            item.LandlordName = UtilityInfo.UtilityLandlordName;
                        }
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityAPJournalDetails, lstUtilityAPJournalDetails);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RentVendorPJPostLog()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentVendorPJPostLog";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 72 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    IList<RMS.Models.RentVendorPJExecuteLogDTO> lstLog = new List<RMS.Models.RentVendorPJExecuteLogDTO>();
                    var query = from RPL in db.RentVendorPJExecuteLogs
                                where RPL.LogStatus == "Created"
                                orderby RPL.LogID ascending
                                select new
                                {
                                    RPL.LogID,
                                    RPL.LogName,
                                    RPL.LogDate,
                                    RPL.Year,
                                    RPL.Month,
                                    RPL.EntryBy,
                                    RPL.EntryDate,
                                    RPL.LogYear,
                                    RPL.LogMonth,
                                };
                    lstLog = query.AsEnumerable().Select(x => new RMS.Models.RentVendorPJExecuteLogDTO
                    {
                        LogID = x.LogID,
                        LogName = x.LogName,
                        LogDate = x.LogDate.ToString("dd/MM/yyyy"),
                        Year = x.Year,
                        Month = x.Month,
                        EntryBy = x.EntryBy,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        LogYear = x.LogYear,
                        LogMonth = x.LogMonth,
                    }).ToList();
                    lstLog = lstLog.GroupBy(x => x.LogID).Select(x => x.First()).Distinct().ToList();
                    int row = 0;
                    foreach (RMS.Models.RentVendorPJExecuteLogDTO item in lstLog)
                    {
                        item.RowNumber = row++;
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentVendorPJPostLog, lstLog);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult RentVendorPJPostLog(List<int> LogIDCheckList)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    int UserSLNo = db.UserInfos.Where(x => x.UserID == LoginUserID).Select(x => x.UserSLNo).SingleOrDefault();
                    DebitCredit DebitCredit = new DebitCredit();
                    DTOBasic dtoBasic = new DTOBasic();
                    RMS.Models.RentVendorPJInfo ji = new RMS.Models.RentVendorPJInfo();
                    RMS.Models.RentGovtPJInfo jiGovt = new RMS.Models.RentGovtPJInfo();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    string PostingID;
                    string GovtPostingID;
                    double Max;
                    foreach (int LogID in LogIDCheckList)
                    {
                        //==Delete PreviewRentVendorPJInfo
                        db.PreviewRentVendorPJInfos.RemoveRange(db.PreviewRentVendorPJInfos.Where(x => x.PostingID == LogID.ToString()));
                        db.SaveChanges();
                        //==Delete PreviewRentGovtPJInfo
                        db.PreviewRentGovtPJInfos.RemoveRange(db.PreviewRentGovtPJInfos.Where(x => x.PostingID == LogID.ToString()));
                        db.SaveChanges();
                        //==Log wise Rent Vendor Payment Journal Posting ID
                        Max = Convert.ToDouble(db.RentVendorPJInfos.Max(x => x.PostingID));
                        if (Max == 0)
                        {
                            PostingID = "70001";
                        }
                        else
                        {
                            PostingID = (Max + 1).ToString();
                        }
                        //==Log wise Rent Vendor Govt. Payment Journal Posting ID
                        Max = Convert.ToDouble(db.RentGovtPJInfos.Max(x => x.PostingID));
                        if (Max == 0)
                        {
                            GovtPostingID = "80001";
                        }
                        else
                        {
                            GovtPostingID = (Max + 1).ToString();
                        }
                        //==Update RentVendorPJExecuteLogs table LogID wise LogStatus Created to Posted
                        var lstRPLLog = db.RentVendorPJExecuteLogs.Where(x => x.LogID == LogID).ToList();
                        lstRPLLog.ForEach(x => { x.LogStatus = "Posted"; x.ExecuteDate = DateTime.Now; x.ExecuteBy = LoginUserID; });
                        db.SaveChanges();
                        //==Each log details
                        foreach (var item in lstRPLLog)
                        {
                            #region "Update Post status"
                            //==Contract Schedule Update Post status
                            var ContractSchedule = db.ContractSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == item.Year && x.Month == item.Month).SingleOrDefault();
                            ContractSchedule.IsPJPosted = true;
                            ContractSchedule.PJPostingID = PostingID;
                            ContractSchedule.PJPostingDate = DateTime.Now;
                            ContractSchedule.PJPostingUserSLNo = UserSLNo;
                            db.Entry(ContractSchedule).State = EntityState.Modified;
                            db.SaveChanges();
                            //==Landlord Schedule Update Post status
                            List<RMS.Models.LandlordSchedule> lstLSchedule = db.LandlordSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == item.Year && x.Month == item.Month).ToList();
                            lstLSchedule.ForEach(x =>
                            {
                                x.IsPJPosted = true;
                                x.PJPostingID = PostingID;
                                x.PJPostingDate = DateTime.Now;
                                x.PJPostingUserSLNo = UserSLNo;
                            });
                            db.SaveChanges();
                            //==Cost Center Schedule Update Post status
                            List<RMS.Models.CostCenterSchedule> lstCSchedule = db.CostCenterSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.Year == item.Year && x.Month == item.Month).ToList();
                            lstCSchedule.ForEach(x =>
                            {
                                x.IsPJPosted = true;
                                x.PJPostingID = PostingID;
                                x.PJPostingDate = DateTime.Now;
                                x.PJPostingUserSLNo = UserSLNo;
                            });
                            db.SaveChanges();
                            #endregion
                            var AgreementControlData = db.AgreementInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo).Select(x => new { x.CashGLCode, x.BankGLCode, x.AdvanceAdjustmentGLCode, x.RentGLCode, x.TaxGLCode, x.VATGLCode, x.RTGSGL, x.EFTNGL, x.PayOrderGL, x.IBBPaymentGL, x.CityBrokerageGL, x.CityCapitalGL, x.OthersGL, x.CalculationMethod }).SingleOrDefault();
                            var LandlordInfo = db.LandlordInfos.Where(x => x.LandlordSLNo == item.LandlordSLNo).Select(x => new { x.VendorCode, x.LandlordName, x.ModeOfPayment, x.ACNo }).SingleOrDefault();
                            var LandlordSchedule = db.LandlordSchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.LandlordSLNo == item.LandlordSLNo && x.Year == item.Year && x.Month == item.Month).Select(x => new { x.NetRentAmount, x.AdvanceAdjustmentAmount, x.TaxAmount, x.VATAmount }).SingleOrDefault();
                            #region "==Rent Pay to Vendor, Journal Details"
                            //==Pay to Vendor Debit LL Rent, Landlord Wise
                            ji = new RMS.Models.RentVendorPJInfo();
                            ji.PostingID = PostingID;
                            ji.PostingDate = DateTime.Now;
                            ji.AgreementSLNo = item.AgreementSLNo;
                            ji.Year = item.Year;
                            ji.Month = item.Month;
                            ji.GLCode = LandlordInfo.VendorCode;
                            ji.GLName = LandlordInfo.LandlordName;
                            ji.DrCrID = DebitCredit.Debit;
                            ji.Amount = (LandlordSchedule.NetRentAmount + LandlordSchedule.AdvanceAdjustmentAmount) - (LandlordSchedule.TaxAmount + LandlordSchedule.VATAmount);
                            ji.LandlordSLNo = item.LandlordSLNo;
                            ji.Remarks = "Rent " + item.Month + ", " + item.Year;
                            ji.UserSLNo = UserSLNo;
                            ji.LogYear = item.LogYear;
                            ji.LogMonth = item.LogMonth;
                            db.RentVendorPJInfos.Add(ji);
                            db.SaveChanges();
                            //==Pay to Vendor Credit LL Advance Adjustment, Landlord Wise 
                            if (LandlordSchedule.AdvanceAdjustmentAmount > 0)
                            {
                                ji = new RMS.Models.RentVendorPJInfo();
                                ji.PostingID = PostingID;
                                ji.PostingDate = DateTime.Now;
                                ji.AgreementSLNo = item.AgreementSLNo;
                                ji.Year = item.Year;
                                ji.Month = item.Month;
                                ji.GLCode = AgreementControlData.AdvanceAdjustmentGLCode;
                                ji.GLName = "Adv Adj GL";
                                ji.DrCrID = DebitCredit.Credit;
                                ji.Amount = LandlordSchedule.AdvanceAdjustmentAmount;
                                ji.LandlordSLNo = item.LandlordSLNo;
                                ji.Remarks = "Advance Adjustment " + item.Month + ", " + item.Year;
                                ji.UserSLNo = UserSLNo;
                                ji.LogYear = item.LogYear;
                                ji.LogMonth = item.LogMonth;
                                db.RentVendorPJInfos.Add(ji);
                                db.SaveChanges();
                            }
                            //==Pay to Vendor LL Mode Of Paymet Wise, Landlord Wise
                            ji = new RMS.Models.RentVendorPJInfo();
                            ji.PostingID = PostingID;
                            ji.PostingDate = DateTime.Now;
                            ji.AgreementSLNo = item.AgreementSLNo;
                            ji.Year = item.Year;
                            ji.Month = item.Month;
                            //==xx
                            if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { ji.GLCode = LandlordInfo.ACNo; ji.GLName = "A/C Transfer"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.RTGS) { ji.GLCode = AgreementControlData.RTGSGL; ji.GLName = "RTGS GL"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.EFTN) { ji.GLCode = AgreementControlData.EFTNGL; ji.GLName = "EFTN GL"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { ji.GLCode = AgreementControlData.PayOrderGL; ji.GLName = "Pay Order GL"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Cash) { ji.GLCode = AgreementControlData.CashGLCode; ji.GLName = "Cash GL"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { ji.GLCode = AgreementControlData.IBBPaymentGL; ji.GLName = "IBB Payment GL"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { ji.GLCode = AgreementControlData.CityBrokerageGL; ji.GLName = "City Brokerage GL"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { ji.GLCode = AgreementControlData.CityCapitalGL; ji.GLName = "City Capital GL"; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Others) { ji.GLCode = AgreementControlData.OthersGL; ji.GLName = "Others GL"; }
                            //==xx
                            ji.DrCrID = DebitCredit.Credit;
                            ji.Amount = LandlordSchedule.NetRentAmount - (LandlordSchedule.TaxAmount + LandlordSchedule.VATAmount);
                            ji.LandlordSLNo = item.LandlordSLNo;
                            ji.Remarks = "Rent " + item.Month + ", " + item.Year;
                            ji.UserSLNo = UserSLNo;
                            ji.LogYear = item.LogYear;
                            ji.LogMonth = item.LogMonth;
                            db.RentVendorPJInfos.Add(ji);
                            db.SaveChanges();
                            #endregion
                            #region "==Rent Pay to Govt, Journal Details"
                            //==Pay to Govt Debit Tax, Landlord Wise
                            if (LandlordSchedule.TaxAmount > 0)
                            {
                                jiGovt = new RMS.Models.RentGovtPJInfo();
                                jiGovt.PostingID = GovtPostingID;
                                jiGovt.PostingDate = DateTime.Now;
                                jiGovt.AgreementSLNo = item.AgreementSLNo;
                                jiGovt.Year = item.Year;
                                jiGovt.Month = item.Month;
                                jiGovt.GLCode = AgreementControlData.TaxGLCode;
                                jiGovt.GLName = "Tax GL";
                                jiGovt.DrCrID = DebitCredit.Debit;
                                jiGovt.Amount = LandlordSchedule.TaxAmount;
                                jiGovt.LandlordSLNo = item.LandlordSLNo;
                                jiGovt.Remarks = "Tax " + item.Month + ", " + item.Year;
                                jiGovt.UserSLNo = UserSLNo;
                                jiGovt.LogYear = item.LogYear;
                                jiGovt.LogMonth = item.LogMonth;
                                db.RentGovtPJInfos.Add(jiGovt);
                                db.SaveChanges();
                            }
                            //==Pay to Govt Debit VAT, Landlord Wise
                            if (LandlordSchedule.VATAmount > 0)
                            {
                                jiGovt = new RMS.Models.RentGovtPJInfo();
                                jiGovt.PostingID = GovtPostingID;
                                jiGovt.PostingDate = DateTime.Now;
                                jiGovt.AgreementSLNo = item.AgreementSLNo;
                                jiGovt.Year = item.Year;
                                jiGovt.Month = item.Month;
                                jiGovt.GLCode = AgreementControlData.VATGLCode;
                                jiGovt.GLName = "VAT GL";
                                jiGovt.DrCrID = DebitCredit.Debit;
                                jiGovt.Amount = LandlordSchedule.VATAmount;
                                jiGovt.LandlordSLNo = item.LandlordSLNo;
                                jiGovt.Remarks = "VAT " + item.Month + ", " + item.Year;
                                jiGovt.UserSLNo = UserSLNo;
                                jiGovt.LogYear = item.LogYear;
                                jiGovt.LogMonth = item.LogMonth;
                                db.RentGovtPJInfos.Add(jiGovt);
                                db.SaveChanges();
                            }
                            //==Pay to Govt Credit Cash/Bank, Landlord Wise
                            if (LandlordSchedule.TaxAmount + LandlordSchedule.VATAmount > 0)
                            {
                                jiGovt = new RMS.Models.RentGovtPJInfo();
                                jiGovt.PostingID = GovtPostingID;
                                jiGovt.PostingDate = DateTime.Now;
                                jiGovt.AgreementSLNo = item.AgreementSLNo;
                                jiGovt.Year = item.Year;
                                jiGovt.Month = item.Month;
                                //==xx
                                if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { jiGovt.GLCode = LandlordInfo.ACNo; jiGovt.GLName = "A/C Transfer"; }
                                else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.RTGS) { jiGovt.GLCode = AgreementControlData.RTGSGL; jiGovt.GLName = "RTGS GL"; }
                                else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.EFTN) { jiGovt.GLCode = AgreementControlData.EFTNGL; jiGovt.GLName = "EFTN GL"; }
                                else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { jiGovt.GLCode = AgreementControlData.PayOrderGL; jiGovt.GLName = "Pay Order GL"; }
                                else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Cash) { jiGovt.GLCode = AgreementControlData.CashGLCode; jiGovt.GLName = "Cash GL"; }
                                else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { jiGovt.GLCode = AgreementControlData.IBBPaymentGL; jiGovt.GLName = "IBB Payment GL"; }
                                else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { jiGovt.GLCode = AgreementControlData.CityBrokerageGL; jiGovt.GLName = "City Brokerage GL"; }
                                else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { jiGovt.GLCode = AgreementControlData.CityCapitalGL; jiGovt.GLName = "City Capital GL"; }
                                else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Others) { jiGovt.GLCode = AgreementControlData.OthersGL; jiGovt.GLName = "Others GL"; }
                                //==xx
                                jiGovt.DrCrID = DebitCredit.Credit;
                                jiGovt.Amount = LandlordSchedule.TaxAmount + LandlordSchedule.VATAmount;
                                jiGovt.LandlordSLNo = item.LandlordSLNo;
                                jiGovt.Remarks = item.Month + ", " + item.Year;
                                jiGovt.UserSLNo = UserSLNo;
                                jiGovt.LogYear = item.LogYear;
                                jiGovt.LogMonth = item.LogMonth;
                                db.RentGovtPJInfos.Add(jiGovt);
                                db.SaveChanges();
                            }
                            #endregion
                        }
                    }
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectRentVendorPJLogDetails(int LogID)
        {
            TempData.Remove("LogID");
            TempData.Add("LogID", LogID);
            return RedirectToAction("RentVendorPJLogDetails");
        }

        [HttpGet]
        public ActionResult RentVendorPJLogDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strLogID = TempData["LogID"];
                    if (strLogID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int LogID = Convert.ToInt32(strLogID);
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentVendorPJPostLog";
                    IList<RMS.Models.RentVendorPJExecuteLogDTO> lstLog = new List<RMS.Models.RentVendorPJExecuteLogDTO>();
                    var query = from RPL in db.RentVendorPJExecuteLogs
                                join AI in db.AgreementInfos on RPL.AgreementSLNo equals AI.AgreementSLNo
                                join PT in db.PremiseTypeInfos on RPL.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                where RPL.LogID == LogID
                                orderby RPL.LogID ascending, AI.AgreementName ascending, AI.CalculationMethod ascending
                                select new
                                {
                                    RPL.LogID,
                                    RPL.LogName,
                                    RPL.LogDate,
                                    RPL.Year,
                                    RPL.Month,
                                    RPL.EntryBy,
                                    RPL.EntryDate,
                                    AI.AgreementSLNo,
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.PremiseName,
                                    AI.CalculationMethod,
                                    PT.PremiseTypeSLNo,
                                    PT.PremiseTypeCode,
                                    PT.PremiseType,
                                    RPL.LandlordSLNo,
                                };
                    lstLog = query.AsEnumerable().Select(x => new RMS.Models.RentVendorPJExecuteLogDTO
                    {
                        LogID = x.LogID,
                        LogName = x.LogName,
                        LogDate = x.LogDate.ToString("dd/MM/yyyy"),
                        Year = x.Year,
                        Month = x.Month,
                        EntryBy = x.EntryBy,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        AgreementSLNo = x.AgreementSLNo,
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        CalculationMethod = x.CalculationMethod,
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseTypeCode = x.PremiseTypeCode,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        LandlordSLNo = x.LandlordSLNo,
                    }).ToList();
                    lstLog = lstLog.GroupBy(x => x.AgreementSLNo).Select(x => x.First()).Distinct().ToList();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentVendorPJLogDetails, lstLog);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RentVendorPJReport()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentVendorPJReport";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 74 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;

                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic dtoBasic = new DTOBasic();

                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == dtoBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();

                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.IsHoldBlockPayment == false && x.AgreementStatus == AgreementStatus.Activate &&
                     x.IsRenewal == false && x.IsModified == false && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();


                    //ViewBag.LandlordList = db.LandlordInfos.Where(x => x.IsHoldBlockPayment == false)
                    //    .Select(x => new { x.LandlordSLNo, x.VendorCode, x.LandlordName })
                    //    //.GroupBy(y => y.VendorCode)
                    //    .GroupBy(y => new { y.LandlordSLNo, y.VendorCode, y.LandlordName })
                    //    .Select(y => new { VendorSLNo = y.FirstOrDefault().LandlordSLNo, VendorCode = y.FirstOrDefault().VendorCode, FullName = y.FirstOrDefault().VendorCode + " - " + y.FirstOrDefault().LandlordName }).OrderBy(x => x.FullName).ToList();

                    RMS.Models.LandlordScheduleDTO DTO = new RMS.Models.LandlordScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentVendorPJReport, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RentTemplate()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentTemplate";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 94 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;

                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic dtoBasic = new DTOBasic();

                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == dtoBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();

                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.IsHoldBlockPayment == false && x.AgreementStatus == AgreementStatus.Activate &&
                     x.IsRenewal == false && x.IsModified == false && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();


                    //ViewBag.LandlordList = db.LandlordInfos.Where(x => x.IsHoldBlockPayment == false)
                    //    .Select(x => new { x.LandlordSLNo, x.VendorCode, x.LandlordName })
                    //    //.GroupBy(y => y.VendorCode)
                    //    .GroupBy(y => new { y.LandlordSLNo, y.VendorCode, y.LandlordName })
                    //    .Select(y => new { VendorSLNo = y.FirstOrDefault().LandlordSLNo, VendorCode = y.FirstOrDefault().VendorCode, FullName = y.FirstOrDefault().VendorCode + " - " + y.FirstOrDefault().LandlordName }).OrderBy(x => x.FullName).ToList();

                    RMS.Models.LandlordScheduleDTO DTO = new RMS.Models.LandlordScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentTemplate, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult RentTemplate(RMS.Models.LandlordScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentTemplate";
                    IList<RMS.Models.RentVendorPJExecuteLogDTO> lstLog = new List<RMS.Models.RentVendorPJExecuteLogDTO>();
                    if (DTO.AgreementSLNoCheckList != null)
                    {
                        //==AgreementSLNo Wise
                        var query = from RL in db.RentVendorPJExecuteLogs
                                    join AI in db.AgreementInfos on RL.AgreementSLNo equals AI.AgreementSLNo
                                    join PT in db.PremiseTypeInfos on RL.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    where DTO.AgreementSLNoCheckList.Contains(RL.AgreementSLNo) && RL.LogStatus == "Posted" &&
                                          RL.LogYear == DTO.Year && RL.LogMonth == DTO.FromMonthName
                                    orderby RL.AgreementSLNo ascending
                                    select new
                                    {
                                        RL.AgreementSLNo,
                                        RL.Year,
                                        RL.Month,
                                        AI.PremisesTypeforAccounts,
                                        AI.PaymentMethod,
                                        AI.PremiseName,
                                        AI.RentGLCode,
                                        AI.VATPercentage,
                                        AI.VatType,
                                        AI.WithHoldingCode,
                                        AI.AdvanceAmount,
                                    };
                        lstLog = query.AsEnumerable().Select(x => new RMS.Models.RentVendorPJExecuteLogDTO
                        {
                            AgreementSLNo = x.AgreementSLNo,
                            PremisesTypeforAccounts = x.PremisesTypeforAccounts,
                            PaymentMethod = x.PaymentMethod,
                            PremiseName = x.PremiseName,
                            RentGLCode = x.RentGLCode,
                            VATPercentage = x.VATPercentage,
                            VatType = x.VatType,
                            WithHoldingCode = x.WithHoldingCode,
                            Year = x.Year,
                            Month = x.Month,
                            AdvanceAmount = x.AdvanceAmount,
                        }).ToList();
                    }
                    else if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        //==Check Current Month
                        var query = from RL in db.RentVendorPJExecuteLogs
                                    join AI in db.AgreementInfos on RL.AgreementSLNo equals AI.AgreementSLNo
                                    join PT in db.PremiseTypeInfos on RL.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    where DTO.PremiseTypeSLNoCheckList.Contains(RL.PremiseTypeSLNo) && RL.LogStatus == "Posted" &&
                                                                RL.LogYear == DTO.Year && RL.LogMonth == DTO.FromMonthName
                                    orderby RL.AgreementSLNo ascending
                                    select new
                                    {
                                        RL.AgreementSLNo,
                                        RL.Year,
                                        RL.Month,
                                        AI.PremisesTypeforAccounts,
                                        AI.PaymentMethod,
                                        AI.PremiseName,
                                        AI.RentGLCode,
                                        AI.VATPercentage,
                                        AI.VatType,
                                        AI.WithHoldingCode,
                                        AI.AdvanceAmount,
                                    };
                        lstLog = query.AsEnumerable().Select(x => new RMS.Models.RentVendorPJExecuteLogDTO
                        {
                            AgreementSLNo = x.AgreementSLNo,
                            PremisesTypeforAccounts = x.PremisesTypeforAccounts,
                            PaymentMethod = x.PaymentMethod,
                            PremiseName = x.PremiseName,
                            RentGLCode = x.RentGLCode,
                            VATPercentage = x.VATPercentage,
                            VatType = x.VatType,
                            WithHoldingCode = x.WithHoldingCode,
                            Year = x.Year,
                            Month = x.Month,
                            AdvanceAmount = x.AdvanceAmount,
                        }).ToList();
                    }
                    else
                    {
                        //==All Agreements
                        var query = from RL in db.RentVendorPJExecuteLogs
                                    join AI in db.AgreementInfos on RL.AgreementSLNo equals AI.AgreementSLNo
                                    join PT in db.PremiseTypeInfos on RL.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    where RL.LogStatus == "Posted" && RL.LogYear == DTO.Year && RL.LogMonth == DTO.FromMonthName
                                    orderby RL.AgreementSLNo ascending
                                    select new
                                    {
                                        RL.AgreementSLNo,
                                        RL.Year,
                                        RL.Month,
                                        AI.PremisesTypeforAccounts,
                                        AI.PaymentMethod,
                                        AI.PremiseName,
                                        AI.RentGLCode,
                                        AI.VATPercentage,
                                        AI.VatType,
                                        AI.WithHoldingCode,
                                        AI.AdvanceAmount,
                                    };
                        lstLog = query.AsEnumerable().Select(x => new RMS.Models.RentVendorPJExecuteLogDTO
                        {
                            AgreementSLNo = x.AgreementSLNo,
                            PremisesTypeforAccounts = x.PremisesTypeforAccounts,
                            PaymentMethod = x.PaymentMethod,
                            PremiseName = x.PremiseName,
                            RentGLCode = x.RentGLCode,
                            VATPercentage = x.VATPercentage,
                            VatType = x.VatType,
                            WithHoldingCode = x.WithHoldingCode,
                            Year = x.Year,
                            Month = x.Month,
                            AdvanceAmount = x.AdvanceAmount,
                        }).ToList();
                    }
                    lstLog = lstLog.GroupBy(x => x.AgreementSLNo).Select(x => x.First()).Distinct().ToList();
                    RMS.Models.RentTemplateDTO itemTemplate = new RMS.Models.RentTemplateDTO();
                    List<RMS.Models.RentTemplateDTO> lstTemplate = new List<RMS.Models.RentTemplateDTO>();
                    List<RMS.Models.CostCenterInfo> lstCCInfo = new List<RMS.Models.CostCenterInfo>();
                    List<RMS.Models.LandlordSchedule> lstLLS = new List<RMS.Models.LandlordSchedule>();
                    int RecordNo = 0;
                    string VATType = string.Empty;
                    foreach (var itemLog in lstLog)
                    {
                        double TotalAdvanceAdjustedAmount = db.ContractSchedules.Where(x => x.AgreementSLNo == itemLog.AgreementSLNo && x.IsPJPosted == true).Sum(x => (double?)x.AdvanceAdjustmentAmount) ?? 0;
                        //Loop Landlord Schedule Wise
                        lstLLS = db.LandlordSchedules.Where(x => x.AgreementSLNo == itemLog.AgreementSLNo && x.Year == itemLog.Year && x.Month == itemLog.Month).ToList();
                        foreach (RMS.Models.LandlordSchedule LLS in lstLLS.OrderBy(x => x.LandlordSLNo))
                        {
                            var LLInfo = db.LandlordInfos.Where(x => x.LandlordSLNo == LLS.LandlordSLNo).Select(x => new { x.VendorCode, x.LandlordName, x.RentPC }).SingleOrDefault();
                            //==Loop Cost Center Wise
                            lstCCInfo = db.CostCenterInfos.Where(x => x.AgreementSLNo == itemLog.AgreementSLNo && x.IsOld == false).ToList();
                            foreach (RMS.Models.CostCenterInfo CC in lstCCInfo.OrderBy(x => x.CCSLNo))
                            {
                                RecordNo = RecordNo + 1;
                                itemTemplate = new RMS.Models.RentTemplateDTO();
                                itemTemplate.RecordNo = RecordNo;
                                itemTemplate.InvoiceNumber = "Rent_" + itemLog.Month + "_" + itemLog.Year + "_" + LLInfo.VendorCode;
                                itemTemplate.InvoiceAmount = LLS.TotalRentAmount * LLInfo.RentPC / 100;
                                itemTemplate.InvoiceDate = "01-" + DTO.FromMonthName + "-" + DTO.Year;
                                itemTemplate.VendorCode = LLInfo.VendorCode;
                                itemTemplate.LandlordName = LLInfo.LandlordName;
                                itemTemplate.PremisesTypeforAccounts = itemLog.PremisesTypeforAccounts;
                                itemTemplate.InvoiceType = "STANDARD";
                                itemTemplate.Requestor = "3205";
                                itemTemplate.InvoiceCurrencyCode = "BDT";
                                itemTemplate.PaymentTerms = "Immediate";
                                itemTemplate.PaymentMethod = itemLog.PaymentMethod;
                                itemTemplate.GLDate = "01-" + DTO.FromMonthName + "-" + DTO.Year;
                                itemTemplate.InvoiceDescription = "Rent " + itemLog.Month + "-" + itemLog.Year + " " + itemLog.PremiseName;
                                itemTemplate.LineType = "ITEM";
                                itemTemplate.LineDescription = "Rent " + itemLog.Month + "-" + itemLog.Year + " " + itemLog.PremiseName + " " + CC.SOLName + "/" + CC.CCName;
                                itemTemplate.GLCode = itemLog.RentGLCode;
                                itemTemplate.SOLCode = CC.SOLCode;
                                if (CC.CCCode.Length >= 8)
                                {
                                    itemTemplate.CCCode1 = CC.CCCode.Substring(0, 4);
                                    itemTemplate.CCCode2 = CC.CCCode.Substring(4, 4);
                                }
                                else
                                {
                                    itemTemplate.CCCode1 = CC.CCCode;
                                    itemTemplate.CCCode2 = CC.CCCode;
                                }
                                //==VAT Type
                                if (itemLog.VatType == 1) { VATType = "INCL."; }
                                else if (itemLog.VatType == 2) { VATType = "EXCL."; }
                                else if (itemLog.VatType == 2) { VATType = "EXEM."; }
                                itemTemplate.VATTaxCode = "VAT " + itemLog.VATPercentage + "% " + VATType;
                                itemTemplate.WithHoldingCode = itemLog.WithHoldingCode;

                                itemTemplate.TotalInvoice = LLS.TotalRentAmount;

                                itemTemplate.CCAmount = ((LLS.NetRentAmount + LLS.AdvanceAdjustmentAmount) - LLS.VATAmount) * CC.CCShareAllotment / 100;

                                itemTemplate.AdvanceAdjustment = LLS.AdvanceAdjustmentAmount * CC.CCShareAllotment / 100;
                                itemTemplate.VATAmount = LLS.VATAmount * CC.CCShareAllotment / 100;
                                itemTemplate.TaxAmount = LLS.TaxAmount * CC.CCShareAllotment / 100;
                                itemTemplate.NetPayment = (LLS.NetRentAmount - (LLS.TaxAmount + LLS.VATAmount)) * CC.CCShareAllotment / 100; ;
                                itemTemplate.RemainingAdvance = itemLog.AdvanceAmount - TotalAdvanceAdjustedAmount;
                                lstTemplate.Add(itemTemplate);
                            }
                        }
                    }
                    ViewBag.DateRange = DTO.FromMonthName + ", " + DTO.Year;
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentTemplateReport, lstTemplate);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult RentVendorPJReport(RMS.Models.LandlordScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentVendorPJReport";
                    IList<RMS.Models.RentVendorPJInfoDTO> lstjs = new List<RMS.Models.RentVendorPJInfoDTO>();
                    if (DTO.AgreementSLNoCheckList != null)
                    {
                        //==Current Month
                        var queryCM = from ji in db.RentVendorPJInfos
                                      join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                      join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                      where DTO.AgreementSLNoCheckList.Contains(ji.AgreementSLNo) &&
                                              ji.LogYear == DTO.Year && ji.LogMonth == DTO.FromMonthName
                                      orderby ji.PostingID ascending
                                      select new
                                      {
                                          ji.PostingID,
                                          ji.PostingDate,
                                          ji.Year,
                                          ji.Month,
                                          U.UserID,
                                          ji.LogYear,
                                          ji.LogMonth,
                                      };
                        lstjs = queryCM.AsEnumerable().Select(x => new RMS.Models.RentVendorPJInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            Year = DTO.Year,
                            Month = DTO.FromMonthName,
                            UserID = x.UserID,
                            LogYear = x.LogYear,
                            LogMonth = x.LogMonth,
                        }).ToList();
                    }
                    else if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        //==Check Current Month
                        var queryCM = from ji in db.RentVendorPJInfos
                                      join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                      join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                      join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                      where DTO.PremiseTypeSLNoCheckList.Contains(PT.PremiseTypeSLNo) &&
                                              ji.LogYear == DTO.Year && ji.LogMonth == DTO.FromMonthName
                                      orderby ji.PostingID ascending
                                      select new
                                      {
                                          ji.PostingID,
                                          ji.PostingDate,
                                          ji.Year,
                                          ji.Month,
                                          U.UserID,
                                          ji.LogYear,
                                          ji.LogMonth,
                                      };
                        lstjs = queryCM.AsEnumerable().Select(x => new RMS.Models.RentVendorPJInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            Year = DTO.Year,
                            Month = DTO.FromMonthName,
                            UserID = x.UserID,
                            LogYear = x.LogYear,
                            LogMonth = x.LogMonth,
                        }).ToList();
                    }
                    else
                    {
                        //==Check Current Month
                        var queryCM = from ji in db.RentVendorPJInfos
                                      join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                      join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                      where ji.LogYear == DTO.Year && ji.LogMonth == DTO.FromMonthName
                                      orderby ji.PostingID ascending
                                      select new
                                      {
                                          ji.PostingID,
                                          ji.PostingDate,
                                          ji.Year,
                                          ji.Month,
                                          U.UserID,
                                          ji.LogYear,
                                          ji.LogMonth,
                                      };
                        lstjs = queryCM.AsEnumerable().Select(x => new RMS.Models.RentVendorPJInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            Year = DTO.Year,
                            Month = DTO.FromMonthName,
                            UserID = x.UserID,
                            LogYear = x.LogYear,
                            LogMonth = x.LogMonth,
                        }).ToList();
                    }
                    lstjs = lstjs.GroupBy(x => x.PostingID).Select(x => x.First()).Distinct().ToList();
                    ViewBag.DateRange = DTO.FromMonthName + ", " + DTO.Year;
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentVendorPJInfoReport, lstjs);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RentGovtPJReport()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentGovtPJReport";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 75 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;

                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic dtoBasic = new DTOBasic();

                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == dtoBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();

                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.IsHoldBlockPayment == false && x.AgreementStatus == AgreementStatus.Activate &&
                     x.IsRenewal == false && x.IsModified == false && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();


                    //ViewBag.LandlordList = db.LandlordInfos.Where(x => x.IsHoldBlockPayment == false)
                    //    .Select(x => new { x.LandlordSLNo, x.VendorCode, x.LandlordName })
                    //    //.GroupBy(y => y.VendorCode)
                    //    .GroupBy(y => new { y.LandlordSLNo, y.VendorCode, y.LandlordName })
                    //    .Select(y => new { VendorSLNo = y.FirstOrDefault().LandlordSLNo, VendorCode = y.FirstOrDefault().VendorCode, FullName = y.FirstOrDefault().VendorCode + " - " + y.FirstOrDefault().LandlordName }).OrderBy(x => x.FullName).ToList();

                    RMS.Models.LandlordScheduleDTO DTO = new RMS.Models.LandlordScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentGovtPJReport, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult RentGovtPJReport(RMS.Models.LandlordScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentGovtPJReport";
                    IList<RMS.Models.RentGovtPJInfoDTO> lstjs = new List<RMS.Models.RentGovtPJInfoDTO>();
                    int SelectedMonthNo = 0;
                    int Year = 0;
                    string Month = string.Empty;
                    if (DTO.AgreementSLNoCheckList != null)
                    {
                        //==Current Month
                        var queryCM = from ji in db.RentGovtPJInfos
                                      join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                      join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                      where DTO.AgreementSLNoCheckList.Contains(ji.AgreementSLNo) &&
                                              ji.LogYear == DTO.Year && ji.LogMonth == DTO.FromMonthName
                                      orderby ji.PostingID ascending
                                      select new
                                      {
                                          ji.PostingID,
                                          ji.PostingDate,
                                          ji.Year,
                                          ji.Month,
                                          U.UserID,
                                          ji.LogYear,
                                          ji.LogMonth,
                                      };
                        lstjs = queryCM.AsEnumerable().Select(x => new RMS.Models.RentGovtPJInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            Year = DTO.Year,
                            Month = DTO.FromMonthName,
                            UserID = x.UserID,
                            LogYear = x.LogYear,
                            LogMonth = x.LogMonth,
                        }).ToList();
                    }
                    else if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        //==Check Current Month
                        var queryCM = from ji in db.RentGovtPJInfos
                                      join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                      join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                      join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                      where DTO.PremiseTypeSLNoCheckList.Contains(PT.PremiseTypeSLNo) &&
                                              ji.LogYear == DTO.Year && ji.LogMonth == DTO.FromMonthName
                                      orderby ji.PostingID ascending
                                      select new
                                      {
                                          ji.PostingID,
                                          ji.PostingDate,
                                          ji.Year,
                                          ji.Month,
                                          U.UserID,
                                          ji.LogYear,
                                          ji.LogMonth,
                                      };
                        lstjs = queryCM.AsEnumerable().Select(x => new RMS.Models.RentGovtPJInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            Year = DTO.Year,
                            Month = DTO.FromMonthName,
                            UserID = x.UserID,
                            LogYear = x.LogYear,
                            LogMonth = x.LogMonth,
                        }).ToList();
                    }
                    else
                    {
                        //==Check Current Month
                        var queryCM = from ji in db.RentGovtPJInfos
                                      join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                      join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                      where ji.LogYear == DTO.Year && ji.LogMonth == DTO.FromMonthName
                                      orderby ji.PostingID ascending
                                      select new
                                      {
                                          ji.PostingID,
                                          ji.PostingDate,
                                          ji.Year,
                                          ji.Month,
                                          U.UserID,
                                          ji.LogYear,
                                          ji.LogMonth,
                                      };
                        lstjs = queryCM.AsEnumerable().Select(x => new RMS.Models.RentGovtPJInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            Year = DTO.Year,
                            Month = DTO.FromMonthName,
                            UserID = x.UserID,
                            LogYear = x.LogYear,
                            LogMonth = x.LogMonth,
                        }).ToList();
                    }
                    lstjs = lstjs.GroupBy(x => x.PostingID).Select(x => x.First()).Distinct().ToList();
                    ViewBag.DateRange = DTO.FromMonthName + ", " + DTO.Year;
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentGovtPJInfoReport, lstjs);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectPreviewRentVendorPJInfoDetails(string PostingID)
        {
            TempData.Remove("PostingID");
            TempData.Add("PostingID", PostingID);
            return RedirectToAction("PreviewRentVendorPJInfoDetails");
        }

        [HttpGet]
        public ActionResult PreviewRentVendorPJInfoDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strPostingID = TempData["PostingID"];
                    if (strPostingID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    string PostingID = strPostingID.ToString();
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentVendorPJPostLog";
                    IList<RMS.Models.PreviewRentVendorPJInfoDTO> lstRentVendorPJInfoDTO = new List<RMS.Models.PreviewRentVendorPJInfoDTO>();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    var query = from ji in db.PreviewRentVendorPJInfos
                                join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                where ji.PostingID == PostingID
                                orderby AI.CalculationMethod ascending, AI.AgreementSLNo ascending
                                select new
                                {
                                    ji.RentVendorPJSLNo,
                                    ji.PostingID,
                                    ji.PostingDate,
                                    ji.AgreementSLNo,
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.AgreementText,
                                    AI.RentDueDay,
                                    AI.CalculationMethod,
                                    ji.Year,
                                    ji.Month,
                                    ji.GLCode,
                                    ji.GLName,
                                    ji.DrCrID,
                                    ji.Amount,
                                    ji.LandlordSLNo,
                                    ji.Remarks,
                                    U.UserID,
                                };
                    lstRentVendorPJInfoDTO = query.AsEnumerable().Select(x => new RMS.Models.PreviewRentVendorPJInfoDTO
                    {
                        RentVendorPJSLNo = x.RentVendorPJSLNo,
                        PostingID = x.PostingID,
                        PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                        AgreementSLNo = x.AgreementSLNo,
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        AgreementText = x.AgreementText,
                        RentDueDay = x.RentDueDay,
                        CalculationMethod = x.CalculationMethod,
                        Year = x.Year,
                        Month = x.Month,
                        GLCode = x.GLCode,
                        GLName = x.GLName,
                        DrCrID = x.DrCrID,
                        Amount = x.Amount,
                        LandlordSLNo = x.LandlordSLNo,
                        Remarks = x.Remarks,
                        UserID = x.UserID,
                    }).ToList();
                    foreach (RMS.Models.PreviewRentVendorPJInfoDTO item in lstRentVendorPJInfoDTO)
                    {
                        var LandlordInfo = db.LandlordInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.LandlordSLNo == item.LandlordSLNo).Select(x => new { x.VendorCode, x.LandlordName, x.ModeOfPayment, x.ACNo, x.BankName, x.BranchName }).SingleOrDefault();
                        if (LandlordInfo != null)
                        {
                            item.VendorCode = LandlordInfo.VendorCode;
                            item.LandlordName = LandlordInfo.LandlordName;
                            if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { item.ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.RTGS) { item.ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.EFTN) { item.ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { item.ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Cash) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { item.ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Others) { item.ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                            item.ACNo = LandlordInfo.ACNo;
                            item.BankName = LandlordInfo.BankName;
                            item.BranchName = LandlordInfo.BranchName;
                        }
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.PreviewRentVendorPJInfoDetails, lstRentVendorPJInfoDTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectRentVendorPJInfoDetails(string PostingID)
        {
            TempData.Remove("PostingID");
            TempData.Add("PostingID", PostingID);
            return RedirectToAction("RentVendorPJInfoDetails");
        }

        [HttpGet]
        public ActionResult RentVendorPJInfoDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strPostingID = TempData["PostingID"];
                    if (strPostingID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    string PostingID = strPostingID.ToString();
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentVendorPJReport";
                    IList<RMS.Models.RentVendorPJInfoDTO> lstRentVendorPJInfoDTO = new List<RMS.Models.RentVendorPJInfoDTO>();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    var query = from ji in db.RentVendorPJInfos
                                join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                where ji.PostingID == PostingID
                                orderby AI.CalculationMethod ascending, AI.AgreementSLNo ascending
                                select new
                                {
                                    ji.RentVendorPJSLNo,
                                    ji.PostingID,
                                    ji.PostingDate,
                                    ji.AgreementSLNo,
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.AgreementText,
                                    AI.RentDueDay,
                                    AI.CalculationMethod,
                                    ji.Year,
                                    ji.Month,
                                    ji.GLCode,
                                    ji.GLName,
                                    ji.DrCrID,
                                    ji.Amount,
                                    ji.LandlordSLNo,
                                    ji.Remarks,
                                    U.UserID,
                                };
                    lstRentVendorPJInfoDTO = query.AsEnumerable().Select(x => new RMS.Models.RentVendorPJInfoDTO
                    {
                        RentVendorPJSLNo = x.RentVendorPJSLNo,
                        PostingID = x.PostingID,
                        PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                        AgreementSLNo = x.AgreementSLNo,
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        AgreementText = x.AgreementText,
                        RentDueDay = x.RentDueDay,
                        CalculationMethod = x.CalculationMethod,
                        Year = x.Year,
                        Month = x.Month,
                        GLCode = x.GLCode,
                        GLName = x.GLName,
                        DrCrID = x.DrCrID,
                        Amount = x.Amount,
                        LandlordSLNo = x.LandlordSLNo,
                        Remarks = x.Remarks,
                        UserID = x.UserID,
                    }).ToList();
                    foreach (RMS.Models.RentVendorPJInfoDTO item in lstRentVendorPJInfoDTO)
                    {
                        var LandlordInfo = db.LandlordInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.LandlordSLNo == item.LandlordSLNo).Select(x => new { x.VendorCode, x.LandlordName, x.ModeOfPayment, x.ACNo, x.BankName, x.BranchName }).SingleOrDefault();
                        if (LandlordInfo != null)
                        {
                            item.VendorCode = LandlordInfo.VendorCode;
                            item.LandlordName = LandlordInfo.LandlordName;
                            if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { item.ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.RTGS) { item.ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.EFTN) { item.ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { item.ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Cash) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { item.ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Others) { item.ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                            item.ACNo = LandlordInfo.ACNo;
                            item.BankName = LandlordInfo.BankName;
                            item.BranchName = LandlordInfo.BranchName;
                        }
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentVendorPJInfoDetails, lstRentVendorPJInfoDTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectPreviewRentGovtPJInfoDetails(string PostingID)
        {
            TempData.Remove("PostingID");
            TempData.Add("PostingID", PostingID);
            return RedirectToAction("PreviewRentGovtPJInfoDetails");
        }

        [HttpGet]
        public ActionResult PreviewRentGovtPJInfoDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strPostingID = TempData["PostingID"];
                    if (strPostingID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    string PostingID = strPostingID.ToString();
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentVendorPJPostLog";
                    IList<RMS.Models.PreviewRentGovtPJInfoDTO> lstRentGovtPJInfoDTO = new List<RMS.Models.PreviewRentGovtPJInfoDTO>();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    var query = from ji in db.PreviewRentGovtPJInfos
                                join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                where ji.PostingID == PostingID
                                orderby ji.RentGovtPJSLNo ascending
                                select new
                                {
                                    ji.RentGovtPJSLNo,
                                    ji.PostingID,
                                    ji.PostingDate,
                                    ji.AgreementSLNo,
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.AgreementText,
                                    AI.RentDueDay,
                                    AI.CalculationMethod,
                                    ji.Year,
                                    ji.Month,
                                    ji.GLCode,
                                    ji.GLName,
                                    ji.DrCrID,
                                    ji.Amount,
                                    ji.LandlordSLNo,
                                    ji.Remarks,
                                    U.UserID,
                                };
                    lstRentGovtPJInfoDTO = query.AsEnumerable().Select(x => new RMS.Models.PreviewRentGovtPJInfoDTO
                    {
                        RentGovtPJSLNo = x.RentGovtPJSLNo,
                        PostingID = x.PostingID,
                        PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                        AgreementSLNo = x.AgreementSLNo,
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        AgreementText = x.AgreementText,
                        RentDueDay = x.RentDueDay,
                        CalculationMethod = x.CalculationMethod,
                        Year = x.Year,
                        Month = x.Month,
                        GLCode = x.GLCode,
                        GLName = x.GLName,
                        DrCrID = x.DrCrID,
                        Amount = x.Amount,
                        LandlordSLNo = x.LandlordSLNo,
                        Remarks = x.Remarks,
                        UserID = x.UserID,
                    }).ToList();
                    foreach (RMS.Models.PreviewRentGovtPJInfoDTO item in lstRentGovtPJInfoDTO)
                    {
                        var LandlordInfo = db.LandlordInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.LandlordSLNo == item.LandlordSLNo).Select(x => new { x.VendorCode, x.LandlordName, x.ModeOfPayment, x.ACNo, x.BankName, x.BranchName }).SingleOrDefault();
                        if (LandlordInfo != null)
                        {
                            item.VendorCode = LandlordInfo.VendorCode;
                            item.LandlordName = LandlordInfo.LandlordName;
                            if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { item.ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.RTGS) { item.ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.EFTN) { item.ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { item.ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Cash) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { item.ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Others) { item.ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                            item.ACNo = LandlordInfo.ACNo;
                            item.BankName = LandlordInfo.BankName;
                            item.BranchName = LandlordInfo.BranchName;
                        }
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.PreviewRentGovtPJInfoDetails, lstRentGovtPJInfoDTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectRentGovtPJInfoDetails(string PostingID)
        {
            TempData.Remove("PostingID");
            TempData.Add("PostingID", PostingID);
            return RedirectToAction("RentGovtPJInfoDetails");
        }

        [HttpGet]
        public ActionResult RentGovtPJInfoDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strPostingID = TempData["PostingID"];
                    if (strPostingID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    string PostingID = strPostingID.ToString();
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentGovtPJReport";
                    IList<RMS.Models.RentGovtPJInfoDTO> lstRentGovtPJInfoDTO = new List<RMS.Models.RentGovtPJInfoDTO>();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    var query = from ji in db.RentGovtPJInfos
                                join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                where ji.PostingID == PostingID
                                orderby ji.RentGovtPJSLNo ascending
                                select new
                                {
                                    ji.RentGovtPJSLNo,
                                    ji.PostingID,
                                    ji.PostingDate,
                                    ji.AgreementSLNo,
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    AI.AgreementText,
                                    AI.RentDueDay,
                                    AI.CalculationMethod,
                                    ji.Year,
                                    ji.Month,
                                    ji.GLCode,
                                    ji.GLName,
                                    ji.DrCrID,
                                    ji.Amount,
                                    ji.LandlordSLNo,
                                    ji.Remarks,
                                    U.UserID,
                                };
                    lstRentGovtPJInfoDTO = query.AsEnumerable().Select(x => new RMS.Models.RentGovtPJInfoDTO
                    {
                        RentGovtPJSLNo = x.RentGovtPJSLNo,
                        PostingID = x.PostingID,
                        PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                        AgreementSLNo = x.AgreementSLNo,
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        AgreementText = x.AgreementText,
                        RentDueDay = x.RentDueDay,
                        CalculationMethod = x.CalculationMethod,
                        Year = x.Year,
                        Month = x.Month,
                        GLCode = x.GLCode,
                        GLName = x.GLName,
                        DrCrID = x.DrCrID,
                        Amount = x.Amount,
                        LandlordSLNo = x.LandlordSLNo,
                        Remarks = x.Remarks,
                        UserID = x.UserID,
                    }).ToList();
                    foreach (RMS.Models.RentGovtPJInfoDTO item in lstRentGovtPJInfoDTO)
                    {
                        var LandlordInfo = db.LandlordInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.LandlordSLNo == item.LandlordSLNo).Select(x => new { x.VendorCode, x.LandlordName, x.ModeOfPayment, x.ACNo, x.BankName, x.BranchName }).SingleOrDefault();
                        if (LandlordInfo != null)
                        {
                            item.VendorCode = LandlordInfo.VendorCode;
                            item.LandlordName = LandlordInfo.LandlordName;
                            if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.AccountTransfer) { item.ModeOfPaymentText = ModeOfPaymentLocation.strAccountTransfer; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.RTGS) { item.ModeOfPaymentText = ModeOfPaymentLocation.strRTGS; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.EFTN) { item.ModeOfPaymentText = ModeOfPaymentLocation.strEFTN; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.PayOrder) { item.ModeOfPaymentText = ModeOfPaymentLocation.strPayOrder; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Cash) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCash; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.IBBPayment) { item.ModeOfPaymentText = ModeOfPaymentLocation.strIBBPayment; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityBrokerage) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityBrokerage; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.CityCapital) { item.ModeOfPaymentText = ModeOfPaymentLocation.strCityCapital; }
                            else if (LandlordInfo.ModeOfPayment == ModeOfPaymentLocation.Others) { item.ModeOfPaymentText = ModeOfPaymentLocation.strOthers; }
                            item.ACNo = LandlordInfo.ACNo;
                            item.BankName = LandlordInfo.BankName;
                            item.BranchName = LandlordInfo.BranchName;
                        }
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentGovtPJInfoDetails, lstRentGovtPJInfoDTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult UtilityVendorPJExecuteLog()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityVendorPJExecuteLog";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 77 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;
                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic dtoBasic = new DTOBasic();

                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == dtoBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();

                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.IsHoldBlockPayment == false && x.AgreementStatus == AgreementStatus.Activate &&
                     x.IsRenewal == false && x.IsModified == false && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();


                    //ViewBag.LandlordList = db.LandlordInfos.Where(x => x.IsHoldBlockPayment == false)
                    //    .Select(x => new { x.LandlordSLNo, x.VendorCode, x.LandlordName })
                    //    //.GroupBy(y => y.VendorCode)
                    //    .GroupBy(y => new { y.LandlordSLNo, y.VendorCode, y.LandlordName })
                    //    .Select(y => new { VendorSLNo = y.FirstOrDefault().LandlordSLNo, VendorCode = y.FirstOrDefault().VendorCode, FullName = y.FirstOrDefault().VendorCode + " - " + y.FirstOrDefault().LandlordName }).OrderBy(x => x.FullName).ToList();


                    RMS.Models.UtilityScheduleDTO DTO = new RMS.Models.UtilityScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityVendorPJExecuteLog, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult UtilityVendorPJExecuteLog(RMS.Models.UtilityScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    DTOBasic dtoBasic = new DTOBasic();
                    IList<RMS.Models.UtilityScheduleDTO> lst = new List<RMS.Models.UtilityScheduleDTO>();
                    if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        //PremiseType Wise
                        var queryPremiseType = from LS in db.UtilitySchedules
                                               join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                               join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                               join LI in db.UtilityInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                               where DTO.PremiseTypeSLNoCheckList.Contains(AI.PremiseTypeSLNo) &&
                                                     AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                                     LS.IsPosted == true && LS.IsBlock == false && LS.Year == DTO.Year && LS.Month == DTO.Month &&
                                                     AI.IsHoldBlockPayment == false && LI.IsHoldBlockPayment == false
                                               orderby LS.AgreementSLNo ascending
                                               select new
                                               {
                                                   LS.UScheduleSLNo,
                                                   LS.AgreementSLNo,
                                                   PT.PremiseTypeSLNo,
                                                   LI.UtilitySLNo,
                                               };
                        lst = queryPremiseType.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            UtilitySLNo = x.UtilitySLNo,
                        }).ToList();
                    }
                    else if (DTO.AgreementSLNoCheckList != null)
                    {
                        //AgreementSLNo Wise
                        var queryAgreement = from LS in db.UtilitySchedules
                                             join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                             join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                             join LI in db.UtilityInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                             where DTO.AgreementSLNoCheckList.Contains(LS.AgreementSLNo) &&
                                                   AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                                   LS.IsPosted == true && LS.IsBlock == false && LS.Year == DTO.Year && LS.Month == DTO.Month &&
                                                   AI.IsHoldBlockPayment == false && LI.IsHoldBlockPayment == false
                                             orderby LS.AgreementSLNo ascending
                                             select new
                                             {
                                                 LS.UScheduleSLNo,
                                                 LS.AgreementSLNo,
                                                 PT.PremiseTypeSLNo,
                                                 LI.UtilitySLNo,
                                             };
                        lst = queryAgreement.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            UtilitySLNo = x.UtilitySLNo,
                        }).ToList();
                    }
                    else if (DTO.VendorSLNoCheckList != null)
                    {
                        //VendorSLNo Wise
                        var queryVendor = from LS in db.UtilitySchedules
                                          join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                          join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                          join LI in db.UtilityInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                          where DTO.VendorSLNoCheckList.Contains(LI.UtilitySLNo) &&
                                                AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                                LS.IsPosted == true && LS.IsBlock == false && LS.Year == DTO.Year && LS.Month == DTO.Month &&
                                                AI.IsHoldBlockPayment == false && LI.IsHoldBlockPayment == false
                                          orderby LS.AgreementSLNo ascending
                                          select new
                                          {
                                              LS.UScheduleSLNo,
                                              LS.AgreementSLNo,
                                              PT.PremiseTypeSLNo,
                                              LI.UtilitySLNo,
                                          };
                        lst = queryVendor.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            UtilitySLNo = x.UtilitySLNo,
                        }).ToList();
                    }
                    else
                    {
                        //All Records
                        var queryAll = from LS in db.UtilitySchedules
                                       join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                       join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                       join LI in db.UtilityInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                       where AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                             LS.IsPosted == true && LS.IsBlock == false && LS.Year == DTO.Year && LS.Month == DTO.Month &&
                                             AI.IsHoldBlockPayment == false && LI.IsHoldBlockPayment == false
                                       orderby LS.AgreementSLNo ascending
                                       select new
                                       {
                                           LS.UScheduleSLNo,
                                           LS.AgreementSLNo,
                                           PT.PremiseTypeSLNo,
                                           LI.UtilitySLNo,
                                       };
                        lst = queryAll.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            UtilitySLNo = x.UtilitySLNo,

                        }).ToList();
                    }
                    if (lst.Count == 0)
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                    int Max = db.UtilityVendorPJExecuteLogs.Max(x => (int?)x.LogID) ?? 0;
                    if (Max == 0)
                    {
                        Max = 90001;
                    }
                    else
                    {
                        Max = Max + 1;
                    }
                    RMS.Models.UtilityVendorPJExecuteLog RLog = new RMS.Models.UtilityVendorPJExecuteLog();
                    foreach (RMS.Models.UtilityScheduleDTO item in lst.GroupBy(x => new { x.AgreementSLNo, x.UtilitySLNo }).Select(x => x.First()).Distinct().OrderBy(x => x.AgreementSLNo))
                    {
                        //==UtilityVendorPJExecuteLog - Log Register
                        RLog = new RMS.Models.UtilityVendorPJExecuteLog();
                        RLog.LogID = Max;
                        RLog.LogName = DTO.LogName;
                        RLog.LogDate = System.DateTime.Now;
                        RLog.PremiseTypeSLNo = item.PremiseTypeSLNo;
                        RLog.AgreementSLNo = item.AgreementSLNo;
                        RLog.UtilitySLNo = item.UtilitySLNo;
                        RLog.Year = DTO.Year;
                        RLog.Month = DTO.Month;
                        RLog.LogStatus = "Created";
                        RLog.Status = dtoBasic.active;
                        RLog.EntryBy = LoginUserID;
                        RLog.EntryDate = System.DateTime.Now;
                        RLog.ExecuteDate = null;
                        RLog.ExecuteBy = null;
                        db.UtilityVendorPJExecuteLogs.Add(RLog);
                        db.SaveChanges();
                    }
                    return Json(new { CheckStatus = true, LogID = RLog.LogID }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult CheckUtilityVendorAPPostLog(string PremiseTypeCheckList, string AgreementCheckList, string VendorCheckList, int Year, string Month)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    db.Configuration.ProxyCreationEnabled = false;
                    IList<RMS.Models.UtilityAPExecuteLogDTO> lstUtilityExecuteLog = new List<RMS.Models.UtilityAPExecuteLogDTO>();
                    DTOBasic dtoBasic = new DTOBasic();
                    List<int> PremiseTypeSLNoList;
                    List<int> AgreementSLNoList;
                    List<int> VendorSLNoList;
                    if (!string.IsNullOrEmpty(PremiseTypeCheckList))
                    {
                        //PremiseTypeSLNo Wise
                        PremiseTypeSLNoList = new List<int>(Array.ConvertAll(PremiseTypeCheckList.Split(','), Convert.ToInt32));
                        var queryPremiseType = from RL in db.UtilityAPExecuteLogs
                                               join AI in db.AgreementInfos on RL.AgreementSLNo equals AI.AgreementSLNo
                                               join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                               where PremiseTypeSLNoList.Contains(PT.PremiseTypeSLNo) && RL.LogStatus == "Posted" &&
                                                            RL.Year == Year && RL.Month == Month
                                               orderby RL.LogSLNo ascending
                                               select new
                                               {
                                                   RL.LogSLNo,
                                               };
                        lstUtilityExecuteLog = queryPremiseType.AsEnumerable().Select(x => new RMS.Models.UtilityAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else if (!string.IsNullOrEmpty(AgreementCheckList))
                    {
                        //AgreementSLNo Wise
                        AgreementSLNoList = new List<int>(Array.ConvertAll(AgreementCheckList.Split(','), Convert.ToInt32));
                        var queryAgreement = from RL in db.UtilityAPExecuteLogs
                                             join AI in db.AgreementInfos on RL.AgreementSLNo equals AI.AgreementSLNo
                                             where AgreementSLNoList.Contains(RL.AgreementSLNo) && RL.LogStatus == "Posted" &&
                                                                         RL.Year == Year && RL.Month == Month
                                             orderby RL.LogSLNo ascending
                                             select new
                                             {
                                                 RL.LogSLNo,
                                             };
                        lstUtilityExecuteLog = queryAgreement.AsEnumerable().Select(x => new RMS.Models.UtilityAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else if (!string.IsNullOrEmpty(VendorCheckList))
                    {
                        //VendorSLNo Wise
                        VendorSLNoList = new List<int>(Array.ConvertAll(VendorCheckList.Split(','), Convert.ToInt32));
                        var queryVendor = from RL in db.UtilityAPExecuteLogs
                                          join AI in db.AgreementInfos on RL.AgreementSLNo equals AI.AgreementSLNo
                                          join LI in db.UtilityInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                          where VendorSLNoList.Contains(LI.UtilitySLNo) && RL.LogStatus == "Posted" &&
                                                                         RL.Year == Year && RL.Month == Month
                                          orderby RL.LogSLNo ascending
                                          select new
                                          {
                                              RL.LogSLNo,
                                          };
                        lstUtilityExecuteLog = queryVendor.AsEnumerable().Select(x => new RMS.Models.UtilityAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else
                    {
                        //All Records
                        var queryAll = from RL in db.UtilityAPExecuteLogs
                                       join AI in db.AgreementInfos on RL.AgreementSLNo equals AI.AgreementSLNo
                                       join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                       where RL.LogStatus == "Posted" &&
                                                    RL.Year == Year && RL.Month == Month
                                       orderby RL.LogSLNo ascending
                                       select new
                                       {
                                           RL.LogSLNo,
                                       };
                        lstUtilityExecuteLog = queryAll.AsEnumerable().Select(x => new RMS.Models.UtilityAPExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    bool PostCheck = false;
                    if (lstUtilityExecuteLog.Count == 0)
                    {
                        PostCheck = true;
                    }
                    return Json(new { CheckStatus = PostCheck }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult CheckUtilityVendorPJExecuteLog(string PremiseTypeCheckList, string AgreementCheckList, string VendorCheckList, int Year, string Month)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    db.Configuration.ProxyCreationEnabled = false;
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    IList<RMS.Models.UtilityVendorPJExecuteLogDTO> lstUtilityVendorPJExecuteLog = new List<RMS.Models.UtilityVendorPJExecuteLogDTO>();
                    DTOBasic dtoBasic = new DTOBasic();
                    List<int> PremiseTypeSLNoList;
                    List<int> AgreementSLNoList;
                    List<int> VendorSLNoList;
                    if (!string.IsNullOrEmpty(PremiseTypeCheckList))
                    {
                        //PremiseTypeSLNo Wise
                        PremiseTypeSLNoList = new List<int>(Array.ConvertAll(PremiseTypeCheckList.Split(','), Convert.ToInt32));
                        var queryPremiseType = from RL in db.UtilityVendorPJExecuteLogs
                                               where PremiseTypeSLNoList.Contains(RL.PremiseTypeSLNo) && RL.LogStatus == "Created" &&
                                                                           RL.Year == Year && RL.Month == Month
                                               orderby RL.LogSLNo ascending
                                               select new
                                               {
                                                   RL.LogSLNo,
                                               };
                        lstUtilityVendorPJExecuteLog = queryPremiseType.AsEnumerable().Select(x => new RMS.Models.UtilityVendorPJExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else if (!string.IsNullOrEmpty(AgreementCheckList))
                    {
                        //AgreementSLNo Wise
                        AgreementSLNoList = new List<int>(Array.ConvertAll(AgreementCheckList.Split(','), Convert.ToInt32));
                        var queryAgreement = from RL in db.UtilityVendorPJExecuteLogs
                                             where AgreementSLNoList.Contains(RL.AgreementSLNo) && RL.LogStatus == "Created" &&
                                                                         RL.Year == Year && RL.Month == Month
                                             orderby RL.LogSLNo ascending
                                             select new
                                             {
                                                 RL.LogSLNo,
                                             };
                        lstUtilityVendorPJExecuteLog = queryAgreement.AsEnumerable().Select(x => new RMS.Models.UtilityVendorPJExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else if (!string.IsNullOrEmpty(VendorCheckList))
                    {
                        //VendorSLNo Wise
                        VendorSLNoList = new List<int>(Array.ConvertAll(VendorCheckList.Split(','), Convert.ToInt32));
                        var queryVendor = from RL in db.UtilityVendorPJExecuteLogs
                                          where VendorSLNoList.Contains(RL.UtilitySLNo) && RL.LogStatus == "Created" &&
                                                                         RL.Year == Year && RL.Month == Month
                                          orderby RL.LogSLNo ascending
                                          select new
                                          {
                                              RL.LogSLNo,
                                          };
                        lstUtilityVendorPJExecuteLog = queryVendor.AsEnumerable().Select(x => new RMS.Models.UtilityVendorPJExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else
                    {
                        //All Records
                        var queryAll = from RL in db.UtilityVendorPJExecuteLogs
                                       where RL.LogStatus == "Created" && RL.Year == Year && RL.Month == Month
                                       orderby RL.LogSLNo ascending
                                       select new
                                       {
                                           RL.LogSLNo,
                                       };
                        lstUtilityVendorPJExecuteLog = queryAll.AsEnumerable().Select(x => new RMS.Models.UtilityVendorPJExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    bool LogCheck = false;
                    if (lstUtilityVendorPJExecuteLog.Count > 0)
                    {
                        LogCheck = true;
                    }
                    return Json(new { CheckStatus = LogCheck }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult CheckUtilityVendorPJPostLog(string PremiseTypeCheckList, string AgreementCheckList, string VendorCheckList, int Year, string Month)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    db.Configuration.ProxyCreationEnabled = false;
                    IList<RMS.Models.UtilityVendorPJExecuteLogDTO> lstUtilityVendorPJExecuteLog = new List<RMS.Models.UtilityVendorPJExecuteLogDTO>();
                    DTOBasic dtoBasic = new DTOBasic();
                    List<int> PremiseTypeSLNoList;
                    List<int> AgreementSLNoList;
                    List<int> VendorSLNoList;
                    if (!string.IsNullOrEmpty(PremiseTypeCheckList))
                    {
                        //PremiseTypeSLNo Wise
                        PremiseTypeSLNoList = new List<int>(Array.ConvertAll(PremiseTypeCheckList.Split(','), Convert.ToInt32));
                        var queryPremiseType = from RL in db.UtilityVendorPJExecuteLogs
                                               where PremiseTypeSLNoList.Contains(RL.PremiseTypeSLNo) && RL.LogStatus == "Posted" &&
                                                            RL.Year == Year && RL.Month == Month
                                               orderby RL.LogSLNo ascending
                                               select new
                                               {
                                                   RL.LogSLNo,
                                               };
                        lstUtilityVendorPJExecuteLog = queryPremiseType.AsEnumerable().Select(x => new RMS.Models.UtilityVendorPJExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    if (!string.IsNullOrEmpty(AgreementCheckList))
                    {
                        //AgreementSLNo Wise
                        AgreementSLNoList = new List<int>(Array.ConvertAll(AgreementCheckList.Split(','), Convert.ToInt32));
                        var queryAgreement = from RL in db.UtilityVendorPJExecuteLogs
                                             where AgreementSLNoList.Contains(RL.AgreementSLNo) && RL.LogStatus == "Posted" &&
                                                                         RL.Year == Year && RL.Month == Month
                                             orderby RL.LogSLNo ascending
                                             select new
                                             {
                                                 RL.LogSLNo,
                                             };
                        lstUtilityVendorPJExecuteLog = queryAgreement.AsEnumerable().Select(x => new RMS.Models.UtilityVendorPJExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else if (!string.IsNullOrEmpty(VendorCheckList))
                    {
                        //VendorSLNo Wise
                        VendorSLNoList = new List<int>(Array.ConvertAll(VendorCheckList.Split(','), Convert.ToInt32));
                        var queryVendor = from RL in db.UtilityVendorPJExecuteLogs
                                          where VendorSLNoList.Contains(RL.UtilitySLNo) && RL.LogStatus == "Posted" &&
                                                                         RL.Year == Year && RL.Month == Month
                                          orderby RL.LogSLNo ascending
                                          select new
                                          {
                                              RL.LogSLNo,
                                          };
                        lstUtilityVendorPJExecuteLog = queryVendor.AsEnumerable().Select(x => new RMS.Models.UtilityVendorPJExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    else
                    {
                        //All Records
                        var queryAll = from RL in db.UtilityVendorPJExecuteLogs
                                       where RL.LogStatus == "Posted" &&
                                                    RL.Year == Year && RL.Month == Month
                                       orderby RL.LogSLNo ascending
                                       select new
                                       {
                                           RL.LogSLNo,
                                       };
                        lstUtilityVendorPJExecuteLog = queryAll.AsEnumerable().Select(x => new RMS.Models.UtilityVendorPJExecuteLogDTO
                        {
                            LogSLNo = x.LogSLNo,
                        }).ToList();
                    }
                    bool PostCheck = false;
                    if (lstUtilityVendorPJExecuteLog.Count > 0)
                    {
                        PostCheck = true;
                    }
                    return Json(new { CheckStatus = PostCheck }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult UtilityVendorPJReExecuteLog(RMS.Models.UtilityScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    DTOBasic dtoBasic = new DTOBasic();
                    IList<RMS.Models.UtilityScheduleDTO> lst = new List<RMS.Models.UtilityScheduleDTO>();
                    if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        //==Delete UtilityVendorPJExecuteLogs table PremiseType wise Log records
                        var DeleteRLog = db.UtilityVendorPJExecuteLogs.Where(x => DTO.PremiseTypeSLNoCheckList.Contains(x.PremiseTypeSLNo) && x.LogStatus == "Created" && x.Year == DTO.Year && x.Month == DTO.Month && x.Status == dtoBasic.active).ToList();
                        db.UtilityVendorPJExecuteLogs.RemoveRange(DeleteRLog);
                        db.SaveChanges();
                        //PremiseType Wise
                        var queryPremiseType = from LS in db.UtilitySchedules
                                               join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                               join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                               join LI in db.UtilityInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                               where DTO.PremiseTypeSLNoCheckList.Contains(AI.PremiseTypeSLNo) &&
                                                     AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                                     LS.IsPosted == true && LS.IsBlock == false && LS.Year == DTO.Year && LS.Month == DTO.Month &&
                                                     AI.IsHoldBlockPayment == false && LI.IsHoldBlockPayment == false
                                               orderby LS.AgreementSLNo ascending
                                               select new
                                               {
                                                   LS.UScheduleSLNo,
                                                   LS.AgreementSLNo,
                                                   PT.PremiseTypeSLNo,
                                                   LI.UtilitySLNo,
                                               };
                        lst = queryPremiseType.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            UtilitySLNo = x.UtilitySLNo,
                        }).ToList();
                    }
                    else if (DTO.AgreementSLNoCheckList != null)
                    {
                        //==Delete UtilityVendorPJExecuteLogs table AgreementSLNo wise Log records
                        var DeleteRLog = db.UtilityVendorPJExecuteLogs.Where(x => DTO.AgreementSLNoCheckList.Contains(x.AgreementSLNo) && x.LogStatus == "Created" && x.Year == DTO.Year && x.Month == DTO.Month && x.Status == dtoBasic.active).ToList();
                        db.UtilityVendorPJExecuteLogs.RemoveRange(DeleteRLog);
                        db.SaveChanges();
                        //AgreementSLNo Wise
                        var queryAgreement = from LS in db.UtilitySchedules
                                             join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                             join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                             join LI in db.UtilityInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                             where DTO.AgreementSLNoCheckList.Contains(LS.AgreementSLNo) &&
                                                   AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                                   LS.IsPosted == true && LS.IsBlock == false && LS.Year == DTO.Year && LS.Month == DTO.Month &&
                                                   AI.IsHoldBlockPayment == false && LI.IsHoldBlockPayment == false
                                             orderby LS.AgreementSLNo ascending
                                             select new
                                             {
                                                 LS.UScheduleSLNo,
                                                 LS.AgreementSLNo,
                                                 PT.PremiseTypeSLNo,
                                                 LI.UtilitySLNo,
                                             };
                        lst = queryAgreement.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            UtilitySLNo = x.UtilitySLNo,
                        }).ToList();
                    }
                    else if (DTO.VendorSLNoCheckList != null)
                    {
                        //==Delete UtilityVendorPJExecuteLogs table VendorSLNo wise Log records
                        var DeleteRLog = db.UtilityVendorPJExecuteLogs.Where(x => DTO.VendorSLNoCheckList.Contains(x.UtilitySLNo) && x.LogStatus == "Created" && x.Year == DTO.Year && x.Month == DTO.Month && x.Status == dtoBasic.active).ToList();
                        db.UtilityVendorPJExecuteLogs.RemoveRange(DeleteRLog);
                        db.SaveChanges();
                        //VendorSLNo Wise
                        var queryVendor = from LS in db.UtilitySchedules
                                          join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                          join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                          join LI in db.UtilityInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                          where DTO.VendorSLNoCheckList.Contains(LI.UtilitySLNo) &&
                                                AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                                LS.IsPosted == true && LS.IsBlock == false && LS.Year == DTO.Year && LS.Month == DTO.Month &&
                                                AI.IsHoldBlockPayment == false && LI.IsHoldBlockPayment == false
                                          orderby LS.AgreementSLNo ascending
                                          select new
                                          {
                                              LS.UScheduleSLNo,
                                              LS.AgreementSLNo,
                                              PT.PremiseTypeSLNo,
                                              LI.UtilitySLNo,
                                          };
                        lst = queryVendor.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            UtilitySLNo = x.UtilitySLNo,
                        }).ToList();
                    }
                    else
                    {
                        //==Delete UtilityVendorPJExecuteLogs table all created records for the year & month
                        var DeleteRLog = db.UtilityVendorPJExecuteLogs.Where(x => x.LogStatus == "Created" && x.Year == DTO.Year && x.Month == DTO.Month && x.Status == dtoBasic.active).ToList();
                        db.UtilityVendorPJExecuteLogs.RemoveRange(DeleteRLog);
                        db.SaveChanges();
                        //All Records
                        var queryAll = from LS in db.UtilitySchedules
                                       join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                       join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                       join LI in db.UtilityInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                       where AI.IsRenewal == false && AI.IsModified == false && AI.IsBlock == false &&
                                             LS.IsPosted == true && LS.IsBlock == false && LS.Year == DTO.Year && LS.Month == DTO.Month &&
                                             AI.IsHoldBlockPayment == false && LI.IsHoldBlockPayment == false
                                       orderby LS.AgreementSLNo ascending
                                       select new
                                       {
                                           LS.UScheduleSLNo,
                                           LS.AgreementSLNo,
                                           PT.PremiseTypeSLNo,
                                           LI.UtilitySLNo,
                                       };
                        lst = queryAll.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            UtilitySLNo = x.UtilitySLNo,
                        }).ToList();
                    }
                    if (lst.Count == 0)
                    {
                        return Json(new { CheckStatus = false }, JsonRequestBehavior.AllowGet);
                    }
                    int Max = db.UtilityVendorPJExecuteLogs.Max(x => (int?)x.LogID) ?? 0;
                    if (Max == 0)
                    {
                        Max = 90001;
                    }
                    else
                    {
                        Max = Max + 1;
                    }
                    RMS.Models.UtilityVendorPJExecuteLog RLog = new RMS.Models.UtilityVendorPJExecuteLog();
                    foreach (RMS.Models.UtilityScheduleDTO item in lst.GroupBy(x => new { x.AgreementSLNo, x.UtilitySLNo }).Select(x => x.First()).Distinct().OrderBy(x => x.AgreementSLNo))
                    {
                        //==UtilityVendorPJExecuteLog - Re Log Register
                        RLog = new RMS.Models.UtilityVendorPJExecuteLog();
                        RLog.LogID = Max;
                        RLog.LogName = DTO.LogName;
                        RLog.LogDate = System.DateTime.Now;
                        RLog.PremiseTypeSLNo = item.PremiseTypeSLNo;
                        RLog.AgreementSLNo = item.AgreementSLNo;
                        RLog.UtilitySLNo = item.UtilitySLNo;
                        RLog.Year = DTO.Year;
                        RLog.Month = DTO.Month;
                        RLog.LogStatus = "Created";
                        RLog.Status = dtoBasic.active;
                        RLog.EntryBy = LoginUserID;
                        RLog.EntryDate = System.DateTime.Now;
                        RLog.ExecuteDate = null;
                        RLog.ExecuteBy = null;
                        db.UtilityVendorPJExecuteLogs.Add(RLog);
                        db.SaveChanges();
                    }
                    return Json(new { CheckStatus = true, LogID = RLog.LogID }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult UtilityVendorPJPostLog()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityVendorPJPostLog";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 78 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    IList<RMS.Models.UtilityVendorPJExecuteLogDTO> lstLog = new List<RMS.Models.UtilityVendorPJExecuteLogDTO>();
                    var query = from RPL in db.UtilityVendorPJExecuteLogs
                                where RPL.LogStatus == "Created"
                                orderby RPL.LogID ascending
                                select new
                                {
                                    RPL.LogID,
                                    RPL.LogName,
                                    RPL.LogDate,
                                    RPL.Year,
                                    RPL.Month,
                                    RPL.EntryBy,
                                    RPL.EntryDate,
                                };
                    lstLog = query.AsEnumerable().Select(x => new RMS.Models.UtilityVendorPJExecuteLogDTO
                    {
                        LogID = x.LogID,
                        LogName = x.LogName,
                        LogDate = x.LogDate.ToString("dd/MM/yyyy"),
                        Year = x.Year,
                        Month = x.Month,
                        EntryBy = x.EntryBy,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                    }).ToList();
                    lstLog = lstLog.GroupBy(x => x.LogID).Select(x => x.First()).Distinct().ToList();
                    int row = 0;
                    foreach (RMS.Models.UtilityVendorPJExecuteLogDTO item in lstLog)
                    {
                        item.RowNumber = row++;
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityVendorPJPostLog, lstLog);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateHeaderAntiForgeryToken]
        public ActionResult UtilityVendorPJPostLog(List<int> LogIDCheckList)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    int UserSLNo = db.UserInfos.Where(x => x.UserID == LoginUserID).Select(x => x.UserSLNo).SingleOrDefault();
                    DebitCredit DebitCredit = new DebitCredit();
                    DTOBasic dtoBasic = new DTOBasic();
                    RMS.Models.UtilityVendorPJInfo ji = new RMS.Models.UtilityVendorPJInfo();
                    RMS.Models.UtilityGovtPJInfo jiGovt = new RMS.Models.UtilityGovtPJInfo();
                    ModeOfPaymentLocation ModeOfPaymentLocation = new ModeOfPaymentLocation();
                    string PostingID;
                    string GovtPostingID;
                    double Max;
                    foreach (int LogID in LogIDCheckList)
                    {
                        //==Log wise Rent Vendor Payment Journal Posting ID
                        Max = Convert.ToDouble(db.UtilityVendorPJInfos.Max(x => x.PostingID));
                        if (Max == 0)
                        {
                            PostingID = "110001";
                        }
                        else
                        {
                            PostingID = (Max + 1).ToString();
                        }
                        //==Log wise Utility Vendor Govt. Payment Journal Posting ID
                        Max = Convert.ToDouble(db.UtilityGovtPJInfos.Max(x => x.PostingID));
                        if (Max == 0)
                        {
                            GovtPostingID = "120001";
                        }
                        else
                        {
                            GovtPostingID = (Max + 1).ToString();
                        }
                        //==Update UtilityVendorPJExecuteLogs table LogID wise LogStatus Created to Posted
                        var lstRPLLog = db.UtilityVendorPJExecuteLogs.Where(x => x.LogID == LogID).ToList();
                        lstRPLLog.ForEach(x => { x.LogStatus = "Posted"; x.ExecuteDate = DateTime.Now; x.ExecuteBy = LoginUserID; });
                        db.SaveChanges();
                        //==Each log details
                        foreach (var item in lstRPLLog)
                        {
                            //==Update Post status into Utility Schedule table by AgreementSLNo
                            var lstUpdateUtilitySchedule = db.UtilitySchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo &&
                                                    x.Year == item.Year && x.Month == item.Month).ToList();
                            lstUpdateUtilitySchedule.ForEach(x =>
                            {
                                x.IsPJPosted = true;
                                x.PJPostingID = PostingID;
                                x.PJPostingDate = DateTime.Now;
                                x.PJPostingUserSLNo = UserSLNo;
                            });
                            db.SaveChanges();
                            //==UtilityVendorPJInfo
                            var AgreementControlData = db.AgreementInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo).Select(x => new { x.CashGLCode, x.BankGLCode, x.RentGLCode, x.AdvanceGLCode, x.TaxGLCode, x.VATGLCode }).SingleOrDefault();
                            var UtilityInfo = db.UtilityInfos.Where(x => x.UtilitySLNo == item.UtilitySLNo).Select(x => new { x.UtilityVendorCode, x.UtilityLandlordName, x.UtilityModeOfPayment }).SingleOrDefault();
                            var UtilitySchedule = db.UtilitySchedules.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.UtilitySLNo == item.UtilitySLNo && x.Year == item.Year && x.Month == item.Month).Select(x => new { x.ServiceChargeAmount, x.OnlineTowerAmount, x.GeneratorSpaceAmount, x.CarParkingAmount, x.TaxAmount, x.VATAmount }).SingleOrDefault();
                            //==Debit Journal - Landlord Wise
                            ji = new RMS.Models.UtilityVendorPJInfo();
                            ji.PostingID = PostingID;
                            ji.PostingDate = DateTime.Now;
                            ji.AgreementSLNo = item.AgreementSLNo;
                            ji.Year = item.Year;
                            ji.Month = item.Month;
                            ji.GLCode = UtilityInfo.UtilityVendorCode;
                            ji.GLName = UtilityInfo.UtilityLandlordName;
                            ji.DrCrID = DebitCredit.Debit;
                            ji.Amount = UtilitySchedule.ServiceChargeAmount + UtilitySchedule.OnlineTowerAmount + UtilitySchedule.GeneratorSpaceAmount + UtilitySchedule.CarParkingAmount;
                            ji.UtilitySLNo = item.UtilitySLNo;
                            ji.Remarks = "Utility - Pay to Vendor";
                            ji.UserSLNo = UserSLNo;
                            db.UtilityVendorPJInfos.Add(ji);
                            db.SaveChanges();
                            //==Credit Cash/Bank - Landlord Wise
                            ji = new RMS.Models.UtilityVendorPJInfo();
                            ji.PostingID = PostingID;
                            ji.PostingDate = DateTime.Now;
                            ji.AgreementSLNo = item.AgreementSLNo;
                            ji.Year = item.Year;
                            ji.Month = item.Month;
                            if (UtilityInfo.UtilityModeOfPayment == ModeOfPaymentLocation.Cash)
                            {
                                ji.GLCode = AgreementControlData.CashGLCode;
                                ji.GLName = "Cash GL";
                            }
                            else
                            {
                                ji.GLCode = AgreementControlData.BankGLCode;
                                ji.GLName = "Bank GL";
                            }
                            ji.DrCrID = DebitCredit.Credit;
                            ji.Amount = UtilitySchedule.ServiceChargeAmount + UtilitySchedule.OnlineTowerAmount + UtilitySchedule.GeneratorSpaceAmount + UtilitySchedule.CarParkingAmount;
                            ji.UtilitySLNo = item.UtilitySLNo;
                            ji.Remarks = "Utility - Pay to Vendor";
                            ji.UserSLNo = UserSLNo;
                            db.UtilityVendorPJInfos.Add(ji);
                            db.SaveChanges();
                            //==Debit Journal - Landlord Wise Tax
                            if (UtilitySchedule.TaxAmount > 0)
                            {
                                jiGovt = new RMS.Models.UtilityGovtPJInfo();
                                jiGovt.PostingID = GovtPostingID;
                                jiGovt.PostingDate = DateTime.Now;
                                jiGovt.AgreementSLNo = item.AgreementSLNo;
                                jiGovt.Year = item.Year;
                                jiGovt.Month = item.Month;
                                jiGovt.GLCode = AgreementControlData.TaxGLCode;
                                jiGovt.GLName = "Tax GL";
                                jiGovt.DrCrID = DebitCredit.Debit;
                                jiGovt.Amount = UtilitySchedule.TaxAmount;
                                jiGovt.UtilitySLNo = item.UtilitySLNo;
                                jiGovt.Remarks = "Utility - Pay to Tax";
                                jiGovt.UserSLNo = UserSLNo;
                                db.UtilityGovtPJInfos.Add(jiGovt);
                                db.SaveChanges();
                            }
                            //==Debit Journal - Landlord Wise VAT
                            if (UtilitySchedule.VATAmount > 0)
                            {
                                jiGovt = new RMS.Models.UtilityGovtPJInfo();
                                jiGovt.PostingID = GovtPostingID;
                                jiGovt.PostingDate = DateTime.Now;
                                jiGovt.AgreementSLNo = item.AgreementSLNo;
                                jiGovt.Year = item.Year;
                                jiGovt.Month = item.Month;
                                jiGovt.GLCode = AgreementControlData.VATGLCode;
                                jiGovt.GLName = "VAT GL";
                                jiGovt.DrCrID = DebitCredit.Debit;
                                jiGovt.Amount = UtilitySchedule.VATAmount;
                                jiGovt.UtilitySLNo = item.UtilitySLNo;
                                jiGovt.Remarks = "Pay to VAT";
                                jiGovt.UserSLNo = UserSLNo;
                                db.UtilityGovtPJInfos.Add(jiGovt);
                                db.SaveChanges();
                            }
                            //==Credit Cash/Bank - Landlord Wise
                            if (UtilitySchedule.TaxAmount + UtilitySchedule.VATAmount > 0)
                            {
                                jiGovt = new RMS.Models.UtilityGovtPJInfo();
                                jiGovt.PostingID = GovtPostingID;
                                jiGovt.PostingDate = DateTime.Now;
                                jiGovt.AgreementSLNo = item.AgreementSLNo;
                                jiGovt.Year = item.Year;
                                jiGovt.Month = item.Month;
                                if (UtilityInfo.UtilityModeOfPayment == ModeOfPaymentLocation.Cash)
                                {
                                    jiGovt.GLCode = AgreementControlData.CashGLCode;
                                    jiGovt.GLName = "Cash GL";
                                }
                                else
                                {
                                    jiGovt.GLCode = AgreementControlData.BankGLCode;
                                    jiGovt.GLName = "Bank GL";
                                }
                                jiGovt.DrCrID = DebitCredit.Credit;
                                jiGovt.Amount = UtilitySchedule.TaxAmount + UtilitySchedule.VATAmount;
                                jiGovt.UtilitySLNo = item.UtilitySLNo;
                                jiGovt.Remarks = "Utility - Pay to Govt.";
                                jiGovt.UserSLNo = UserSLNo;
                                db.UtilityGovtPJInfos.Add(jiGovt);
                                db.SaveChanges();
                            }
                            //==
                        }
                    }
                    return Json(new { CheckStatus = true }, JsonRequestBehavior.AllowGet);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectUtilityVendorPJLogDetails(int LogID)
        {
            TempData.Remove("LogID");
            TempData.Add("LogID", LogID);
            return RedirectToAction("UtilityVendorPJLogDetails");
        }

        [HttpGet]
        public ActionResult UtilityVendorPJLogDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strLogID = TempData["LogID"];
                    if (strLogID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    int LogID = Convert.ToInt32(strLogID);
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityVendorPJPostLog";
                    IList<RMS.Models.UtilityVendorPJExecuteLogDTO> lstLog = new List<RMS.Models.UtilityVendorPJExecuteLogDTO>();
                    var query = from RPL in db.UtilityVendorPJExecuteLogs
                                join AI in db.AgreementInfos on RPL.AgreementSLNo equals AI.AgreementSLNo
                                join PT in db.PremiseTypeInfos on RPL.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                where RPL.LogID == LogID
                                orderby RPL.LogID ascending
                                select new
                                {
                                    RPL.LogID,
                                    RPL.LogName,
                                    RPL.LogDate,
                                    RPL.Year,
                                    RPL.Month,
                                    RPL.EntryBy,
                                    RPL.EntryDate,
                                    AI.AgreementSLNo,
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    AI.PremiseName,
                                    PT.PremiseTypeSLNo,
                                    PT.PremiseTypeCode,
                                    PT.PremiseType,
                                    RPL.UtilitySLNo,
                                };
                    lstLog = query.AsEnumerable().Select(x => new RMS.Models.UtilityVendorPJExecuteLogDTO
                    {
                        LogID = x.LogID,
                        LogName = x.LogName,
                        LogDate = x.LogDate.ToString("dd/MM/yyyy"),
                        Year = x.Year,
                        Month = x.Month,
                        EntryBy = x.EntryBy,
                        EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                        AgreementSLNo = x.AgreementSLNo,
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        PremiseTypeSLNo = x.PremiseTypeSLNo,
                        PremiseTypeCode = x.PremiseTypeCode,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        UtilitySLNo = x.UtilitySLNo,
                    }).ToList();
                    foreach (RMS.Models.UtilityVendorPJExecuteLogDTO item in lstLog)
                    {
                        var UtilityInfo = db.UtilityInfos.Where(x => x.UtilitySLNo == item.UtilitySLNo).Select(x => new { x.UtilityVendorCode, x.UtilityLandlordName }).SingleOrDefault();
                        item.VendorCode = UtilityInfo.UtilityVendorCode;
                        item.LandlordName = UtilityInfo.UtilityLandlordName;
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityVendorPJLogDetails, lstLog);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult UtilityVendorPJReport()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityVendorPJReport";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 80 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;

                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic dtoBasic = new DTOBasic();

                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == dtoBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();

                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.IsHoldBlockPayment == false && x.AgreementStatus == AgreementStatus.Activate &&
                     x.IsRenewal == false && x.IsModified == false && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();


                    //ViewBag.LandlordList = db.LandlordInfos.Where(x => x.IsHoldBlockPayment == false)
                    //    .Select(x => new { x.LandlordSLNo, x.VendorCode, x.LandlordName })
                    //    //.GroupBy(y => y.VendorCode)
                    //    .GroupBy(y => new { y.LandlordSLNo, y.VendorCode, y.LandlordName })
                    //    .Select(y => new { VendorSLNo = y.FirstOrDefault().LandlordSLNo, VendorCode = y.FirstOrDefault().VendorCode, FullName = y.FirstOrDefault().VendorCode + " - " + y.FirstOrDefault().LandlordName }).OrderBy(x => x.FullName).ToList();

                    RMS.Models.UtilityScheduleDTO DTO = new RMS.Models.UtilityScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityVendorPJReport, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult UtilityVendorPJReport(RMS.Models.UtilityScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityVendorPJReport";
                    IList<RMS.Models.UtilityVendorPJInfoDTO> lstjs = new List<RMS.Models.UtilityVendorPJInfoDTO>();
                    int FromMonthNumber = Convert.ToDateTime("01-" + DTO.FromMonthName + "2021").Month;
                    int ToMonthNumber = Convert.ToDateTime("01-" + DTO.ToMonthName + "2021").Month;
                    if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        //PremiseType Wise
                        var query = from ji in db.UtilityVendorPJInfos
                                    join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                    where DTO.PremiseTypeSLNoCheckList.Contains(PT.PremiseTypeSLNo) && ji.Year == DTO.Year &&
                                            ji.PostingDate.Month >= FromMonthNumber && ji.PostingDate.Month <= ToMonthNumber
                                    orderby ji.PostingID ascending
                                    select new
                                    {
                                        ji.PostingID,
                                        ji.PostingDate,
                                        AI.AgreementCode,
                                        AI.AliasCode,
                                        AI.AgreementName,
                                        PT.PremiseType,
                                        AI.PremiseName,
                                        ji.Year,
                                        ji.Month,
                                        U.UserID,
                                        ji.UtilitySLNo,
                                    };
                        lstjs = query.AsEnumerable().Select(x => new RMS.Models.UtilityVendorPJInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            Year = x.Year,
                            Month = x.Month,
                            UserID = x.UserID,
                            UtilitySLNo = x.UtilitySLNo,
                        }).ToList();
                    }
                    else if (DTO.AgreementSLNoCheckList != null)
                    {
                        //AgreementSLNo Wise
                        var query = from ji in db.UtilityVendorPJInfos
                                    join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                    where DTO.AgreementSLNoCheckList.Contains(ji.AgreementSLNo) && ji.Year == DTO.Year &&
                                            ji.PostingDate.Month >= FromMonthNumber && ji.PostingDate.Month <= ToMonthNumber
                                    orderby ji.PostingID ascending
                                    select new
                                    {
                                        ji.PostingID,
                                        ji.PostingDate,
                                        AI.AgreementCode,
                                        AI.AliasCode,
                                        AI.AgreementName,
                                        PT.PremiseType,
                                        AI.PremiseName,
                                        ji.Year,
                                        ji.Month,
                                        U.UserID,
                                        ji.UtilitySLNo,
                                    };
                        lstjs = query.AsEnumerable().Select(x => new RMS.Models.UtilityVendorPJInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            Year = x.Year,
                            Month = x.Month,
                            UserID = x.UserID,
                            UtilitySLNo = x.UtilitySLNo,
                        }).ToList();
                    }
                    else if (DTO.VendorSLNoCheckList != null)
                    {
                        //VendorSLNo Wise
                        var query = from ji in db.UtilityVendorPJInfos
                                    join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                    where DTO.VendorSLNoCheckList.Contains(ji.UtilitySLNo) && ji.Year == DTO.Year &&
                                            ji.PostingDate.Month >= FromMonthNumber && ji.PostingDate.Month <= ToMonthNumber
                                    orderby ji.PostingID ascending
                                    select new
                                    {
                                        ji.PostingID,
                                        ji.PostingDate,
                                        AI.AgreementCode,
                                        AI.AliasCode,
                                        AI.AgreementName,
                                        PT.PremiseType,
                                        AI.PremiseName,
                                        ji.Year,
                                        ji.Month,
                                        U.UserID,
                                        ji.UtilitySLNo,
                                    };
                        lstjs = query.AsEnumerable().Select(x => new RMS.Models.UtilityVendorPJInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            Year = x.Year,
                            Month = x.Month,
                            UserID = x.UserID,
                            UtilitySLNo = x.UtilitySLNo,
                        }).ToList();
                    }
                    else
                    {
                        //All Records
                        var query = from ji in db.UtilityVendorPJInfos
                                    join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    join LI in db.UtilityInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                    join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                    where ji.Year == DTO.Year &&
                                            ji.PostingDate.Month >= FromMonthNumber && ji.PostingDate.Month <= ToMonthNumber
                                    orderby ji.PostingID ascending
                                    select new
                                    {
                                        ji.PostingID,
                                        ji.PostingDate,
                                        AI.AgreementCode,
                                        AI.AliasCode,
                                        AI.AgreementName,
                                        PT.PremiseType,
                                        AI.PremiseName,
                                        ji.Year,
                                        ji.Month,
                                        U.UserID,
                                        ji.UtilitySLNo,
                                    };
                        lstjs = query.AsEnumerable().Select(x => new RMS.Models.UtilityVendorPJInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            Year = x.Year,
                            Month = x.Month,
                            UserID = x.UserID,
                            UtilitySLNo = x.UtilitySLNo,
                        }).ToList();
                    }
                    lstjs = lstjs.GroupBy(x => x.PostingID).Select(x => x.First()).Distinct().ToList();
                    //foreach (RMS.Models.UtilityVendorPJInfoDTO item in lstjs)
                    //{
                    //    var UtilityInfo = db.UtilityInfos.Where(x => x.UtilitySLNo == item.UtilitySLNo).Select(x => new { x.UtilityVendorCode, x.UtilityLandlordName }).SingleOrDefault();
                    //    item.VendorCode = UtilityInfo.UtilityVendorCode;
                    //    item.LandlordName = UtilityInfo.UtilityLandlordName;
                    //}
                    ViewBag.DateRange = DTO.FromMonthName + "-" + DTO.ToMonthName + ", " + DTO.Year;
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityVendorPJInfoReport, lstjs);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }


        [HttpGet]
        public ActionResult RedirectUtilityVendorPJInfoDetails(string PostingID)
        {
            TempData.Remove("PostingID");
            TempData.Add("PostingID", PostingID);
            return RedirectToAction("UtilityVendorPJInfoDetails");
        }

        [HttpGet]
        public ActionResult UtilityVendorPJInfoDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strPostingID = TempData["PostingID"];
                    if (strPostingID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    string PostingID = strPostingID.ToString();
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityVendorPJReport";
                    IList<RMS.Models.UtilityVendorPJInfoDTO> lstUtilityVendorPJInfoDTO = new List<RMS.Models.UtilityVendorPJInfoDTO>();
                    var query = from ji in db.UtilityVendorPJInfos
                                join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                where ji.PostingID == PostingID
                                orderby ji.UtilityVendorPJSLNo ascending
                                select new
                                {
                                    ji.UtilityVendorPJSLNo,
                                    ji.PostingID,
                                    ji.PostingDate,
                                    ji.AgreementSLNo,
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    ji.Year,
                                    ji.Month,
                                    ji.GLCode,
                                    ji.GLName,
                                    ji.DrCrID,
                                    ji.Amount,
                                    ji.UtilitySLNo,
                                    ji.Remarks,
                                    U.UserID,
                                };
                    lstUtilityVendorPJInfoDTO = query.AsEnumerable().Select(x => new RMS.Models.UtilityVendorPJInfoDTO
                    {
                        UtilityVendorPJSLNo = x.UtilityVendorPJSLNo,
                        PostingID = x.PostingID,
                        PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                        AgreementSLNo = x.AgreementSLNo,
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        Year = x.Year,
                        Month = x.Month,
                        GLCode = x.GLCode,
                        GLName = x.GLName,
                        DrCrID = x.DrCrID,
                        Amount = x.Amount,
                        UtilitySLNo = x.UtilitySLNo,
                        Remarks = x.Remarks,
                        UserID = x.UserID,
                    }).ToList();
                    foreach (RMS.Models.UtilityVendorPJInfoDTO item in lstUtilityVendorPJInfoDTO)
                    {
                        var UtilityInfo = db.UtilityInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.UtilitySLNo == item.UtilitySLNo).Select(x => new { x.UtilityVendorCode, x.UtilityLandlordName }).SingleOrDefault();
                        if (UtilityInfo != null)
                        {
                            item.VendorCode = UtilityInfo.UtilityVendorCode;
                            item.LandlordName = UtilityInfo.UtilityLandlordName;
                        }
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityVendorPJInfoDetails, lstUtilityVendorPJInfoDTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult UtilityGovtPJReport()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityGovtPJReport";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 81 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;

                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic dtoBasic = new DTOBasic();

                    ViewBag.PremiseTypeList = db.PremiseTypeInfos.Where(x => x.Status == dtoBasic.active && x.IsDeleted == false)
                        .Select(x => new { PremiseTypeSLNo = x.PremiseTypeSLNo, x.PremiseType, FullName = x.PremiseTypeCode + " - " + x.PremiseType }).OrderBy(x => x.PremiseType).ToList();

                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.IsHoldBlockPayment == false && x.AgreementStatus == AgreementStatus.Activate &&
                     x.IsRenewal == false && x.IsModified == false && x.IsClosed == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();


                    //ViewBag.LandlordList = db.LandlordInfos.Where(x => x.IsHoldBlockPayment == false)
                    //    .Select(x => new { x.LandlordSLNo, x.VendorCode, x.LandlordName })
                    //    //.GroupBy(y => y.VendorCode)
                    //    .GroupBy(y => new { y.LandlordSLNo, y.VendorCode, y.LandlordName })
                    //    .Select(y => new { VendorSLNo = y.FirstOrDefault().LandlordSLNo, VendorCode = y.FirstOrDefault().VendorCode, FullName = y.FirstOrDefault().VendorCode + " - " + y.FirstOrDefault().LandlordName }).OrderBy(x => x.FullName).ToList();

                    RMS.Models.UtilityScheduleDTO DTO = new RMS.Models.UtilityScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityGovtPJReport, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult UtilityGovtPJReport(RMS.Models.UtilityScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityGovtPJReport";
                    IList<RMS.Models.UtilityGovtPJInfoDTO> lstjs = new List<RMS.Models.UtilityGovtPJInfoDTO>();
                    int FromMonthNumber = Convert.ToDateTime("01-" + DTO.FromMonthName + "2021").Month;
                    int ToMonthNumber = Convert.ToDateTime("01-" + DTO.ToMonthName + "2021").Month;
                    if (DTO.PremiseTypeSLNoCheckList != null)
                    {
                        //PremiseType Wise
                        var query = from ji in db.UtilityGovtPJInfos
                                    join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                    where DTO.PremiseTypeSLNoCheckList.Contains(PT.PremiseTypeSLNo) && ji.Year == DTO.Year &&
                                            ji.PostingDate.Month >= FromMonthNumber && ji.PostingDate.Month <= ToMonthNumber
                                    orderby ji.PostingID ascending
                                    select new
                                    {
                                        ji.PostingID,
                                        ji.PostingDate,
                                        AI.AgreementCode,
                                        AI.AliasCode,
                                        AI.AgreementName,
                                        PT.PremiseType,
                                        AI.PremiseName,
                                        ji.Year,
                                        ji.Month,
                                        U.UserID,
                                        ji.UtilitySLNo,
                                    };
                        lstjs = query.AsEnumerable().Select(x => new RMS.Models.UtilityGovtPJInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            Year = x.Year,
                            Month = x.Month,
                            UserID = x.UserID,
                            UtilitySLNo = x.UtilitySLNo,
                        }).ToList();
                    }
                    else if (DTO.AgreementSLNoCheckList != null)
                    {
                        //AgreementSLNo Wise
                        var query = from ji in db.UtilityGovtPJInfos
                                    join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                    where DTO.AgreementSLNoCheckList.Contains(ji.AgreementSLNo) && ji.Year == DTO.Year &&
                                            ji.PostingDate.Month >= FromMonthNumber && ji.PostingDate.Month <= ToMonthNumber
                                    orderby ji.PostingID ascending
                                    select new
                                    {
                                        ji.PostingID,
                                        ji.PostingDate,
                                        AI.AgreementCode,
                                        AI.AliasCode,
                                        AI.AgreementName,
                                        PT.PremiseType,
                                        AI.PremiseName,
                                        ji.Year,
                                        ji.Month,
                                        U.UserID,
                                        ji.UtilitySLNo,
                                    };
                        lstjs = query.AsEnumerable().Select(x => new RMS.Models.UtilityGovtPJInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            Year = x.Year,
                            Month = x.Month,
                            UserID = x.UserID,
                            UtilitySLNo = x.UtilitySLNo,
                        }).ToList();
                    }
                    else if (DTO.VendorSLNoCheckList != null)
                    {
                        //VendorSLNo Wise
                        var query = from ji in db.UtilityGovtPJInfos
                                    join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                    where DTO.VendorSLNoCheckList.Contains(ji.UtilitySLNo) && ji.Year == DTO.Year &&
                                            ji.PostingDate.Month >= FromMonthNumber && ji.PostingDate.Month <= ToMonthNumber
                                    orderby ji.PostingID ascending
                                    select new
                                    {
                                        ji.PostingID,
                                        ji.PostingDate,
                                        AI.AgreementCode,
                                        AI.AliasCode,
                                        AI.AgreementName,
                                        PT.PremiseType,
                                        AI.PremiseName,
                                        ji.Year,
                                        ji.Month,
                                        U.UserID,
                                        ji.UtilitySLNo,
                                    };
                        lstjs = query.AsEnumerable().Select(x => new RMS.Models.UtilityGovtPJInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            Year = x.Year,
                            Month = x.Month,
                            UserID = x.UserID,
                            UtilitySLNo = x.UtilitySLNo,
                        }).ToList();
                    }
                    else
                    {
                        //All Records
                        var query = from ji in db.UtilityGovtPJInfos
                                    join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                    join LI in db.UtilityInfos on AI.AgreementSLNo equals LI.AgreementSLNo
                                    join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                    where ji.Year == DTO.Year &&
                                            ji.PostingDate.Month >= FromMonthNumber && ji.PostingDate.Month <= ToMonthNumber
                                    orderby ji.PostingID ascending
                                    select new
                                    {
                                        ji.PostingID,
                                        ji.PostingDate,
                                        AI.AgreementCode,
                                        AI.AliasCode,
                                        AI.AgreementName,
                                        PT.PremiseType,
                                        AI.PremiseName,
                                        ji.Year,
                                        ji.Month,
                                        U.UserID,
                                        ji.UtilitySLNo,
                                    };
                        lstjs = query.AsEnumerable().Select(x => new RMS.Models.UtilityGovtPJInfoDTO
                        {
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            Year = x.Year,
                            Month = x.Month,
                            UserID = x.UserID,
                            UtilitySLNo = x.UtilitySLNo,
                        }).ToList();
                    }
                    lstjs = lstjs.GroupBy(x => x.PostingID).Select(x => x.First()).Distinct().ToList();
                    //foreach (RMS.Models.UtilityGovtPJInfoDTO item in lstjs)
                    //{
                    //    var UtilityInfo = db.UtilityInfos.Where(x => x.UtilitySLNo == item.UtilitySLNo).Select(x => new { x.UtilityVendorCode, x.UtilityLandlordName }).SingleOrDefault();
                    //    item.VendorCode = UtilityInfo.UtilityVendorCode;
                    //    item.LandlordName = UtilityInfo.UtilityLandlordName;
                    //}
                    ViewBag.DateRange = DTO.FromMonthName + "-" + DTO.ToMonthName + ", " + DTO.Year;
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityGovtPJInfoReport, lstjs);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RedirectUtilityGovtPJInfoDetails(string PostingID)
        {
            TempData.Remove("PostingID");
            TempData.Add("PostingID", PostingID);
            return RedirectToAction("UtilityGovtPJInfoDetails");
        }

        [HttpGet]
        public ActionResult UtilityGovtPJInfoDetails()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    var strPostingID = TempData["PostingID"];
                    if (strPostingID == null)
                    {
                        return RedirectToAction("Login", "Home");
                    }
                    string PostingID = strPostingID.ToString();
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityGovtPJReport";
                    IList<RMS.Models.UtilityGovtPJInfoDTO> lstUtilityGovtPJInfoDTO = new List<RMS.Models.UtilityGovtPJInfoDTO>();
                    var query = from ji in db.UtilityGovtPJInfos
                                join AI in db.AgreementInfos on ji.AgreementSLNo equals AI.AgreementSLNo
                                join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                join U in db.UserInfos on ji.UserSLNo equals U.UserSLNo
                                where ji.PostingID == PostingID
                                orderby ji.UtilityGovtPJSLNo ascending
                                select new
                                {
                                    ji.UtilityGovtPJSLNo,
                                    ji.PostingID,
                                    ji.PostingDate,
                                    ji.AgreementSLNo,
                                    AI.AgreementCode,
                                    AI.AliasCode,
                                    AI.AgreementName,
                                    PT.PremiseType,
                                    AI.PremiseName,
                                    ji.Year,
                                    ji.Month,
                                    ji.GLCode,
                                    ji.GLName,
                                    ji.DrCrID,
                                    ji.Amount,
                                    ji.UtilitySLNo,
                                    ji.Remarks,
                                    U.UserID,
                                };
                    lstUtilityGovtPJInfoDTO = query.AsEnumerable().Select(x => new RMS.Models.UtilityGovtPJInfoDTO
                    {
                        UtilityGovtPJSLNo = x.UtilityGovtPJSLNo,
                        PostingID = x.PostingID,
                        PostingDate = x.PostingDate.ToString("dd/MM/yyyy"),
                        AgreementSLNo = x.AgreementSLNo,
                        AgreementCode = x.AgreementCode,
                        AliasCode = x.AliasCode,
                        AgreementName = x.AgreementName,
                        PremiseType = x.PremiseType,
                        PremiseName = x.PremiseName,
                        Year = x.Year,
                        Month = x.Month,
                        GLCode = x.GLCode,
                        GLName = x.GLName,
                        DrCrID = x.DrCrID,
                        Amount = x.Amount,
                        UtilitySLNo = x.UtilitySLNo,
                        Remarks = x.Remarks,
                        UserID = x.UserID,
                    }).ToList();
                    foreach (RMS.Models.UtilityGovtPJInfoDTO item in lstUtilityGovtPJInfoDTO)
                    {
                        var UtilityInfo = db.UtilityInfos.Where(x => x.AgreementSLNo == item.AgreementSLNo && x.UtilitySLNo == item.UtilitySLNo).Select(x => new { x.UtilityVendorCode, x.UtilityLandlordName }).SingleOrDefault();
                        if (UtilityInfo != null)
                        {
                            item.VendorCode = UtilityInfo.UtilityVendorCode;
                            item.LandlordName = UtilityInfo.UtilityLandlordName;
                        }
                    }
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityGovtPJInfoDetails, lstUtilityGovtPJInfoDTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult RentHoldPayment()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentHoldPayment";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 68 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;

                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();

                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate &&
                     x.IsHoldBlockPayment == true && x.IsRenewal == false && x.IsModified == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();

                    //ViewBag.VendorList = db.LandlordInfos.Where(x => x.IsHoldBlockPayment == true)
                    //    .Select(x => new { x.LandlordSLNo, x.VendorCode, x.LandlordName })
                    //    .GroupBy(y => new { y.LandlordSLNo, y.VendorCode, y.LandlordName })
                    //    .Select(y => new { LandlordSLNo = y.FirstOrDefault().LandlordSLNo, VendorCode = y.FirstOrDefault().VendorCode, FullName = y.FirstOrDefault().VendorCode + " - " + y.FirstOrDefault().LandlordName }).OrderBy(x => x.FullName).ToList(); ;

                    RMS.Models.CostCenterScheduleDTO DTO = new RMS.Models.CostCenterScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.RentHoldPayment, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult RentHoldPayment(RMS.Models.CostCenterScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/RentHoldPayment";
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    IList<RMS.Models.ContractScheduleDTO> lstContractSchedule = new List<RMS.Models.ContractScheduleDTO>();
                    IList<RMS.Models.LandlordScheduleDTO> lstLandlordSchedule = new List<RMS.Models.LandlordScheduleDTO>();
                    IList<RMS.Models.UtilityScheduleDTO> lstUtilitySchedule = new List<RMS.Models.UtilityScheduleDTO>();
                    int FromMonthNumber = Convert.ToDateTime("01-" + DTO.FromMonthName + "2021").Month;
                    int ToMonthNumber = Convert.ToDateTime("01-" + DTO.ToMonthName + "2021").Month;
                    ViewBag.DateRange = DTO.FromMonthName + "-" + DTO.ToMonthName + ", " + DTO.Year;
                    if (DTO.AgreementSLNoCheckList != null)
                    {
                        var queryContractSchedule = from CS in db.ContractSchedules
                                                    join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                    join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                    join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                    where DTO.AgreementSLNoCheckList.Contains(CS.AgreementSLNo) && CS.Year == DTO.Year &&
                                                          CS.ScheduleDate.Month >= FromMonthNumber && CS.ScheduleDate.Month <= ToMonthNumber &&
                                                          CS.IsPJPosted == false
                                                    orderby CS.ContractScheduleSLNo ascending
                                                    select new
                                                    {
                                                        CS.ContractScheduleSLNo,
                                                        CS.ScheduleDate,
                                                        CS.AgreementSLNo,
                                                        AI.PremiseTypeSLNo,
                                                        PT.PremiseType,
                                                        AI.PremiseName,
                                                        AI.AgreementCode,
                                                        AI.AliasCode,
                                                        AI.AgreementName,
                                                        AI.AgreementStartDate,
                                                        AI.AgreementEndDate,
                                                        AI.AgreementPeriod,
                                                        AI.RenewalFrequency,
                                                        AI.RentDueDay,
                                                        AI.UOM,
                                                        CS.MonthNo,
                                                        CS.Year,
                                                        CS.Month,
                                                        CS.ReviewNo,
                                                        CS.CostPerUnit,
                                                        AI.TotalArea,
                                                        CS.TotalRentAmount,
                                                        AI.AdvanceAmount,
                                                        AI.AdvanceAdjustmentPeriod,
                                                        CS.AdvanceAdjustmentAmount,
                                                        AI.TaxPercentage,
                                                        CS.TaxAmount,
                                                        AI.VATPercentage,
                                                        CS.VATAmount,
                                                        CS.NetRentAmount,
                                                        CS.UserSLNo,
                                                        U.UserID,
                                                        CS.EntryDate,
                                                        CS.IsPosted,
                                                        CS.PostingID,
                                                        CS.PostingDate,
                                                        CS.PostingUserSLNo,
                                                        S.StatusName,
                                                        CS.IsBlock,
                                                        CS.BlockDate,
                                                        CS.BlockUserSLNo,
                                                        CS.IsPJPosted,
                                                        CS.PJPostingID,
                                                        CS.PJPostingDate,
                                                        CS.PJPostingUserSLNo,
                                                    };
                        lstContractSchedule = queryContractSchedule.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                        {
                            ContractScheduleSLNo = x.ContractScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ReviewNo = x.ReviewNo,
                            CostPerUnit = x.CostPerUnit,
                            TotalArea = x.TotalArea,
                            TotalRentAmount = x.TotalRentAmount,
                            AdvanceAmount = x.AdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            TaxPercentage = x.TaxPercentage,
                            TaxAmount = x.TaxAmount,
                            VATPercentage = x.VATPercentage,
                            VATAmount = x.VATAmount,
                            NetRentAmount = x.NetRentAmount,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString(),
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                        }).ToList();
                        int SLNOContract = 0;
                        foreach (RMS.Models.ContractScheduleDTO item in lstContractSchedule)
                        {
                            SLNOContract++;
                            item.SLNO = SLNOContract;
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            if (item.IsPJPosted == false)
                            {
                                item.PJPostText = "Unposted";
                            }
                            else
                            {
                                item.PJPostText = "Posted";
                            }
                        }
                        return View(AgreementInfoPath.HoldAgreementRentSchedule, lstContractSchedule);
                    }
                    else if (DTO.LandlordSLNoCheckList != null)
                    {
                        var queryLandlordSchedule = from LS in db.LandlordSchedules
                                                    join AI in db.AgreementInfos on LS.AgreementSLNo equals AI.AgreementSLNo
                                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                    join LI in db.LandlordInfos on LS.LandlordSLNo equals LI.LandlordSLNo
                                                    join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                    join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                    where DTO.LandlordSLNoCheckList.Contains(LS.LandlordSLNo) &&
                                                          AI.IsRenewal == false && AI.IsModified == false &&
                                                          LS.Year == DTO.Year && LS.ScheduleDate.Month >= FromMonthNumber && LS.ScheduleDate.Month <= ToMonthNumber &&
                                                          LS.IsPJPosted == false
                                                    orderby LS.LScheduleSLNo ascending
                                                    select new
                                                    {
                                                        LS.LScheduleSLNo,
                                                        LS.ScheduleDate,
                                                        LS.AgreementSLNo,
                                                        AI.PremiseTypeSLNo,
                                                        PT.PremiseType,
                                                        AI.PremiseName,
                                                        AI.AgreementCode,
                                                        AI.AliasCode,
                                                        AI.AgreementName,
                                                        AI.AgreementStartDate,
                                                        AI.AgreementEndDate,
                                                        AI.AgreementPeriod,
                                                        AI.RenewalFrequency,
                                                        AI.RentDueDay,
                                                        AI.UOM,
                                                        LS.MonthNo,
                                                        LS.Year,
                                                        LS.Month,
                                                        LS.ReviewNo,
                                                        LS.CostPerUnit,
                                                        AI.TotalArea,
                                                        LS.TotalRentAmount,
                                                        AI.AdvanceAmount,
                                                        AI.AdvanceAdjustmentPeriod,
                                                        AiAdvanceAdjustmentAmount = AI.AdvanceAdjustmentAmount,
                                                        LI.AdvanceAdjustmentPC,
                                                        LS.AdvanceAdjustmentAmount,
                                                        AiTaxPercentage = AI.TaxPercentage,
                                                        AiTaxAmount = AI.TaxAmount,
                                                        LI.TaxPC,
                                                        LS.TaxAmount,
                                                        AiVATPercentage = AI.VATPercentage,
                                                        AiVATAmount = AI.VATAmount,
                                                        LI.VATPC,
                                                        LS.VATAmount,
                                                        AiNetRentAmount = AI.NetRentAmount,
                                                        LI.RentPC,
                                                        LS.NetRentAmount,
                                                        LS.UserSLNo,
                                                        U.UserID,
                                                        LS.EntryDate,
                                                        LS.IsPosted,
                                                        LS.PostingID,
                                                        LS.PostingDate,
                                                        LS.PostingUserSLNo,
                                                        S.StatusName,
                                                        LI.VendorCode,
                                                        LI.LandlordName,
                                                        LS.IsBlock,
                                                        LS.BlockDate,
                                                        LS.BlockUserSLNo,
                                                        LS.IsPJPosted,
                                                        LS.PJPostingID,
                                                        LS.PJPostingDate,
                                                        LS.PJPostingUserSLNo,
                                                    };
                        lstLandlordSchedule = queryLandlordSchedule.AsEnumerable().Select(x => new RMS.Models.LandlordScheduleDTO
                        {
                            LScheduleSLNo = x.LScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ReviewNo = x.ReviewNo,
                            CostPerUnit = x.CostPerUnit,
                            TotalArea = x.TotalArea,
                            TotalRentAmount = x.TotalRentAmount,
                            AdvanceAmount = x.AdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AiAdvanceAdjustmentAmount = x.AiAdvanceAdjustmentAmount,
                            AdvanceAdjustmentPC = x.AdvanceAdjustmentPC,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            AiTaxPercentage = x.AiTaxPercentage,
                            AiTaxAmount = x.AiTaxAmount,
                            TaxPercentage = x.TaxPC,
                            TaxAmount = x.TaxAmount,
                            AiVATPercentage = x.AiVATPercentage,
                            AiVATAmount = x.AiVATAmount,
                            VATPercentage = x.VATPC,
                            VATAmount = x.VATAmount,
                            RentPercentage = x.RentPC,
                            NetRentAmount = x.NetRentAmount,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate,
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            VendorCode = x.VendorCode,
                            LandlordName = x.LandlordName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                        }).ToList();
                        int SLNOLandlord = 0;
                        foreach (RMS.Models.LandlordScheduleDTO item in lstLandlordSchedule)
                        {
                            SLNOLandlord++;
                            item.SLNO = SLNOLandlord;
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            if (item.IsPJPosted == false)
                            {
                                item.PJPostText = "Unposted";
                            }
                            else
                            {
                                item.PJPostText = "Posted";
                            }
                        }
                        return View(AgreementInfoPath.HoldLandlordRentSchedule, lstLandlordSchedule);
                    }
                    else
                    {
                        var queryContractSchedule = from CS in db.ContractSchedules
                                                    join AI in db.AgreementInfos on CS.AgreementSLNo equals AI.AgreementSLNo
                                                    join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                    join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                    join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                    where AI.IsHoldBlockPayment == true &&
                                                          AI.IsRenewal == false && AI.IsModified == false &&
                                                          CS.Year == DTO.Year && CS.ScheduleDate.Month >= FromMonthNumber && CS.ScheduleDate.Month <= ToMonthNumber &&
                                                          CS.IsPJPosted == false
                                                    orderby CS.ContractScheduleSLNo ascending
                                                    select new
                                                    {
                                                        CS.ContractScheduleSLNo,
                                                        CS.ScheduleDate,
                                                        CS.AgreementSLNo,
                                                        AI.PremiseTypeSLNo,
                                                        PT.PremiseType,
                                                        AI.PremiseName,
                                                        AI.AgreementCode,
                                                        AI.AliasCode,
                                                        AI.AgreementName,
                                                        AI.AgreementStartDate,
                                                        AI.AgreementEndDate,
                                                        AI.AgreementPeriod,
                                                        AI.RenewalFrequency,
                                                        AI.RentDueDay,
                                                        AI.UOM,
                                                        CS.MonthNo,
                                                        CS.Year,
                                                        CS.Month,
                                                        CS.ReviewNo,
                                                        CS.CostPerUnit,
                                                        AI.TotalArea,
                                                        CS.TotalRentAmount,
                                                        AI.AdvanceAmount,
                                                        AI.AdvanceAdjustmentPeriod,
                                                        CS.AdvanceAdjustmentAmount,
                                                        AI.TaxPercentage,
                                                        CS.TaxAmount,
                                                        AI.VATPercentage,
                                                        CS.VATAmount,
                                                        CS.NetRentAmount,
                                                        CS.UserSLNo,
                                                        U.UserID,
                                                        CS.EntryDate,
                                                        CS.IsPosted,
                                                        CS.PostingID,
                                                        CS.PostingDate,
                                                        CS.PostingUserSLNo,
                                                        S.StatusName,
                                                        CS.IsBlock,
                                                        CS.BlockDate,
                                                        CS.BlockUserSLNo,
                                                        CS.IsPJPosted,
                                                        CS.PJPostingID,
                                                        CS.PJPostingDate,
                                                        CS.PJPostingUserSLNo,
                                                    };
                        lstContractSchedule = queryContractSchedule.AsEnumerable().Select(x => new RMS.Models.ContractScheduleDTO
                        {
                            ContractScheduleSLNo = x.ContractScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ReviewNo = x.ReviewNo,
                            CostPerUnit = x.CostPerUnit,
                            TotalArea = x.TotalArea,
                            TotalRentAmount = x.TotalRentAmount,
                            AdvanceAmount = x.AdvanceAmount,
                            AdvanceAdjustmentPeriod = x.AdvanceAdjustmentPeriod,
                            AdvanceAdjustmentAmount = x.AdvanceAdjustmentAmount,
                            TaxPercentage = x.TaxPercentage,
                            TaxAmount = x.TaxAmount,
                            VATPercentage = x.VATPercentage,
                            VATAmount = x.VATAmount,
                            NetRentAmount = x.NetRentAmount,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate.ToString(),
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                        }).ToList();
                        int SLNOContract = 0;
                        foreach (RMS.Models.ContractScheduleDTO item in lstContractSchedule)
                        {
                            SLNOContract++;
                            item.SLNO = SLNOContract;
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            if (item.IsPJPosted == false)
                            {
                                item.PJPostText = "Unposted";
                            }
                            else
                            {
                                item.PJPostText = "Posted";
                            }
                        }
                        return View(AgreementInfoPath.HoldAgreementRentSchedule, lstContractSchedule);
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpGet]
        public ActionResult UtilityHoldPayment()
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    int LoginUserSLNo = Convert.ToInt32(Session["LoginUserSLNo"].ToString());
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityHoldPayment";
                    //==Check for Permission
                    bool Check = false;
                    Check = db.UserPermissions.Where(x => x.ChildID == 69 && x.UserSLNo == LoginUserSLNo).Select(x => x.Checked).FirstOrDefault();
                    if (Check == false)
                    {
                        UserPermissionMessage msg = new UserPermissionMessage();
                        ViewBag.Message = msg.AccessDenied;
                        return View(HomePath.DisplayMessage);
                    }
                    //==List of Years
                    IList<SelectListItem> Years = new List<SelectListItem>();
                    Years.Add(new SelectListItem { Text = "2010", Value = "2010" });
                    Years.Add(new SelectListItem { Text = "2011", Value = "2011" });
                    Years.Add(new SelectListItem { Text = "2012", Value = "2012" });
                    Years.Add(new SelectListItem { Text = "2013", Value = "2013" });
                    Years.Add(new SelectListItem { Text = "2014", Value = "2014" });
                    Years.Add(new SelectListItem { Text = "2015", Value = "2015" });
                    Years.Add(new SelectListItem { Text = "2016", Value = "2016" });
                    Years.Add(new SelectListItem { Text = "2017", Value = "2017" });
                    Years.Add(new SelectListItem { Text = "2018", Value = "2018" });
                    Years.Add(new SelectListItem { Text = "2019", Value = "2019" });
                    Years.Add(new SelectListItem { Text = "2020", Value = "2020" });
                    Years.Add(new SelectListItem { Text = "2021", Value = "2021" });
                    Years.Add(new SelectListItem { Text = "2022", Value = "2022" });
                    Years.Add(new SelectListItem { Text = "2023", Value = "2023" });
                    Years.Add(new SelectListItem { Text = "2024", Value = "2024" });
                    Years.Add(new SelectListItem { Text = "2025", Value = "2025" });
                    Years.Add(new SelectListItem { Text = "2026", Value = "2026" });
                    Years.Add(new SelectListItem { Text = "2027", Value = "2027" });
                    Years.Add(new SelectListItem { Text = "2028", Value = "2028" });
                    Years.Add(new SelectListItem { Text = "2029", Value = "2029" });
                    Years.Add(new SelectListItem { Text = "2030", Value = "2030" });
                    Years.Add(new SelectListItem { Text = "2031", Value = "2031" });
                    Years.Add(new SelectListItem { Text = "2032", Value = "2032" });
                    Years.Add(new SelectListItem { Text = "2033", Value = "2033" });
                    Years.Add(new SelectListItem { Text = "2034", Value = "2034" });
                    Years.Add(new SelectListItem { Text = "2035", Value = "2035" });
                    Years.Add(new SelectListItem { Text = "2036", Value = "2036" });
                    Years.Add(new SelectListItem { Text = "2037", Value = "2037" });
                    Years.Add(new SelectListItem { Text = "2038", Value = "2038" });
                    Years.Add(new SelectListItem { Text = "2039", Value = "2039" });
                    Years.Add(new SelectListItem { Text = "2040", Value = "2040" });
                    SelectList Year = new SelectList(Years, "Value", "Text", System.DateTime.Now.Year);
                    ViewBag.Year = Year;
                    ViewBag.SelectedYear = System.DateTime.Now.Year;
                    //==List of Months
                    IList<SelectListItem> Months = new List<SelectListItem>();
                    Months.Add(new SelectListItem { Text = "January", Value = "January" });
                    Months.Add(new SelectListItem { Text = "February", Value = "February" });
                    Months.Add(new SelectListItem { Text = "March", Value = "March" });
                    Months.Add(new SelectListItem { Text = "April", Value = "April" });
                    Months.Add(new SelectListItem { Text = "May", Value = "May" });
                    Months.Add(new SelectListItem { Text = "June", Value = "June" });
                    Months.Add(new SelectListItem { Text = "July", Value = "July" });
                    Months.Add(new SelectListItem { Text = "August", Value = "August" });
                    Months.Add(new SelectListItem { Text = "September", Value = "September" });
                    Months.Add(new SelectListItem { Text = "October", Value = "October" });
                    Months.Add(new SelectListItem { Text = "November", Value = "November" });
                    Months.Add(new SelectListItem { Text = "December", Value = "December" });
                    SelectList Month = new SelectList(Months, "Value", "Text", DateTime.Now.ToString("MMMM"));
                    ViewBag.MonthList = Month;
                    ViewBag.CurrentMonth = DateTime.Now.ToString("MMMM");

                    AgreementStatus AgreementStatus = new AgreementStatus();
                    AgreementType AgreementType = new AgreementType();
                    DTOBasic DTOBasic = new DTOBasic();

                    ViewBag.AgreementList = db.AgreementInfos.Where(x => x.AgreementStatus == AgreementStatus.Activate &&
                    x.IsHoldBlockPayment == true && x.IsRenewal == false && x.IsModified == false)
                        .Select(x => new { AgreementSLNo = x.AgreementSLNo, x.AgreementCode, FullName = x.AliasCode + " " + x.AgreementName }).OrderByDescending(x => x.AgreementCode).ToList();


                    //ViewBag.UtilityVendorList = db.UtilityInfos.Where(x => x.IsHoldBlockPayment == true)
                    //    .Select(x => new { x.UtilitySLNo, x.UtilityVendorCode, x.UtilityLandlordName })
                    //    //.GroupBy(y => y.VendorCode)
                    //    .GroupBy(y => new { y.UtilitySLNo, y.UtilityVendorCode, y.UtilityLandlordName })
                    //    .Select(y => new { UtilitySLNo = y.FirstOrDefault().UtilitySLNo, UtilityVendorCode = y.FirstOrDefault().UtilityVendorCode, FullName = y.FirstOrDefault().UtilityVendorCode + " - " + y.FirstOrDefault().UtilityLandlordName }).OrderBy(x => x.FullName).ToList(); ;

                    RMS.Models.CostCenterScheduleDTO DTO = new RMS.Models.CostCenterScheduleDTO();
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    return View(AgreementInfoPath.UtilityHoldPayment, DTO);
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult UtilityHoldPayment(RMS.Models.CostCenterScheduleDTO DTO)
        {
            if (System.Web.HttpContext.Current.Session != null && Session["LoginUserID"] != null)
            {
                try
                {
                    //==Check multiple login validation
                    string SessionUserID = Session["LoginUserID"].ToString();
                    string LoginDateTime = Session["LoginDateTime"].ToString();
                    string LoginDate = db.UserInfos.Where(x => x.UserID == SessionUserID).Select(x => x.LoginDate).FirstOrDefault().ToString();
                    if (LoginDateTime != LoginDate)
                    {
                        return RedirectToAction("SignOut", "Home");
                    }
                    //==
                    string LoginUserID = Session["LoginUserID"].ToString();
                    ViewBag.LoginUserID = LoginUserID;
                    ViewBag.URLPath = "AgreementInfo/UtilityHoldPayment";
                    AgreementInfoPath AgreementInfoPath = new AgreementInfoPath();
                    IList<RMS.Models.UtilityScheduleDTO> lstUtilitySchedule = new List<RMS.Models.UtilityScheduleDTO>();
                    int FromMonthNumber = Convert.ToDateTime("01-" + DTO.FromMonthName + "2021").Month;
                    int ToMonthNumber = Convert.ToDateTime("01-" + DTO.ToMonthName + "2021").Month;
                    ViewBag.DateRange = DTO.FromMonthName + "-" + DTO.ToMonthName + ", " + DTO.Year;
                    if (DTO.AgreementSLNoCheckList != null)
                    {
                        var queryUtilitySchedule = from US in db.UtilitySchedules
                                                   join AI in db.AgreementInfos on US.AgreementSLNo equals AI.AgreementSLNo
                                                   join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                   join UI in db.UtilityInfos on US.UtilitySLNo equals UI.UtilitySLNo
                                                   join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                   join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                   where DTO.AgreementSLNoCheckList.Contains(US.AgreementSLNo) &&
                                                         AI.IsRenewal == false && AI.IsModified == false &&
                                                         US.Year == DTO.Year && US.ScheduleDate.Month >= FromMonthNumber && US.ScheduleDate.Month <= ToMonthNumber &&
                                                         US.IsPJPosted == false
                                                   orderby US.UScheduleSLNo ascending
                                                   select new
                                                   {
                                                       US.UScheduleSLNo,
                                                       US.ScheduleDate,
                                                       US.AgreementSLNo,
                                                       AI.PremiseTypeSLNo,
                                                       PT.PremiseType,
                                                       AI.PremiseName,
                                                       AI.AgreementCode,
                                                       AI.AliasCode,
                                                       AI.AgreementName,
                                                       AI.AgreementStartDate,
                                                       AI.AgreementEndDate,
                                                       AI.AgreementPeriod,
                                                       AI.RenewalFrequency,
                                                       AI.RentDueDay,
                                                       AI.UOM,
                                                       US.MonthNo,
                                                       US.Year,
                                                       US.Month,
                                                       UI.ServiceChargePC,
                                                       US.ServiceChargeAmount,
                                                       UI.OnlineTowerPC,
                                                       US.OnlineTowerAmount,
                                                       UI.GeneratorSpacePC,
                                                       US.GeneratorSpaceAmount,
                                                       UI.CarParkingPC,
                                                       US.CarParkingAmount,
                                                       UI.TaxPC,
                                                       US.TaxAmount,
                                                       UI.VATPC,
                                                       US.VATAmount,
                                                       US.UserSLNo,
                                                       U.UserID,
                                                       US.EntryDate,
                                                       US.IsPosted,
                                                       US.PostingID,
                                                       US.PostingDate,
                                                       US.PostingUserSLNo,
                                                       S.StatusName,
                                                       UI.UtilityVendorCode,
                                                       UI.UtilityLandlordName,
                                                       US.IsBlock,
                                                       US.BlockDate,
                                                       US.BlockUserSLNo,
                                                       US.IsPJPosted,
                                                       US.PJPostingID,
                                                       US.PJPostingDate,
                                                       US.PJPostingUserSLNo,
                                                   };
                        lstUtilitySchedule = queryUtilitySchedule.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ServiceChargePC = x.ServiceChargePC,
                            ServiceChargeAmount = x.ServiceChargeAmount,
                            OnlineTowerPC = x.OnlineTowerPC,
                            OnlineTowerAmount = x.OnlineTowerAmount,
                            GeneratorSpacePC = x.GeneratorSpacePC,
                            GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                            CarParkingPC = x.CarParkingPC,
                            CarParkingAmount = x.CarParkingAmount,
                            UtilityTaxPC = x.TaxPC,
                            UtilityTaxAmount = x.TaxAmount,
                            UtilityVATPC = x.VATPC,
                            UtilityVATAmount = x.VATAmount,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate,
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            VendorCode = x.UtilityVendorCode,
                            LandlordName = x.UtilityLandlordName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                        }).ToList();
                        int SLNOUtility = 0;
                        foreach (RMS.Models.UtilityScheduleDTO item in lstUtilitySchedule)
                        {
                            SLNOUtility++;
                            item.SLNO = SLNOUtility;
                            if (item.IsPosted == true)
                            {
                                //==
                            }
                            else
                            {
                                //==
                            }
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            if (item.IsPJPosted == false)
                            {
                                item.PJPostText = "Unposted";
                            }
                            else
                            {
                                item.PJPostText = "Posted";
                            }
                        }
                        return View(AgreementInfoPath.HoldUtilityRentSchedule, lstUtilitySchedule);
                    }
                    else if (DTO.LandlordSLNoCheckList != null)
                    {
                        var queryUtilitySchedule = from US in db.UtilitySchedules
                                                   join AI in db.AgreementInfos on US.AgreementSLNo equals AI.AgreementSLNo
                                                   join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                   join UI in db.UtilityInfos on US.UtilitySLNo equals UI.UtilitySLNo
                                                   join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                   join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                   where DTO.LandlordSLNoCheckList.Contains(US.UtilitySLNo) &&
                                                         AI.IsRenewal == false && AI.IsModified == false &&
                                                         US.Year == DTO.Year && US.ScheduleDate.Month >= FromMonthNumber && US.ScheduleDate.Month <= ToMonthNumber &&
                                                         US.IsPJPosted == false
                                                   orderby US.UScheduleSLNo ascending
                                                   select new
                                                   {
                                                       US.UScheduleSLNo,
                                                       US.ScheduleDate,
                                                       US.AgreementSLNo,
                                                       AI.PremiseTypeSLNo,
                                                       PT.PremiseType,
                                                       AI.PremiseName,
                                                       AI.AgreementCode,
                                                       AI.AliasCode,
                                                       AI.AgreementName,
                                                       AI.AgreementStartDate,
                                                       AI.AgreementEndDate,
                                                       AI.AgreementPeriod,
                                                       AI.RenewalFrequency,
                                                       AI.RentDueDay,
                                                       AI.UOM,
                                                       US.MonthNo,
                                                       US.Year,
                                                       US.Month,
                                                       UI.ServiceChargePC,
                                                       US.ServiceChargeAmount,
                                                       UI.OnlineTowerPC,
                                                       US.OnlineTowerAmount,
                                                       UI.GeneratorSpacePC,
                                                       US.GeneratorSpaceAmount,
                                                       UI.CarParkingPC,
                                                       US.CarParkingAmount,
                                                       UI.TaxPC,
                                                       US.TaxAmount,
                                                       UI.VATPC,
                                                       US.VATAmount,
                                                       US.UserSLNo,
                                                       U.UserID,
                                                       US.EntryDate,
                                                       US.IsPosted,
                                                       US.PostingID,
                                                       US.PostingDate,
                                                       US.PostingUserSLNo,
                                                       S.StatusName,
                                                       UI.UtilityVendorCode,
                                                       UI.UtilityLandlordName,
                                                       US.IsBlock,
                                                       US.BlockDate,
                                                       US.BlockUserSLNo,
                                                       US.IsPJPosted,
                                                       US.PJPostingID,
                                                       US.PJPostingDate,
                                                       US.PJPostingUserSLNo,
                                                   };
                        lstUtilitySchedule = queryUtilitySchedule.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ServiceChargePC = x.ServiceChargePC,
                            ServiceChargeAmount = x.ServiceChargeAmount,
                            OnlineTowerPC = x.OnlineTowerPC,
                            OnlineTowerAmount = x.OnlineTowerAmount,
                            GeneratorSpacePC = x.GeneratorSpacePC,
                            GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                            CarParkingPC = x.CarParkingPC,
                            CarParkingAmount = x.CarParkingAmount,
                            UtilityTaxPC = x.TaxPC,
                            UtilityTaxAmount = x.TaxAmount,
                            UtilityVATPC = x.VATPC,
                            UtilityVATAmount = x.VATAmount,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate,
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            VendorCode = x.UtilityVendorCode,
                            LandlordName = x.UtilityLandlordName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                        }).ToList();
                        int SLNOUtility = 0;
                        foreach (RMS.Models.UtilityScheduleDTO item in lstUtilitySchedule)
                        {
                            SLNOUtility++;
                            item.SLNO = SLNOUtility;
                            if (item.IsPosted == true)
                            {
                                //==
                            }
                            else
                            {
                                //==
                            }
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            if (item.IsPJPosted == false)
                            {
                                item.PJPostText = "Unposted";
                            }
                            else
                            {
                                item.PJPostText = "Posted";
                            }
                        }
                        return View(AgreementInfoPath.HoldUtilityRentSchedule, lstUtilitySchedule);
                    }
                    else
                    {
                        var queryUtilitySchedule = from US in db.UtilitySchedules
                                                   join AI in db.AgreementInfos on US.AgreementSLNo equals AI.AgreementSLNo
                                                   join PT in db.PremiseTypeInfos on AI.PremiseTypeSLNo equals PT.PremiseTypeSLNo
                                                   join UI in db.UtilityInfos on US.UtilitySLNo equals UI.UtilitySLNo
                                                   join U in db.UserInfos on AI.UserSLNo equals U.UserSLNo
                                                   join S in db.StatusInfos on AI.Status equals S.StatusValue
                                                   where AI.IsHoldBlockPayment == true &&
                                                         AI.IsRenewal == false && AI.IsModified == false &&
                                                         US.Year == DTO.Year && US.ScheduleDate.Month >= FromMonthNumber && US.ScheduleDate.Month <= ToMonthNumber &&
                                                         US.IsPJPosted == false
                                                   orderby US.UScheduleSLNo ascending
                                                   select new
                                                   {
                                                       US.UScheduleSLNo,
                                                       US.ScheduleDate,
                                                       US.AgreementSLNo,
                                                       AI.PremiseTypeSLNo,
                                                       PT.PremiseType,
                                                       AI.PremiseName,
                                                       AI.AgreementCode,
                                                       AI.AliasCode,
                                                       AI.AgreementName,
                                                       AI.AgreementStartDate,
                                                       AI.AgreementEndDate,
                                                       AI.AgreementPeriod,
                                                       AI.RenewalFrequency,
                                                       AI.RentDueDay,
                                                       AI.UOM,
                                                       US.MonthNo,
                                                       US.Year,
                                                       US.Month,
                                                       UI.ServiceChargePC,
                                                       US.ServiceChargeAmount,
                                                       UI.OnlineTowerPC,
                                                       US.OnlineTowerAmount,
                                                       UI.GeneratorSpacePC,
                                                       US.GeneratorSpaceAmount,
                                                       UI.CarParkingPC,
                                                       US.CarParkingAmount,
                                                       UI.TaxPC,
                                                       US.TaxAmount,
                                                       UI.VATPC,
                                                       US.VATAmount,
                                                       US.UserSLNo,
                                                       U.UserID,
                                                       US.EntryDate,
                                                       US.IsPosted,
                                                       US.PostingID,
                                                       US.PostingDate,
                                                       US.PostingUserSLNo,
                                                       S.StatusName,
                                                       UI.UtilityVendorCode,
                                                       UI.UtilityLandlordName,
                                                       US.IsBlock,
                                                       US.BlockDate,
                                                       US.BlockUserSLNo,
                                                       US.IsPJPosted,
                                                       US.PJPostingID,
                                                       US.PJPostingDate,
                                                       US.PJPostingUserSLNo,
                                                   };
                        lstUtilitySchedule = queryUtilitySchedule.AsEnumerable().Select(x => new RMS.Models.UtilityScheduleDTO
                        {
                            UScheduleSLNo = x.UScheduleSLNo,
                            ScheduleDate = x.ScheduleDate,
                            AgreementSLNo = x.AgreementSLNo,
                            PremiseTypeSLNo = x.PremiseTypeSLNo,
                            PremiseType = x.PremiseType,
                            PremiseName = x.PremiseName,
                            AgreementCode = x.AgreementCode,
                            AliasCode = x.AliasCode,
                            AgreementName = x.AgreementName,
                            AgreementStartDate = x.AgreementStartDate.ToString("dd/MM/yyyy"),
                            AgreementEndDate = x.AgreementEndDate.ToString("dd/MM/yyyy"),
                            AgreementPeriod = x.AgreementPeriod,
                            RenewalFrequency = x.RenewalFrequency,
                            RentDueDay = x.RentDueDay,
                            UOM = x.UOM,
                            MonthNo = x.MonthNo,
                            Year = x.Year,
                            Month = x.Month,
                            ServiceChargePC = x.ServiceChargePC,
                            ServiceChargeAmount = x.ServiceChargeAmount,
                            OnlineTowerPC = x.OnlineTowerPC,
                            OnlineTowerAmount = x.OnlineTowerAmount,
                            GeneratorSpacePC = x.GeneratorSpacePC,
                            GeneratorSpaceAmount = x.GeneratorSpaceAmount,
                            CarParkingPC = x.CarParkingPC,
                            CarParkingAmount = x.CarParkingAmount,
                            UtilityTaxPC = x.TaxPC,
                            UtilityTaxAmount = x.TaxAmount,
                            UtilityVATPC = x.VATPC,
                            UtilityVATAmount = x.VATAmount,
                            UserSLNo = x.UserSLNo,
                            UserID = x.UserID,
                            EntryDate = x.EntryDate.ToString("dd/MM/yyyy"),
                            IsPosted = x.IsPosted,
                            PostingID = x.PostingID,
                            PostingDate = x.PostingDate,
                            PostingUserSLNo = x.PostingUserSLNo,
                            StatusName = x.StatusName,
                            VendorCode = x.UtilityVendorCode,
                            LandlordName = x.UtilityLandlordName,
                            IsBlock = x.IsBlock,
                            BlockDate = x.BlockDate,
                            BlockUserSLNo = x.BlockUserSLNo,
                            IsPJPosted = x.IsPJPosted,
                            PJPostingID = x.PJPostingID,
                            PJPostingDate = x.PJPostingDate.ToString(),
                            PJPostingUserSLNo = x.PJPostingUserSLNo,
                        }).ToList();
                        int SLNOUtility = 0;
                        foreach (RMS.Models.UtilityScheduleDTO item in lstUtilitySchedule)
                        {
                            SLNOUtility++;
                            item.SLNO = SLNOUtility;
                            if (item.IsPosted == true)
                            {
                                //==
                            }
                            else
                            {
                                //==
                            }
                            if (item.IsBlock == false)
                            {
                                item.BlockText = "Open";
                            }
                            else
                            {
                                item.BlockText = "Terminated";
                            }
                            if (item.IsPosted == false)
                            {
                                item.PostText = "Unposted";
                            }
                            else
                            {
                                item.PostText = "Posted";
                            }
                            if (item.IsPJPosted == false)
                            {
                                item.PJPostText = "Unposted";
                            }
                            else
                            {
                                item.PJPostText = "Posted";
                            }
                        }
                        return View(AgreementInfoPath.HoldUtilityRentSchedule, lstUtilitySchedule);
                    }
                }
                catch (Exception Ex)
                {
                    ErrorPath ErrorPath = new ErrorPath();
                    return View(ErrorPath.Index);
                }
            }
            else
            {
                return View(HomePath.Login);
            }
        }
        //==END
    }
}
