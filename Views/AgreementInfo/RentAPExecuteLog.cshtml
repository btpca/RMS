@model RMS.Models.ContractScheduleDTO
@{
    ViewBag.Title = "Rent AP - Execute Log";
    Layout = "~/Views/Shared/_LayoutMain.cshtml";
}
@using (Html.BeginForm("RentAPExecuteLog", "AgreementInfo", FormMethod.Post, new { id = "frmSubmit", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.Year)
    @Html.HiddenFor(model => model.Month)
    <input value="0" id="txtPremiseTypeSLNo" type="hidden">
    <input value="0" id="txtAgreementSLNo" type="hidden">
    <section class="content" style="padding-top:15px;">
        <div class="container-fluid">
            <div class="col-md-12">
                <div class="card card-info">
                    <div class="card-header">
                        <h3 class="card-title"><i class="fas fa-anchor"></i><span>&nbsp;&nbsp;Rent AP - Execute Log</span></h3>
                        <div id="spinner" style="display: none;padding-top:50px; padding-bottom:20px; padding-left:100px;">
                            <img id="img-spinner" src="@Url.Content("~/Content/Images/spinner.gif")" alt="Loading" />
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row" style="padding-top:10px;">
                            <div class="required col-xs-12 col-sm-4 col-md-3">
                                @Html.LabelFor(model => model.LogName, new { @class = "control-label" })
                            </div>
                            <div class="col-xs-12 col-sm-8 col-md-3">
                                @Html.TextBoxFor(model => model.LogName, new { @autofocus = "autofocus", autocomplete = "off", placeholder = "Input Log Name", style = "width: 350px;", @class = "form-control input-sm", id = "txtLogName" })
                            </div>
                        </div>
                        <div class="row" style="padding-top:10px;">
                            <div class="required col-xs-12 col-sm-4 col-md-3">
                                @Html.Label("Log Year", new { @class = "control-label" })
                            </div>
                            <div class="col-xs-12 col-sm-8 col-md-3">
                                @Html.DropDownList("YearA", new SelectList(ViewBag.Year, "Value", "Text", @ViewBag.SelectedYear), new { @class = "chosen form-control input-sm", style = "width: 350px;", id = "ddlYear" })
                            </div>
                        </div>
                        <div class="row" style="padding-top:10px;">
                            <div class="required col-xs-12 col-sm-4 col-md-3">
                                @Html.Label("Log Month", new { @class = "control-label" })
                            </div>
                            <div class="col-xs-12 col-sm-8 col-md-3">
                                @Html.DropDownListFor(model => model.Month, new SelectList(ViewBag.MonthList, "Value", "Text", @ViewBag.CurrentMonth), new { @class = "chosen form-control input-sm", style = "width: 350px;", id = "ddlMonth" })
                            </div>
                        </div>
                        <hr />
                        <b>By All Agreements</b>
                        <hr />
                        <b>OR</b>
                        <div class="row" style="padding-top:10px;">
                            <div class="col-xs-12 col-sm-4 col-md-3">
                                @Html.Label("By Agreement", new { @class = "control-label" })
                            </div>
                            <div class="col-xs-12 col-sm-8 col-md-3">
                                @Html.DropDownListFor(model => model.AgreementSLNoCheckList, new SelectList(ViewBag.AgreementList, "AgreementSLNo", "FullName"), new { data_placeholder = "Select single or multiple Agreements", @multiple = true, @class = "chosen form-control input-sm", style = "width: 350px;", id = "ddlAgreement" })
                            </div>
                        </div>
                        <hr />
                        <b>OR</b>
                        <div class="row" style="padding-top:10px;">
                            <div class="col-xs-12 col-sm-4 col-md-3">
                                @Html.Label("By Premise Type", new { @class = "control-label" })
                            </div>
                            <div class="col-xs-12 col-sm-8 col-md-3">
                                @Html.DropDownListFor(model => model.PremiseTypeSLNoCheckList, new SelectList(ViewBag.PremiseTypeList, "PremiseTypeSLNo", "FullName"), new { data_placeholder = "Select single or multiple Premise Types", @multiple = true, @class = "chosen form-control input-sm", style = "width: 350px;", id = "ddlPremiseType" })
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <span>Fields marked with an asterisk &nbsp;</span><span style="color:red;"><b>*</b></span><span>&nbsp; are mandatory.</span>
                        @*<button type="button" class="btn btn-danger" style="float: right;"
                                id="btnReExecuteRentPayment" onclick="return ReExecuteValidator();">
                            <i class="fas fa-bolt"></i>
                            <span>&nbsp;Re-execute Log</span>
                        </button>*@
                        <button type="button" class="btn btn-success" style="margin-right: 15px; float: right;"
                                id="btnExecuteRentPayment" onclick="return ExecuteValidator();">
                            <i class="fas fa-bolt"></i>
                            <span>&nbsp;Execute Log</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </section>
}
<style type="text/css">
    .required:after {
        content: "*";
        font-weight: bold;
        color: red;
    }
</style>
<style type="text/css" media="screen">
    #spinner {
        position: fixed;
        top: -18%;
        left: 30%;
    }
</style>

<script src="~/Scripts/jquery-3.6.0.js"></script>
<script src="~/Template/plugins/jquery-ui/jquery-ui.js"></script>
<script src="~/Scripts/notify.js"></script>
<script src="~/Scripts/SweetAlert2/sweetalert2.all.min.js"></script>
<script src="~/Scripts/SweetAlert2/sweetalert2.min.js"></script>

<script src="~/Template/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="~/Template/plugins/datatables-buttons/js/dataTables.buttons.min.js"></script>
<script src="~/Template/plugins/jszip/jszip.min.js"></script>
<script src="~/Template/plugins/pdfmake/pdfmake.min.js"></script>
<script src="~/Template/plugins/pdfmake/vfs_fonts.js"></script>
<script src="~/Template/plugins/datatables-buttons/js/buttons.html5.min.js"></script>
<script src="~/Template/plugins/datatables-buttons/js/buttons.print.min.js"></script>
<script src="~/Template/plugins/datatables-buttons/js/buttons.colVis.min.js"></script>
<script src="~/Template/plugins/datatables-select/js/dataTables.select.min.js"></script>

<link href="~/Template/plugins/jquery-ui/jquery-ui.css" rel="stylesheet" />
<link href="~/Template/plugins/jquery.dataTables.min.css" rel="stylesheet" />
<link href="~/Template/plugins/buttons.dataTables.css" rel="stylesheet" />
<link href="~/Template/plugins/dataTables.bootstrap5.css" rel="stylesheet" />

<link rel="stylesheet" type="text/css" href="~/Content/chosen.min.css" />
<script type="text/javascript" src="~/Scripts/chosen.jquery.min.js"></script>

<script type="text/javascript">
    //$(".chosen").chosen({ max_selected_options: 2 });
    $(".chosen-deselect").chosen({ allow_single_deselect: true });
    $(".chosen").chosen().change();
    $(".chosen").trigger('liszt:updated');
</script>

<script type="text/javascript" charset="utf-8">
    $(document).ready(function () {
        //$('#spinner').hide();
    });
</script>
<script>
    function ExecuteValidator() {
        if ($("#txtLogName").val() == 0) {
            Swal.fire({
                icon: 'warning',
                title: 'Please input Log Name!',
                text: 'Validation Message!',
            })
            return false;
        }
        //var PremiseType = document.getElementById("ddlPremiseType").value;
        //var Agreement = document.getElementById("ddlAgreement").value;
        //if ((PremiseType == 0 || PremiseType == "" || PremiseType == null) && (Agreement == 0 || Agreement == "" || Agreement == null)) {
        //    Swal.fire({
        //        icon: 'warning',
        //        title: 'Please Select the Premise Type or Agreement!',
        //        text: 'Validation Message!',
        //    })
        //    return false;
        //}
        $("#txtPremiseTypeSLNo").val(Array.from(document.getElementById('ddlPremiseType').selectedOptions).map(x => x.value));
        $("#txtAgreementSLNo").val(Array.from(document.getElementById('ddlAgreement').selectedOptions).map(x => x.value));
        //==Save to Submit Form
        Swal.fire({
            title: "Are you sure to execute log?",
            text: "Please review all required information entered!",
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes,&nbsp;Execute Log'
        }).then((result) => {
            if (result.value) {
                $('#spinner').show();
                //==Check Rent Payment Log Already Created or Not
                $.ajax({
                    async: false,
                    type: "GET",
                    url: "/AgreementInfo/CheckRentAPExecuteLog",
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    data: { PremiseTypeCheckList: $("#txtPremiseTypeSLNo").val(), AgreementCheckList: $("#txtAgreementSLNo").val(), Year: $("#ddlYear").val(), Month: $("#ddlMonth").val() },
                    success: function (response) {
                        if (response.CheckStatus == true) {
                            $('#spinner').hide();
                            Swal.fire({
                                icon: 'warning',
                                title: 'Rent AP - Logs have already been created or posted in this year and month, execution not possible!',
                                text: 'Validation Message!',
                            })
                        }
                        else {
                            //==Check Rent Payment Post Already Created or Not
                            var SelectedYear = document.getElementById('ddlYear').value;
                            document.getElementById('Year').value = SelectedYear;
                            document.getElementById('Month').value = $("#ddlMonth").val();
                            var headers = { __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() };
                            $.ajax({
                                type: "POST",
                                headers: headers,
                                url: "/AgreementInfo/RentAPExecuteLog",
                                data: $('#frmSubmit').serialize(),
                                success: function (response) {
                                    $('#spinner').hide();
                                    if (response.CheckStatus == true) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Rent AP - Execute Log: ' + response.LogID + ' has been created.',
                                            text: 'Log has been saved',
                                        })
                                        //}).then(function () {
                                        //    window.location.href = "/AgreementInfo/AgreementIndex?ViewID=9";
                                        //});
                                    }
                                    else if (response.AgrNotFound == true && response.CheckStatus == false) {
                                        Swal.fire({
                                            icon: 'warning',
                                            title: 'No agreements found this year and month! Rent AP - Execute Log not created, execution not possible!',
                                            text: 'Something went wrong!',
                                        })
                                    }
                                    else {
                                        Swal.fire({
                                            icon: 'warning',
                                            title: 'Rent AP - Execute Log not created, execution not possible!',
                                            text: 'Something went wrong!',
                                        })
                                    }
                                },
                                failure: function (response) {
                                    alert(response.responseText);
                                },
                                error: function (response) {
                                    alert(response.responseText);
                                }
                            });
                        }
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    },
                    error: function (response) {
                        alert(response.responseText);
                    }
                });
            }
        });
    }

    //function ReExecuteValidator() {
    //    if ($("#txtLogName").val() == 0) {
    //        Swal.fire({
    //            icon: 'warning',
    //            title: 'Please input Log Name!',
    //            text: 'Validation Message!',
    //        })
    //        return false;
    //    }
    //    var PremiseType = document.getElementById("ddlPremiseType").value;
    //    //var Agreement = document.getElementById("ddlAgreement").value;
    //    //if ((PremiseType == 0 || PremiseType == "" || PremiseType == null) && (Agreement == 0 || Agreement == "" || Agreement == null)) {
    //    //    Swal.fire({
    //    //        icon: 'warning',
    //    //        title: 'Please Select the Premise Type or Agreement Name!',
    //    //        text: 'Validation Message!',
    //    //    })
    //    //    return false;
    //    //}
    //    $("#txtPremiseTypeSLNo").val(Array.from(document.getElementById('ddlPremiseType').selectedOptions).map(x => x.value));
    //    $("#txtAgreementSLNo").val(Array.from(document.getElementById('ddlAgreement').selectedOptions).map(x => x.value));
    //    //==Save to Submit Form
    //    Swal.fire({
    //        title: "Are you sure to re-execute log?",
    //        text: "Please review all required information entered!",
    //        icon: 'question',
    //        showCancelButton: true,
    //        confirmButtonColor: '#3085d6',
    //        cancelButtonColor: '#d33',
    //        confirmButtonText: 'Yes,&nbsp;Re-execute Log'
    //    }).then((result) => {
    //        if (result.value) {
    //            $('#spinner').show();
    //            //==Check Rent Payment Post Already Created or Not
    //            $.ajax({
    //                type: "GET",
    //                url: "/AgreementInfo/CheckRentAPPostLog",
    //                data: { PremiseTypeCheckList: $("#txtPremiseTypeSLNo").val(), AgreementCheckList: $("#txtAgreementSLNo").val(), Year: $("#ddlYear").val(), Month: $("#ddlMonth").val() },
    //                success: function (response) {
    //                    if (response.CheckStatus == true) {
    //                        $('#spinner').hide();
    //                        Swal.fire({
    //                            icon: 'error',
    //                            title: 'Rent AP - Execute Log posted on this year and month, re-execution not possible!',
    //                            text: 'Validation Message!',
    //                        })
    //                    }
    //                    else {
    //                        var SelectedYear = document.getElementById('ddlYear').value;
    //                        document.getElementById('Year').value = SelectedYear;
    //                        document.getElementById('Month').value = $("#ddlMonth").val();
    //                        var headers = { __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() };
    //                        $.ajax({
    //                            type: "POST",
    //                            headers: headers,
    //                            url: "/AgreementInfo/RentAPReExecuteLog",
    //                            data: $('#frmSubmit').serialize(),
    //                            success: function (response) {
    //                                $('#spinner').hide();
    //                                if (response.CheckStatus == true) {
    //                                    Swal.fire({
    //                                        icon: 'success',
    //                                        title: 'Rent AP - Re-execute Log : ' + response.LogID + ' has been created.',
    //                                        text: 'Log has been saved',
    //                                    })
    //                                    //}).then(function () {
    //                                    //    window.location.href = "/AgreementInfo/AgreementIndex?ViewID=9";
    //                                    //});
    //                                }
    //                                else {
    //                                    Swal.fire({
    //                                        icon: 'error',
    //                                        title: 'Rent AP - Re-execute Log not created, re-execution not possible!',
    //                                        text: 'Something went wrong!',
    //                                    })
    //                                }
    //                            },
    //                            failure: function (response) {
    //                                alert(response.responseText);
    //                            },
    //                            error: function (response) {
    //                                alert(response.responseText);
    //                            }
    //                        });
    //                    }

    //                },
    //                failure: function (response) {
    //                    alert(response.responseText);
    //                },
    //                error: function (response) {
    //                    alert(response.responseText);
    //                }
    //            });
    //        }
    //    });
    //}
</script>
