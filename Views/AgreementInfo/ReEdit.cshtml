@model IEnumerable<RMS.Models.AgreementInfoDTO>
@{
    ViewBag.Title = "Renewal Agreement";
    Layout = "~/Views/Shared/_LayoutMain.cshtml";
}
@using (Html.BeginForm("ReEditAttach", "AgreementInfo", FormMethod.Post, new { id = "frmSubmit", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.FirstOrDefault().AgreementSLNo)
    @Html.HiddenFor(model => model.FirstOrDefault().xTaxType)
    @Html.HiddenFor(model => model.FirstOrDefault().TotalRentAmount)
    @Html.HiddenFor(model => model.FirstOrDefault().TaxAmount)
    @Html.HiddenFor(model => model.FirstOrDefault().VATAmount)
    @Html.HiddenFor(model => model.FirstOrDefault().AliasCode)
    @Html.HiddenFor(model => model.FirstOrDefault().yRenewalAgreementSLNo)
    @Html.HiddenFor(model => model.FirstOrDefault().AgreementStatus)
    @Html.HiddenFor(model => model.FirstOrDefault().ftrCount)
    @Html.HiddenFor(model => model.FirstOrDefault().AdvanceftrCount)
    @Html.HiddenFor(model => model.FirstOrDefault().RIftrCount)
    @Html.HiddenFor(model => model.FirstOrDefault().LIftrCount)
    @Html.HiddenFor(model => model.FirstOrDefault().CCftrCount)
    @Html.HiddenFor(model => model.FirstOrDefault().UIftrCount)
    //==Space Info data pull list
    @Html.HiddenFor(model => model.FirstOrDefault().SpaceftrCount)
    @Html.HiddenFor(model => model.FirstOrDefault().SpaceTypeList)
    @Html.HiddenFor(model => model.FirstOrDefault().SpaceAreaList)
    @Html.HiddenFor(model => model.FirstOrDefault().SpaceRateList)
    @Html.HiddenFor(model => model.FirstOrDefault().SpaceRentList)
    @Html.HiddenFor(model => model.FirstOrDefault().SpaceTotalAdvanceList)
    @Html.HiddenFor(model => model.FirstOrDefault().SpaceTotalAdjustmentList)
    @Html.HiddenFor(model => model.FirstOrDefault().SpaceRemarksList)
    //==Advance Info data pull list
    @Html.HiddenFor(model => model.FirstOrDefault().AdvanceNoList)
    @Html.HiddenFor(model => model.FirstOrDefault().AdvanceStartDateList)
    @Html.HiddenFor(model => model.FirstOrDefault().AdvanceEndDateList)
    @Html.HiddenFor(model => model.FirstOrDefault().AdvanceSlotPeriodList)
    @Html.HiddenFor(model => model.FirstOrDefault().AdvanceSlotAmountList)
    @Html.HiddenFor(model => model.FirstOrDefault().AdvanceNoteList)
    //==Review Information data pull list
    @Html.HiddenFor(model => model.FirstOrDefault().ReviewNoList)
    @Html.HiddenFor(model => model.FirstOrDefault().ReviewStartDateList)
    @Html.HiddenFor(model => model.FirstOrDefault().ReviewEndDateList)
    @Html.HiddenFor(model => model.FirstOrDefault().ReviewPeriodList)
    @Html.HiddenFor(model => model.FirstOrDefault().ReviewIncreaseAmountList)
    @Html.HiddenFor(model => model.FirstOrDefault().ReviewIncreasePercentageList)
    @Html.HiddenFor(model => model.FirstOrDefault().ReviewNoteList)
    //==Landlord Information data pull list
    @Html.HiddenFor(model => model.FirstOrDefault().VendorCodeList)
    @Html.HiddenFor(model => model.FirstOrDefault().LandlordNameList)
    @Html.HiddenFor(model => model.FirstOrDefault().ModeOfPaymentList)
    @Html.HiddenFor(model => model.FirstOrDefault().VendorAdvancePCList)
    @Html.HiddenFor(model => model.FirstOrDefault().VendorAdvanceAmountList)
    @Html.HiddenFor(model => model.FirstOrDefault().VendorAdvanceAdjustmentPCList)
    @Html.HiddenFor(model => model.FirstOrDefault().VendorAdvanceAdjustmentAmountList)
    @Html.HiddenFor(model => model.FirstOrDefault().VendorTaxPCList)
    @Html.HiddenFor(model => model.FirstOrDefault().VendorTaxAmountList)
    @Html.HiddenFor(model => model.FirstOrDefault().VendorVATPCList)
    @Html.HiddenFor(model => model.FirstOrDefault().VendorVATAmountList)
    @Html.HiddenFor(model => model.FirstOrDefault().VendorRentPCList)
    @Html.HiddenFor(model => model.FirstOrDefault().VendorRentAmountList)
    @Html.HiddenFor(model => model.FirstOrDefault().LLAddressList)
    @Html.HiddenFor(model => model.FirstOrDefault().LLContactNoList)
    @Html.HiddenFor(model => model.FirstOrDefault().LLEmailList)
    @Html.HiddenFor(model => model.FirstOrDefault().ACNoList)
    @Html.HiddenFor(model => model.FirstOrDefault().BankNameList)
    @Html.HiddenFor(model => model.FirstOrDefault().BranchNameList)
    @Html.HiddenFor(model => model.FirstOrDefault().RoutingNoList)
    //==Cost Allocation data pull list
    //==Cost Center data pull list
    @Html.HiddenFor(model => model.FirstOrDefault().CCCodeList)
    @Html.HiddenFor(model => model.FirstOrDefault().CCNameList)
    @Html.HiddenFor(model => model.FirstOrDefault().SOLCodeList)
    @Html.HiddenFor(model => model.FirstOrDefault().SOLNameList)
    @Html.HiddenFor(model => model.FirstOrDefault().CCShareAllotmentList)
    //==Utility Information data pull list
    @Html.HiddenFor(model => model.FirstOrDefault().UtilityVendorCodeList)
    @Html.HiddenFor(model => model.FirstOrDefault().UtilityLandlordNameList)
    @Html.HiddenFor(model => model.FirstOrDefault().UtilityModeOfPaymentList)
    @Html.HiddenFor(model => model.FirstOrDefault().ServiceChargePCList)
    @Html.HiddenFor(model => model.FirstOrDefault().ServiceChargeAmountList)
    @Html.HiddenFor(model => model.FirstOrDefault().OnlineTowerPCList)
    @Html.HiddenFor(model => model.FirstOrDefault().OnlineTowerAmountList)
    @Html.HiddenFor(model => model.FirstOrDefault().GeneratorSpacePCList)
    @Html.HiddenFor(model => model.FirstOrDefault().GeneratorSpaceAmountList)
    @Html.HiddenFor(model => model.FirstOrDefault().CarParkingPCList)
    @Html.HiddenFor(model => model.FirstOrDefault().CarParkingAmountList)
    @Html.HiddenFor(model => model.FirstOrDefault().UtilityTaxPCList)
    @Html.HiddenFor(model => model.FirstOrDefault().UtilityTaxAmountList)
    @Html.HiddenFor(model => model.FirstOrDefault().UtilityVATPCList)
    @Html.HiddenFor(model => model.FirstOrDefault().UtilityVATAmountList)
    @Html.HiddenFor(model => model.FirstOrDefault().UtilityAddressList)
    @Html.HiddenFor(model => model.FirstOrDefault().UtilityContactNoList)
    @Html.HiddenFor(model => model.FirstOrDefault().UtilityEmailList)
    @Html.HiddenFor(model => model.FirstOrDefault().UtilityACNoList)
    @Html.HiddenFor(model => model.FirstOrDefault().UtilityBankNameList)
    @Html.HiddenFor(model => model.FirstOrDefault().UtilityBranchNameList)
    @Html.HiddenFor(model => model.FirstOrDefault().UtilityRoutingNoList)
    //==Attach Documents data pull list
    @Html.HiddenFor(model => model.FirstOrDefault().FUFileNameList)
    <section class="content" style="padding-left:6px;">
        <h5 style="color:darkcyan;"><b>Edit Renewal Agreement</b></h5>
    </section>
    <section class="content">
        <div class="container-fluid">
            <div class="card card-info card-tabs">
                <div class="card-header p-0 pt-1">
                    <div id="spinner" style="display: none;padding-top:50px; padding-bottom:20px; padding-left:100px;">
                        <img id="img-spinner" src="@Url.Content("~/Content/Images/spinner.gif")" alt="Loading" />
                    </div>
                    <ul class="nav nav-tabs" id="custom-tabs-one-tab" role="tablist">
                        <li class="pt-1 px-3"><h3 class="card-title fas fa-edit"></h3></li>
                        <li class="nav-item">
                            <a class="nav-link active nav-icon fas fa-university" id="custom-tabs-one-BasicInfo-tab" data-toggle="pill"
                               href="#custom-tabs-one-BasicInfo" role="tab" aria-controls="custom-tabs-one-BasicInfo" aria-selected="true">&nbsp;&nbsp;Basic</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link fas fa-building" id="custom-tabs-one-AgreementInfo-tab" data-toggle="pill"
                               href="#custom-tabs-one-AgreementInfo" role="tab" aria-controls="custom-tabs-one-AgreementInfo" aria-selected="false">&nbsp;&nbsp;Agreement</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link fas fa-star" id="custom-tabs-one-Advance-tab" data-toggle="pill"
                               href="#custom-tabs-one-Advance" role="tab" aria-controls="custom-tabs-one-Advance" aria-selected="false">&nbsp;&nbsp;Advance</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link fas fa-history" id="custom-tabs-one-ReviewInfo-tab" data-toggle="pill"
                               href="#custom-tabs-one-ReviewInfo" role="tab" aria-controls="custom-tabs-one-ReviewInfo" aria-selected="false">&nbsp;&nbsp;Enhancement</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link fas fa-users" id="custom-tabs-one-LandlordInfo-tab" data-toggle="pill"
                               href="#custom-tabs-one-LandlordInfo" role="tab" aria-controls="custom-tabs-one-LandlordInfo" aria-selected="false">&nbsp;&nbsp;Landlord</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link fas fa-tasks" id="custom-tabs-one-CostAllocations-tab" data-toggle="pill"
                               href="#custom-tabs-one-CostAllocations" role="tab" aria-controls="custom-tabs-one-CostAllocations" aria-selected="false">&nbsp;&nbsp;Cost Center</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link fas fa-briefcase" id="custom-tabs-one-Utility-tab" data-toggle="pill"
                               href="#custom-tabs-one-Utility" role="tab" aria-controls="custom-tabs-one-Utility" aria-selected="false">&nbsp;&nbsp;Utility</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link fas fa-plug" id="custom-tabs-one-ControlData-tab" data-toggle="pill"
                               href="#custom-tabs-one-ControlData" role="tab" aria-controls="custom-tabs-one-ControlData" aria-selected="false">&nbsp;&nbsp;Control Data</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link fas fa-paperclip" id="custom-tabs-one-AttachDocuments-tab" data-toggle="pill"
                               href="#custom-tabs-one-AttachDocuments" role="tab" aria-controls="custom-tabs-one-AttachDocuments" aria-selected="false">&nbsp;&nbsp;Attach Files</a>
                        </li>
                    </ul>
                </div>
                <div class="card-body">
                    <div class="tab-content" id="custom-tabs-one-tabContent">
                        <div class="tab-pane fade show active" id="custom-tabs-one-BasicInfo" role="tabpanel" aria-labelledby="custom-tabs-one-BasicInfo-tab">
                            @*//==Basic Info*@
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="card card-info">
                                            <div class="card-header">
                                                <h3 class="card-title fas fa-edit">&nbsp;&nbsp;Basic Information</h3>
                                            </div>
                                            <div class="card-body">
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().PremiseTypeSLNo, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().PremiseTypeSLNo, new SelectList(ViewBag.PremiseTypeList, "PremiseTypeSLNo", "PremiseType", Model.FirstOrDefault().PremiseTypeSLNo), "Select Premise Type", new { @class = "form-control input-sm", id = "ddlPremiseType" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().PremiseName, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().PremiseName, new { autocomplete = "off", @class = "form-control input-sm", id = "txtPremiseName" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.Label("Premise Address (English)", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextAreaFor(model => model.FirstOrDefault().PremiseAddress, new { rows = 1, cols = 50, @class = "form-control input-sm", id = "txtPremiseAddress" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.Label("Premise Address (Bangla)", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextAreaFor(model => model.FirstOrDefault().PremiseAddressBangla, new { rows = 1, cols = 50, @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ClusterGroup, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ClusterGroup, new { autocomplete = "off", @class = "form-control input-sm", id = "txtClusterGroup" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ConcernBranch, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ConcernBranch, new { autocomplete = "off", @class = "form-control input-sm", id = "txtConcernBranch" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().InspectorName, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().InspectorName, new { autocomplete = "off", @class = "form-control input-sm", id = "txtInspectorName" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().InspectorContactNo, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().InspectorContactNo, new { autocomplete = "off", @class = "form-control input-sm", id = "txtInspectorContactNo" })
                                                    </div>
                                                </div>
                                                @* ========= *@
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AreaStatus, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().AreaStatus, new SelectList(ViewBag.AreaStatusList, "Value", "Text", Model.FirstOrDefault().AreaStatus), new { @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().RegionalOffice, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().RegionalOffice, new SelectList(ViewBag.RegionalOfficeList, "Description", "Description", Model.FirstOrDefault().RegionalOffice), "Select Regional Office", new { @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().PrimarySOL, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().PrimarySOL, new SelectList(ViewBag.PrimarySOLList, "Description", "Description", Model.FirstOrDefault().PrimarySOL), "Select Primary SOL", new { @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AttachedControl, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().AttachedControl, new SelectList(ViewBag.AttachedControlList, "Description", "Description", Model.FirstOrDefault().AttachedControl), "Select Attached Control", new { @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ControllerOfficeDistance, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ControllerOfficeDistance, new { autocomplete = "off", @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().RoutingNumber, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().RoutingNumber, new { autocomplete = "off", @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().Division, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().Division, new SelectList(ViewBag.DivisionList, "Description", "Description", Model.FirstOrDefault().Division), "Select Division", new { @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().District, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().District, new SelectList(ViewBag.DistrictList, "Description", "Description", Model.FirstOrDefault().District), "Select District", new { @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().Upazila, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().Upazila, new SelectList(ViewBag.UpazilaList, "Description", "Description", Model.FirstOrDefault().Upazila), "Select Upazila", new { @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().Thana, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().Thana, new SelectList(ViewBag.ThanaList, "Description", "Description", Model.FirstOrDefault().Thana), "Select Thana", new { @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ThanaCode, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ThanaCode, new { autocomplete = "off", @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().Pourasabha, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().Pourasabha, new { autocomplete = "off", @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().PourasabhaType, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().PourasabhaType, new { autocomplete = "off", @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UnionName, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().UnionName, new { autocomplete = "off", @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().WardNo, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().WardNo, new { autocomplete = "off", @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().PremisesTypeforAccounts, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().PremisesTypeforAccounts, new SelectList(ViewBag.PremisesTypeforAccountsList, "Description", "Description", Model.FirstOrDefault().PremisesTypeforAccounts), "Select Premises Type for Accounts", new { @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ParentAgreementCode, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ParentAgreementCode, new { autocomplete = "off", @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ElectricityLoad, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ElectricityLoad, new { autocomplete = "off", @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ElectricityProvidedBy, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().ElectricityProvidedBy, new SelectList(ViewBag.ProvidedByList, "Value", "Text", Model.FirstOrDefault().ElectricityProvidedBy), new { @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AITBourneBy, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().AITBourneBy, new SelectList(ViewBag.ProvidedByList, "Value", "Text", Model.FirstOrDefault().AITBourneBy), new { @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().CommercialPermission, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().CommercialPermission, new SelectList(ViewBag.YesNoList, "Value", "Text", Model.FirstOrDefault().CommercialPermission), new { @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().BuildingPlan, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().BuildingPlan, new SelectList(ViewBag.YesNoList, "Value", "Text", Model.FirstOrDefault().BuildingPlan), new { @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().PremisesSituatedFloor, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().PremisesSituatedFloor, new { autocomplete = "off", @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().BangladeshBankApproval, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().BangladeshBankApproval, new SelectList(ViewBag.YesNoList, "Value", "Text", Model.FirstOrDefault().BangladeshBankApproval), new { @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().BangladeshBankReference, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().BangladeshBankReference, new { autocomplete = "off", @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ITTowerRentClause, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextAreaFor(model => model.FirstOrDefault().ITTowerRentClause, new { rows = 1, cols = 50, @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().TerminationClause, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextAreaFor(model => model.FirstOrDefault().TerminationClause, new { rows = 1, cols = 50, @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().TerminationNoticePeriod, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().TerminationNoticePeriod, new { @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().WaterBillType, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().WaterBillType, new SelectList(ViewBag.WaterBillTypeList, "Value", "Text", Model.FirstOrDefault().WaterBillType), new { @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().WaterBillAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().WaterBillAmount, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().PremisesOpeningDate, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().PremisesOpeningDate, "{0:dd/MM/yyyy}", new { autocomplete = "off", @placeholder = "dd/mm/yyyy", @class = "form-control input-sm", id = "txtPremisesOpeningDate" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().Remarks, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextAreaFor(model => model.FirstOrDefault().Remarks, new { rows = 1, cols = 50, @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                @* ========= *@
                                                <hr />
                                                <h6 style="color:darkblue;"><b>Sub premises type wise allocation of space</b></h6>
                                                <hr />
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().SpaceType, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().SpaceType, new SelectList(ViewBag.SubPremisesTypeList, "Description", "Description", Model.FirstOrDefault().PremisesTypeforAccounts), "Select Sub Premises Type", new { @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().SpaceArea, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().SpaceArea, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().SpaceRate, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().SpaceRate, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm" })

                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().SpaceRent, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().SpaceRent, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().SpaceTotalAdvance, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().SpaceTotalAdvance, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm" })

                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().SpaceTotalAdjustment, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().SpaceTotalAdjustment, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().SpaceRemarks, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextAreaFor(model => model.FirstOrDefault().SpaceRemarks, new { rows = 1, cols = 50, @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">

                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        <button type="button" class="btn btn-primary" id="btnSpaceAddToList" style="float:right;">
                                                            <i class="fas fa-plus-circle"></i>
                                                            <span>&nbsp;Add to List</span>
                                                        </button>
                                                    </div>
                                                </div>
                                                <h6 style="color:darkblue;"><b>List of Space Allocations</b></h6>
                                                <table class="table  table-bordered table-condensed table-striped table-hover table-responsive btnRemove" id="TableSpaceInfo">
                                                    <thead>
                                                        <tr>
                                                            <th style="width: 200px;">
                                                                @Html.DisplayName("Sub Premises Type")
                                                            </th>
                                                            <th class="text-right" style="width: 150px;">
                                                                @Html.DisplayName("Area")
                                                            </th>
                                                            <th class="text-right" style="width: 150px;">
                                                                @Html.DisplayName("Rate")
                                                            </th>
                                                            <th class="text-right" style="width: 150px;">
                                                                @Html.DisplayName("Monthly Rent")
                                                            </th>
                                                            <th class="text-right" style="width: 150px;">
                                                                @Html.DisplayName("Total Advance")
                                                            </th>
                                                            <th class="text-right" style="width: 150px;">
                                                                @Html.DisplayName("Monthly Adv Adj")
                                                            </th>
                                                            <th style="width: 200px;">
                                                                @Html.DisplayName("Remarks")
                                                            </th>
                                                            <th class="text-center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (RMS.Models.SpaceInfoDTO item in ViewBag.lstSpace)
                                                        {
                                                            <tr>
                                                                <td class="SpaceTypeCell">
                                                                    @Html.TextBoxFor(x => item.SpaceType, new { style = "width: 200px;", @class = "SpaceTypeValue", id = "gtxtSpaceType" + item.SpaceRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="SpaceAreaCell">
                                                                    @Html.TextBoxFor(x => item.SpaceArea, new { Value = String.Format("{0:n2}", item.SpaceArea), style = "width: 150px;", @class = "SpaceAreaValue text-right", id = "gtxtSpaceArea" + item.SpaceRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="SpaceRateCell">
                                                                    @Html.TextBoxFor(x => item.SpaceRate, new { Value = String.Format("{0:n2}", item.SpaceRate), style = "width: 150px;", @class = "SpaceRateValue text-right", id = "gtxtSpaceRate" + item.SpaceRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="SpaceRentCell">
                                                                    @Html.TextBoxFor(x => item.SpaceRent, new { Value = String.Format("{0:n2}", item.SpaceRent), style = "width: 150px;", @class = "SpaceRentValue text-right", id = "gtxtSpaceRent" + item.SpaceRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="SpaceTotalAdvanceCell">
                                                                    @Html.TextBoxFor(x => item.SpaceTotalAdvance, new { Value = String.Format("{0:n2}", item.SpaceTotalAdvance), style = "width: 150px;", @class = "SpaceTotalAdvanceValue text-right", id = "gtxtSpaceTotalAdvance" + item.SpaceRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="SpaceTotalAdjustmentCell">
                                                                    @Html.TextBoxFor(x => item.SpaceTotalAdjustment, new { Value = String.Format("{0:n2}", item.SpaceTotalAdjustment), style = "width: 150px;", @class = "SpaceTotalAdjustmentValue text-right", id = "gtxtSpaceTotalAdjustment" + item.SpaceRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="SpaceRemarksCell">
                                                                    @Html.TextBoxFor(x => item.SpaceRemarks, new { style = "width: 200px;", @class = "SpaceRemarksValue", id = "gtxtSpaceRemarks" + item.SpaceRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="text-center">
                                                                    <button type="button" class="btnSpaceRemove btn btn-danger" id='btnSpaceDelete @item.SpaceRowNumber'><span class='nav-icon fas fa-trash'></span></button>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                                @* ========= *@
                                            </div>
                                            <!-- /.card-body -->
                                            <div class="card-footer">
                                                <span>Fields marked with an asterisk &nbsp;</span><span style="color:red;"><b>*</b></span><span>&nbsp; are mandatory.</span>
                                            </div>
                                        </div>
                                        <!-- /.card -->
                                    </div>
                                </div>
                            </div>
                            @*//==End*@
                        </div>
                        <div class="tab-pane fade" id="custom-tabs-one-AgreementInfo" role="tabpanel" aria-labelledby="custom-tabs-one-AgreementInfo-tab">
                            @*//==Agreement Info*@
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="card card-info">
                                            <div class="card-header">
                                                <h3 class="card-title fas fa-edit">&nbsp;&nbsp;Agreement Information</h3>
                                            </div>
                                            <div class="card-body">
                                                <div class="row" style="padding-top:10px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.Label("Reference Agreement", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().xRenewalAgreementSLNo, new SelectList(ViewBag.AgreementList, "AgreementSLNo", "FullName", Model.FirstOrDefault().xRenewalAgreementSLNo), "Select Reference Agreement", new { @class = "form-control input-sm", id = "xddlAgreement" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.Label("Special Agreement", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.CheckBoxFor(model => model.FirstOrDefault().Special, new { @class = "CheckboxLarger" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.Label("Renewal Agreement Code", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().AliasCode, new { @readonly = "readonly", @class = "form-control input-sm ", id = "txtAgreementCode" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AgreementName, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().AgreementName, new { autocomplete = "off", @placeholder = "Agreement Name", @class = "form-control input-sm ", id = "txtAgreementName" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().DocumentDate, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().DocumentDate, "{0:dd/MM/yyyy}", new { autocomplete = "off", @placeholder = "dd/mm/yyyy", @class = "form-control input-sm", id = "txtDocumentDate" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AgreementStartDate, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().AgreementStartDate, "{0:dd/MM/yyyy}", new { autocomplete = "off", @placeholder = "dd/mm/yyyy", @class = "form-control input-sm", id = "txtAgreementStartDate" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AgreementEndDate, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().AgreementEndDate, "{0:dd/MM/yyyy}", new { autocomplete = "off", @placeholder = "dd/mm/yyyy", @class = "form-control input-sm", id = "txtAgreementEndDate" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AgreementPeriod, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().AgreementPeriod, new { @readonly = "readonly", @placeholder = "12 Months", @style = "text-align: right;", @class = "form-control input-sm", id = "txtAgreementPeriod" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().RentDueDay, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().RentDueDay, new { @placeholder = "7 Days", @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtRentDueDay" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().CalculationMethod, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().CalculationMethod, new SelectList(ViewBag.CalculationMethodList, "Value", "Text", Model.FirstOrDefault().CalculationMethod), new { @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().PaymentMethod, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().PaymentMethod, new SelectList(ViewBag.PaymentMethodList, "Description", "Description", Model.FirstOrDefault().PaymentMethod), "Select Payment Method", new { @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UOM, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().UOM, new SelectList(ViewBag.UOMList, "Value", "Text", Model.FirstOrDefault().UOM), new { @class = "form-control input-sm", id = "ddlUOM" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().TotalArea, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().TotalArea, new { @placeholder = "2,000.00", @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtTotalArea" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().RentAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().RentAmount, new { autocomplete = "off", @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtRentAmount" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().CostPerUnit, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().CostPerUnit, new { @placeholder = "100.00", @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtCostPerUnit" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().TaxPercentage, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().TaxPercentage, new { @placeholder = "10%", @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtTaxPercentage" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().TaxType, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().TaxType, new SelectList(ViewBag.TaxTypeList, "Value", "Text", Model.FirstOrDefault().TaxType), new { @class = "form-control input-sm", id = "ddlTaxType" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().TaxAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().TaxAmount, new { Value = String.Format("{0:n2}", Model.FirstOrDefault().TaxAmount), @readonly = "readonly", @placeholder = "20,000.00", @style = "text-align: right;", @class = "form-control input-sm", id = "txtTaxAmount" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().VATPercentage, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().VATPercentage, new { @placeholder = "15%", @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtVATPercentage" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().VATAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().VATAmount, new { Value = String.Format("{0:n2}", Model.FirstOrDefault().VATAmount), @readonly = "readonly", @placeholder = "30,000.00", @style = "text-align: right;", @class = "form-control input-sm", id = "txtVATAmount" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().VatType, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().VatType, new SelectList(ViewBag.VatTypeList, "Value", "Text", Model.FirstOrDefault().VatType), new { @class = "form-control input-sm", id = "ddlVatType" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().TotalRentAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().TotalRentAmount, new { Value = String.Format("{0:n2}", Model.FirstOrDefault().TotalRentAmount), @placeholder = "200,000.00", @readonly = "readonly", @style = "text-align: right;", @class = "form-control input-sm", id = "txtTotalRentAmount" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AdditionalExpense, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().AdditionalExpense, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().InitialDirectCost, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().InitialDirectCost, new { @style = "text-align: right;", @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().DismantlingCost, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().DismantlingCost, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().WithHoldingCode, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().WithHoldingCode, new { autocomplete = "off", @class = "form-control input-sm " })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AgreementRemarks, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextAreaFor(model => model.FirstOrDefault().AgreementRemarks, new { rows = 1, cols = 50, @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <hr />
                                                <h6 style="color:darkblue;"><b>IFRS 16</b></h6>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().IsIFRSEnable, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.CheckBoxFor(model => model.FirstOrDefault().IsIFRSEnable, new { @class = "CheckboxLarger" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().IFRSEffectiveDate, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().IFRSEffectiveDate, "{0:dd/MM/yyyy}", new { autocomplete = "off", @placeholder = "dd/mm/yyyy", @class = "form-control input-sm", id = "txtIFRSEffectiveDate" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().BorrowingRate, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().BorrowingRate, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().CorporateTaxRate, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().CorporateTaxRate, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                            </div>
                                            <!-- /.card-body -->
                                            <div class="card-footer">
                                                <span>Fields marked with an asterisk &nbsp;</span><span style="color:red;"><b>*</b></span><span>&nbsp; are mandatory.</span>
                                            </div>
                                        </div>
                                        <!-- /.card -->
                                    </div>
                                </div>
                            </div>
                            @*//==End*@
                        </div>
                        <div class="tab-pane fade" id="custom-tabs-one-Advance" role="tabpanel" aria-labelledby="custom-tabs-one-Advance-tab">
                            @*//==Advance Info*@
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="card card-info">
                                            <div class="card-header">
                                                <h3 class="card-title fas fa-edit">&nbsp;&nbsp;Advance Information</h3>
                                            </div>
                                            <div class="card-body">
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().SecurityDepositAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().SecurityDepositAmount, new { @placeholder = "300,000.00", @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtSecurityDepositAmount" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AdvanceRemarks, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextAreaFor(model => model.FirstOrDefault().AdvanceRemarks, new { rows = 1, cols = 50, @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <hr />
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required  col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AdvanceAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().AdvanceAmount, new { @placeholder = "150,000.00", @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtAdvanceAmount" })
                                                    </div>
                                                </div>
                                                <hr />
                                                <h6 style="color:darkblue;"><b>Advance Adjustment Declarations</b></h6>
                                                <hr />
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AdvanceNo, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().AdvanceNo, new SelectList(ViewBag.AdvanceNoList, "Value", "Text"), new { @class = "form-control input-sm", id = "ddlAdvanceNo" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.Label("Adjustment Schedule No", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().AdvanceSlotPeriod, new { @readonly = "readonly", @placeholder = "12 Months", @class = "form-control input-sm", id = "txtAdvanceSlotPeriod" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AdvanceStartDate, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().AdvanceStartDate, "{0:dd/MM/yyyy}", new { autocomplete = "off", @placeholder = "dd/mm/yyyy", @class = "form-control input-sm", id = "txtAdvanceStartDate" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AdvanceEndDate, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().AdvanceEndDate, "{0:dd/MM/yyyy}", new { autocomplete = "off", @placeholder = "dd/mm/yyyy", @class = "form-control input-sm", id = "txtAdvanceEndDate" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.Label("Advance Adjustment Amount", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().AdvanceSlotAmount, new { @style = "text-align: right;", @type = "number", @min = "1", @step = "0.01", @class = "form-control input-sm", id = "txtAdvanceSlotAmount" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.Label("Note", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().AdvanceNote, new { autocomplete = "off", @placeholder = "Advance Note", @class = "form-control input-sm ", id = "txtAdvanceNote" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:15px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3"></div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3"></div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px"></div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        <button type="button" class="btn btn-primary" id="btnAdvanceAddToList" style="float:right;">
                                                            <i class="fas fa-plus-circle"></i>
                                                            <span>&nbsp;Add to List</span>
                                                        </button>
                                                    </div>
                                                </div>
                                                <h6 style="color:darkblue;"><b>List of Advance Adjustment Declarations</b></h6>
                                                <table class="table  table-bordered table-condensed table-striped table-hover table-responsive btnRemove" id="TableAdvanceInfo">
                                                    <thead>
                                                        <tr>
                                                            <th style="width: 150px;">
                                                                @Html.DisplayName("Advance No")
                                                            </th>
                                                            <th style="width: 150px;">
                                                                @Html.DisplayName("Start Date")
                                                            </th>
                                                            <th style="width: 150px;">
                                                                @Html.DisplayName("End Date")
                                                            </th>
                                                            <th style="width: 150px;">
                                                                @Html.DisplayName("Schedule No")
                                                            </th>
                                                            <th class="text-right" style="width: 250px;">
                                                                @Html.DisplayName("Adj Amount")
                                                            </th>
                                                            <th style="width: 250px;">
                                                                @Html.DisplayName("Note")
                                                            </th>
                                                            <th class="text-center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (RMS.Models.AdvanceInfoDTO item in ViewBag.lstAdvance)
                                                        {
                                                            <tr>
                                                                <td class="AdvanceNoCell">
                                                                    @Html.TextBoxFor(x => item.AdvanceNo, new { style = "width: 150px;", @class = "AdvanceNoValue", id = "gtxtAdvanceNo" + item.AdvanceRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="AdvanceStartDateCell">
                                                                    @Html.TextBoxFor(x => item.StartDate, new { style = "width: 150px;", @class = "AdvanceStartDateValue", id = "gtxtAdvanceStartDate" + item.AdvanceRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="AdvanceEndDateCell">
                                                                    @Html.TextBoxFor(x => item.EndDate, new { style = "width: 150px;", @class = "AdvanceEndDateValue", id = "gtxtAdvanceEndDate" + item.AdvanceRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="AdvancePeriodCell">
                                                                    @Html.TextBoxFor(x => item.AdvanceSlotPeriod, new { style = "width: 150px;", @class = "AdvanceSlotPeriodValue", id = "gtxtAdvanceSlotPeriod" + item.AdvanceRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="AdvanceAmountCell">
                                                                    @Html.TextBoxFor(x => item.AdvanceSlotAmount, new { Value = String.Format("{0:n12}", item.AdvanceSlotAmount), style = "width: 250px;", @class = "AdvanceSlotAmountValue text-right", id = "gtxtAdvanceSlotAmount" + item.AdvanceRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="AdvanceNoteCell">
                                                                    @Html.TextBoxFor(x => item.AdvanceNote, new { style = "width: 250px;", @class = "AdvanceNoteValue", id = "gtxtAdvanceNote" + item.AdvanceRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="text-center">
                                                                    @if (Model.FirstOrDefault().AgreementStatus == 1)
                                                                    {
                                                                        <button type="button" class="btnAdvanceRemove btn btn-danger" id='btnAdvanceDelete @item.AdvanceRowNumber'><span class='nav-icon fas fa-trash'></span></button>
                                                                    }
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                            <!-- /.card-body -->
                                            <div class="card-footer">
                                                <span>Fields marked with an asterisk &nbsp;</span><span style="color:red;"><b>*</b></span><span>&nbsp; are mandatory.</span>
                                            </div>
                                        </div>
                                    </div>
                                    <!-- /.card -->
                                </div>
                            </div>
                            @*//==End*@
                        </div>
                        <div class="tab-pane fade" id="custom-tabs-one-ReviewInfo" role="tabpanel" aria-labelledby="custom-tabs-one-ReviewInfo-tab">
                            @*//==Review Info*@
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="card card-info">
                                            <div class="card-header">
                                                <h3 class="card-title fas fa-edit">&nbsp;&nbsp;Enhancement Information</h3>
                                            </div>
                                            <div class="card-body">
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.Label("Enhancement Frequency", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ReviewFrequency, new { @placeholder = "12 Months", @style = "text-align: right;", @type = "number", @min = "1", @step = "0.01", @class = "form-control input-sm", id = "txtReviewFrequency" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.Label("Enhancement Increase %", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ReviewPercentage, new { @placeholder = "10%", @style = "text-align: right;", @type = "number", @min = "1", @step = "0.01", @class = "form-control input-sm", id = "txtReviewPercentage" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ReviewRemarks, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextAreaFor(model => model.FirstOrDefault().ReviewRemarks, new { rows = 1, cols = 50, @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <hr />
                                                <b>OR</b>
                                                <hr />
                                                <h6 style="color:darkblue;"><b>Enhancement Declarations</b></h6>
                                                <hr />
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ReviewNo, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().ReviewNo, new SelectList(ViewBag.ReviewNoList, "Value", "Text"), new { @class = "form-control input-sm", id = "ddlReviewNo" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.Label("Schedule No", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ReviewPeriod, new { @readonly = "readonly", @placeholder = "12 Months", @class = "form-control input-sm", id = "txtReviewPeriod" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ReviewStartDate, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ReviewStartDate, "{0:dd/MM/yyyy}", new { autocomplete = "off", @placeholder = "dd/mm/yyyy", @class = "form-control input-sm", id = "txtReviewStartDate" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ReviewEndDate, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ReviewEndDate, "{0:dd/MM/yyyy}", new { autocomplete = "off", @placeholder = "dd/mm/yyyy", @class = "form-control input-sm", id = "txtReviewEndDate" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.Label("Either Increase Amount", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ReviewIncreaseAmount, new { @style = "text-align: right;", @type = "number", @min = "1", @step = "0.01", @class = "form-control input-sm", id = "txtReviewIncreaseAmount" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.Label("Or Increase %", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ReviewIncreasePercentage, new { @style = "text-align: right;", @type = "number", @min = "1", @step = "0.01", @class = "form-control input-sm", id = "txtReviewIncreasePercentage" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:15px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.Label("Note", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ReviewNote, new { autocomplete = "off", @placeholder = "Note", @class = "form-control input-sm ", id = "txtReviewNote" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px"></div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        <button type="button" class="btn btn-primary" id="btnReviewAddToList" style="float:right;">
                                                            <i class="fas fa-plus-circle"></i>
                                                            <span>&nbsp;Add to List</span>
                                                        </button>
                                                    </div>
                                                </div>
                                                <h6 style="color:darkblue;"><b>List of Enhancement Declarations</b></h6>
                                                <table class="table  table-bordered table-condensed table-striped table-hover table-responsive btnRemove" id="TableReviewInfo">
                                                    <thead>
                                                        <tr>
                                                            <th style="width: 150px;">
                                                                @Html.DisplayName("Enhancement No")
                                                            </th>
                                                            <th style="width: 150px;">
                                                                @Html.DisplayName("Start Date")
                                                            </th>
                                                            <th style="width: 150px;">
                                                                @Html.DisplayName("End Date")
                                                            </th>
                                                            <th style="width: 150px;">
                                                                @Html.DisplayName("Schedule No")
                                                            </th>
                                                            <th class="text-right" style="width: 200px;">
                                                                @Html.DisplayName("Increase Amount")
                                                            </th>
                                                            <th class="text-right" style="width: 200px;">
                                                                @Html.DisplayName("Increase %")
                                                            </th>
                                                            <th style="width: 150px;">
                                                                @Html.DisplayName("Note")
                                                            </th>
                                                            <th class="text-center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (RMS.Models.ReviewInfoDTO item in ViewBag.lstReview)
                                                        {
                                                            <tr>
                                                                <td class="ReviewNoCell">
                                                                    @Html.TextBoxFor(x => item.ReviewNo, new { style = "width: 150px;", @class = "ReviewNoValue", id = "gtxtReviewNo" + item.ReviewRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="ReviewStartDateCell">
                                                                    @Html.TextBoxFor(x => item.StartDate, new { style = "width: 150px;", @class = "ReviewStartDateValue", id = "gtxtReviewStartDate" + item.ReviewRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="ReviewEndDateCell">
                                                                    @Html.TextBoxFor(x => item.EndDate, new { style = "width: 150px;", @class = "ReviewEndDateValue", id = "gtxtReviewEndDate" + item.ReviewRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="ReviewPeriodCell">
                                                                    @Html.TextBoxFor(x => item.Period, new { style = "width: 150px;", @class = "ReviewPeriodValue", id = "gtxtReviewPeriod" + item.ReviewRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="ReviewIncreaseAmountCell">
                                                                    @Html.TextBoxFor(x => item.IncreaseAmount, new { Value = String.Format("{0:n2}", item.IncreaseAmount), style = "width: 190px;", @class = "ReviewIncreaseAmountValue text-right", id = "gtxtReviewIncreaseAmount" + item.ReviewRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="ReviewIncreasePercentageCell">
                                                                    @Html.TextBoxFor(x => item.IncreasePercentage, new { Value = String.Format("{0:n2}", item.IncreasePercentage), style = "width: 190px;", @class = "ReviewIncreasePercentageValue text-right", id = "gtxtReviewIncreasePercentage" + item.ReviewRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="ReviewNoteCell">
                                                                    @Html.TextBoxFor(x => item.ReviewNote, new { style = "width: 250px;", @class = "ReviewNoteValue", id = "gtxtReviewNote" + item.ReviewRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="text-center">
                                                                    @if (Model.FirstOrDefault().AgreementStatus == 1)
                                                                    {
                                                                        <button type="button" class="btnRemove btn btn-danger" id='btnDelete @item.ReviewRowNumber'><span class='nav-icon fas fa-trash'></span></button>
                                                                    }
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                            <!-- /.card-body -->
                                            <div class="card-footer">
                                                <span>Fields marked with an asterisk &nbsp;</span><span style="color:red;"><b>*</b></span><span>&nbsp; are mandatory.</span>
                                            </div>
                                        </div>
                                    </div>
                                    <!-- /.card -->
                                </div>
                            </div>
                            @*//==End*@
                        </div>
                        <div class="tab-pane fade" id="custom-tabs-one-LandlordInfo" role="tabpanel" aria-labelledby="custom-tabs-one-LandlordInfo-tab">
                            @*//==LandLord Info*@
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="card card-warning">
                                            <div class="card-header">
                                                <h3 class="card-title fas fa-edit">&nbsp;&nbsp;Landlord Information</h3>
                                            </div>
                                            <div class="card-body">
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().LLRemarks, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextAreaFor(model => model.FirstOrDefault().LLRemarks, new { rows = 1, cols = 50, @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <hr />
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().VendorCode, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().VendorCode, new { autocomplete = "off", @class = "form-control input-sm", id = "txtVendorCode" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().LandlordName, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().LandlordName, new { autocomplete = "off", @class = "form-control input-sm", id = "txtLandlordName" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ModeOfPayment, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().ModeOfPayment, new SelectList(ViewBag.ModeOfPaymentList, "Value", "Text"), new { @class = "form-control input-sm", id = "ddlModeOfPayment" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().VendorAdvancePC, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().VendorAdvancePC, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtVendorAdvancePC" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().VendorAdvanceAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().VendorAdvanceAmount, new { @readonly = "readonly", @style = "text-align: right;", @class = "form-control input-sm", id = "txtVendorAdvanceAmount" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().VendorAdvanceAdjustmentPC, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().VendorAdvanceAdjustmentPC, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtVendorAdvanceAdjustmentPC" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().VendorAdvanceAdjustmentAmount, new { @hidden = "true", @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().VendorAdvanceAdjustmentAmount, new { @hidden = "true", @readonly = "readonly", @style = "text-align: right;", @class = "form-control input-sm", id = "txtVendorAdvanceAdjustmentAmount" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().VendorTaxPC, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().VendorTaxPC, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtVendorTaxPC" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().VendorTaxAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().VendorTaxAmount, new { @readonly = "readonly", @style = "text-align: right;", @class = "form-control input-sm", id = "txtVendorTaxAmount" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().VendorVATPC, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().VendorVATPC, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtVendorVATPC" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().VendorVATAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().VendorVATAmount, new { @readonly = "readonly", @style = "text-align: right;", @class = "form-control input-sm", id = "txtVendorVATAmount" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().VendorRentPC, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().VendorRentPC, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtVendorRentPC" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().VendorRentAmount, new { @hidden = "true", @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().VendorRentAmount, new { @hidden = "true", @readonly = "readonly", @style = "text-align: right;", @class = "form-control input-sm", id = "txtVendorRentAmount" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().LLAddress, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextAreaFor(model => model.FirstOrDefault().LLAddress, new { rows = 1, cols = 50, @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().LLContactNo, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().LLContactNo, new { autocomplete = "off", @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().LLEmail, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().LLEmail, new { autocomplete = "off", @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ACNo, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ACNo, new { autocomplete = "off", @class = "form-control input-sm", id = "txtACNo" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().BankName, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().BankName, new SelectList(ViewBag.BankInfoList, "Description", "Description"), "Select Bank Name", new { @class = "form-control input-sm", id = "ddlBankName" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().BranchName, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().BranchName, new { autocomplete = "off", @class = "form-control input-sm", id = "txtBranchName" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px;padding-bottom:10px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().RoutingNo, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().RoutingNo, new { autocomplete = "off", @class = "form-control input-sm", id = "txtRoutingNo" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">

                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3" style="padding-top:5px">
                                                        <button type="button" class="btn btn-primary" id="btnVendorAddToList" style="float:right;">
                                                            <i class="fas fa-plus-circle"></i>
                                                            <span>&nbsp;Add to List</span>
                                                        </button>
                                                    </div>
                                                </div>
                                                <h6 style="color:darkblue;"><b>List of Landlords</b></h6>
                                                <table class="table  table-bordered table-condensed table-striped table-hover table-responsive btnRemove" id="TableVendorInfo">
                                                    <thead>
                                                        <tr>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Code")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Name")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Mode")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Adv %")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Adv Amt")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Adj %")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Tax %")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Tax Amt")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("VAT %")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("VAT Amt")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Rent %")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Address")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Contact No")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Email")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("A/C No")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Bank")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Branch")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Routing No")
                                                            </th>
                                                            <th class="text-center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (RMS.Models.LandlordInfoDTO item in ViewBag.lstLandlord)
                                                        {
                                                            <tr>
                                                                <td class="VendorCodeCell">
                                                                    @Html.TextBoxFor(x => item.VendorCode, new { style = "width: 100px;", @class = "VendorCodeValue", id = "gtxtVendorCode" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="LandlordNameCell">
                                                                    @Html.TextBoxFor(x => item.LandlordName, new { style = "width: 100px;", @class = "LandlordNameValue", id = "gtxtLandlordName" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="ModeOfPaymentCell">
                                                                    @Html.TextBoxFor(x => item.ModeOfPaymentText, new { style = "width: 100px;", @class = "ModeOfPaymentValue", id = "gtxtModeOfPayment" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="VendorAdvancePCCell">
                                                                    @Html.TextBoxFor(x => item.VendorAdvancePC, new { style = "width: 100px;", @class = "VendorAdvancePCValue text-right", id = "gtxtVendorAdvancePC" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="VendorAdvanceAmountCell">
                                                                    @Html.TextBoxFor(x => item.VendorAdvanceAmount, new { Value = String.Format("{0:n2}", item.VendorAdvanceAmount), style = "width: 100px;", @class = "VendorAdvanceAmountValue text-right", id = "gtxtVendorAdvanceAmount" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="VendorAdvanceAdjustmentPCCell">
                                                                    @Html.TextBoxFor(x => item.VendorAdvanceAdjustmentPC, new { style = "width: 100px;", @class = "VendorAdvanceAdjustmentPCValue text-right", id = "gtxtVendorAdvanceAdjustmentPC" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="VendorTaxPCCell">
                                                                    @Html.TextBoxFor(x => item.VendorTaxPC, new { style = "width: 100px;", @class = "VendorTaxPCValue text-right", id = "gtxtVendorTaxPC" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="VendorTaxAmountCell">
                                                                    @Html.TextBoxFor(x => item.VendorTaxAmount, new { Value = String.Format("{0:n2}", item.VendorTaxAmount), style = "width: 100px;", @class = "VendorTaxAmountValue text-right", id = "gtxtVendorTaxAmount" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="VendorVATPCCell">
                                                                    @Html.TextBoxFor(x => item.VendorVATPC, new { style = "width: 100px;", @class = "VendorVATPCValue text-right", id = "gtxtVendorVATPC" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="VendorVATAmountCell">
                                                                    @Html.TextBoxFor(x => item.VendorVATAmount, new { Value = String.Format("{0:n2}", item.VendorVATAmount), style = "width: 100px;", @class = "VendorVATAmountValue text-right", id = "gtxtVendorVATAmount" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="VendorRentPCCell">
                                                                    @Html.TextBoxFor(x => item.VendorRentPC, new { style = "width: 100px;", @class = "VendorRentPCValue text-right", id = "gtxtVendorRentPC" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="AddressCell">
                                                                    @Html.TextBoxFor(x => item.LLAddress, new { style = "width: 100px;", @class = "AddressValue", id = "gtxtAddress" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="ContactNoCell">
                                                                    @Html.TextBoxFor(x => item.LLContactNo, new { style = "width: 100px;", @class = "ContactNoValue", id = "gtxtContactNo" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="EmailCell">
                                                                    @Html.TextBoxFor(x => item.LLEmail, new { style = "width: 100px;", @class = "EmailValue", id = "gtxtEmail" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="ACNoCell">
                                                                    @Html.TextBoxFor(x => item.ACNo, new { style = "width: 100px;", @class = "ACNoValue", id = "gtxtACNo" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="BankNameCell">
                                                                    @Html.TextBoxFor(x => item.BankName, new { style = "width: 100px;", @class = "BankNameValue", id = "gtxtBankName" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="BranchNameCell">
                                                                    @Html.TextBoxFor(x => item.BranchName, new { style = "width: 100px;", @class = "BranchNameValue", id = "gtxtBranchName" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="RoutingNoCell">
                                                                    @Html.TextBoxFor(x => item.RoutingNo, new { style = "width: 100px;", @class = "RoutingNoValue", id = "gtxtRoutingNo" + item.LIRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="text-center">
                                                                    <button type="button" class="btnVendorEdit btn btn-info" id='btnVendorEdit @item.LIRowNumber'><span class='nav-icon fas fa-edit'></span></button>
                                                                    <button type="button" style='margin-top: 4px;' class="btnVendorRemove btn btn-danger" id='btnVendorDelete @item.LIRowNumber'><span class='nav-icon fas fa-trash'></span></button>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                            <div class="card-footer">
                                                <span>Fields marked with an asterisk &nbsp;</span><span style="color:red;"><b>*</b></span><span>&nbsp; are mandatory.</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            @*//==End*@
                        </div>
                        <div class="tab-pane fade" id="custom-tabs-one-CostAllocations" role="tabpanel" aria-labelledby="custom-tabs-one-CostAllocations-tab">
                            @*//==Cost Allocation*@
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="card card-warning">
                                            <div class="card-header">
                                                <h3 class="card-title fas fa-edit">&nbsp;&nbsp;Cost Allocation</h3>
                                            </div>
                                            <div class="card-body">
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().CCRemarks, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextAreaFor(model => model.FirstOrDefault().CCRemarks, new { rows = 1, cols = 50, @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <hr />
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.Label("Cost Center", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().CCSLNo, new SelectList(ViewBag.CCInfoList, "CCSLNo", "FullName"), "Select Cost Center", new { @class = "form-control input-sm", id = "ddlCC" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.Label("SOL", new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().SOLSLNo, new SelectList(ViewBag.SOLInfoList, "SOLSLNo", "FullName"), "Select SOL", new { @class = "form-control input-sm", id = "ddlSOL" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().CCShareAllotment, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().CCShareAllotment, new { @style = "text-align: right;", @type = "number", @min = "1", @step = "0.01", @class = "form-control input-sm", id = "txtCCShareAllotment" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:15px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3"></div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px"></div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        <button type="button" class="btn btn-primary" id="btnCCAddToList" style="float:right;">
                                                            <i class="fas fa-plus-circle"></i>
                                                            <span>&nbsp;Add to List</span>
                                                        </button>
                                                    </div>
                                                </div>
                                                <h6 style="color:darkblue;"><b>List of Cost Allocations</b></h6>
                                                <table class="table  table-bordered table-condensed table-striped table-hover table-responsive btnRemove" id="TableCostCenterInfo">
                                                    <thead>
                                                        <tr>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("CC Code")
                                                            </th>
                                                            <th style="width: 200px;">
                                                                @Html.DisplayName("CC Name")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("SOL Code")
                                                            </th>
                                                            <th style="width: 200px;">
                                                                @Html.DisplayName("SOL Name")
                                                            </th>
                                                            <th class="text-right" style="width: 200px;">
                                                                @Html.DisplayName("Share %")
                                                            </th>
                                                            <th class="text-center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (RMS.Models.CostCenterInfoDTO item in ViewBag.lstCC)
                                                        {
                                                            <tr>
                                                                <td class="CCCodeCell">
                                                                    @Html.TextBoxFor(x => item.CCCode, new { style = "width: 100px;", @class = "CCCodeValue", id = "gtxtCCCode" + item.CCRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="CCNameCell">
                                                                    @Html.TextBoxFor(x => item.CCName, new { style = "width: 200px;", @class = "CCNameValue", id = "gtxtCCName" + item.CCRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="SOLCodeCell">
                                                                    @Html.TextBoxFor(x => item.SOLCode, new { style = "width: 100px;", @class = "SOLCodeValue", id = "gtxtSOLCode" + item.CCRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="SOLNameCell">
                                                                    @Html.TextBoxFor(x => item.SOLName, new { style = "width: 200px;", @class = "SOLNameValue", id = "gtxtSOLName" + item.CCRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="CCShareAllotmentCell">
                                                                    @Html.TextBoxFor(x => item.CCShareAllotment, new { style = "width: 200px;", @class = "CCShareAllotmentValue text-right", id = "gtxtCCShareAllotment" + item.CCRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="text-center">
                                                                    <button type="button" class="btnRemove btn btn-danger" id='btnDelete @item.CCRowNumber'><span class='nav-icon fas fa-trash'></span></button>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                            <!-- /.card-body -->
                                            <div class="card-footer">
                                                <span>Fields marked with an asterisk &nbsp;</span><span style="color:red;"><b>*</b></span><span>&nbsp; are mandatory.</span>
                                            </div>
                                        </div>
                                    </div>
                                    <!-- /.card -->
                                </div>
                            </div>
                            @*//==End*@
                        </div>
                        <div class="tab-pane fade" id="custom-tabs-one-Utility" role="tabpanel" aria-labelledby="custom-tabs-one-Utility-tab">
                            @*//==Utility Info*@
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="card card-warning">
                                            <div class="card-header">
                                                <h3 class="card-title fas fa-edit">&nbsp;&nbsp;Utility Information</h3>
                                            </div>
                                            <div class="card-body">
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ServiceCharge, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ServiceCharge, new { @placeholder = "10,000.00", @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtServiceCharge" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().OnlineTower, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().OnlineTower, new { @placeholder = "15,000.00", @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtOnlineTower" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().GeneratorSpace, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().GeneratorSpace, new { @placeholder = "12,000.00", @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtGeneratorSpace" })
                                                    </div>
                                                    <div class=" col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().CarParking, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().CarParking, new { @placeholder = "5,000.00", @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtCarParking" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().CarParkingNo, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().CarParkingNo, new { @placeholder = "0", @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UtilityRemarks, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextAreaFor(model => model.FirstOrDefault().UtilityRemarks, new { rows = 1, cols = 50, @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <hr />
                                                <h6 style="color:darkblue;"><b>Utility Cost Allocation</b></h6>
                                                <hr />
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UtilityVendorCode, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().UtilityVendorCode, new { autocomplete = "off", @class = "form-control input-sm", id = "txtUtilityVendorCode" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UtilityLandlordName, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().UtilityLandlordName, new { autocomplete = "off", @class = "form-control input-sm", id = "txtUtilityLandlordName" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UtilityModeOfPayment, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().UtilityModeOfPayment, new SelectList(ViewBag.ModeOfPaymentList, "Value", "Text"), new { @class = "form-control input-sm", id = "ddlUtilityModeOfPayment" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ServiceChargePC, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ServiceChargePC, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtServiceChargePC" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ServiceChargeAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ServiceChargeAmount, new { @readonly = "readonly", @style = "text-align: right;", @class = "form-control input-sm", id = "txtServiceChargeAmount" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().OnlineTowerPC, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().OnlineTowerPC, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtOnlineTowerPC" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().OnlineTowerAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().OnlineTowerAmount, new { @readonly = "readonly", @style = "text-align: right;", @class = "form-control input-sm", id = "txtOnlineTowerAmount" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().GeneratorSpacePC, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().GeneratorSpacePC, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtGeneratorSpacePC" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().GeneratorSpaceAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().GeneratorSpaceAmount, new { @readonly = "readonly", @style = "text-align: right;", @class = "form-control input-sm", id = "txtGeneratorSpaceAmount" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().CarParkingPC, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().CarParkingPC, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtCarParkingPC" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().CarParkingAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().CarParkingAmount, new { @readonly = "readonly", @style = "text-align: right;", @class = "form-control input-sm", id = "txtCarParkingAmount" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UtilityTaxPC, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().UtilityTaxPC, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtUtilityTaxPC" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UtilityTaxAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().UtilityTaxAmount, new { @readonly = "readonly", @style = "text-align: right;", @class = "form-control input-sm", id = "txtUtilityTaxAmount" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UtilityVATPC, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().UtilityVATPC, new { @style = "text-align: right;", @type = "number", @min = "0", @step = "0.01", @class = "form-control input-sm", id = "txtUtilityVATPC" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UtilityVATAmount, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().UtilityVATAmount, new { @readonly = "readonly", @style = "text-align: right;", @class = "form-control input-sm", id = "txtUtilityVATAmount" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UtilityAddress, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextAreaFor(model => model.FirstOrDefault().UtilityAddress, new { rows = 1, cols = 50, @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UtilityContactNo, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().UtilityContactNo, new { autocomplete = "off", @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UtilityEmail, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().UtilityEmail, new { autocomplete = "off", @class = "form-control input-sm" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UtilityACNo, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().UtilityACNo, new { autocomplete = "off", @class = "form-control input-sm", id = "txtUtilityACNo" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UtilityBankName, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.DropDownListFor(model => model.FirstOrDefault().UtilityBankName, new SelectList(ViewBag.BankInfoList, "Description", "Description"), "Select Bank Name", new { @class = "form-control input-sm", id = "ddlUtilityBankName" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UtilityBranchName, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().UtilityBranchName, new { autocomplete = "off", @class = "form-control input-sm", id = "txtUtilityBranchName" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px;padding-bottom:10px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().UtilityRoutingNo, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().UtilityRoutingNo, new { autocomplete = "off", @class = "form-control input-sm", id = "txtUtilityRoutingNo" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">

                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3" style="padding-top:5px">
                                                        <button type="button" class="btn btn-primary" id="btnUtilityAddToList" style="float:right;">
                                                            <i class="fas fa-plus-circle"></i>
                                                            <span>&nbsp;Add to List</span>
                                                        </button>
                                                    </div>
                                                </div>
                                                <h6 style="color:darkblue;"><b>List of Utility Cost Allocation</b></h6>
                                                <table class="table  table-bordered table-condensed table-striped table-hover table-responsive btnRemove" id="TableUtilityInfo">
                                                    <thead>
                                                        <tr>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Code")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Name")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Mode")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Service %")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Service Amt")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Tower %")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Tower Amt")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Generator %")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Generator Amt")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Parking %")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Parking Amt")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Tax %")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("Tax Amt")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("VAT %")
                                                            </th>
                                                            <th class="text-right" style="width: 100px;">
                                                                @Html.DisplayName("VAT Amt")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Address")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Contact No")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Email")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("A/C No")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Bank")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Branch")
                                                            </th>
                                                            <th style="width: 100px;">
                                                                @Html.DisplayName("Routing No")
                                                            </th>
                                                            <th class="text-center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (RMS.Models.UtilityInfoDTO item in ViewBag.lstUtility)
                                                        {
                                                            <tr>
                                                                <td class="UtilityVendorCodeCell">
                                                                    @Html.TextBoxFor(x => item.UtilityVendorCode, new { style = "width: 100px;", @class = "UtilityVendorCodeValue", id = "gtxtUtilityVendorCode" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="UtilityLandlordNameCell">
                                                                    @Html.TextBoxFor(x => item.UtilityLandlordName, new { style = "width: 100px;", @class = "UtilityLandlordNameValue", id = "gtxtUtilityLandlordName" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="UtilityModeOfPaymentCell">
                                                                    @Html.TextBoxFor(x => item.UtilityModeOfPaymentText, new { style = "width: 100px;", @class = "UtilityModeOfPaymentValue", id = "gtxtUtilityModeOfPayment" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="ServiceChargePCCell">
                                                                    @Html.TextBoxFor(x => item.ServiceChargePC, new { Value = String.Format("{0:n2}", item.ServiceChargePC), style = "width: 100px;", @class = "ServiceChargePCValue text-right", id = "gtxtServiceChargePC" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="ServiceChargeAmountCell">
                                                                    @Html.TextBoxFor(x => item.ServiceChargeAmount, new { Value = String.Format("{0:n2}", item.ServiceChargeAmount), style = "width: 100px;", @class = "ServiceChargeAmountValue text-right", id = "gtxtServiceChargeAmount" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="OnlineTowerPCCell">
                                                                    @Html.TextBoxFor(x => item.OnlineTowerPC, new { Value = String.Format("{0:n2}", item.OnlineTowerPC), style = "width: 100px;", @class = "OnlineTowerPCValue text-right", id = "gtxtOnlineTowerPC" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="OnlineTowerAmountCell">
                                                                    @Html.TextBoxFor(x => item.OnlineTowerAmount, new { Value = String.Format("{0:n2}", item.OnlineTowerAmount), style = "width: 100px;", @class = "OnlineTowerAmountValue text-right", id = "gtxtOnlineTowerAmount" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="GeneratorSpacePCCell">
                                                                    @Html.TextBoxFor(x => item.GeneratorSpacePC, new { Value = String.Format("{0:n2}", item.GeneratorSpacePC), style = "width: 100px;", @class = "GeneratorSpacePCValue text-right", id = "gtxtGeneratorSpacePC" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="GeneratorSpaceAmountCell">
                                                                    @Html.TextBoxFor(x => item.GeneratorSpaceAmount, new { Value = String.Format("{0:n2}", item.GeneratorSpaceAmount), style = "width: 100px;", @class = "GeneratorSpaceAmountValue text-right", id = "gtxtGeneratorSpaceAmount" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="CarParkingPCCell">
                                                                    @Html.TextBoxFor(x => item.CarParkingPC, new { Value = String.Format("{0:n2}", item.CarParkingPC), style = "width: 100px;", @class = "CarParkingPCValue text-right", id = "gtxtCarParkingPC" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="CarParkingAmountCell">
                                                                    @Html.TextBoxFor(x => item.CarParkingAmount, new { Value = String.Format("{0:n2}", item.CarParkingAmount), style = "width: 100px;", @class = "CarParkingAmountValue text-right", id = "gtxtCarParkingAmount" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="UtilityTaxPCCell">
                                                                    @Html.TextBoxFor(x => item.UtilityTaxPC, new { Value = String.Format("{0:n2}", item.UtilityTaxPC), style = "width: 100px;", @class = "UtilityTaxPCValue text-right", id = "gtxtUtilityTaxPC" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="UtilityTaxAmountCell">
                                                                    @Html.TextBoxFor(x => item.UtilityTaxAmount, new { Value = String.Format("{0:n2}", item.UtilityTaxAmount), style = "width: 100px;", @class = "UtilityTaxAmountValue text-right", id = "gtxtUtilityTaxAmount" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="UtilityVATPCCell">
                                                                    @Html.TextBoxFor(x => item.UtilityVATPC, new { Value = String.Format("{0:n2}", item.UtilityVATPC), style = "width: 100px;", @class = "UtilityVATPCValue text-right", id = "gtxtUtilityVATPC" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="UtilityVATAmountCell">
                                                                    @Html.TextBoxFor(x => item.UtilityVATAmount, new { Value = String.Format("{0:n2}", item.UtilityVATAmount), style = "width: 100px;", @class = "UtilityVATAmountValue text-right", id = "gtxtUtilityVATAmount" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="UtilityAddressCell">
                                                                    @Html.TextBoxFor(x => item.UtilityAddress, new { style = "width: 100px;", @class = "UtilityAddressValue", id = "gtxtUtilityAddress" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="UtilityContactNoCell">
                                                                    @Html.TextBoxFor(x => item.UtilityContactNo, new { style = "width: 100px;", @class = "UtilityContactNoValue", id = "gtxtUtilityContactNo" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="UtilityEmailCell">
                                                                    @Html.TextBoxFor(x => item.UtilityEmail, new { style = "width: 100px;", @class = "UtilityEmailValue", id = "gtxtUtilityEmail" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="UtilityACNoCell">
                                                                    @Html.TextBoxFor(x => item.UtilityACNo, new { style = "width: 100px;", @class = "UtilityACNoValue", id = "gtxtUtilityACNo" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="UtilityBankNameCell">
                                                                    @Html.TextBoxFor(x => item.UtilityBankName, new { style = "width: 100px;", @class = "UtilityBankNameValue", id = "gtxtUtilityBankName" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="UtilityBranchNameCell">
                                                                    @Html.TextBoxFor(x => item.UtilityBranchName, new { style = "width: 100px;", @class = "UtilityBranchNameValue", id = "gtxtUtilityBranchName" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="UtilityRoutingNoCell">
                                                                    @Html.TextBoxFor(x => item.UtilityRoutingNo, new { style = "width: 100px;", @class = "UtilityRoutingNoValue", id = "gtxtUtilityRoutingNo" + item.UtilityRowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="text-center">
                                                                    <button type="button" class="btnUtilityVendorEdit btn btn-info" id='btnUtilityVendorEdit @item.UtilityRowNumber'><span class='nav-icon fas fa-edit'></span></button>
                                                                    <button type="button" style='margin-top: 4px;' class="btnUtilityVendorRemove btn btn-danger" id='btnUtilityVendorDelete @item.UtilityRowNumber'><span class='nav-icon fas fa-trash'></span></button>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                            <div class="card-footer">
                                                <span>Fields marked with an asterisk &nbsp;</span><span style="color:red;"><b>*</b></span><span>&nbsp; are mandatory.</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            @*//==End*@
                        </div>
                        <div class="tab-pane fade" id="custom-tabs-one-ControlData" role="tabpanel" aria-labelledby="custom-tabs-one-ControlData-tab">
                            @*//==Control Data*@
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="card card-danger">
                                            <div class="card-header">
                                                <h3 class="card-title fas fa-edit">&nbsp;&nbsp;Control Information</h3>
                                            </div>
                                            <div class="card-body">
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().CashGLCode, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().CashGLCode, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtCashGLCode" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().BankGLCode, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().BankGLCode, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtBankGLCode" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AdvanceGLCode, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().AdvanceGLCode, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtAdvanceGLCode" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().AdvanceAdjustmentGLCode, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().AdvanceAdjustmentGLCode, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtAdvanceAdjustmentGLCode" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().RentGLCode, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().RentGLCode, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtRentGLCode" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ServiceChargeGLCode, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ServiceChargeGLCode, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtServiceChargeGLCode" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="required col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().TaxGLCode, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().TaxGLCode, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtTaxGLCode" })
                                                    </div>
                                                    <div class="required col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().VATGLCode, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().VATGLCode, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtVATGLCode" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ProvisionGLTax, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ProvisionGLTax, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtProvisionGLTax" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ProvisionGLAP, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().ProvisionGLAP, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtProvisionGLAP" })
                                                    </div>
                                                </div>
                                                @* ========== *@
                                                <hr />
                                                <h6 style="color:darkblue;"><b>Mode Of Payment GL</b></h6>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().RTGSGL, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().RTGSGL, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtRTGSGL" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().EFTNGL, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().EFTNGL, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtEFTNGL" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().PayOrderGL, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().PayOrderGL, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtPayOrderGL" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().IBBPaymentGL, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().IBBPaymentGL, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtIBBPaymentGL" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().CityBrokerageGL, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().CityBrokerageGL, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtCityBrokerageGL" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().CityCapitalGL, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().CityCapitalGL, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtCityCapitalGL" })
                                                    </div>
                                                </div>
                                                <div class="row" style="padding-top:10px; padding-bottom:0px;">
                                                    <div class="col-xs-12 col-sm-4 col-md-3">
                                                        @Html.LabelFor(model => model.FirstOrDefault().OthersGL, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextBoxFor(model => model.FirstOrDefault().OthersGL, new { @style = "text-align: left;", @class = "form-control input-sm", id = "txtOthersGL" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-4 col-md-3" style="padding-left:40px">
                                                        @Html.LabelFor(model => model.FirstOrDefault().ControlDataRemarks, new { @class = "control-label" })
                                                    </div>
                                                    <div class="col-xs-12 col-sm-8 col-md-3">
                                                        @Html.TextAreaFor(model => model.FirstOrDefault().ControlDataRemarks, new { rows = 1, cols = 50, @class = "form-control input-sm" })
                                                    </div>
                                                </div>
                                                @* ========== *@
                                            </div>
                                            <!-- /.card-body -->
                                            <div class="card-footer">
                                                <span>Fields marked with an asterisk &nbsp;</span><span style="color:red;"><b>*</b></span><span>&nbsp; are mandatory.</span>
                                            </div>
                                        </div>
                                        <!-- /.card -->
                                    </div>
                                </div>
                            </div>
                            @*//==End*@
                        </div>
                        <div class="tab-pane fade" id="custom-tabs-one-AttachDocuments" role="tabpanel" aria-labelledby="custom-tabs-one-AttachDocuments-tab">
                            @*//==Attach Document*@
                            <div class="container-fluid">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="card card-danger">
                                            <div class="card-header">
                                                <h3 class="card-title fas fa-edit">&nbsp;&nbsp;Attach Documents</h3>
                                            </div>
                                            <div class="card-body">
                                                <div>
                                                    <div id="previews" class="dz-default dz-message box__input dropzone">
                                                        <div style="text-align:center">
                                                            <i class="fas fa-upload" style="font-size:23px;position:relative;top:4px;">
                                                            </i> <span style="margin-left:20px;font-size:x-large;">Click to browse file or drag and drop files here</span>
                                                        </div>
                                                        <div class="table table-striped files" id="previewFiles">
                                                        </div>
                                                    </div>
                                                </div>
                                                <br />
                                                <h6 style="color:darkblue;"><b>List of Attached Documents</b></h6>
                                                <table class="table  table-bordered table-condensed table-striped table-hover table-responsive btnRemove" id="TableFileUploadInfo">
                                                    <thead>
                                                        <tr>
                                                            <th style="width: 1000px;">
                                                                @Html.DisplayName("File Name")
                                                            </th>
                                                            <th class="text-center">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (RMS.Models.FileUploadInfoDTO item in ViewBag.lstFU)
                                                        {
                                                            <tr>
                                                                <td class="FUFileNameCell">
                                                                    @Html.TextBoxFor(x => item.FileName, new { style = "width: 1000px;", @class = "FUFileNameValue", id = "gtxtFUFileName" + item.FURowNumber, disabled = "disabled" })
                                                                </td>
                                                                <td class="text-center">
                                                                    <button type="button" class="btnRemove btn btn-danger" id='btnDelete @item.FURowNumber'><span class='nav-icon fas fa-trash'></span></button>
                                                                    <a href="~/Content/FileUpload/@Model.FirstOrDefault().AliasCode/@item.FileName" download class="btn btn-primary" style="margin-top:3px;">
                                                                        <i class="nav-icon fas fa-download"></i>
                                                                    </a>
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                            <div class="card-footer">
                                                <span>Attach single or multiple documents.</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            @*//==End*@
                        </div>
                    </div>
                </div>
                <div class="card-footer" style="text-align:right;">
                    <button type="button" class="btn btn-success" style="float: right;"
                            id="btnFormUpdate" onclick="return UpdateValidator();">
                        <i class="fas fa-save"></i>
                        <span>&nbsp;Update Renewal Agreement</span>
                    </button>

                    <button type="button" class="btn btn-warning" style="float: left;"
                            id="btnFormBack" onclick="return BackValidator();">
                        <i class="fas fa-reply"></i>
                        <span>&nbsp;Back to List</span>
                    </button>

                </div>
            </div>
        </div>
    </section>
}
<style>
    input.CheckboxLarger {
        width: 30px;
        height: 30px;
    }
</style>
<style type="text/css">
    .form-control {
        width: auto;
    }

    .required:after {
        content: "*";
        font-weight: bold;
        color: red;
    }
</style>
<style type="text/css" media="screen">
    #spinner {
        position: fixed;
        top: -18%;
        left: 30%;
    }
</style>

<script src="~/Scripts/jquery-3.6.0.js"></script>
<script src="~/Template/plugins/jquery-ui/jquery-ui.js"></script>
<script src="~/Scripts/notify.js"></script>
<script src="~/Scripts/SweetAlert2/sweetalert2.all.min.js"></script>
<script src="~/Scripts/SweetAlert2/sweetalert2.min.js"></script>

<script src="~/Template/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="~/Template/plugins/datatables-buttons/js/dataTables.buttons.min.js"></script>
<script src="~/Template/plugins/jszip/jszip.min.js"></script>
<script src="~/Template/plugins/pdfmake/pdfmake.min.js"></script>
<script src="~/Template/plugins/pdfmake/vfs_fonts.js"></script>
<script src="~/Template/plugins/datatables-buttons/js/buttons.html5.min.js"></script>
<script src="~/Template/plugins/datatables-buttons/js/buttons.print.min.js"></script>
<script src="~/Template/plugins/datatables-buttons/js/buttons.colVis.min.js"></script>
<script src="~/Template/plugins/datatables-select/js/dataTables.select.min.js"></script>

<link href="~/Template/plugins/jquery-ui/jquery-ui.css" rel="stylesheet" />
<link href="~/Template/plugins/jquery.dataTables.min.css" rel="stylesheet" />
<link href="~/Template/plugins/buttons.dataTables.css" rel="stylesheet" />
<link href="~/Template/plugins/dataTables.bootstrap5.css" rel="stylesheet" />

<!-- Font Awesome -->
<link rel="stylesheet" href="~/Template/plugins/fontawesome-free/css/all.min.css">
<!-- dropzonejs -->
<link href="~/Scripts/dropzone/basic.min.css" rel="stylesheet" />
<link href="~/Scripts/dropzone/dropzone.min.css" rel="stylesheet" />
<!-- Theme style -->
<link rel="stylesheet" href="~/Template/dist/css/adminlte.min.css">
<!-- overlayScrollbars -->
<link rel="stylesheet" href="~/Template/plugins/overlayScrollbars/css/OverlayScrollbars.min.css">

<!-- dropzonejs -->
<script src="~/Scripts/dropzone/dropzone.min.js"></script>

<link href="~/Content/chosen.min.css" rel="stylesheet" />
<script src="~/Scripts/chosen.jquery.js"></script>

<script type="text/javascript">
    $(".chosen").chosen({ max_selected_options: 2 });
    $(".chosen-deselect").chosen({ allow_single_deselect: true });
    $(".chosen").chosen().change();
    $(".chosen").trigger('liszt:updated');
</script>
<script>
    Dropzone.autoDiscover = false;
    $('#frmSubmit').dropzone({
        //  url:"/", // url here to save file
        paramName: "files",
        clickable: '#previews',
        previewsContainer: "#previewFiles",
        autoProcessQueue: false,
        uploadMultiple: true,
        thumbnailWidth: 100,
        thumbnailHeight: 100,
        parallelUploads: 100,
        maxFiles: 20,
        maxFilesize: 20, //MB
        addRemoveLinks: true,
        dictResponseError: 'Server not Configured',
        acceptedFiles: ".png,.jpg,.gif,.bmp,.jpeg,.pdf,.docx,.xlsx",
        init: function () {
            var self = this;
            // config
            self.options.addRemoveLinks = true;
            self.options.dictRemoveFile = "Delete";
            //New file added
            self.on("addedfile", function (file) {
                console.log('new file added ', file);
                $('.dz-success-mark').hide();
                $('.dz-error-mark').hide();
            });
            // Send file starts
            self.on("sending", function (file) {
                console.log('upload started', file);
                $('.meter').show();
            });

            // File upload Progress
            self.on("totaluploadprogress", function (progress) {
                console.log("progress ", progress);
                $('.roller').width(progress + '%');
            });

            self.on("queuecomplete", function (progress) {
                $('.meter').delay(999).slideUp(999);
            });

            // On removing file
            self.on("removedfile", function (file) {
                console.log(file);
            });

            $('#btnFormUpdate').on("click", function (e) {
                e.preventDefault();
                e.stopPropagation();
                // Validate form here if needed
                //==Basic Info
                if ($("#ddlPremiseType").val() == 0) {
                    $("#ddlPremiseType").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Select The Premise Type From The List!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtPremiseName").val() == "" || $("#txtPremiseName").val() == null) {
                    $("#txtPremiseName").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Premise Name!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtPremiseAddress").val() == "" || $("#txtPremiseAddress").val() == null) {
                    $("#txtPremiseAddress").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Premise Address!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#ITTowerRentClause").val().length > 4000) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'IT Tower Rent Clause cannot exceed 4000 characters!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#TerminationClause").val().length > 4000) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Termination Clause cannot exceed 4000 characters!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                //==Agreement Info
                var xAgreement = $("#xddlAgreement").val();
                if (xAgreement == 0 || xAgreement == "" || xAgreement == null) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Please select the reference agreement!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtAgreementName").val() == "" || $("#txtAgreementName").val() == null) {
                    $("#txtAgreementName").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Agreement Name!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtAgreementStartDate").val() == "" || $("#txtAgreementStartDate").val() == null) {
                    $("#txtAgreementStartDate").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Agreement Start Date!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtAgreementEndDate").val() == "" || $("#txtAgreementEndDate").val() == null) {
                    $("#txtAgreementEndDate").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Agreement End Date!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtRentDueDay").val() == "" || $("#txtRentDueDay").val() == null) {
                    $("#txtRentDueDay").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Rent Due Day!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#ddlUOM").val() == 0) {
                    $("#ddlUOM").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Select The Unit of Measurement From The List!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtTotalArea").val() == "" || $("#txtTotalArea").val() == null) {
                    $("#txtTotalArea").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Total Area!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtCostPerUnit").val() == "" || $("#txtCostPerUnit").val() == null) {
                    $("#txtCostPerUnit").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Cost Per Unit!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtSecurityDepositAmount").val() == "" || $("#txtSecurityDepositAmount").val() == null) {
                    $("#txtSecurityDepositAmount").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Security Deposit Amount!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtAdvanceAdjustmentPeriod").val() > $("#txtRentPeriod").val()) {
                    $("#txtAdvanceAdjustmentPeriod").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'The duration of the advance adjustment period cannot exceed the duration of the rent period',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                //var dateString = $('#txtAgreementStartDate').val()
                //var dateParts = dateString.split("/");
                //var d1 = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);
                //dateString = $('#txtAgreementEndDate').val()
                //dateParts = dateString.split("/");
                //d2 = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);
                //if ($("#txtAgreementPeriod").val() != (d2.getFullYear() * 12 + d2.getMonth()) - (d1.getFullYear() * 12 + d1.getMonth()) + 1) {
                //    $("#txtAgreementPeriod").focus();
                //    Swal.fire({
                //        icon: 'warning',
                //        title: 'The duration of the agreement finds a discrepancy between the start and end dates of the agreement!',
                //        text: 'Validation Message!',
                //    })
                //    return false;
                //}
                //==Advance Adjustment table total slot amount checked with Advance Amount
                @*if ('@Session["IsVariantDaysCount"]' == "True") {
                    var TotalAdvance = 0;
                    var ColumnID;
                    var ColumnIDValue;
                    var SlotPeriod;
                    var SlotAmount;
                    $("#TableAdvanceInfo tr:gt(0)").each(function () {
                        ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                        ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
                        if (typeof $("#gtxtAdvanceSlotPeriod_" + ColumnIDValue).val() != "undefined" && typeof $("#gtxtAdvanceSlotAmount_" + ColumnIDValue).val() != "undefined") {
                            SlotPeriod = parseFloat($("#gtxtAdvanceSlotPeriod_" + ColumnIDValue).val());
                            SlotAmount = parseFloat($("#gtxtAdvanceSlotAmount_" + ColumnIDValue).val().replace(/[^0-9\.]+/g, ""));
                            TotalAdvance = parseFloat(TotalAdvance) + (parseFloat(SlotPeriod) * parseFloat(SlotAmount));
                        }
                    });
                    if (parseFloat(TotalAdvance).toFixed() != parseFloat($("#txtAdvanceAmount").val()).toFixed()) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Advance Adjustment slot allotment not matched with Advance Amount!',
                            text: 'Validation Message!',
                        })
                        return false;
                    }
                }*@
                //==Space Allocation table has records then validation
                if (SpaceStarted > 0) {
                    if ($("#TableSpaceInfo tr").length > 1) {
                        //==Check to block slot Advance Amount more than Advance Amount
                        var TotalSpaceArea = 0;
                        var TotalSpaceRent = 0;
                        var SpaceTotalAdvance = 0;
                        var TotalMonthlyAdjustment = 0;
                        var ColumnID;
                        var ColumnIDValue;
                        $("#TableSpaceInfo tr:gt(0)").each(function () {
                            ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                            ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
                            if (typeof $("#gtxtSpaceArea_" + ColumnIDValue).val() != "undefined") {
                                TotalSpaceArea = parseFloat(TotalSpaceArea) + parseFloat($("#gtxtSpaceArea_" + ColumnIDValue).val().replace(/[^0-9\.]+/g, ""));
                                TotalSpaceRent = parseFloat(TotalSpaceRent) + parseFloat($("#gtxtSpaceRent_" + ColumnIDValue).val().replace(/[^0-9\.]+/g, ""));
                                SpaceTotalAdvance = parseFloat(SpaceTotalAdvance) + parseFloat($("#gtxtSpaceTotalAdvance_" + ColumnIDValue).val().replace(/[^0-9\.]+/g, ""));
                                TotalMonthlyAdjustment = parseFloat(TotalMonthlyAdjustment) + parseFloat($("#gtxtSpaceTotalAdjustment_" + ColumnIDValue).val().replace(/[^0-9\.]+/g, ""));
                            }
                        });
                        //TotalSpaceArea
                        if (parseFloat(TotalSpaceArea).toFixed() != parseFloat($("#txtTotalArea").val()).toFixed()) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Space area allocations not matched with the agreement total area!',
                                text: 'Validation Message!',
                            })
                            return false;
                        }
                        //TotalSpaceRent
                        else if (parseFloat(TotalSpaceRent).toFixed() != parseFloat($("#txtRentAmount").val()).toFixed()) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Space monthly rent amount allocations not matched with the agreement rent amount!',
                                text: 'Validation Message!',
                            })
                            return false;
                        }
                        //Space Total Advance
                        else if (parseFloat(SpaceTotalAdvance).toFixed() != parseFloat($("#txtAdvanceAmount").val()).toFixed()) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Space advace amount allocations not matched with the agreement advance amount!',
                                text: 'Validation Message!',
                            })
                            return false;
                        }
                        //TotalMonthlyAdjustment
                        //else if (parseFloat(TotalMonthlyAdjustment).toFixed() != parseFloat($("#txtAdvanceAmount").val()).toFixed()) {
                        //    Swal.fire({
                        //        icon: 'warning',
                        //        title: 'Space monthly advance adjustment amount allocations not matched with the agreement advance amount!',
                        //        text: 'Validation Message!',
                        //    })
                        //    return false;
                        //}
                        //==
                    }
                }
                else {
                    if ($("#TableSpaceInfo tr").length > 2) {
                        //==Check to block slot Advance Amount more than Advance Amount
                        var TotalSpaceArea = 0;
                        var TotalSpaceRent = 0;
                        var SpaceTotalAdvance = 0;
                        var TotalMonthlyAdjustment = 0;
                        var ColumnID;
                        var ColumnIDValue;
                        $("#TableSpaceInfo tr:gt(0)").each(function () {
                            ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                            ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
                            if (typeof $("#gtxtSpaceArea_" + ColumnIDValue).val() != "undefined") {
                                TotalSpaceArea = parseFloat(TotalSpaceArea) + parseFloat($("#gtxtSpaceArea_" + ColumnIDValue).val().replace(/[^0-9\.]+/g, ""));
                                TotalSpaceRent = parseFloat(TotalSpaceRent) + parseFloat($("#gtxtSpaceRent_" + ColumnIDValue).val().replace(/[^0-9\.]+/g, ""));
                                SpaceTotalAdvance = parseFloat(SpaceTotalAdvance) + parseFloat($("#gtxtSpaceTotalAdvance_" + ColumnIDValue).val().replace(/[^0-9\.]+/g, ""));
                                TotalMonthlyAdjustment = parseFloat(TotalMonthlyAdjustment) + parseFloat($("#gtxtSpaceTotalAdjustment_" + ColumnIDValue).val().replace(/[^0-9\.]+/g, ""));
                            }
                        });
                        //TotalSpaceArea
                        if (parseFloat(TotalSpaceArea).toFixed() != parseFloat($("#txtTotalArea").val()).toFixed()) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Space area allocations not matched with the agreement total area!',
                                text: 'Validation Message!',
                            })
                            return false;
                        }
                        //TotalSpaceRent
                        else if (parseFloat(TotalSpaceRent).toFixed() != parseFloat($("#txtRentAmount").val()).toFixed()) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Space monthly rent amount allocations not matched with the agreement rent amount!',
                                text: 'Validation Message!',
                            })
                            return false;
                        }
                        //Space Total Advance
                        else if (parseFloat(SpaceTotalAdvance).toFixed() != parseFloat($("#txtAdvanceAmount").val()).toFixed()) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Space advace amount allocations not matched with the agreement advance amount!',
                                text: 'Validation Message!',
                            })
                            return false;
                        }
                        //TotalMonthlyAdjustment
                        //else if (parseFloat(TotalMonthlyAdjustment).toFixed() != parseFloat($("#txtAdvanceAmount").val()).toFixed()) {
                        //    Swal.fire({
                        //        icon: 'warning',
                        //        title: 'Space monthly advance adjustment amount allocations not matched with the agreement advance amount!',
                        //        text: 'Validation Message!',
                        //    })
                        //    return false;
                        //}
                        //==
                    }
                }
                //==Review Information empty table check
                if ($("#txtReviewFrequency").val() > 0) {
                    if ($("#txtReviewPercentage").val() < 1 || $("#txtReviewPercentage").val() == "" || $("#txtReviewPercentage").val() == null) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Enter the Enhancement frequency increase percentage!',
                            text: 'Validation Message!',
                        })
                        return false;
                    }
                }
                if ($("#txtReviewPercentage").val() > 0) {
                    if ($("#txtReviewFrequency").val() < 1 || $("#txtReviewFrequency").val() == "" || $("#txtReviewFrequency").val() == null) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Enter the Enhancement frequency months!',
                            text: 'Validation Message!',
                        })
                        return false;
                    }
                }
                if (ReviewStarted > 0) {
                    if ($("#TableReviewInfo tr").length > 1 && $("#txtReviewFrequency").val() > 0) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Both Enhancement frequency and Enhancement declaration are not allowed!',
                            text: 'Validation Message!',
                        })
                        return false;
                    }
                }
                else {
                    if ($("#TableReviewInfo tr").length > 2 && $("#txtReviewFrequency").val() > 0) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Both Enhancement frequency and Enhancement declaration are not allowed!',
                            text: 'Validation Message!',
                        })
                        return false;
                    }
                }
                //==Landlord Information empty table check
                if ($("#TableVendorInfo tr").length == 1) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Landlord information was not provided!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                //==Cost Allocation empty table check
                if (CostCenterStarted > 0) {
                    if ($("#TableCostCenterInfo tr").length == 1) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Cost allocation information was not provided!',
                            text: 'Validation Message!',
                        })
                        return false;
                    }
                }
                else {
                    if ($("#TableCostCenterInfo tr").length == 2) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Cost allocation information was not provided!',
                            text: 'Validation Message!',
                        })
                        return false;
                    }
                }
                //==Space Allocation empty table check
                if ('@Session["IsSpaceAllocation"]' == "True") {
                    if (SpaceStarted > 0) {
                        if ($("#TableSpaceInfo tr").length == 1) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Space allocation information was not provided!',
                                text: 'Validation Message!',
                            })
                            return false;
                        }
                    }
                    else {
                        if ($("#TableSpaceInfo tr").length == 2) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Space allocation information was not provided!',
                                text: 'Validation Message!',
                            })
                            return false;
                        }
                    }
                }
                //==Utility Allocation empty table check
                //if ($("#TableUtilityInfo tr").length == 1) {
                //    Swal.fire({
                //        icon: 'warning',
                //        title: 'Utility allocation information was not provided!',
                //        text: 'Validation Message!',
                //    })
                //    return false;
                //}
                //==check that the Landlord Allocation is 100 % defined
                var TotalVendorAdvancePC = 0;
                var TotalVendorAdvanceAdjustmentPC = 0;
                var TotalVendorTaxPC = 0;
                var TotalVendorVATPC = 0;
                var TotalVendorRentPC = 0;
                $("#TableVendorInfo tr:gt(0)").each(function () {
                    var id1 = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                    var Index1 = id1.split('_').pop().split(';')[0];
                    //==VendorAdvancePC
                    var VendorAdvancePC = $("#gtxtVendorAdvancePC_" + Index1).val();
                    TotalVendorAdvancePC = parseFloat(TotalVendorAdvancePC) + parseFloat(VendorAdvancePC);
                    //==VendorAdvanceAdjustmentPC
                    var VendorAdvanceAdjustmentPC = $("#gtxtVendorAdvanceAdjustmentPC_" + Index1).val();
                    TotalVendorAdvanceAdjustmentPC = parseFloat(TotalVendorAdvanceAdjustmentPC) + parseFloat(VendorAdvanceAdjustmentPC);
                    //==VendorTaxPC
                    var VendorTaxPC = $("#gtxtVendorTaxPC_" + Index1).val();
                    TotalVendorTaxPC = parseFloat(TotalVendorTaxPC) + parseFloat(VendorTaxPC);
                    //==VendorVATPC
                    var VendorVATPC = $("#gtxtVendorVATPC_" + Index1).val();
                    TotalVendorVATPC = parseFloat(TotalVendorVATPC) + parseFloat(VendorVATPC);
                    //==VendorRentPC
                    var VendorRentPC = $("#gtxtVendorRentPC_" + Index1).val();
                    TotalVendorRentPC = parseFloat(TotalVendorRentPC) + parseFloat(VendorRentPC);
                });
                if (TotalVendorAdvancePC.toFixed() > 100) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'To proceed please check that the Landlord Advance Allocation is 100% defined!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                else if (TotalVendorAdvancePC.toFixed() < 100) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'To proceed please check that the Landlord Advance Allocation is 100% defined!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                else if (TotalVendorAdvanceAdjustmentPC.toFixed() > 100) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'To proceed please check that the Landlord Advance Adjustment Allocation is 100% defined!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                else if (TotalVendorAdvanceAdjustmentPC.toFixed() < 100) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'To proceed please check that the Landlord Advance Adjustment Allocation is 100% defined!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                else if (TotalVendorTaxPC.toFixed() > 100) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'To proceed please check that the Landlord Tax Allocation is 100% defined!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                else if (TotalVendorTaxPC.toFixed() < 100) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'To proceed please check that the Landlord Tax Allocation is 100% defined!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                else if (TotalVendorVATPC.toFixed() > 100) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'To proceed please check that the Landlord VAT Allocation is 100% defined!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                else if (TotalVendorVATPC.toFixed() < 100) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'To proceed please check that the Landlord VAT Allocation is 100% defined!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                else if (TotalVendorRentPC.toFixed() > 100) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'To proceed please check that the Landlord Rent Allocation is 100% defined!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                else if (TotalVendorRentPC.toFixed() < 100) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'To proceed please check that the Landlord Rent Allocation is 100% defined!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                //==Check that the Cost Allocation is 100% defined!',
                var TotalShare = 0;
                $("#TableCostCenterInfo tr:gt(0)").each(function () {
                    var id1 = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                    var Index1 = id1.split('_').pop().split(';')[0];
                    //==Share Allotment
                    var Share = $("#gtxtCCShareAllotment_" + Index1).val();
                    TotalShare = parseFloat(TotalShare) + parseFloat(Share);
                });
                if (TotalShare.toFixed() > 100) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'To proceed please check that the Cost Allocation is 100% defined!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                else if (TotalShare.toFixed() < 100) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'To proceed please check that the Cost Allocation is 100% defined!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                //==check that the Utility Allocation is 100 % defined
                //var TotalServiceChargePC = 0;
                //var TotalOnlineTowerPC = 0;
                //var TotalGeneratorSpacePC = 0;
                //var TotalCarParkingPC = 0;
                //var TotalUtilityTaxPC = 0;
                //var TotalUtilityVATPC = 0;
                //$("#TableUtilityInfo tr:gt(0)").each(function () {
                //    var id1 = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                //    var Index1 = id1.split('_').pop().split(';')[0];
                //    //==ServiceChargePC
                //    var ServiceChargePC = $("#gtxtServiceChargePC_" + Index1).val();
                //    TotalServiceChargePC = parseFloat(TotalServiceChargePC) + parseFloat(ServiceChargePC);
                //    //==OnlineTowerPC
                //    var OnlineTowerPC = $("#gtxtOnlineTowerPC_" + Index1).val();
                //    TotalOnlineTowerPC = parseFloat(TotalOnlineTowerPC) + parseFloat(OnlineTowerPC);
                //    //==GeneratorSpacePC
                //    var GeneratorSpacePC = $("#gtxtGeneratorSpacePC_" + Index1).val();
                //    TotalGeneratorSpacePC = parseFloat(TotalGeneratorSpacePC) + parseFloat(GeneratorSpacePC);
                //    //==CarParkingPC
                //    var CarParkingPC = $("#gtxtCarParkingPC_" + Index1).val();
                //    TotalCarParkingPC = parseFloat(TotalCarParkingPC) + parseFloat(CarParkingPC);
                //    //==UtilityTaxPC
                //    var UtilityTaxPC = $("#gtxtUtilityTaxPC_" + Index1).val();
                //    TotalUtilityTaxPC = parseFloat(TotalUtilityTaxPC) + parseFloat(UtilityTaxPC);
                //    //==UtilityVATPC
                //    var UtilityVATPC = $("#gtxtUtilityVATPC_" + Index1).val();
                //    TotalUtilityVATPC = parseFloat(TotalUtilityVATPC) + parseFloat(UtilityVATPC);
                //});
                //if (TotalServiceChargePC > 101) {
                //    Swal.fire({
                //        icon: 'warning',
                //        title: 'To proceed please check that the Utility Service Charge Allocation is 100% defined!',
                //        text: 'Validation Message!',
                //    })
                //    return false;
                //}
                //else if (TotalOnlineTowerPC > 101) {
                //    Swal.fire({
                //        icon: 'warning',
                //        title: 'To proceed please check that the Utility Online Tower Allocation is 100% defined!',
                //        text: 'Validation Message!',
                //    })
                //    return false;
                //}
                //else if (TotalGeneratorSpacePC > 101) {
                //    Swal.fire({
                //        icon: 'warning',
                //        title: 'To proceed please check that the Utility Generator Space is 100% defined!',
                //        text: 'Validation Message!',
                //    })
                //    return false;
                //}
                //else if (TotalCarParkingPC > 101) {
                //    Swal.fire({
                //        icon: 'warning',
                //        title: 'To proceed please check that the Utility Car Parking is 100% defined!',
                //        text: 'Validation Message!',
                //    })
                //    return false;
                //}
                //else if (TotalUtilityTaxPC != $("#txtTaxPercentage").val()) {
                //    Swal.fire({
                //        icon: 'warning',
                //        title: 'To proceed please check that the Utility Tax Allocation is 100% defined!',
                //        text: 'Validation Message!',
                //    })
                //    return false;
                //}
                //else if (TotalUtilityVATPC != $("#txtVATPercentage").val()) {
                //    Swal.fire({
                //        icon: 'warning',
                //        title: 'To proceed please check that the Utility VAT Allocation is 100% defined!',
                //        text: 'Validation Message!',
                //    })
                //    return false;
                //}
                //==Control Data
                if ($("#txtCashGLCode").val() == "" || $("#txtCashGLCode").val() == null) {
                    $("#txtCashGLCode").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Cash GL Code!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtBankGLCode").val() == "" || $("#txtBankGLCode").val() == null) {
                    $("#txtAdvanceGLCode").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Bank GL Code!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtAdvanceGLCode").val() == "" || $("#txtAdvanceGLCode").val() == null) {
                    $("#txtAdvanceGLCode").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Advance GL Code!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtAdvanceAdjustmentGLCode").val() == "" || $("#txtAdvanceAdjustmentGLCode").val() == null) {
                    $("#txtAdvanceAdjustmentGLCode").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Advance Adjustment GL Code!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtRentGLCode").val() == "" || $("#txtRentGLCode").val() == null) {
                    $("#txtRentGLCode").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Rent GL Code!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtServiceChargeGLCode").val() == "" || $("#txtServiceChargeGLCode").val() == null) {
                    $("#txtServiceChargeGLCode").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Service Charge GL Code!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtTaxGLCode").val() == "" || $("#txtTaxGLCode").val() == null) {
                    $("#txtTaxGLCode").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The Tax GL Code!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($("#txtVATGLCode").val() == "" || $("#txtVATGLCode").val() == null) {
                    $("#txtVATGLCode").focus();
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enter The VAT GL Code!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                if ($('#IsIFRSEnable').is(':checked')) {
                    if ($("#BorrowingRate").val() == 0) {
                        $("#BorrowingRate").focus();
                        Swal.fire({
                            icon: 'warning',
                            title: 'Enter borrowing rate!',
                            text: 'Validation Message!',
                        })
                        return false;
                    }
                    else if ($("#CorporateTaxRate").val() == 0) {
                        $("#CorporateTaxRate").focus();
                        Swal.fire({
                            icon: 'warning',
                            title: 'Enter Corporate Tax Rate!',
                            text: 'Validation Message!',
                        })
                        return false;
                    }
                    else if ($("#txtIFRSEffectiveDate").val() == "" || $("#txtIFRSEffectiveDate").val() == null) {
                        $("#txtIFRSEffectiveDate").focus();
                        Swal.fire({
                            icon: 'warning',
                            title: 'Enter IFRS Effective Date!',
                            text: 'Validation Message!',
                        })
                        return false;
                    }
                    //==
                    var AgreementStartDate = $('#txtAgreementStartDate').val().replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$2/$1/$3");
                    var AgreementEndDate = $('#txtAgreementEndDate').val().replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$2/$1/$3");
                    var IFRSEffectiveDate = $('#txtIFRSEffectiveDate').val().replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$2/$1/$3");
                    if (Date.parse(IFRSEffectiveDate) < Date.parse(AgreementStartDate) || Date.parse(IFRSEffectiveDate) >= Date.parse(AgreementEndDate)) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'The IFRS effective date is not allowed to be less than the contract start date or greater than or equal to the contract end date!',
                            text: 'Validation Message!',
                        })
                        return false;
                    }
                    else if (Date.parse(IFRSEffectiveDate) < Date.parse("01/01/2019")) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'The IFRS effective date is not allowed to be less than 01/01/2019!',
                            text: 'Validation Message!',
                        })
                        return false;
                    }
                    //==
                }
                //==Save to Submit Form
                Swal.fire({
                    title: "Are you sure to update the renewal agreement?",
                    text: "Please review all required information entered!",
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes,&nbsp;Update Agreement'
                }).then((result) => {
                    if (result.value) {
                        $('#spinner').show();
                        document.getElementById('TotalRentAmount').value = parseFloat($("#txtTotalRentAmount").val().replace(/[^0-9\.]+/g, ""));
                        document.getElementById('TaxAmount').value = parseFloat($("#txtTaxAmount").val().replace(/[^0-9\.]+/g, ""));
                        document.getElementById('VATAmount').value = parseFloat($("#txtVATAmount").val().replace(/[^0-9\.]+/g, ""));
                        //==Space info data pull from the table
                        var SpaceTypeList = []
                        $(".SpaceTypeValue").each(function () {
                            var SpaceType = $(this).val();
                            SpaceTypeList.push(SpaceType);
                        });
                        var SpaceAreaList = []
                        $(".SpaceAreaValue").each(function () {
                            var SpaceArea = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            SpaceAreaList.push(SpaceArea);
                        });
                        var SpaceRateList = []
                        $(".SpaceRateValue").each(function () {
                            var SpaceRate = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            SpaceRateList.push(SpaceRate);
                        });
                        var SpaceRentList = []
                        $(".SpaceRentValue").each(function () {
                            var SpaceRent = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            SpaceRentList.push(SpaceRent);
                        });
                        var SpaceTotalAdvanceList = []
                        $(".SpaceTotalAdvanceValue").each(function () {
                            var SpaceTotalAdvance = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            SpaceTotalAdvanceList.push(SpaceTotalAdvance);
                        });
                        var SpaceTotalAdjustmentList = []
                        $(".SpaceTotalAdjustmentValue").each(function () {
                            var SpaceTotalAdjustment = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            SpaceTotalAdjustmentList.push(SpaceTotalAdjustment);
                        });
                        var SpaceRemarksList = []
                        $(".SpaceRemarksValue").each(function () {
                            var SpaceRemarks = $(this).val();
                            SpaceRemarksList.push(SpaceRemarks);
                        });
                        $("#SpaceTypeList").val(SpaceTypeList);
                        $("#SpaceAreaList").val(SpaceAreaList);
                        $("#SpaceRateList").val(SpaceRateList);
                        $("#SpaceRentList").val(SpaceRentList);
                        $("#SpaceTotalAdvanceList").val(SpaceTotalAdvanceList);
                        $("#SpaceTotalAdjustmentList").val(SpaceTotalAdjustmentList);
                        $("#SpaceRemarksList").val(SpaceRemarksList);
                        //==Advance Information data pull from the table
                        var AdvanceNoList = []
                        $(".AdvanceNoValue").each(function () {
                            var AdvanceNo = $(this).val();
                            AdvanceNoList.push(AdvanceNo);
                        });
                        var AdvanceStartDateList = []
                        $(".AdvanceStartDateValue").each(function () {
                            var AdvanceStartDate = $(this).val();
                            AdvanceStartDateList.push(AdvanceStartDate);
                        });
                        var AdvanceEndDateList = []
                        $(".AdvanceEndDateValue").each(function () {
                            var AdvanceEndDate = $(this).val();
                            AdvanceEndDateList.push(AdvanceEndDate);
                        });
                        var AdvanceSlotPeriodList = []
                        $(".AdvanceSlotPeriodValue").each(function () {
                            var AdvanceSlotPeriod = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            AdvanceSlotPeriodList.push(AdvanceSlotPeriod);
                        });
                        var AdvanceNoteList = []
                        $(".AdvanceNoteValue").each(function () {
                            var AdvanceNote = $(this).val();
                            AdvanceNoteList.push(AdvanceNote);
                        });
                        var AdvanceSlotAmountList = []
                        $(".AdvanceSlotAmountValue").each(function () {
                            var AdvanceSlotAmount = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            AdvanceSlotAmountList.push(AdvanceSlotAmount);
                        });
                        $("#AdvanceNoList").val(AdvanceNoList);
                        $("#AdvanceSlotPeriodList").val(AdvanceSlotPeriodList);
                        $("#AdvanceStartDateList").val(AdvanceStartDateList);
                        $("#AdvanceEndDateList").val(AdvanceEndDateList);
                        $("#AdvanceNoteList").val(AdvanceNoteList);
                        $("#AdvanceSlotAmountList").val(AdvanceSlotAmountList);
                        //==Review Information data pull from the table
                        var ReviewNoList = []
                        $(".ReviewNoValue").each(function () {
                            var ReviewNo = $(this).val();
                            ReviewNoList.push(ReviewNo);
                        });
                        var ReviewStartDateList = []
                        $(".ReviewStartDateValue").each(function () {
                            var ReviewStartDate = $(this).val();
                            ReviewStartDateList.push(ReviewStartDate);
                        });
                        var ReviewEndDateList = []
                        $(".ReviewEndDateValue").each(function () {
                            var ReviewEndDate = $(this).val();
                            ReviewEndDateList.push(ReviewEndDate);
                        });
                        var ReviewPeriodList = []
                        $(".ReviewPeriodValue").each(function () {
                            var ReviewPeriod = $(this).val();
                            ReviewPeriodList.push(ReviewPeriod);
                        });
                        var ReviewIncreaseAmountList = [];
                        $(".ReviewIncreaseAmountValue").each(function () {
                            var ReviewIncreaseAmount = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            ReviewIncreaseAmountList.push(ReviewIncreaseAmount);
                        });
                        var ReviewIncreasePercentageList = [];
                        $(".ReviewIncreasePercentageValue").each(function () {
                            var ReviewIncreasePercentage = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            ReviewIncreasePercentageList.push(ReviewIncreasePercentage);
                        });
                        var ReviewNoteList = []
                        $(".ReviewNoteValue").each(function () {
                            var ReviewNote = $(this).val();
                            ReviewNoteList.push(ReviewNote);
                        });
                        $("#ReviewNoList").val(ReviewNoList);
                        $("#ReviewPeriodList").val(ReviewPeriodList);
                        $("#ReviewStartDateList").val(ReviewStartDateList);
                        $("#ReviewEndDateList").val(ReviewEndDateList);
                        $("#ReviewIncreaseAmountList").val(ReviewIncreaseAmountList);
                        $("#ReviewIncreasePercentageList").val(ReviewIncreasePercentageList);
                        $("#ReviewNoteList").val(ReviewNoteList);
                        //==Landlord Information data pull from the table
                        var VendorCodeList = []
                        $(".VendorCodeValue").each(function () {
                            var VendorCode = $(this).val();
                            VendorCodeList.push(VendorCode);
                        });
                        var LandlordNameList = []
                        $(".LandlordNameValue").each(function () {
                            var LandlordName = $(this).val();
                            LandlordNameList.push(LandlordName);
                        });
                        var ModeOfPaymentList = []
                        $(".ModeOfPaymentValue").each(function () {
                            var ModeOfPayment = $(this).val();
                            ModeOfPaymentList.push(ModeOfPayment);
                        });
                        var VendorAdvancePCList = [];
                        $(".VendorAdvancePCValue").each(function () {
                            var VendorAdvancePC = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            VendorAdvancePCList.push(VendorAdvancePC);
                        });
                        var VendorAdvanceAmountList = [];
                        $(".VendorAdvanceAmountValue").each(function () {
                            var VendorAdvanceAmount = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            VendorAdvanceAmountList.push(VendorAdvanceAmount);
                        });
                        var VendorAdvanceAdjustmentPCList = [];
                        $(".VendorAdvanceAdjustmentPCValue").each(function () {
                            var VendorAdvanceAdjustmentPC = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            VendorAdvanceAdjustmentPCList.push(VendorAdvanceAdjustmentPC);
                        });
                        //var VendorAdvanceAdjustmentAmountList = [];
                        //$(".VendorAdvanceAdjustmentAmountValue").each(function () {
                        //    var VendorAdvanceAdjustmentAmount = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                        //    VendorAdvanceAdjustmentAmountList.push(VendorAdvanceAdjustmentAmount);
                        //});
                        var VendorTaxPCList = [];
                        $(".VendorTaxPCValue").each(function () {
                            var VendorTaxPC = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            VendorTaxPCList.push(VendorTaxPC);
                        });
                        var VendorTaxAmountList = [];
                        $(".VendorTaxAmountValue").each(function () {
                            var VendorTaxAmount = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            VendorTaxAmountList.push(VendorTaxAmount);
                        });
                        var VendorVATPCList = [];
                        $(".VendorVATPCValue").each(function () {
                            var VendorVATPC = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            VendorVATPCList.push(VendorVATPC);
                        });
                        var VendorVATAmountList = [];
                        $(".VendorVATAmountValue").each(function () {
                            var VendorVATAmount = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            VendorVATAmountList.push(VendorVATAmount);
                        });
                        var VendorRentPCList = [];
                        $(".VendorRentPCValue").each(function () {
                            var VendorRentPC = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            VendorRentPCList.push(VendorRentPC);
                        });
                        //var VendorRentAmountList = [];
                        //$(".VendorRentAmountValue").each(function () {
                        //    var VendorRentAmount = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                        //    VendorRentAmountList.push(VendorRentAmount);
                        //});
                        var AddressList = []
                        $(".AddressValue").each(function () {
                            var Address = $(this).val();
                            AddressList.push(Address);
                        });
                        var ContactNoList = []
                        $(".ContactNoValue").each(function () {
                            var ContactNo = $(this).val();
                            ContactNoList.push(ContactNo);
                        });
                        var EmailList = []
                        $(".EmailValue").each(function () {
                            var Email = $(this).val();
                            EmailList.push(Email);
                        });
                        var ACNoList = []
                        $(".ACNoValue").each(function () {
                            var ACNo = $(this).val();
                            ACNoList.push(ACNo);
                        });
                        var BankNameList = []
                        $(".BankNameValue").each(function () {
                            var BankName = $(this).val();
                            BankNameList.push(BankName);
                        });
                        var BranchNameList = []
                        $(".BranchNameValue").each(function () {
                            var BranchName = $(this).val();
                            BranchNameList.push(BranchName);
                        });
                        var RoutingNoList = []
                        $(".RoutingNoValue").each(function () {
                            var RoutingNo = $(this).val();
                            RoutingNoList.push(RoutingNo);
                        });
                        $("#VendorCodeList").val(VendorCodeList);
                        $("#LandlordNameList").val(LandlordNameList);
                        $("#ModeOfPaymentList").val(ModeOfPaymentList);
                        $("#VendorAdvancePCList").val(VendorAdvancePCList);
                        $("#VendorAdvanceAmountList").val(VendorAdvanceAmountList);
                        $("#VendorAdvanceAdjustmentPCList").val(VendorAdvanceAdjustmentPCList);
                        //$("#VendorAdvanceAdjustmentAmountList").val(VendorAdvanceAdjustmentAmountList);
                        $("#VendorTaxPCList").val(VendorTaxPCList);
                        $("#VendorTaxAmountList").val(VendorTaxAmountList);
                        $("#VendorVATPCList").val(VendorVATPCList);
                        $("#VendorVATAmountList").val(VendorVATAmountList);
                        $("#VendorRentPCList").val(VendorRentPCList);
                        //$("#VendorRentAmountList").val(VendorRentAmountList);
                        $("#LLAddressList").val(AddressList);
                        $("#LLContactNoList").val(ContactNoList);
                        $("#LLEmailList").val(EmailList);
                        $("#ACNoList").val(ACNoList);
                        $("#BankNameList").val(BankNameList);
                        $("#BranchNameList").val(BranchNameList);
                        $("#RoutingNoList").val(RoutingNoList);
                        //==Cost Allocation data pull from the table
                        var CCCodeList = []
                        $(".CCCodeValue").each(function () {
                            var CCCode = $(this).val();
                            CCCodeList.push(CCCode);
                        });
                        var CCNameList = []
                        $(".CCNameValue").each(function () {
                            var CCName = $(this).val();
                            CCNameList.push(CCName);
                        });
                        var SOLCodeList = []
                        $(".SOLCodeValue").each(function () {
                            var SOLCode = $(this).val();
                            SOLCodeList.push(SOLCode);
                        });
                        var SOLNameList = []
                        $(".SOLNameValue").each(function () {
                            var SOLName = $(this).val();
                            SOLNameList.push(SOLName);
                        });
                        var CCShareAllotmentList = [];
                        $(".CCShareAllotmentValue").each(function () {
                            var CCShareAllotment = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            CCShareAllotmentList.push(CCShareAllotment);
                        });
                        $("#CCCodeList").val(CCCodeList);
                        $("#CCNameList").val(CCNameList);
                        $("#SOLCodeList").val(SOLCodeList);
                        $("#SOLNameList").val(SOLNameList);
                        $("#CCShareAllotmentList").val(CCShareAllotmentList);
                        //==Utility Information data pull from the table
                        var UtilityVendorCodeList = []
                        $(".UtilityVendorCodeValue").each(function () {
                            var UtilityVendorCode = $(this).val();
                            UtilityVendorCodeList.push(UtilityVendorCode);
                        });
                        var UtilityLandlordNameList = []
                        $(".UtilityLandlordNameValue").each(function () {
                            var UtilityLandlordName = $(this).val();
                            UtilityLandlordNameList.push(UtilityLandlordName);
                        });
                        var UtilityModeOfPaymentList = []
                        $(".UtilityModeOfPaymentValue").each(function () {
                            var UtilityModeOfPayment = $(this).val();
                            UtilityModeOfPaymentList.push(UtilityModeOfPayment);
                        });

                        var ServiceChargePCList = [];
                        $(".ServiceChargePCValue").each(function () {
                            var ServiceChargePC = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            ServiceChargePCList.push(ServiceChargePC);
                        });
                        var ServiceChargeAmountList = [];
                        $(".ServiceChargeAmountValue").each(function () {
                            var ServiceChargeAmount = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            ServiceChargeAmountList.push(ServiceChargeAmount);
                        });
                        var OnlineTowerPCList = [];
                        $(".OnlineTowerPCValue").each(function () {
                            var OnlineTowerPC = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            OnlineTowerPCList.push(OnlineTowerPC);
                        });
                        var OnlineTowerAmountList = [];
                        $(".OnlineTowerAmountValue").each(function () {
                            var OnlineTowerAmount = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            OnlineTowerAmountList.push(OnlineTowerAmount);
                        });
                        var GeneratorSpacePCList = [];
                        $(".GeneratorSpacePCValue").each(function () {
                            var GeneratorSpacePC = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            GeneratorSpacePCList.push(GeneratorSpacePC);
                        });
                        var GeneratorSpaceAmountList = [];
                        $(".GeneratorSpaceAmountValue").each(function () {
                            var GeneratorSpaceAmount = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            GeneratorSpaceAmountList.push(GeneratorSpaceAmount);
                        });
                        var CarParkingPCList = [];
                        $(".CarParkingPCValue").each(function () {
                            var CarParkingPC = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            CarParkingPCList.push(CarParkingPC);
                        });
                        var CarParkingAmountList = [];
                        $(".CarParkingAmountValue").each(function () {
                            var CarParkingAmount = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            CarParkingAmountList.push(CarParkingAmount);
                        });
                        var UtilityTaxPCList = [];
                        $(".UtilityTaxPCValue").each(function () {
                            var UtilityTaxPC = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            UtilityTaxPCList.push(UtilityTaxPC);
                        });
                        var UtilityTaxAmountList = [];
                        $(".UtilityTaxAmountValue").each(function () {
                            var UtilityTaxAmount = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            UtilityTaxAmountList.push(UtilityTaxAmount);
                        });
                        var UtilityVATPCList = [];
                        $(".UtilityVATPCValue").each(function () {
                            var UtilityVATPC = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            UtilityVATPCList.push(UtilityVATPC);
                        });
                        var UtilityVATAmountList = [];
                        $(".UtilityVATAmountValue").each(function () {
                            var UtilityVATAmount = parseFloat($(this).val().replace(/[^0-9\.]+/g, ""));
                            UtilityVATAmountList.push(UtilityVATAmount);
                        });
                        var UtilityAddressList = []
                        $(".UtilityAddressValue").each(function () {
                            var UtilityAddress = $(this).val();
                            UtilityAddressList.push(UtilityAddress);
                        });
                        var UtilityContactNoList = []
                        $(".UtilityContactNoValue").each(function () {
                            var UtilityContactNo = $(this).val();
                            UtilityContactNoList.push(UtilityContactNo);
                        });
                        var UtilityEmailList = []
                        $(".UtilityEmailValue").each(function () {
                            var UtilityEmail = $(this).val();
                            UtilityEmailList.push(UtilityEmail);
                        });
                        var UtilityACNoList = []
                        $(".UtilityACNoValue").each(function () {
                            var UtilityACNo = $(this).val();
                            UtilityACNoList.push(UtilityACNo);
                        });
                        var UtilityBankNameList = []
                        $(".UtilityBankNameValue").each(function () {
                            var UtilityBankName = $(this).val();
                            UtilityBankNameList.push(UtilityBankName);
                        });
                        var UtilityBranchNameList = []
                        $(".UtilityBranchNameValue").each(function () {
                            var UtilityBranchName = $(this).val();
                            UtilityBranchNameList.push(UtilityBranchName);
                        });
                        var UtilityRoutingNoList = []
                        $(".UtilityRoutingNoValue").each(function () {
                            var UtilityRoutingNo = $(this).val();
                            UtilityRoutingNoList.push(UtilityRoutingNo);
                        });
                        $("#UtilityVendorCodeList").val(UtilityVendorCodeList);
                        $("#UtilityLandlordNameList").val(UtilityLandlordNameList);
                        $("#UtilityModeOfPaymentList").val(UtilityModeOfPaymentList);
                        $("#ServiceChargePCList").val(ServiceChargePCList);
                        $("#ServiceChargeAmountList").val(ServiceChargeAmountList);
                        $("#OnlineTowerPCList").val(OnlineTowerPCList);
                        $("#OnlineTowerAmountList").val(OnlineTowerAmountList);
                        $("#GeneratorSpacePCList").val(GeneratorSpacePCList);
                        $("#GeneratorSpaceAmountList").val(GeneratorSpaceAmountList);
                        $("#CarParkingPCList").val(CarParkingPCList);
                        $("#CarParkingAmountList").val(CarParkingAmountList);
                        $("#UtilityTaxPCList").val(UtilityTaxPCList);
                        $("#UtilityTaxAmountList").val(UtilityTaxAmountList);
                        $("#UtilityVATPCList").val(UtilityVATPCList);
                        $("#UtilityVATAmountList").val(UtilityVATAmountList);
                        $("#UtilityAddressList").val(UtilityAddressList);
                        $("#UtilityContactNoList").val(UtilityContactNoList);
                        $("#UtilityEmailList").val(UtilityEmailList);
                        $("#UtilityACNoList").val(UtilityACNoList);
                        $("#UtilityBankNameList").val(UtilityBankNameList);
                        $("#UtilityBranchNameList").val(UtilityBranchNameList);
                        $("#UtilityRoutingNoList").val(UtilityRoutingNoList);
                        //==Attached File data pull from the table
                        var FUFileNameList = []
                        $(".FUFileNameValue").each(function () {
                            var FUFileName = $(this).val();
                            FUFileNameList.push(FUFileName);
                        });
                        $("#FUFileNameList").val(FUFileNameList);
                        //Ajax Post Call
                        var headers = { __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() };
                        if (self.getQueuedFiles().length > 0) {
                            self.processQueue();
                        } else {
                            $.ajax({
                                type: "POST",
                                headers: headers,
                                url: "/AgreementInfo/ReEdit",
                                data: $('#frmSubmit').serialize(),
                                success: function (response) {
                                    $('#spinner').hide();
                                    if (response.CheckStatus == true) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'The renewal agreement has been updated.',
                                            text: 'Redirecting in 3 seconds.',
                                            timer: 3000,
                                            showConfirmButton: false
                                        }).then(function () {
                                            window.location.href = "/AgreementInfo/RedirectReAgreementIndex?ViewID=2";
                                        });
                                    }
                                    else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'The renewal agreement not updated, execution not possible!',
                                            text: 'Something went wrong!',
                                        })
                                    }
                                },
                                failure: function (response) {
                                    alert(response.responseText);
                                },
                                error: function (response) {
                                    alert(response.responseText);
                                }
                            });
                        }
                        //==
                    }
                });
                //==
            });

            self.on("successmultiple", function (files, response) {
                // Gets triggered when the files have successfully been sent.
                // Redirect user or notify of success.
                $('#spinner').hide();
                Swal.fire({
                    icon: 'success',
                    title: 'The renewal agreement has been updated.',
                    text: 'Redirecting in 3 seconds.',
                    timer: 3000,
                    showConfirmButton: false
                }).then(function () {
                    window.location.href = "/AgreementInfo/RedirectReAgreementIndex?ViewID=2";
                });
            });
        }
    });
</script>
<script>
    $(function () {
        $('#txtIFRSEffectiveDate').datepicker({
            autoclose: true,
            changeMonth: true,
            changeYear: true,
            dateFormat: 'dd/mm/yy',
            showOn: 'button',
            buttonImageOnly: true,
            buttonImage: '/Content/Images/Calendar.gif',
        })
    })
</script>
<script>
    $(function () {
        $('#txtPremisesOpeningDate').datepicker({
            autoclose: true,
            changeMonth: true,
            changeYear: true,
            dateFormat: 'dd/mm/yy',
            showOn: 'button',
            buttonImageOnly: true,
            buttonImage: '/Content/Images/Calendar.gif',
        })
    })
</script>
<script>
    $(function () {
        $('#txtDocumentDate').datepicker({
            autoclose: true,
            changeMonth: true,
            changeYear: true,
            dateFormat: 'dd/mm/yy',
            showOn: 'button',
            buttonImageOnly: true,
            buttonImage: '/Content/Images/Calendar.gif',
        })
    })
</script>
<script>
    $(function () {
        if ($("#AgreementStatus").val() != 2) {
            $('#txtAgreementStartDate').datepicker({
                autoclose: true,
                changeMonth: true,
                changeYear: true,
                dateFormat: 'dd/mm/yy',
                showOn: 'button',
                buttonImageOnly: true,
                buttonImage: '/Content/Images/Calendar.gif',
            })
            $('#txtAgreementEndDate').datepicker({
                autoclose: true,
                changeMonth: true,
                changeYear: true,
                dateFormat: 'dd/mm/yy',
                showOn: 'button',
                buttonImageOnly: true,
                buttonImage: '/Content/Images/Calendar.gif',
            })
            $("#txtAgreementStartDate").on("change", function () {
                if ($("#txtAgreementEndDate").val() == "" || $("#txtAgreementEndDate").val() == null) {
                }
                else {
                    var d1 = "01/" + $(this).val().substr(3, 7);
                    d1 = d1.split("/");
                    d1 = new Date(+d1[2], d1[1] - 1, +d1[0]);
                    var d2 = "28/" + $("#txtAgreementEndDate").val().substr(3, 7);
                    d2 = d2.split("/");
                    d2 = new Date(+d2[2], d2[1] - 1, +d2[0]);
                    var days = ((d2 - d1) / (1000 * 60 * 60 * 24)) + 1;
                    $("#txtAgreementPeriod").val(Math.round(days / 30.41666666666667));
                }
            });

            $("#txtAgreementEndDate").on("change", function () {
                if ($("#txtAgreementStartDate").val() == "" || $("#txtAgreementStartDate").val() == null) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Select agreement start date!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
                else {
                    var d1 = "01/" + $("#txtAgreementStartDate").val().substr(3, 7);
                    d1 = d1.split("/");
                    d1 = new Date(+d1[2], d1[1] - 1, +d1[0]);
                    var d2 = "28/" + $(this).val().substr(3, 7);
                    d2 = d2.split("/");
                    d2 = new Date(+d2[2], d2[1] - 1, +d2[0]);
                    var days = ((d2 - d1) / (1000 * 60 * 60 * 24)) + 1;
                    $("#txtAgreementPeriod").val(Math.round(days / 30.41666666666667));
                }
            });
        }
    })
</script>
<script>
    $(function () {
        $('#txtReviewStartDate').datepicker({
            autoclose: true,
            changeMonth: true,
            changeYear: true,
            dateFormat: 'dd/mm/yy',
            showOn: 'button',
            buttonImageOnly: true,
            buttonImage: '/Content/Images/Calendar.gif',
        })
        $('#txtReviewEndDate').datepicker({
            autoclose: true,
            changeMonth: true,
            changeYear: true,
            dateFormat: 'dd/mm/yy',
            showOn: 'button',
            buttonImageOnly: true,
            buttonImage: '/Content/Images/Calendar.gif',
        })

        $("#txtReviewStartDate").on("change", function () {
            if ($("#txtReviewEndDate").val() == "" || $("#txtReviewEndDate").val() == null) {
            }
            else {
                var d1 = "01/" + $(this).val().substr(3, 7);
                d1 = d1.split("/");
                d1 = new Date(+d1[2], d1[1] - 1, +d1[0]);
                var d2 = "28/" + $("#txtReviewEndDate").val().substr(3, 7);
                d2 = d2.split("/");
                d2 = new Date(+d2[2], d2[1] - 1, +d2[0]);
                var days = ((d2 - d1) / (1000 * 60 * 60 * 24)) + 1;
                $("#txtReviewPeriod").val(Math.round(days / 30.41666666666667));
            }
        });

        $("#txtReviewEndDate").on("change", function () {
            if ($("#txtReviewStartDate").val() == "" || $("#txtReviewStartDate").val() == null) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Select Enhancement start date!',
                    text: 'Validation Message!',
                })
                return false;
            }
            else {
                var d1 = "01/" + $("#txtReviewStartDate").val().substr(3, 7);
                d1 = d1.split("/");
                d1 = new Date(+d1[2], d1[1] - 1, +d1[0]);
                var d2 = "28/" + $(this).val().substr(3, 7);
                d2 = d2.split("/");
                d2 = new Date(+d2[2], d2[1] - 1, +d2[0]);
                var days = ((d2 - d1) / (1000 * 60 * 60 * 24)) + 1;
                $("#txtReviewPeriod").val(Math.round(days / 30.41666666666667));
            }
        });
    })
</script>
<script>
    $(function () {
        $('#txtAdvanceStartDate').datepicker({
            autoclose: true,
            changeMonth: true,
            changeYear: true,
            dateFormat: 'dd/mm/yy',
            showOn: 'button',
            buttonImageOnly: true,
            buttonImage: '/Content/Images/Calendar.gif',
        })
        $('#txtAdvanceEndDate').datepicker({
            autoclose: true,
            changeMonth: true,
            changeYear: true,
            dateFormat: 'dd/mm/yy',
            showOn: 'button',
            buttonImageOnly: true,
            buttonImage: '/Content/Images/Calendar.gif',
        })

        $("#txtAdvanceStartDate").on("change", function () {
            if ($("#txtAdvanceEndDate").val() == "" || $("#txtAdvanceEndDate").val() == null) {
            }
            else {
                var d1 = "01/" + $(this).val().substr(3, 7);
                d1 = d1.split("/");
                d1 = new Date(+d1[2], d1[1] - 1, +d1[0]);
                var d2 = "28/" + $("#txtAdvanceEndDate").val().substr(3, 7);
                d2 = d2.split("/");
                d2 = new Date(+d2[2], d2[1] - 1, +d2[0]);
                var days = ((d2 - d1) / (1000 * 60 * 60 * 24)) + 1;
                $("#txtAdvanceSlotPeriod").val(Math.round(days / 30.41666666666667));
            }
        });

        $("#txtAdvanceEndDate").on("change", function () {
            if ($("#txtAdvanceStartDate").val() == "" || $("#txtAdvanceStartDate").val() == null) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Select advance start date!',
                    text: 'Validation Message!',
                })
                return false;
            }
            else {
                var d1 = "01/" + $("#txtAdvanceStartDate").val().substr(3, 7);
                d1 = d1.split("/");
                d1 = new Date(+d1[2], d1[1] - 1, +d1[0]);
                var d2 = "28/" + $(this).val().substr(3, 7);
                d2 = d2.split("/");
                d2 = new Date(+d2[2], d2[1] - 1, +d2[0]);
                var days = ((d2 - d1) / (1000 * 60 * 60 * 24)) + 1;
                $("#txtAdvanceSlotPeriod").val(Math.round(days / 30.41666666666667));
            }
        });
    })
</script>
<script type="text/javascript">
    var SpaceStarted = $("#SpaceftrCount").val();
    var ReviewStarted = $("#RIftrCount").val();
    var LandlordStarted = $("#LIftrCount").val();
    var CostCenterStarted = $("#CCftrCount").val();
    var UtilityStarted = $("#UIftrCount").val();
    $(document).ready(function () {
        $('#spinner').show();
        if ($('#IsIFRSEnable').is(':checked')) {

        }
        else {
            $('#txtIFRSEffectiveDate').attr('readonly', true);
            $('#CorporateTaxRate').attr('readonly', true);
            $('#BorrowingRate').attr('readonly', true);
            $("#CorporateTaxRate").val("0.00");
            $("#BorrowingRate").val("0.00");
        }
        $('#IsIFRSEnable').change(function () {
            if (this.checked) {
                $('#txtIFRSEffectiveDate').attr('readonly', false);
                $('#CorporateTaxRate').attr('readonly', false);
                $('#BorrowingRate').attr('readonly', false);
                $("#txtIFRSEffectiveDate").val($("#txtAgreementStartDate").val());
                $("#CorporateTaxRate").val("0.00");
                $("#BorrowingRate").val("0.00");
            }
            else {
                $('#txtIFRSEffectiveDate').attr('readonly', true);
                $('#CorporateTaxRate').attr('readonly', true);
                $('#BorrowingRate').attr('readonly', true);
                $("#txtIFRSEffectiveDate").val('');
                $("#CorporateTaxRate").val("0.00");
                $("#BorrowingRate").val("0.00");
            }
        });
        $("#ddlPremiseType").chosen({ width: '100%' })
        //==
        $("#AreaStatus").chosen({ width: '100%' })
        $("#RegionalOffice").chosen({ width: '100%' })
        $("#PrimarySOL").chosen({ width: '100%' })
        $("#AttachedControl").chosen({ width: '100%' })
        $("#Division").chosen({ width: '100%' })
        $("#District").chosen({ width: '100%' })
        $("#Upazila").chosen({ width: '100%' })
        $("#Thana").chosen({ width: '100%' })
        $("#PremisesTypeforAccounts").chosen({ width: '100%' })
        $("#ElectricityProvidedBy").chosen({ width: '100%' })
        $("#AITBourneBy").chosen({ width: '100%' })
        $("#CommercialPermission").chosen({ width: '100%' })
        $("#BuildingPlan").chosen({ width: '100%' })
        $("#BangladeshBankApproval").chosen({ width: '100%' })
        $("#SpaceType").chosen({ width: '100%' })
        //==
        $("#ddlModeOfPayment").chosen({ width: '100%' })
        $("#ddlUtilityModeOfPayment").chosen({ width: '100%' })
        $("#ddlBankName").chosen({ width: '100%' })
        $("#ddlUtilityBankName").chosen({ width: '100%' })
        $("#ddlCC").chosen({ width: '100%' })
        $("#ddlSOL").chosen({ width: '100%' })
        $("#xddlAgreement").chosen({ width: '100%' })
        $("#ddlPremiseType").focus();
        if ($('#Special').is(':checked')) {
            $("#IsIFRSEnable").prop("checked", false);
            $("#IsIFRSEnable").attr('disabled', true);

            $("#txtIFRSEffectiveDate").val('');
            $('#txtIFRSEffectiveDate').attr('readonly', true);
            $('#CorporateTaxRate').attr('readonly', true);
            $('#BorrowingRate').attr('readonly', true);
            $("#CorporateTaxRate").val("0.00");
            $("#BorrowingRate").val("0.00");
        }
        $('#Special').change(function () {
            if (this.checked) {
                $("#IsIFRSEnable").prop("checked", false);
                $("#IsIFRSEnable").attr('disabled', true);
            }
            else
                $("#IsIFRSEnable").attr('disabled', false);
        });
        if ($("#AgreementStatus").val() == 2) {
            //==Lock Agreement Tab
            $('#xddlAgreement').prop('disabled', true).trigger("chosen:updated");
            $("#txtAgreementName").prop("readonly", true);
            $("#txtAgreementStartDate").prop("readonly", true);
            $("#txtAgreementEndDate").prop("readonly", true);
            $("#txtIFRSEffectiveDate").prop("readonly", true);
            //$("#txtRentDueDay").prop("readonly", true);
            $("#ddlUOM").attr('disabled', true);
            $("#txtTotalArea").prop("readonly", true);
            $("#txtRentAmount").prop("readonly", true);
            $("#txtCostPerUnit").prop("readonly", true);
            $("#txtTaxPercentage").prop("readonly", true);
            $("#ddlTaxType").attr('disabled', true);
            $("#txtVATPercentage").prop("readonly", true);
            $("#ddlVatType").attr('disabled', true);

            $("#CalculationMethod").attr('disabled', true);
            $("#Special").attr('disabled', true);

            $("#IsIFRSEnable").attr('disabled', true);
            $('#txtIFRSEffectiveDate').attr('readonly', true);
            $("#BorrowingRate").prop("readonly", true);
            $("#CorporateTaxRate").prop("readonly", true);
            //==Lock Advance Tab
            $("#txtSecurityDepositAmount").prop("readonly", true);
            $("#txtAdvanceAmount").prop("readonly", true);
            $("#btnAdvanceAddToList").attr("disabled", true);
            //==Lock Review Tab
            $("#txtReviewFrequency").prop("readonly", true);
            $("#txtReviewPercentage").prop("readonly", true);
            $("#btnReviewAddToList").attr("disabled", true);
        }
        //==Agreement Info
        var TotalArea = parseFloat($("#txtTotalArea").val());
        $("#txtTotalArea").val(parseFloat(TotalArea).toFixed(12));
        var RentAmount = parseFloat($("#txtRentAmount").val());
        $("#txtRentAmount").val(parseFloat(RentAmount).toFixed(12));
        var CostPerUnit = parseFloat($("#txtCostPerUnit").val());
        $("#txtCostPerUnit").val(parseFloat(CostPerUnit).toFixed(12));
        var SecurityDepositAmount = parseFloat($("#txtSecurityDepositAmount").val());
        $("#txtSecurityDepositAmount").val(parseFloat(SecurityDepositAmount).toFixed(12));
        var AdvanceAmount = parseFloat($("#txtAdvanceAmount").val());
        $("#txtAdvanceAmount").val(parseFloat(AdvanceAmount).toFixed(12));
        var TaxPercentage = parseFloat($("#txtTaxPercentage").val());
        $("#txtTaxPercentage").val(parseFloat(TaxPercentage).toFixed(12));
        var VATPercentage = parseFloat($("#txtVATPercentage").val());
        $("#txtVATPercentage").val(parseFloat(VATPercentage).toFixed(12));

        var BorrowingRate = parseFloat($("#BorrowingRate").val());
        $("#BorrowingRate").val(parseFloat(BorrowingRate).toFixed(12));
        var CorporateTaxRate = parseFloat($("#CorporateTaxRate").val());
        $("#CorporateTaxRate").val(parseFloat(CorporateTaxRate).toFixed(12));
        var AdditionalExpense = parseFloat($("#AdditionalExpense").val());
        $("#AdditionalExpense").val(parseFloat(AdditionalExpense).toFixed(12));
        var InitialDirectCost = parseFloat($("#InitialDirectCost").val());
        $("#InitialDirectCost").val(parseFloat(InitialDirectCost).toFixed(12));
        var DismantlingCost = parseFloat($("#DismantlingCost").val());
        $("#DismantlingCost").val(parseFloat(DismantlingCost).toFixed(12));
        //==Advance Info
        $("#txtAdvanceSlotPeriod").val("");
        $("#txtAdvanceSlotAmount").val("0.00");
        //==Review Info
        var ReviewPercentage = parseFloat($("#txtReviewPercentage").val());
        $("#txtReviewPercentage").val(parseFloat(ReviewPercentage).toFixed(12));
        $("#txtReviewPeriod").val("");
        $("#txtReviewStartDate").val("");
        $("#txtReviewEndDate").val("");
        $("#txtReviewIncreaseAmount").val("0.00");
        $("#txtReviewIncreasePercentage").val("0.00");
        //==Landlord Info
        $("#txtVendorCode").val("");
        $("#txtLandlordName").val("");
        $("#txtVendorAdvancePC").val("0.00");
        $("#txtVendorAdvanceAmount").val("0.00");
        $("#txtVendorAdvanceAdjustmentPC").val("0.00");
        $("#txtVendorAdvanceAdjustmentAmount").val("0.00");
        $("#txtVendorTaxPC").val("0.00");
        $("#txtVendorTaxAmount").val("0.00");
        $("#txtVendorVATPC").val("0.00");
        $("#txtVendorVATAmount").val("0.00");
        $("#txtVendorRentPC").val("0.00");
        $("#txtVendorRentAmount").val("0.00");
        $("#txtACNo").val("");
        $("#txtBankName").val("");
        $("#txtBranchName").val("");
        //==Cost Center Info
        $("#txtCCShareAllotment").val("0.00");
        //==Utility Info
        var ServiceCharge = parseFloat($("#txtServiceCharge").val());
        $("#txtServiceCharge").val(parseFloat(ServiceCharge).toFixed(12));
        var OnlineTower = parseFloat($("#txtOnlineTower").val());
        $("#txtOnlineTower").val(parseFloat(OnlineTower).toFixed(12));
        var GeneratorSpace = parseFloat($("#txtGeneratorSpace").val());
        $("#txtGeneratorSpace").val(parseFloat(GeneratorSpace).toFixed(12));
        var CarParking = parseFloat($("#txtCarParking").val());
        $("#txtCarParking").val(parseFloat(CarParking).toFixed(12));
        $("#txtUtilityVendorCode").val("");
        $("#txtUtilityLandlordName").val("");
        $("#txtServiceChargePC").val("0.00");
        $("#txtServiceChargeAmount").val("0.00");
        $("#txtOnlineTowerPC").val("0.00");
        $("#txtOnlineTowerAmount").val("0.00");
        $("#txtGeneratorSpacePC").val("0.00");
        $("#txtGeneratorSpaceAmount").val("0.00");
        $("#txtCarParkingPC").val("0.00");
        $("#txtCarParkingAmount").val("0.00");
        $("#txtUtilityTaxPC").val("0.00");
        $("#txtUtilityTaxAmount").val("0.00");
        $("#txtUtilityVATPC").val("0.00");
        $("#txtUtilityVATAmount").val("0.00");
        $("#txtUtilityACNo").val("");
        $("#txtUtilityBankName").val("");
        $("#txtUtilityBranchName").val("");
        //==Space DataTables
        $('#TableSpaceInfo').DataTable({
            responsive: true,
            AutoWidth: true,
            pageLength: -1,
            searching: false,
            sorting: false,
            paging: false,
            info: false,
            language: { zeroRecords: "", emptyTable: "" },
        });
        //==Advance DataTables
        $('#TableAdvanceInfo').DataTable({
            responsive: true,
            AutoWidth: true,
            pageLength: -1,
            searching: false,
            sorting: false,
            paging: false,
            info: false,
            language: { zeroRecords: "", emptyTable: "" },
        });
        //==Review DataTables
        $('#TableReviewInfo').DataTable({
            responsive: true,
            AutoWidth: true,
            pageLength: -1,
            searching: false,
            sorting: false,
            paging: false,
            info: false,
            language: { zeroRecords: "", emptyTable: "" },
        });
        //==Landlord DataTables
        $('#TableVendorInfo').DataTable({
            responsive: true,
            AutoWidth: true,
            pageLength: -1,
            searching: false,
            sorting: false,
            paging: false,
            info: false,
        });
        //==Cost Center DataTables
        $('#TableCostCenterInfo').DataTable({
            responsive: true,
            AutoWidth: true,
            pageLength: -1,
            searching: false,
            sorting: false,
            paging: false,
            info: false,
        });
        //==Utility DataTables
        $('#TableUtilityInfo').DataTable({
            responsive: true,
            AutoWidth: true,
            pageLength: -1,
            searching: false,
            sorting: false,
            paging: false,
            info: false,
            language: { zeroRecords: "", emptyTable: "" },
        });
        //==Attach Documents DataTables
        $('#TableFileUploadInfo').DataTable({
            responsive: true,
            AutoWidth: true,
            pageLength: -1,
            searching: false,
            sorting: false,
            paging: false,
            info: false,
        });
        $('#spinner').hide();
        $("#txtTaxPercentage").blur(function () {
            if ($(this).val() == '') { $("#txtTaxPercentage").val(0); }
            var TaxPercentage = parseFloat($("#txtTaxPercentage").val().replace(/[^0-9\.]+/g, ""));
            $("#txtTaxPercentage").val(TaxPercentage.toFixed(12));
        })
        $("#txtVATPercentage").blur(function () {
            if ($(this).val() == '') { $("#txtVATPercentage").val(0); }
            var VATPercentage = parseFloat($("#txtVATPercentage").val().replace(/[^0-9\.]+/g, ""));
            $("#txtVATPercentage").val(VATPercentage.toFixed(12));
        })
        $("#BorrowingRate").blur(function () {
            if ($(this).val() == '') { $("#BorrowingRate").val(0); }
            var BorrowingRate = parseFloat($("#BorrowingRate").val().replace(/[^0-9\.]+/g, ""));
            $("#BorrowingRate").val(BorrowingRate.toFixed(12));
        })
        $("#CorporateTaxRate").blur(function () {
            if ($(this).val() == '') { $("#CorporateTaxRate").val(0); }
            var CorporateTaxRate = parseFloat($("#CorporateTaxRate").val().replace(/[^0-9\.]+/g, ""));
            $("#CorporateTaxRate").val(CorporateTaxRate.toFixed(12));
        })
        $("#AdditionalExpense").blur(function () {
            if ($(this).val() == '') { $("#AdditionalExpense").val(0); }
            var AdditionalExpense = parseFloat($("#AdditionalExpense").val().replace(/[^0-9\.]+/g, ""));
            $("#AdditionalExpense").val(AdditionalExpense.toFixed(12));
        })
        $("#InitialDirectCost").blur(function () {
            if ($(this).val() == '') { $("#InitialDirectCost").val(0); }
            var InitialDirectCost = parseFloat($("#InitialDirectCost").val().replace(/[^0-9\.]+/g, ""));
            $("#InitialDirectCost").val(InitialDirectCost.toFixed(12));
        })
        $("#DismantlingCost").blur(function () {
            if ($(this).val() == '') { $("#DismantlingCost").val(0); }
            var DismantlingCost = parseFloat($("#DismantlingCost").val().replace(/[^0-9\.]+/g, ""));
            $("#DismantlingCost").val(DismantlingCost.toFixed(12));
        })
        $("#txtIFRSEffectiveDate").blur(function () {
            var txtVal = $('#txtIFRSEffectiveDate').val();
            if (txtVal.length != 0 && isDate(txtVal) == false) {
                $("#txtIFRSEffectiveDate").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid IFRS Effective Date!',
                    text: 'Validation Message!',
                })
            }
        })
        $("#txtPremisesOpeningDate").blur(function () {
            var txtVal = $('#txtPremisesOpeningDate').val();
            if (txtVal.length != 0 && isDate(txtVal) == false) {
                $("#txtPremisesOpeningDate").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid premises opening date!',
                    text: 'Validation Message!',
                })
            }
        })
        $("#txtDocumentDate").blur(function () {
            var txtVal = $('#txtDocumentDate').val();
            if (txtVal.length != 0 && isDate(txtVal) == false) {
                $("#txtDocumentDate").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid document date!',
                    text: 'Validation Message!',
                })
            }
        })
        //====
        $("#SpaceArea").blur(function () {
            if ($(this).val() == '') { $("#SpaceArea").val(0); }
            var SpaceArea = parseFloat($("#SpaceArea").val().replace(/[^0-9\.]+/g, ""));
            $("#SpaceArea").val(SpaceArea.toFixed(2));
        })
        $("#SpaceRate").blur(function () {
            if ($(this).val() == '') { $("#SpaceRate").val(0); }
            var SpaceRate = parseFloat($("#SpaceRate").val().replace(/[^0-9\.]+/g, ""));
            $("#SpaceRate").val(SpaceRate.toFixed(2));
        })
        $("#SpaceRent").blur(function () {
            if ($(this).val() == '') { $("#SpaceRent").val(0); }
            var SpaceRent = parseFloat($("#SpaceRent").val().replace(/[^0-9\.]+/g, ""));
            $("#SpaceRent").val(SpaceRent.toFixed(2));
        })
        $("#SpaceTotalAdvance").blur(function () {
            if ($(this).val() == '') { $("#SpaceTotalAdvance").val(0); }
            var SpaceTotalAdvance = parseFloat($("#SpaceTotalAdvance").val().replace(/[^0-9\.]+/g, ""));
            $("#SpaceTotalAdvance").val(SpaceTotalAdvance.toFixed(2));
        })
        $("#SpaceTotalAdjustment").blur(function () {
            if ($(this).val() == '') { $("#SpaceTotalAdjustment").val(0); }
            var SpaceTotalAdjustment = parseFloat($("#SpaceTotalAdjustment").val().replace(/[^0-9\.]+/g, ""));
            $("#SpaceTotalAdjustment").val(SpaceTotalAdjustment.toFixed(2));
        })
        //====
        //==Agreement Info
        $("#xddlAgreement").change(function () {
            if ($("#xddlAgreement").val() != $("#yRenewalAgreementSLNo").val()) {
                $("#txtAgreementCode").val("Auto Generate");
            }
            else {
                $("#txtAgreementCode").val($("#AliasCode").val());
            }
        });
        //==Agreement Info Blur
        $("#txtAgreementStartDate").blur(function () {
            var txtVal = $('#txtAgreementStartDate').val();
            if (txtVal.length != 0 && isDate(txtVal) == false) {
                $("#txtAgreementStartDate").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid agreement start date!',
                    text: 'Validation Message!',
                })
            }
        })
        $("#txtAgreementEndDate").blur(function () {
            var txtVal = $('#txtAgreementEndDate').val();
            if (txtVal.length != 0 && isDate(txtVal) == false) {
                $("#txtAgreementEndDate").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid agreement end date!',
                    text: 'Validation Message!',
                })
            }
        })
        $("#txtReviewStartDate").blur(function () {
            var txtVal = $('#txtReviewStartDate').val();
            if (txtVal.length != 0 && isDate(txtVal) == false) {
                $("#txtReviewStartDate").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid Enhancement start date!',
                    text: 'Validation Message!',
                })
            }
        })
        $("#txtReviewEndDate").blur(function () {
            var txtVal = $('#txtReviewEndDate').val();
            if (txtVal.length != 0 && isDate(txtVal) == false) {
                $("#txtReviewEndDate").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid Enhancement end date!',
                    text: 'Validation Message!',
                })
            }
        })
        $("#txtAdvanceStartDate").blur(function () {
            var txtVal = $('#txtAdvanceStartDate').val();
            if (txtVal.length != 0 && isDate(txtVal) == false) {
                $("#txtAdvanceStartDate").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid advance start date!',
                    text: 'Validation Message!',
                })
            }
        })
        $("#txtAdvanceEndDate").blur(function () {
            var txtVal = $('#txtAdvanceEndDate').val();
            if (txtVal.length != 0 && isDate(txtVal) == false) {
                $("#txtAdvanceEndDate").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid advance end date!',
                    text: 'Validation Message!',
                })
            }
        })
        $("#txtTotalArea").blur(function () {
            if ($(this).val() == '') { $("#txtTotalArea").val(0); }
            var TotalArea = parseFloat($("#txtTotalArea").val().replace(/[^0-9\.]+/g, ""));
            $("#txtTotalArea").val(TotalArea.toFixed(12));

            if ($("#txtCostPerUnit").val() == '') { $("#txtCostPerUnit").val(0); }

            var CostPerUnit = parseFloat($("#txtCostPerUnit").val().replace(/[^0-9\.]+/g, ""));
            var TotalRentAmount = TotalArea * CostPerUnit;
            $("#txtTotalRentAmount").val(parseFloat(TotalRentAmount).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#txtRentAmount").val(parseFloat(TotalRentAmount).toFixed(2));

        })
        $("#txtRentAmount").blur(function () {
            if ($(this).val() == '') { $("#txtRentAmount").val(0); }
            var RentAmount = parseFloat($("#txtRentAmount").val().replace(/[^0-9\.]+/g, ""));
            $("#txtRentAmount").val(RentAmount.toFixed(2));

            if ($("#txtTotalArea").val() == '') { $("#txtTotalArea").val(0); }
            var TotalArea = parseFloat($("#txtTotalArea").val().replace(/[^0-9\.]+/g, ""));

            var CostPerUnit = RentAmount / TotalArea;
            $("#txtCostPerUnit").val(parseFloat(CostPerUnit).toFixed(12));

        })
        $("#txtCostPerUnit").blur(function () {
            if ($(this).val() == '') { $("#txtCostPerUnit").val(0); }
            var CostPerUnit = parseFloat($("#txtCostPerUnit").val().replace(/[^0-9\.]+/g, ""));
            $("#txtCostPerUnit").val(CostPerUnit.toFixed(12));

            if ($("#txtTotalArea").val() == '') { $("#txtTotalArea").val(0); }
            var TotalArea = parseFloat($("#txtTotalArea").val().replace(/[^0-9\.]+/g, ""));
            var TotalRentAmount = TotalArea * CostPerUnit;
            $("#txtTotalRentAmount").val(parseFloat(TotalRentAmount).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#txtRentAmount").val(parseFloat(TotalRentAmount).toFixed(2));

        })
        $("#txtSecurityDepositAmount").blur(function () {
            if ($(this).val() == '') { $("#txtSecurityDepositAmount").val(0); }
            var SecurityDepositAmount = parseFloat($("#txtSecurityDepositAmount").val().replace(/[^0-9\.]+/g, ""));
            $("#txtSecurityDepositAmount").val(SecurityDepositAmount.toFixed(12));
        })
        $("#txtAdvanceAmount").blur(function () {
            if ($(this).val() == '') { $("#txtAdvanceAmount").val(0); }
            var AdvanceAmount = parseFloat($("#txtAdvanceAmount").val().replace(/[^0-9\.]+/g, ""));
            $("#txtAdvanceAmount").val(AdvanceAmount.toFixed(12));
        })

        $("#txtAdvanceSlotAmount").blur(function () {
            if ($(this).val() == '') { $("#txtAdvanceSlotAmount").val(0); }
            var AdvanceSlotAmount = parseFloat($("#txtAdvanceSlotAmount").val().replace(/[^0-9\.]+/g, ""));
            $("#txtAdvanceSlotAmount").val(AdvanceSlotAmount.toFixed(12));
            //var AdvanceAmount = parseFloat($("#txtAdvanceAmount").val().replace(/[^0-9\.]+/g, ""));
            //var AdvanceSlotPeriod = AdvanceAmount / AdvanceSlotAmount;
            //$("#txtAdvanceSlotPeriod").val(parseFloat(AdvanceSlotPeriod).toFixed(12));
        })
        $("#ddlTaxType").blur(function () {
            var CostPerUnit = parseFloat($("#txtCostPerUnit").val().replace(/[^0-9\.]+/g, ""));
            var TotalArea = parseFloat($("#txtTotalArea").val().replace(/[^0-9\.]+/g, ""));
            var TotalRentAmount = TotalArea * CostPerUnit;
            var TaxPercentage = parseFloat($("#txtTaxPercentage").val().replace(/[^0-9\.]+/g, ""));
            var VATPercentage = parseFloat($("#txtVATPercentage").val().replace(/[^0-9\.]+/g, ""));
            //==
            var TaxAmount = 0;
            var VATAmount = 0;
            var NetPaymentAmount = 0;
            //1. Inclusive Inclusive
            if ($("#ddlTaxType").val() == 1 && $("#ddlVatType").val() == 1) {
                VATAmount = (TotalRentAmount / (100 + VATPercentage)) * VATPercentage;
                TaxAmount = (TotalRentAmount - VATAmount) * TaxPercentage / 100;
                NetPaymentAmount = TotalRentAmount - VATAmount - TaxAmount;
                TotalRentAmount = parseFloat(VATAmount) + parseFloat(TaxAmount) + parseFloat(NetPaymentAmount);
            }
            //2. Inclusive Exclusive
            else if ($("#ddlTaxType").val() == 1 && $("#ddlVatType").val() == 2) {
                VATAmount = (TotalRentAmount * VATPercentage) / 100;
                TaxAmount = (TotalRentAmount * TaxPercentage) / 100;
                NetPaymentAmount = TotalRentAmount - TaxAmount;
                TotalRentAmount = parseFloat(VATAmount) + parseFloat(TaxAmount) + parseFloat(NetPaymentAmount);
            }
            //3. Inclusive Exempted
            else if ($("#ddlTaxType").val() == 1 && $("#ddlVatType").val() == 3) {
                VATAmount = 0;
                TaxAmount = (TotalRentAmount * TaxPercentage) / 100;
                NetPaymentAmount = TotalRentAmount - TaxAmount;
                TotalRentAmount = parseFloat(VATAmount) + parseFloat(TaxAmount) + parseFloat(NetPaymentAmount);
            }
            //4. Exclusive Inclusive
            else if ($("#ddlTaxType").val() == 2 && $("#ddlVatType").val() == 1) {
                VATAmount = (TotalRentAmount / (100 + VATPercentage - TaxPercentage)) * VATPercentage;
                TaxAmount = (TotalRentAmount - VATAmount) / (100 - TaxPercentage) * TaxPercentage;
                NetPaymentAmount = TotalRentAmount - VATAmount;
                TotalRentAmount = parseFloat(VATAmount) + parseFloat(TaxAmount) + parseFloat(NetPaymentAmount);
            }
            //5. Exclusive Exclusive
            else if ($("#ddlTaxType").val() == 2 && $("#ddlVatType").val() == 2) {
                TaxAmount = (TotalRentAmount / (100 - TaxPercentage)) * TaxPercentage;
                VATAmount = (TotalRentAmount + TaxAmount) * VATPercentage / 100;
                NetPaymentAmount = TotalRentAmount;
                TotalRentAmount = parseFloat(VATAmount) + parseFloat(TaxAmount) + parseFloat(NetPaymentAmount);
            }
            //6. Exclusive Exempted
            else if ($("#ddlTaxType").val() == 2 && $("#ddlVatType").val() == 3) {
                VATAmount = 0;
                TaxAmount = (TotalRentAmount / (100 - TaxPercentage)) * TaxPercentage;
                NetPaymentAmount = TotalRentAmount;
                TotalRentAmount = parseFloat(VATAmount) + parseFloat(TaxAmount) + parseFloat(NetPaymentAmount);
            }
            //7. Exempted  Inclusive
            else if ($("#ddlTaxType").val() == 3 && $("#ddlVatType").val() == 1) {
                VATAmount = (TotalRentAmount / (100 + VATPercentage - 0)) * VATPercentage;
                TaxAmount = 0;
                NetPaymentAmount = TotalRentAmount - VATAmount;
                TotalRentAmount = parseFloat(VATAmount) + parseFloat(TaxAmount) + parseFloat(NetPaymentAmount);
            }
            //8. Exempted  Exclusive
            else if ($("#ddlTaxType").val() == 3 && $("#ddlVatType").val() == 2) {
                VATAmount = (TotalRentAmount * VATPercentage) / 100
                TaxAmount = 0;
                NetPaymentAmount = TotalRentAmount - TaxAmount;
                TotalRentAmount = parseFloat(TaxAmount) + parseFloat(VATAmount) + parseFloat(NetPaymentAmount);
            }
            //9. Exempted Exempted
            else if ($("#ddlTaxType").val() == 3 && $("#ddlVatType").val() == 3) {
                TaxAmount = 0;
                VATAmount = 0;
                NetPaymentAmount = TotalRentAmount;
                TotalRentAmount = parseFloat(TaxAmount) + parseFloat(VATAmount) + parseFloat(NetPaymentAmount);
            }
            //==
            $("#txtTaxAmount").val(parseFloat(TaxAmount).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#txtVATAmount").val(parseFloat(VATAmount).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#txtTotalRentAmount").val(parseFloat(TotalRentAmount).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
        })
        $("#ddlVatType").blur(function () {
            var CostPerUnit = parseFloat($("#txtCostPerUnit").val().replace(/[^0-9\.]+/g, ""));
            var TotalArea = parseFloat($("#txtTotalArea").val().replace(/[^0-9\.]+/g, ""));
            var TotalRentAmount = TotalArea * CostPerUnit;
            var TaxPercentage = parseFloat($("#txtTaxPercentage").val().replace(/[^0-9\.]+/g, ""));
            var VATPercentage = parseFloat($("#txtVATPercentage").val().replace(/[^0-9\.]+/g, ""));
            //==
            var TaxAmount = 0;
            var VATAmount = 0;
            var NetPaymentAmount = 0;
            //1. Inclusive Inclusive
            if ($("#ddlTaxType").val() == 1 && $("#ddlVatType").val() == 1) {
                VATAmount = (TotalRentAmount / (100 + VATPercentage)) * VATPercentage;
                TaxAmount = (TotalRentAmount - VATAmount) * TaxPercentage / 100;
                NetPaymentAmount = TotalRentAmount - VATAmount - TaxAmount;
                TotalRentAmount = parseFloat(VATAmount) + parseFloat(TaxAmount) + parseFloat(NetPaymentAmount);
            }
            //2. Inclusive Exclusive
            else if ($("#ddlTaxType").val() == 1 && $("#ddlVatType").val() == 2) {
                VATAmount = (TotalRentAmount * VATPercentage) / 100;
                TaxAmount = (TotalRentAmount * TaxPercentage) / 100;
                NetPaymentAmount = TotalRentAmount - TaxAmount;
                TotalRentAmount = parseFloat(VATAmount) + parseFloat(TaxAmount) + parseFloat(NetPaymentAmount);
            }
            //3. Inclusive Exempted
            else if ($("#ddlTaxType").val() == 1 && $("#ddlVatType").val() == 3) {
                VATAmount = 0;
                TaxAmount = (TotalRentAmount * TaxPercentage) / 100;
                NetPaymentAmount = TotalRentAmount - TaxAmount;
                TotalRentAmount = parseFloat(VATAmount) + parseFloat(TaxAmount) + parseFloat(NetPaymentAmount);
            }
            //4. Exclusive Inclusive
            else if ($("#ddlTaxType").val() == 2 && $("#ddlVatType").val() == 1) {
                VATAmount = (TotalRentAmount / (100 + VATPercentage - TaxPercentage)) * VATPercentage;
                TaxAmount = (TotalRentAmount - VATAmount) / (100 - TaxPercentage) * TaxPercentage;
                NetPaymentAmount = TotalRentAmount - VATAmount;
                TotalRentAmount = parseFloat(VATAmount) + parseFloat(TaxAmount) + parseFloat(NetPaymentAmount);
            }
            //5. Exclusive Exclusive
            else if ($("#ddlTaxType").val() == 2 && $("#ddlVatType").val() == 2) {
                TaxAmount = (TotalRentAmount / (100 - TaxPercentage)) * TaxPercentage;
                VATAmount = (TotalRentAmount + TaxAmount) * VATPercentage / 100;
                NetPaymentAmount = TotalRentAmount;
                TotalRentAmount = parseFloat(VATAmount) + parseFloat(TaxAmount) + parseFloat(NetPaymentAmount);
            }
            //6. Exclusive Exempted
            else if ($("#ddlTaxType").val() == 2 && $("#ddlVatType").val() == 3) {
                VATAmount = 0;
                TaxAmount = (TotalRentAmount / (100 - TaxPercentage)) * TaxPercentage;
                NetPaymentAmount = TotalRentAmount;
                TotalRentAmount = parseFloat(VATAmount) + parseFloat(TaxAmount) + parseFloat(NetPaymentAmount);
            }
            //7. Exempted  Inclusive
            else if ($("#ddlTaxType").val() == 3 && $("#ddlVatType").val() == 1) {
                VATAmount = (TotalRentAmount / (100 + VATPercentage - 0)) * VATPercentage;
                TaxAmount = 0;
                NetPaymentAmount = TotalRentAmount - VATAmount;
                TotalRentAmount = parseFloat(VATAmount) + parseFloat(TaxAmount) + parseFloat(NetPaymentAmount);
            }
            //8. Exempted  Exclusive
            else if ($("#ddlTaxType").val() == 3 && $("#ddlVatType").val() == 2) {
                VATAmount = (TotalRentAmount * VATPercentage) / 100
                TaxAmount = 0;
                NetPaymentAmount = TotalRentAmount - TaxAmount;
                TotalRentAmount = parseFloat(TaxAmount) + parseFloat(VATAmount) + parseFloat(NetPaymentAmount);
            }
            //9. Exempted Exempted
            else if ($("#ddlTaxType").val() == 3 && $("#ddlVatType").val() == 3) {
                TaxAmount = 0;
                VATAmount = 0;
                NetPaymentAmount = TotalRentAmount;
                TotalRentAmount = parseFloat(TaxAmount) + parseFloat(VATAmount) + parseFloat(NetPaymentAmount);
            }
            //==
            $("#txtTaxAmount").val(parseFloat(TaxAmount).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#txtVATAmount").val(parseFloat(VATAmount).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#txtTotalRentAmount").val(parseFloat(TotalRentAmount).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
        })
        //==Review Info Blur
        $("#txtReviewPercentage").blur(function () {
            if ($(this).val() == '') { $("#txtReviewPercentage").val(0); }
            var ReviewPercentage = parseFloat($("#txtReviewPercentage").val().replace(/[^0-9\.]+/g, ""));
            $("#txtReviewPercentage").val(parseFloat(ReviewPercentage).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
        })
        $("#txtReviewIncreaseAmount").blur(function () {
            if ($(this).val() == '') { $("#txtReviewIncreaseAmount").val("0.00"); }
            var ReviewIncreaseAmount = parseFloat($("#txtReviewIncreaseAmount").val().replace(/[^0-9\.]+/g, ""));
            $("#txtReviewIncreaseAmount").val(ReviewIncreaseAmount.toFixed(12));
            if ($(this).val() > 0) { $("#txtReviewIncreasePercentage").val("0.00"); }
        })
        $("#txtReviewIncreasePercentage").blur(function () {
            if ($(this).val() == '') { $("#txtReviewIncreasePercentage").val("0.00"); }
            var ReviewIncreasePercentage = parseFloat($("#txtReviewIncreasePercentage").val().replace(/[^0-9\.]+/g, ""));
            $("#txtReviewIncreasePercentage").val(ReviewIncreasePercentage.toFixed(12));
            if ($(this).val() > 0) { $("#txtReviewIncreaseAmount").val("0.00"); }
        })
        //==Landlord Info Blur
        //==Landlord Info Blur
        $("#txtVendorAdvancePC").blur(function () {
            if ($(this).val() == '') { $("#txtVendorAdvancePC").val(0); }
            var VendorAdvancePC = parseFloat($("#txtVendorAdvancePC").val().replace(/[^0-9\.]+/g, ""));
            if ($("#txtVendorAdvancePC").val() > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Advance Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if ($("#txtAdvanceAmount").val() == '') { $("#txtAdvanceAmount").val(0); }
            var AdvanceAmount = parseFloat($("#txtAdvanceAmount").val().replace(/[^0-9\.]+/g, ""));
            var VendorAdvanceAmount = (AdvanceAmount * VendorAdvancePC) / 100;
            $("#txtVendorAdvanceAmount").val(parseFloat(VendorAdvanceAmount).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
        })
        $("#txtVendorAdvanceAdjustmentPC").blur(function () {
            if ($(this).val() == '') { $("#txtVendorAdvanceAdjustmentPC").val(0); }
            var VendorAdvanceAdjustmentPC = parseFloat($("#txtVendorAdvanceAdjustmentPC").val().replace(/[^0-9\.]+/g, ""));
            if ($("#txtVendorAdvanceAdjustmentPC").val() > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Advance Adjustment Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if ($("#txtAdvanceAdjustmentAmount").val() == '') { $("#txtAdvanceAdjustmentAmount").val(0); }
            var AdvanceAdjustmentAmount = parseFloat($("#txtAdvanceAdjustmentAmount").val().replace(/[^0-9\.]+/g, ""));
            var VendorAdvanceAdjustmentAmount = (AdvanceAdjustmentAmount * VendorAdvanceAdjustmentPC) / 100;
            $("#txtVendorAdvanceAdjustmentAmount").val(parseFloat(VendorAdvanceAdjustmentAmount).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
        })
        $("#txtVendorTaxPC").blur(function () {
            if ($(this).val() == '') { $("#txtVendorTaxPC").val(0); }
            var VendorTaxPC = parseFloat($("#txtVendorTaxPC").val().replace(/[^0-9\.]+/g, ""));
            if ($("#txtVendorTaxPC").val() > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Tax Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }

            if ($("#txtTaxAmount").val() == '') { $("#txtTaxAmount").val(0); }
            var TaxAmount = parseFloat($("#txtTaxAmount").val().replace(/[^0-9\.]+/g, ""));
            var VendorTaxAmount = (TaxAmount * VendorTaxPC) / 100;
            $("#txtVendorTaxAmount").val(parseFloat(VendorTaxAmount).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
        })
        $("#txtVendorVATPC").blur(function () {
            if ($(this).val() == '') { $("#txtVendorVATPC").val(0); }
            var VendorVATPC = parseFloat($("#txtVendorVATPC").val().replace(/[^0-9\.]+/g, ""));
            if ($("#txtVendorVATPC").val() > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'VAT Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if ($("#txtVATAmount").val() == '') { $("#txtVATAmount").val(0); }
            var VATAmount = parseFloat($("#txtVATAmount").val().replace(/[^0-9\.]+/g, ""));
            var VendorVATAmount = (VATAmount * VendorVATPC) / 100;
            $("#txtVendorVATAmount").val(parseFloat(VendorVATAmount).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
        })
        $("#txtVendorRentPC").blur(function () {
            if ($(this).val() == '') { $("#txtVendorRentPC").val(0); }
            if ($("#txtVendorRentPC").val() > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Rent Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
        })
        //==Cost Center Blur
        $("#txtCCShareAllotment").blur(function () {
            if ($(this).val() == '' || $(this).val() == 0) { $("#txtCCShareAllotment").val(1); }
            if ($("#txtCCShareAllotment").val() > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Cost Center Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
        })
        //==Utility Blur
        $("#txtServiceCharge").blur(function () {
            if ($(this).val() == '') { $("#txtServiceCharge").val(0); }
            var ServiceCharge = parseFloat($("#txtServiceCharge").val().replace(/[^0-9\.]+/g, ""));
            $("#txtServiceCharge").val(ServiceCharge.toFixed(12));
        })
        $("#txtOnlineTower").blur(function () {
            if ($(this).val() == '') { $("#txtOnlineTower").val(0); }
            var OnlineTower = parseFloat($("#txtOnlineTower").val().replace(/[^0-9\.]+/g, ""));
            $("#txtOnlineTower").val(OnlineTower.toFixed(12));
        })
        $("#txtGeneratorSpace").blur(function () {
            if ($(this).val() == '') { $("#txtGeneratorSpace").val(0); }
            var GeneratorSpace = parseFloat($("#txtGeneratorSpace").val().replace(/[^0-9\.]+/g, ""));
            $("#txtGeneratorSpace").val(GeneratorSpace.toFixed(12));
        })
        $("#txtCarParking").blur(function () {
            if ($(this).val() == '') { $("#txtCarParking").val(0); }
            var CarParking = parseFloat($("#txtCarParking").val().replace(/[^0-9\.]+/g, ""));
            $("#txtCarParking").val(CarParking.toFixed(12));
        })
        $("#txtServiceChargePC").blur(function () {
            if ($(this).val() == '') { $("#txtServiceChargePC").val(0); }
            var ServiceChargePC = parseFloat($("#txtServiceChargePC").val().replace(/[^0-9\.]+/g, ""));

            var ServiceCharge = parseFloat($("#txtServiceCharge").val().replace(/[^0-9\.]+/g, ""));
            var ServiceChargeAmount = (ServiceCharge * ServiceChargePC) / 100;
            $("#txtServiceChargeAmount").val(parseFloat(ServiceChargeAmount).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
        })
        $("#txtOnlineTowerPC").blur(function () {
            if ($(this).val() == '') { $("#txtOnlineTowerPC").val(0); }
            var OnlineTowerPC = parseFloat($("#txtOnlineTowerPC").val().replace(/[^0-9\.]+/g, ""));

            var OnlineTower = parseFloat($("#txtOnlineTower").val().replace(/[^0-9\.]+/g, ""));
            var OnlineTowerAmount = (OnlineTower * OnlineTowerPC) / 100;
            $("#txtOnlineTowerAmount").val(parseFloat(OnlineTowerAmount).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
        })
        $("#txtGeneratorSpacePC").blur(function () {
            if ($(this).val() == '') { $("#txtGeneratorSpacePC").val(0); }
            var GeneratorSpacePC = parseFloat($("#txtGeneratorSpacePC").val().replace(/[^0-9\.]+/g, ""));

            var GeneratorSpace = parseFloat($("#txtGeneratorSpace").val().replace(/[^0-9\.]+/g, ""));
            var GeneratorSpaceAmount = (GeneratorSpace * GeneratorSpacePC) / 100;
            $("#txtGeneratorSpaceAmount").val(parseFloat(GeneratorSpaceAmount).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
        })
        $("#txtCarParkingPC").blur(function () {
            if ($(this).val() == '') { $("#txtCarParkingPC").val(0); }
            var CarParkingPC = parseFloat($("#txtCarParkingPC").val().replace(/[^0-9\.]+/g, ""));

            var CarParking = parseFloat($("#txtCarParking").val().replace(/[^0-9\.]+/g, ""));
            var CarParkingAmount = (CarParking * CarParkingPC) / 100;
            $("#txtCarParkingAmount").val(parseFloat(CarParkingAmount).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
        })
        //$("#txtUtilityTaxPC").blur(function () {
        //    if ($(this).val() == '') { $("#txtUtilityTaxPC").val(0); }
        //    var UtilityTaxPC = parseFloat($("#txtUtilityTaxPC").val().replace(/[^0-9\.]+/g, ""));
        //    $("#txtUtilityTaxPC").val(UtilityTaxPC.toFixed(12));
        //    if (UtilityTaxPC > $("#txtTaxPercentage").val()) {
        //        Swal.fire({
        //            icon: 'warning',
        //            title: 'Utility Tax Share Allotment more than agreement tax % not allowed!',
        //            text: 'Validation Message!',
        //        })
        //        return false;
        //    }
        //    var ServiceCharge = parseFloat($("#txtServiceCharge").val().replace(/[^0-9\.]+/g, ""));
        //    var OnlineTower = parseFloat($("#txtOnlineTower").val().replace(/[^0-9\.]+/g, ""));
        //    var GeneratorSpace = parseFloat($("#txtGeneratorSpace").val().replace(/[^0-9\.]+/g, ""));
        //    var CarParking = parseFloat($("#txtCarParking").val().replace(/[^0-9\.]+/g, ""));
        //    var TotalUtilityCharge = ServiceCharge + OnlineTower + GeneratorSpace + CarParking;
        //    var UtilityTaxAmount = (TotalUtilityCharge * UtilityTaxPC) / 100;
        //    $("#txtUtilityTaxAmount").val(parseFloat(UtilityTaxAmount).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
        //})
        //$("#txtUtilityVATPC").blur(function () {
        //    if ($(this).val() == '') { $("#txtUtilityVATPC").val(0); }
        //    var UtilityVATPC = parseFloat($("#txtUtilityVATPC").val().replace(/[^0-9\.]+/g, ""));
        //    $("#txtUtilityVATPC").val(UtilityVATPC.toFixed(12));
        //    if (UtilityVATPC > $("#txtVATPercentage").val()) {
        //        Swal.fire({
        //            icon: 'warning',
        //            title: 'Utility VAT Share Allotment more than agreement VAT % not allowed!',
        //            text: 'Validation Message!',
        //        })
        //        return false;
        //    }
        //    var ServiceCharge = parseFloat($("#txtServiceCharge").val().replace(/[^0-9\.]+/g, ""));
        //    var OnlineTower = parseFloat($("#txtOnlineTower").val().replace(/[^0-9\.]+/g, ""));
        //    var GeneratorSpace = parseFloat($("#txtGeneratorSpace").val().replace(/[^0-9\.]+/g, ""));
        //    var CarParking = parseFloat($("#txtCarParking").val().replace(/[^0-9\.]+/g, ""));
        //    var TotalUtilityCharge = ServiceCharge + OnlineTower + GeneratorSpace + CarParking;
        //    var UtilityVATAmount = (TotalUtilityCharge * UtilityVATPC) / 100;
        //    $("#txtUtilityVATAmount").val(parseFloat(UtilityVATAmount).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
        //})

        //==Space Add to List
        $("#TableSpaceInfo").on('click', '.btnSpaceRemove', function () {
            $(this).closest('tr').remove();
        });

        var htmlSpaceType = '<input type="text"  disabled = "disabled" style="width: 200px;" class="SpaceTypeValue"'
        var htmlSpaceArea = '<input type="text" disabled = "disabled" style="width: 150px;" class="SpaceAreaValue  text-right"'
        var htmlSpaceRate = '<input type="text" disabled = "disabled" style="width: 150px;" class="SpaceRateValue  text-right"'
        var htmlSpaceRent = '<input type="text" disabled = "disabled"  style="width: 150px;" class="SpaceRentValue  text-right"'
        var htmlSpaceTotalAdvance = '<input type="text" disabled = "disabled"  style="width: 150px;" class="SpaceTotalAdvanceValue text-right"'
        var htmlSpaceTotalAdjustment = '<input type="text" disabled = "disabled"  style="width: 150px;" class="SpaceTotalAdjustmentValue text-right"'
        var htmlSpaceRemarks = '<input type="text"  disabled = "disabled" style="width: 200px;" class="SpaceRemarksValue"'

        $("#btnSpaceAddToList").on("click", function () {
            if ($("#SpaceType").val() == 0) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Select sub premises type!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==Duplicate Sub Premises Type check in table
            var MatchCountCC;
            var irecordCC = 0;
            $("#TableSpaceInfo tr:gt(0)").each(function () {
                irecordCC = irecordCC + 1;
                var CCCode1 = $("#SpaceType").val();
                var this_row = $(this);
                var id1CC = $.trim(this_row.find('td:eq(0)').attr('id')) + ';';
                var Index1CC = id1CC.split('_').pop().split(';')[0];
                var CCCode2 = $("#gtxtSpaceType_" + Index1CC).val();
                if (CCCode1 == CCCode2) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Sub Premises Type is already in the queue at row ' + irecordCC,
                        text: 'Validation Message!',
                    })
                    MatchCountCC = 1;
                    return false;
                }
            });
            if (MatchCountCC == 1) { return false; }
            //==Check to block space allocations
            var TotalSpaceArea = 0;
            var TotalSpaceRent = 0;
            var SpaceTotalAdvance = 0;
            var TotalMonthlyAdjustment = 0;
            var ColumnID;
            var ColumnIDValue;
            $("#TableSpaceInfo tr:gt(0)").each(function () {
                ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
                if (typeof $("#gtxtSpaceArea_" + ColumnIDValue).val() != "undefined") {
                    TotalSpaceArea = parseFloat(TotalSpaceArea) + parseFloat($("#gtxtSpaceArea_" + ColumnIDValue).val().replace(/[^0-9\.]+/g, ""));
                    TotalSpaceRent = parseFloat(TotalSpaceRent) + parseFloat($("#gtxtSpaceRent_" + ColumnIDValue).val().replace(/[^0-9\.]+/g, ""));
                    SpaceTotalAdvance = parseFloat(SpaceTotalAdvance) + parseFloat($("#gtxtSpaceTotalAdvance_" + ColumnIDValue).val().replace(/[^0-9\.]+/g, ""));
                    TotalMonthlyAdjustment = parseFloat(TotalMonthlyAdjustment) + parseFloat($("#gtxtSpaceTotalAdjustment_" + ColumnIDValue).val().replace(/[^0-9\.]+/g, ""));
                }
            });
            //Space Area
            if (TotalSpaceArea + parseFloat($("#SpaceArea").val()) > $("#txtTotalArea").val()) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Space area cannot exceed the agreement total area!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //Monthly Rent
            else if (TotalSpaceRent + parseFloat($("#SpaceRent").val()) > $("#txtRentAmount").val()) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Space monthly rent amount cannot exceed the agreement rent amount!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //Space Total Advance
            else if (SpaceTotalAdvance + parseFloat($("#SpaceTotalAdvance").val()) > $("#txtAdvanceAmount").val()) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Space advance amount cannot exceed the agreement advance amount!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //Monthly Advance Adjustment
            //else if (TotalMonthlyAdjustment + parseFloat($("#SpaceTotalAdjustment").val()) > $("#txtAdvanceAmount").val()) {
            //    Swal.fire({
            //        icon: 'warning',
            //        title: 'Space monthly advance adjustment amount cannot exceed the agreement advance amount!',
            //        text: 'Validation Message!',
            //    })
            //    return false;
            //}
            //==
            var rowCount = parseInt($("#SpaceftrCount").val()) + 2;
            $("#SpaceftrCount").val(rowCount);
            $("#TableSpaceInfo tr:last").after(
                "<tr id='singleRow'> " +
                "<td class='SpaceTypeCell' id='SpaceTypeCell_" + rowCount + "'>" + htmlSpaceType + "id=gtxtSpaceType_" + rowCount + ">" + "</td>" +
                "<td class='SpaceAreaCell' id='SpaceAreaCell_" + rowCount + "'>" + htmlSpaceArea + "id=gtxtSpaceArea_" + rowCount + ">" + "</td>" +
                "<td class='SpaceRateCell' id='SpaceRateCell_" + rowCount + "'>" + htmlSpaceRate + "id=gtxtSpaceRate_" + rowCount + ">" + "</td>" +
                "<td class='SpaceRentCell' id='SpaceRentCell_" + rowCount + "'>" + htmlSpaceRent + "id=gtxtSpaceRent_" + rowCount + ">" + "</td>" +
                "<td class='SpaceTotalAdvanceCell' id='SpaceTotalAdvanceCell_" + rowCount + "'>" + htmlSpaceTotalAdvance + "id=gtxtSpaceTotalAdvance_" + rowCount + ">" + "</td>" +
                "<td class='SpaceTotalAdjustmentCell' id='SpaceTotalAdjustmentCell_" + rowCount + "'>" + htmlSpaceTotalAdjustment + "id=gtxtSpaceTotalAdjustment_" + rowCount + ">" + "</td>" +
                "<td class='SpaceRemarksCell' id='SpaceRemarksCell_" + rowCount + "'>" + htmlSpaceRemarks + "id=gtxtSpaceRemarks_" + rowCount + ">" + "</td>" +
                "<td class='text-center'>" +
                "<button type='button' class='btnSpaceRemove btn btn-danger' id='btnSpaceDelete_" + rowCount + "'><span class='nav-icon fas fa-trash'></span></button>" +
                "</td>"
                + "</tr>"
            );
            $("#gtxtSpaceType_" + rowCount).val($("#SpaceType").val());
            $("#gtxtSpaceArea_" + rowCount).val(parseFloat($("#SpaceArea").val()).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtSpaceRate_" + rowCount).val(parseFloat($("#SpaceRate").val()).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtSpaceRent_" + rowCount).val(parseFloat($("#SpaceRent").val()).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtSpaceTotalAdvance_" + rowCount).val(parseFloat($("#SpaceTotalAdvance").val()).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtSpaceTotalAdjustment_" + rowCount).val(parseFloat($("#SpaceTotalAdjustment").val()).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtSpaceRemarks_" + rowCount).val($("#SpaceRemarks").val());
        });

        //==Advance Add to List
        $("#TableAdvanceInfo").on('click', '.btnAdvanceRemove', function () {
            $(this).closest('tr').remove();
        });

        var htmlAdvanceNo = '<input type="text"  disabled = "disabled" style="width: 150px;" class="AdvanceNoValue"'
        var htmlAdvanceStartDate = '<input type="text" disabled = "disabled" style="width: 150px;" class="AdvanceStartDateValue"'
        var htmlAdvanceEndDate = '<input type="text" disabled = "disabled" style="width: 150px;" class="AdvanceEndDateValue"'
        var htmlAdvanceSlotPeriod = '<input type="text" disabled = "disabled"  style="width: 150px;" class="AdvanceSlotPeriodValue"'
        var htmlAdvanceSlotAmount = '<input type="text" disabled = "disabled"  style="width: 250px;" class="AdvanceSlotAmountValue text-right"'
        var htmlAdvanceNote = '<input type="text"  disabled = "disabled" style="width: 250px;" class="AdvanceNoteValue"'

        $("#btnAdvanceAddToList").on("click", function () {
            //===Validate
            var AdvanceNo = document.getElementById("ddlAdvanceNo").value;
            if (AdvanceNo == 0 || AdvanceNo == "" || AdvanceNo == null) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Please select the Advance No!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if ($("#txtAdvanceSlotPeriod").val() <= 0 || $("#txtAdvanceSlotPeriod").val() == "NaN" || $("#txtAdvanceSlotPeriod").val() == "" || $("#txtAdvanceSlotPeriod").val() == null) {
                $("#txtAdvanceSlotPeriod").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Adjustment Schedule No must be greater than zero!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==
            var AgreementStartDate = $('#txtAgreementStartDate').val().replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$2/$1/$3");
            var AgreementEndDate = $('#txtAgreementEndDate').val().replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$2/$1/$3");
            var AdvanceStartDate = $('#txtAdvanceStartDate').val().replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$2/$1/$3");
            var AdvanceEndDate = $('#txtAdvanceEndDate').val().replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$2/$1/$3");
            if (Date.parse(AdvanceStartDate) < Date.parse(AgreementStartDate) || Date.parse(AgreementEndDate) < Date.parse(AdvanceStartDate)) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Advance Start date is not allowed less than Agreement Start Date or greater than Agreement End Date!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if (Date.parse(AdvanceEndDate) < Date.parse(AgreementStartDate) || Date.parse(AgreementEndDate) < Date.parse(AdvanceEndDate)) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Advance End date is not allowed less than Agreement Start Date or greater than Agreement End Date!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==
            if ($("#txtAdvanceSlotAmount").val() == 0 || $("#txtAdvanceSlotAmount").val() == "" || $("#txtAdvanceSlotAmount").val() == null) {
                $("#txtAdvanceSlotAmount").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Enter The Advance Adjustment Amount!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==Duplicate Advance No check in table
            var MatchCountCC;
            var irecordCC = 0;
            $("#TableAdvanceInfo tr:gt(0)").each(function () {
                irecordCC = irecordCC + 1;
                var CCCode1 = $("#ddlAdvanceNo").val();
                var id1 = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                var Index1 = id1.split('_').pop().split(';')[0];
                var CCCode2 = $("#gtxtAdvanceNo_" + Index1).val();
                if (CCCode1 == CCCode2) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Advance No is already in the queue at row ' + irecordCC,
                        text: 'Validation Message!',
                    })
                    MatchCountCC = 1;
                    return false;
                }
            });
            if (MatchCountCC == 1) { return false; }
            //==Check to block slot Advance Amount more than Advance Amount
            @*if ('@Session["IsVariantDaysCount"]' == "True") {
                var TotalAdvance = 0;
                var ColumnID;
                var ColumnIDValue;
                var SlotPeriod;
                var SlotAmount;
                var SlotTotalAmount;
                $("#TableAdvanceInfo tr:gt(0)").each(function () {
                    ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                    ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
                    if (typeof $("#gtxtAdvanceSlotPeriod_" + ColumnIDValue).val() != "undefined" && typeof $("#gtxtAdvanceSlotAmount_" + ColumnIDValue).val() != "undefined") {
                        SlotPeriod = parseFloat($("#gtxtAdvanceSlotPeriod_" + ColumnIDValue).val());
                        SlotAmount = parseFloat($("#gtxtAdvanceSlotAmount_" + ColumnIDValue).val().replace(/[^0-9\.]+/g, ""));
                        SlotTotalAmount = parseFloat(SlotPeriod) * parseFloat(SlotAmount);
                        TotalAdvance = parseFloat(TotalAdvance) + parseFloat(SlotTotalAmount);
                    }
                });
                if (TotalAdvance + (parseFloat($("#txtAdvanceSlotAmount").val()) * parseFloat($("#txtAdvanceSlotPeriod").val())) > $("#txtAdvanceAmount").val()) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'The advance adjustment value cannot exceed the advance amount!',
                        text: 'Validation Message!',
                    })
                    return false;
                }
            }*@
            //==
            var rowCount = parseInt($("#AdvanceftrCount").val()) + 2;
            $("#AdvanceftrCount").val(rowCount);
            $("#TableAdvanceInfo tr:last").after(
                "<tr id='singleRow'> " +
                "<td class='AdvanceNoCell' id='AdvanceNoCell_" + rowCount + "'>" + htmlAdvanceNo + "id=gtxtAdvanceNo_" + rowCount + ">" + "</td>" +
                "<td class='AdvanceStartDateCell' id='AdvanceStartDateCell_" + rowCount + "'>" + htmlAdvanceStartDate + "id=gtxtAdvanceStartDate_" + rowCount + ">" + "</td>" +
                "<td class='AdvanceEndDateCell' id='AdvanceEndDateCell_" + rowCount + "'>" + htmlAdvanceEndDate + "id=gtxtAdvanceEndDate_" + rowCount + ">" + "</td>" +
                "<td class='AdvanceSlotPeriodCell' id='AdvanceSlotPeriodCell_" + rowCount + "'>" + htmlAdvanceSlotPeriod + "id=gtxtAdvanceSlotPeriod_" + rowCount + ">" + "</td>" +
                "<td class='AdvanceSlotAmountCell' id='AdvanceSlotAmountCell_" + rowCount + "'>" + htmlAdvanceSlotAmount + "id=gtxtAdvanceSlotAmount_" + rowCount + ">" + "</td>" +
                "<td class='AdvanceNoteCell' id='AdvanceNoteCell_" + rowCount + "'>" + htmlAdvanceNote + "id=gtxtAdvanceNote_" + rowCount + ">" + "</td>" +
                "<td class='text-center'>" +
                "<button type='button' class='btnAdvanceRemove btn btn-danger' id='btnAdvanceDelete_" + rowCount + "'><span class='nav-icon fas fa-trash'></span></button>" +
                "</td>"
                + "</tr>"
            );
            $("#gtxtAdvanceNo_" + rowCount).val($("#ddlAdvanceNo").val());
            $("#gtxtAdvanceStartDate_" + rowCount).val($("#txtAdvanceStartDate").val());
            $("#gtxtAdvanceEndDate_" + rowCount).val($("#txtAdvanceEndDate").val());
            $("#gtxtAdvanceSlotPeriod_" + rowCount).val($("#txtAdvanceSlotPeriod").val());
            $("#gtxtAdvanceSlotAmount_" + rowCount).val(parseFloat($("#txtAdvanceSlotAmount").val()).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtAdvanceNote_" + rowCount).val($("#txtAdvanceNote").val());
        });
        //==Review Info Add to List
        $("#txtReviewPercentage").blur(function () {
            if ($(this).val() == '') { $("#txtReviewPercentage").val(0); }
            var ReviewPercentage = parseFloat($("#txtReviewPercentage").val().replace(/[^0-9\.]+/g, ""));
            $("#txtReviewPercentage").val(parseFloat(ReviewPercentage).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
        })
        $("#TableReviewInfo").on('click', '.btnRemove', function () {
            $(this).closest('tr').remove();
        });
        var htmlReviewNo = '<input type="text"  disabled = "disabled" style="width: 150px;" class="ReviewNoValue"'
        var htmlReviewStartDate = '<input type="text" disabled = "disabled" style="width: 150px;" class="ReviewStartDateValue"'
        var htmlReviewEndDate = '<input type="text" disabled = "disabled" style="width: 150px;" class="ReviewEndDateValue"'
        var htmlReviewPeriod = '<input type="text" disabled = "disabled" style="width: 150px;" class="ReviewPeriodValue"'
        var htmlReviewIncreaseAmount = '<input type="text" disabled = "disabled"  style="width: 190px;" class="ReviewIncreaseAmountValue text-right"'
        var htmlReviewIncreasePercentage = '<input type="text" disabled = "disabled"  style="width: 190px;" class="ReviewIncreasePercentageValue text-right"'
        var htmlReviewNote = '<input type="text"  disabled = "disabled" style="width: 250px;" class="ReviewNoteValue"'
        $("#btnReviewAddToList").on("click", function () {
            //===Validate
            if ($("#txtReviewFrequency").val() > 0) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Both enhancement frequency and enhancement declarations are not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            var ReviewNo = document.getElementById("ddlReviewNo").value;
            if (ReviewNo == 0 || ReviewNo == "" || ReviewNo == null) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Please select the enhancement no!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if ($("#txtReviewPeriod").val() == "" || $("#txtReviewPeriod").val() == "NaN" || $("#txtReviewPeriod").val() <= 0 || $("#txtReviewPeriod").val() == null) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Enhancement Schedule No must be greater than zero!',
                    text: 'Validation Message!',
                })
                return false;
            }
            var AgreementStartDate = $('#txtAgreementStartDate').val().replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$2/$1/$3");
            var AgreementEndDate = $('#txtAgreementEndDate').val().replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$2/$1/$3");
            var ReviewStartDate = $('#txtReviewStartDate').val().replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$2/$1/$3");
            var ReviewEndDate = $('#txtReviewEndDate').val().replace(/(\d{2})\/(\d{2})\/(\d{4})/, "$2/$1/$3");
            if (Date.parse(ReviewStartDate) < Date.parse(AgreementStartDate) || Date.parse(AgreementEndDate) < Date.parse(ReviewStartDate)) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Enhancement Start Date is not allowed less than Agreement Start Date or greater than Agreement End Date!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if (Date.parse(ReviewEndDate) < Date.parse(AgreementStartDate) || Date.parse(AgreementEndDate) < Date.parse(ReviewEndDate)) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Enhancement End Date is not allowed less than Agreement Start Date or greater than Agreement End Date!',
                    text: 'Validation Message!',
                })
                return false;
            }
            var Amount = document.getElementById("txtReviewIncreaseAmount").value;
            var Percentage = document.getElementById("txtReviewIncreasePercentage").value;
            if ((Amount == 0 || Amount == "" || Amount == null) && (Percentage == 0 || Percentage == "" || Percentage == null)) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Please input either Enhancement increase amount or percentage!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==Duplicate Review No check in table
            var MatchCountCC;
            var irecordCC = 0;
            $("#TableReviewInfo tr:gt(0)").each(function () {
                irecordCC = irecordCC + 1;
                var CCCode1 = $("#ddlReviewNo").val();
                var id1 = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                var Index1 = id1.split('_').pop().split(';')[0];
                var CCCode2 = $("#gtxtReviewNo_" + Index1).val();
                if (CCCode1 == CCCode2) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Enhancement No is already in the queue at row ' + irecordCC,
                        text: 'Validation Message!',
                    })
                    MatchCountCC = 1;
                    return false;
                }
            });
            if (MatchCountCC == 1) { return false; }
            var rowCount = parseInt($("#RIftrCount").val()) + 2;
            $("#RIftrCount").val(rowCount);
            $("#TableReviewInfo tr:last").after(
                "<tr id='singleRow'> " +
                "<td class='ReviewNoCell' id='ReviewNoCell_" + rowCount + "'>" + htmlReviewNo + "id=gtxtReviewNo_" + rowCount + ">" + "</td>" +
                "<td class='ReviewStartDateCell' id='ReviewStartDateCell_" + rowCount + "'>" + htmlReviewStartDate + "id=gtxtReviewStartDate_" + rowCount + ">" + "</td>" +
                "<td class='ReviewEndDateCell' id='ReviewEndDateCell_" + rowCount + "'>" + htmlReviewEndDate + "id=gtxtReviewEndDate_" + rowCount + ">" + "</td>" +
                "<td class='ReviewPeriodCell' id='ReviewPeriodCell_" + rowCount + "'>" + htmlReviewPeriod + "id=gtxtReviewPeriod_" + rowCount + ">" + "</td>" +
                "<td class='ReviewIncreaseAmountCell' id='ReviewIncreaseAmountCell_" + rowCount + "'>" + htmlReviewIncreaseAmount + "id=gtxtReviewIncreaseAmount_" + rowCount + ">" + "</td>" +
                "<td class='ReviewIncreasePercentageCell' id='ReviewIncreasePercentageCell_" + rowCount + "'>" + htmlReviewIncreasePercentage + "id=gtxtReviewIncreasePercentage_" + rowCount + ">" + "</td>" +
                "<td class='ReviewNoteCell' id='ReviewNoteCell_" + rowCount + "'>" + htmlReviewNote + "id=gtxtReviewNote_" + rowCount + ">" + "</td>" +
                "<td class='text-center'>" +
                "<button type='button' class='btnRemove btn btn-danger' id='btnDelete_" + rowCount + "'><span class='nav-icon fas fa-trash'></span></button>" +
                "</td>"
                + "</tr>"
            );
            $("#gtxtReviewNo_" + rowCount).val($("#ddlReviewNo").val());
            $("#gtxtReviewStartDate_" + rowCount).val($("#txtReviewStartDate").val());
            $("#gtxtReviewEndDate_" + rowCount).val($("#txtReviewEndDate").val());
            $("#gtxtReviewPeriod_" + rowCount).val($("#txtReviewPeriod").val());
            $("#gtxtReviewIncreaseAmount_" + rowCount).val(parseFloat($("#txtReviewIncreaseAmount").val()).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtReviewIncreasePercentage_" + rowCount).val(parseFloat($("#txtReviewIncreasePercentage").val()).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtReviewNote_" + rowCount).val($("#txtReviewNote").val());
        });
        //==Landlord Add to List
        $("#TableVendorInfo").on('click', '.btnVendorEdit', function () {
            var RowValue = 0;
            var ColumnID;
            var ColumnIDValue;
            RowValue = $(this).closest("tr");
            ColumnID = RowValue.find('td:first-child input[type="text"]').attr('id') + ';';
            ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
            $("#txtVendorCode").val($("#gtxtVendorCode_" + ColumnIDValue).val());
            $("#txtLandlordName").val($("#gtxtLandlordName_" + ColumnIDValue).val());
            $("#ddlModeOfPayment").val($("#gtxtModeOfPayment_" + ColumnIDValue).val()).trigger("chosen:updated");
            $("#txtVendorAdvancePC").val($("#gtxtVendorAdvancePC_" + ColumnIDValue).val());
            $("#txtVendorAdvanceAmount").val($("#gtxtVendorAdvanceAmount_" + ColumnIDValue).val());
            $("#txtVendorAdvanceAdjustmentPC").val($("#gtxtVendorAdvanceAdjustmentPC_" + ColumnIDValue).val());
            $("#txtVendorTaxPC").val($("#gtxtVendorTaxPC_" + ColumnIDValue).val());
            $("#txtVendorTaxAmount").val($("#gtxtVendorTaxAmount_" + ColumnIDValue).val());
            $("#txtVendorVATPC").val($("#gtxtVendorVATPC_" + ColumnIDValue).val());
            $("#txtVendorVATAmount").val($("#gtxtVendorVATAmount_" + ColumnIDValue).val());
            $("#txtVendorRentPC").val($("#gtxtVendorRentPC_" + ColumnIDValue).val());
            $("#LLAddress").val($("#gtxtAddress_" + ColumnIDValue).val());
            $("#LLContactNo").val($("#gtxtContactNo_" + ColumnIDValue).val());
            $("#LLEmail").val($("#gtxtEmail_" + ColumnIDValue).val());
            $("#txtACNo").val($("#gtxtACNo_" + ColumnIDValue).val());
            $("#ddlBankName").val($("#gtxtBankName_" + ColumnIDValue).val()).trigger("chosen:updated");
            $("#txtBranchName").val($("#gtxtBranchName_" + ColumnIDValue).val());
            $("#txtRoutingNo").val($("#gtxtRoutingNo_" + ColumnIDValue).val());
        });
        $("#TableVendorInfo").on('click', '.btnVendorRemove', function () {
            $(this).closest('tr').remove();
        });
        var htmlVendorCode = '<input type="text" disabled="disabled" style="width: 100px;" class="VendorCodeValue"'
        var htmlLandlordName = '<input type="text" disabled="disabled" style="width: 100px;" class="LandlordNameValue"'
        var htmlModeOfPayment = '<input type="text" disabled="disabled" style="width: 100px;" class="ModeOfPaymentValue"'
        var htmlVendorAdvancePC = '<input type="text" disabled="disabled" style="width: 100px;" class="VendorAdvancePCValue text-right"'
        var htmlVendorAdvanceAmount = '<input type="text" disabled="disabled" style="width: 100px;" class="VendorAdvanceAmountValue text-right"'
        var htmlVendorAdvanceAdjustmentPC = '<input type="text" disabled="disabled" style="width: 100px;" class="VendorAdvanceAdjustmentPCValue text-right"'
        //var htmlVendorAdvanceAdjustmentAmount = '<input type="text" disabled="disabled" style="width: 100px;" class="VendorAdvanceAdjustmentAmountValue text-right"'
        var htmlVendorTaxPC = '<input type="text" disabled="disabled" style="width: 100px;" class="VendorTaxPCValue text-right"'
        var htmlVendorTaxAmount = '<input type="text" disabled="disabled" style="width: 100px;" class="VendorTaxAmountValue text-right"'
        var htmlVendorVATPC = '<input type="text" disabled="disabled" style="width: 100px;" class="VendorVATPCValue text-right"'
        var htmlVendorVATAmount = '<input type="text" disabled="disabled" style="width: 100px;" class="VendorVATAmountValue text-right"'
        var htmlVendorRentPC = '<input type="text" disabled="disabled" style="width: 100px;" class="VendorRentPCValue text-right"'
        //var htmlVendorRentAmount = '<input type="text" disabled="disabled" style="width: 100px;" class="VendorRentAmountValue text-right"'
        var htmlAddress = '<input type="text" disabled="disabled" style="width: 100px;" class="AddressValue"'
        var htmlContactNo = '<input type="text" disabled="disabled" style="width: 100px;" class="ContactNoValue"'
        var htmlEmail = '<input type="text" disabled="disabled" style="width: 100px;" class="EmailValue"'
        var htmlACNo = '<input type="text" disabled="disabled" style="width: 100px;" class="ACNoValue"'
        var htmlBankName = '<input type="text" disabled="disabled" style="width: 100px;" class="BankNameValue"'
        var htmlBranchName = '<input type="text" disabled="disabled" style="width: 100px;" class="BranchNameValue"'
        var htmlRoutingNo = '<input type="text" disabled="disabled" style="width: 100px;" class="RoutingNoValue"'
        $("#btnVendorAddToList").on("click", function () {
            //===Validate
            if ($("#txtVendorCode").val() == "" || $("#txtVendorCode").val() == null) {
                $("#txtVendorCode").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Enter The Vendor Code!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if ($("#txtLandlordName").val() == "" || $("#txtLandlordName").val() == null) {
                $("#txtLandlordName").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Enter The Landlord Name!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if ($("#ddlModeOfPayment").val() == 0) {
                $("#txtModeOfPayment").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Select The Mode of Payment from the list!',
                    text: 'Validation Message!',
                })
                return false;
            }

            if ($("#txtVendorAdvancePC").val() > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Advance Share Allotment value must be between 1-100%!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if ($("#txtVendorAdvanceAdjustmentPC").val() > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Advance Adjustment Share Allotment value must be between 1-100%!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if ($("#txtVendorTaxPC").val() > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Tax Share Allotment value must be between 1-100%!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if ($("#txtVendorVATPC").val() > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'VAT Share Allotment value must be between 1-100%!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if ($("#txtVendorRentPC").val() > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Rent Share Allotment value must be between 1-100%!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==Duplicate Vendor Code (0) check in table
            var MatchCountCC;
            var irecordCC = 0;
            $("#TableVendorInfo tr:gt(0)").each(function () {
                irecordCC = irecordCC + 1;
                var Code1 = $("#txtVendorCode").val();
                var id1 = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                var Index1 = id1.split('_').pop().split(';')[0];
                var Code2 = $("#gtxtVendorCode_" + Index1).val();
                if (Code1 == Code2) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Vendor Code is already in the queue at row ' + irecordCC,
                        text: 'Validation Message!',
                    })
                    MatchCountCC = 1;
                    return false;
                }
            });
            if (MatchCountCC == 1) { return false; }
            //==Check to block Advance Share Allotment (3) more than 100%
            var TotalShare = 0;
            var ColumnID;
            var ColumnIDValue;
            $("#TableVendorInfo tr:gt(0)").each(function () {
                ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
                if (typeof $("#gtxtVendorAdvancePC_" + ColumnIDValue).val() != "undefined") {
                    TotalShare = parseFloat(TotalShare) + parseFloat($("#gtxtVendorAdvancePC_" + ColumnIDValue).val());
                }
            });
            if (TotalShare >= 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Advance Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            else if (TotalShare + parseFloat($("#txtVendorAdvancePC").val()) > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Advance Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==Check to block Advance Adjustment Share Allotment (5) more than 100%
            var TotalShare = 0;
            var ColumnID;
            var ColumnIDValue;
            $("#TableVendorInfo tr:gt(0)").each(function () {
                ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
                if (typeof $("#gtxtVendorAdvanceAdjustmentPC_" + ColumnIDValue).val() != "undefined") {
                    TotalShare = parseFloat(TotalShare) + parseFloat($("#gtxtVendorAdvanceAdjustmentPC_" + ColumnIDValue).val());
                }
            });
            if (TotalShare >= 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Advance Adjustment Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            else if (TotalShare + parseFloat($("#txtVendorAdvanceAdjustmentPC").val()) > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Advance Adjustment Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==Check to block Tax Share Allotment (7) more than 100%
            var TotalShare = 0;
            var ColumnID;
            var ColumnIDValue;
            $("#TableVendorInfo tr:gt(0)").each(function () {
                ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
                if (typeof $("#gtxtVendorTaxPC_" + ColumnIDValue).val() != "undefined") {
                    TotalShare = parseFloat(TotalShare) + parseFloat($("#gtxtVendorTaxPC_" + ColumnIDValue).val());
                }
            });
            if (TotalShare >= 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Tax Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            else if (TotalShare + parseFloat($("#txtVendorTaxPC").val()) > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Tax Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==Check to block VAT Share Allotment (9) more than 100%
            var TotalShare = 0;
            var ColumnID;
            var ColumnIDValue;
            $("#TableVendorInfo tr:gt(0)").each(function () {
                ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
                if (typeof $("#gtxtVendorVATPC_" + ColumnIDValue).val() != "undefined") {
                    TotalShare = parseFloat(TotalShare) + parseFloat($("#gtxtVendorVATPC_" + ColumnIDValue).val());
                }
            });
            if (TotalShare >= 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'VAT Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            else if (TotalShare + parseFloat($("#txtVendorVATPC").val()) > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'VAT Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==Check to block Rent Share Allotment (11) more than 100%
            var TotalShare = 0;
            var ColumnID;
            var ColumnIDValue;
            $("#TableVendorInfo tr:gt(0)").each(function () {
                ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
                if (typeof $("#gtxtVendorRentPC_" + ColumnIDValue).val() != "undefined") {
                    TotalShare = parseFloat(TotalShare) + parseFloat($("#gtxtVendorRentPC_" + ColumnIDValue).val());
                }
            });
            if (TotalShare >= 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Rent Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            else if (TotalShare + parseFloat($("#txtVendorRentPC").val()) > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Rent Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==End Column Value Check
            var rowCount = parseInt($("#LIftrCount").val()) + 1;
            $("#LIftrCount").val(rowCount);
            $("#TableVendorInfo tr:last").after(
                "<tr id='singleRow'> " +
                "<td class='VendorCodeCell' id='VendorCodeCell_" + rowCount + "'>" + htmlVendorCode + "id=gtxtVendorCode_" + rowCount + ">" + "</td>" +
                "<td class='LandlordNameCell' id='LandlordNameCell_" + rowCount + "'>" + htmlLandlordName + "id=gtxtLandlordName_" + rowCount + ">" + "</td>" +
                "<td class='ModeOfPaymentCell' id='ModeOfPaymentCell_" + rowCount + "'>" + htmlModeOfPayment + "id=gtxtModeOfPayment_" + rowCount + ">" + "</td>" +
                "<td class='VendorAdvancePCCell' id='VendorAdvancePCCell_" + rowCount + "'>" + htmlVendorAdvancePC + "id=gtxtVendorAdvancePC_" + rowCount + ">" + "</td>" +
                "<td class='VendorAdvanceAmountCell' id='VendorAdvanceAmountCell_" + rowCount + "'>" + htmlVendorAdvanceAmount + "id=gtxtVendorAdvanceAmount_" + rowCount + ">" + "</td>" +
                "<td class='VendorAdvanceAdjustmentPCCell' id='VendorAdvanceAdjustmentPCCell_" + rowCount + "'>" + htmlVendorAdvanceAdjustmentPC + "id=gtxtVendorAdvanceAdjustmentPC_" + rowCount + ">" + "</td>" +
                //"<td class='VendorAdvanceAdjustmentAmountCell' id='VendorAdvanceAdjustmentAmountCell_" + rowCount + "'>" + htmlVendorAdvanceAdjustmentAmount + "id=gtxtVendorAdvanceAdjustmentAmount_" + rowCount + ">" + "</td>" +
                "<td class='VendorTaxPCCell' id='VendorTaxPCCell_" + rowCount + "'>" + htmlVendorTaxPC + "id=gtxtVendorTaxPC_" + rowCount + ">" + "</td>" +
                "<td class='VendorTaxAmountCell' id='VendorTaxAmountCell_" + rowCount + "'>" + htmlVendorTaxAmount + "id=gtxtVendorTaxAmount_" + rowCount + ">" + "</td>" +
                "<td class='VendorVATPCCell' id='VendorVATPCCell_" + rowCount + "'>" + htmlVendorVATPC + "id=gtxtVendorVATPC_" + rowCount + ">" + "</td>" +
                "<td class='VendorVATAmountCell' id='VendorVATAmountCell_" + rowCount + "'>" + htmlVendorVATAmount + "id=gtxtVendorVATAmount_" + rowCount + ">" + "</td>" +
                "<td class='VendorRentPCCell' id='VendorRentPCCell_" + rowCount + "'>" + htmlVendorRentPC + "id=gtxtVendorRentPC_" + rowCount + ">" + "</td>" +
                //"<td class='VendorRentAmountCell' id='VendorRentAmountCell_" + rowCount + "'>" + htmlVendorRentAmount + "id=gtxtVendorRentAmount_" + rowCount + ">" + "</td>" +
                "<td class='AddressCell' id='AddressCell_" + rowCount + "'>" + htmlAddress + "id=gtxtAddress_" + rowCount + ">" + "</td>" +
                "<td class='ContactNoCell' id='ContactNoCell_" + rowCount + "'>" + htmlContactNo + "id=gtxtContactNo_" + rowCount + ">" + "</td>" +
                "<td class='EmailCell' id='EmailCell_" + rowCount + "'>" + htmlEmail + "id=gtxtEmail_" + rowCount + ">" + "</td>" +
                "<td class='ACNoCell' id='ACNoCell_" + rowCount + "'>" + htmlACNo + "id=gtxtACNo_" + rowCount + ">" + "</td>" +
                "<td class='BankNameCell' id='BankNameCell_" + rowCount + "'>" + htmlBankName + "id=gtxtBankName_" + rowCount + ">" + "</td>" +
                "<td class='BranchNameCell' id='BranchNameCell_" + rowCount + "'>" + htmlBranchName + "id=gtxtBranchName_" + rowCount + ">" + "</td>" +
                "<td class='RoutingNoCell' id='RoutingNoCell_" + rowCount + "'>" + htmlRoutingNo + "id=gtxtRoutingNo_" + rowCount + ">" + "</td>" +
                "<td class='text-center'>" +
                "<button type='button' class='btnVendorEdit btn btn-info' id='btnVendorEdit_" + rowCount + "'><span class='nav-icon fas fa-edit'></span></button>" +
                "<button type='button' style='margin-top: 4px;' class='btnVendorRemove btn btn-danger' id='btnVendorDelete_" + rowCount + "'><span class='nav-icon fas fa-trash'></span></button>" +
                "</td>"
                + "</tr>"
            );
            $("#gtxtVendorCode_" + rowCount).val($("#txtVendorCode").val());
            $("#gtxtLandlordName_" + rowCount).val($("#txtLandlordName").val());
            $("#gtxtModeOfPayment_" + rowCount).val($('#ddlModeOfPayment option:selected').text());
            $("#gtxtVendorAdvancePC_" + rowCount).val(parseFloat($("#txtVendorAdvancePC").val()));
            $("#gtxtVendorAdvanceAmount_" + rowCount).val(parseFloat($("#txtVendorAdvanceAmount").val().replace(/[^0-9\.]+/g, "")).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtVendorAdvanceAdjustmentPC_" + rowCount).val(parseFloat($("#txtVendorAdvanceAdjustmentPC").val()));
            //$("#gtxtVendorAdvanceAdjustmentAmount_" + rowCount).val(parseFloat($("#txtVendorAdvanceAdjustmentAmount").val().replace(/[^0-9\.]+/g, "")).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtVendorTaxPC_" + rowCount).val(parseFloat($("#txtVendorTaxPC").val()));
            $("#gtxtVendorTaxAmount_" + rowCount).val(parseFloat($("#txtVendorTaxAmount").val().replace(/[^0-9\.]+/g, "")).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtVendorVATPC_" + rowCount).val(parseFloat($("#txtVendorVATPC").val()));
            $("#gtxtVendorVATAmount_" + rowCount).val(parseFloat($("#txtVendorVATAmount").val().replace(/[^0-9\.]+/g, "")).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtVendorRentPC_" + rowCount).val(parseFloat($("#txtVendorRentPC").val()));
            //$("#gtxtVendorRentAmount_" + rowCount).val(parseFloat($("#txtVendorRentAmount").val().replace(/[^0-9\.]+/g, "")).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtAddress_" + rowCount).val($("#LLAddress").val());
            $("#gtxtContactNo_" + rowCount).val($("#LLContactNo").val());
            $("#gtxtEmail_" + rowCount).val($("#LLEmail").val());
            $("#gtxtACNo_" + rowCount).val($("#txtACNo").val());
            $("#gtxtBankName_" + rowCount).val($('#ddlBankName option:selected').text());
            $("#gtxtBranchName_" + rowCount).val($("#txtBranchName").val());
            $("#gtxtRoutingNo_" + rowCount).val($("#txtRoutingNo").val());
        });
        //==Cost Center Add to List
        $("#TableCostCenterInfo").on('click', '.btnRemove', function () {
            $(this).closest('tr').remove();
        });
        var htmlCCCode = '<input type="text"  disabled = "disabled" style="width: 100px;" class="CCCodeValue"'
        var htmlCCName = '<input type="text" disabled = "disabled" style="width: 200px;" class="CCNameValue"'
        var htmlSOLCode = '<input type="text"  disabled = "disabled" style="width: 100px;" class="SOLCodeValue"'
        var htmlSOLName = '<input type="text" disabled = "disabled" style="width: 200px;" class="SOLNameValue"'
        var htmlCCShareAllotment = '<input type="text" disabled = "disabled"  style="width: 200px;" class="CCShareAllotmentValue text-right"'
        $("#btnCCAddToList").on("click", function () {
            //===Validate
            if ($("#ddlCC").val() == 0) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Select the cost center!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if ($("#ddlSOL").val() == 0) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Select the SOL!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if ($("#txtCCShareAllotment").val() == 0) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Share Allotment value must be between 1-100%!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==Duplicate CC Code + SOL Code check in table
            var MatchCount;
            var irecord = 0;
            $("#TableCostCenterInfo tr:gt(0)").each(function () {
                irecord = irecord + 1;
                var CCCenter = $('#ddlCC option:selected').text();
                var CCCode = CCCenter.substr(0, CCCenter.indexOf("-") - 1);
                var SOLCenter = $('#ddlSOL option:selected').text();
                var SOLCode = SOLCenter.substr(0, SOLCenter.indexOf("-") - 1);
                var this_row = $(this);
                var id1 = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                var id2 = $(this).find('td:eq(2) input[type="text"]').attr('id') + ';';
                var Index1 = id1.split('_').pop().split(';')[0];
                var Index2 = id2.split('_').pop().split(';')[0];
                var CCCode2 = $("#gtxtCCCode_" + Index1).val();
                var SOLCode2 = $("#gtxtSOLCode_" + Index2).val();
                if (CCCode == CCCode2 && SOLCode == SOLCode2) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Record exist! Duplicate CC Code and SOL Code found at row ' + irecord,
                        text: 'Validation Message!',
                    })
                    MatchCount = 1;
                    return false;
                }
            });
            if (MatchCount == 1) { return false; }
            //==Check to block Total Share Allotment more than 100%
            var TotalShare = 0;
            var ColumnID;
            var ColumnIDValue;
            $("#TableCostCenterInfo tr:gt(0)").each(function () {
                ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
                if (typeof $("#gtxtCCShareAllotment_" + ColumnIDValue).val() != "undefined") {
                    TotalShare = parseFloat(TotalShare) + parseFloat($("#gtxtCCShareAllotment_" + ColumnIDValue).val());
                }
            });
            if (TotalShare + parseFloat($("#txtCCShareAllotment").val()) > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            var rowCount = parseInt($("#CCftrCount").val()) + 2;
            $("#CCftrCount").val(rowCount);
            $("#TableCostCenterInfo tr:last").after(
                "<tr id='singleRow'> " +
                "<td class='CCCodeCell' id='CCCodeCell_" + rowCount + "'>" + htmlCCCode + "id=gtxtCCCode_" + rowCount + ">" + "</td>" +
                "<td class='CCNameCell' id='CCNameCell_" + rowCount + "'>" + htmlCCName + "id=gtxtCCName_" + rowCount + ">" + "</td>" +
                "<td class='SOLCodeCell' id='SOLCodeCell_" + rowCount + "'>" + htmlSOLCode + "id=gtxtSOLCode_" + rowCount + ">" + "</td>" +
                "<td class='SOLNameCell' id='SOLNameCell_" + rowCount + "'>" + htmlSOLName + "id=gtxtSOLName_" + rowCount + ">" + "</td>" +
                "<td class='CCShareAllotmentCell' id='CCShareAllotmentCell_" + rowCount + "'>" + htmlCCShareAllotment + "id=gtxtCCShareAllotment_" + rowCount + ">" + "</td>" +
                "<td class='text-center'>" +
                "<button type='button' class='btnRemove btn btn-danger' id='btnDelete_" + rowCount + "'><span class='nav-icon fas fa-trash'></span></button>" +
                "</td>"
                + "</tr>"
            );
            var CCCenter = $('#ddlCC option:selected').text();
            var CCCode = CCCenter.substr(0, CCCenter.indexOf("-") - 1);
            var CCName = CCCenter.substr(CCCenter.lastIndexOf("-") + 1);
            var SOLCenter = $('#ddlSOL option:selected').text();
            var SOLCode = SOLCenter.substr(0, SOLCenter.indexOf("-") - 1);
            var SOLName = SOLCenter.substr(SOLCenter.lastIndexOf("-") + 1);
            $("#gtxtCCCode_" + rowCount).val(CCCode);
            $("#gtxtCCName_" + rowCount).val(CCName);
            $("#gtxtSOLCode_" + rowCount).val(SOLCode);
            $("#gtxtSOLName_" + rowCount).val(SOLName);
            $("#gtxtCCShareAllotment_" + rowCount).val(parseFloat($("#txtCCShareAllotment").val()));
        });
        //==Utility Add to List
        $("#TableUtilityInfo").on('click', '.btnUtilityVendorEdit', function () {
            var RowValue = 0;
            var ColumnID;
            var ColumnIDValue;
            RowValue = $(this).closest("tr");
            ColumnID = RowValue.find('td:first-child input[type="text"]').attr('id') + ';';
            ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
            $("#txtUtilityVendorCode").val($("#gtxtUtilityVendorCode_" + ColumnIDValue).val());
            $("#txtUtilityLandlordName").val($("#gtxtUtilityLandlordName_" + ColumnIDValue).val());
            $("#ddlUtilityModeOfPayment").val($("#gtxtUtilityModeOfPayment_" + ColumnIDValue).val()).trigger("chosen:updated");
            $("#txtServiceChargePC").val($("#gtxtServiceChargePC_" + ColumnIDValue).val());
            $("#txtServiceChargeAmount").val($("#gtxtServiceChargeAmount_" + ColumnIDValue).val());
            $("#txtOnlineTowerPC").val($("#gtxtOnlineTowerPC_" + ColumnIDValue).val());
            $("#txtOnlineTowerAmount").val($("#gtxtOnlineTowerAmount_" + ColumnIDValue).val());
            $("#txtGeneratorSpacePC").val($("#gtxtGeneratorSpacePC_" + ColumnIDValue).val());
            $("#txtGeneratorSpaceAmount").val($("#gtxtGeneratorSpaceAmount_" + ColumnIDValue).val());
            $("#txtCarParkingPC").val($("#gtxtCarParkingPC_" + ColumnIDValue).val());
            $("#txtCarParkingAmount").val($("#gtxtCarParkingAmount_" + ColumnIDValue).val());
            $("#txtUtilityTaxPC").val($("#gtxtUtilityTaxPC_" + ColumnIDValue).val());
            $("#txtUtilityTaxAmount").val($("#gtxtUtilityTaxAmount_" + ColumnIDValue).val());
            $("#txtUtilityVATPC").val($("#gtxtUtilityVATPC_" + ColumnIDValue).val());
            $("#txtUtilityVATAmount").val($("#gtxtUtilityVATAmount_" + ColumnIDValue).val());
            $("#UtilityAddress").val($("#gtxtUtilityAddress_" + ColumnIDValue).val());
            $("#UtilityContactNo").val($("#gtxtUtilityContactNo_" + ColumnIDValue).val());
            $("#UtilityEmail").val($("#gtxtUtilityEmail_" + ColumnIDValue).val());
            $("#txtUtilityACNo").val($("#gtxtUtilityACNo_" + ColumnIDValue).val());
            $("#ddlUtilityBankName").val($("#gtxtUtilityBankName_" + ColumnIDValue).val()).trigger("chosen:updated");
            $("#txtUtilityBranchName").val($("#gtxtUtilityBranchName_" + ColumnIDValue).val());
            $("#txtUtilityRoutingNo").val($("#gtxtUtilityRoutingNo_" + ColumnIDValue).val());
        });
        $("#TableUtilityInfo").on('click', '.btnUtilityVendorRemove', function () {
            $(this).closest('tr').remove();
        });
        var htmlUtilityVendorCode = '<input type="text" disabled="disabled" style="width: 100px;" class="UtilityVendorCodeValue"'
        var htmlUtilityLandlordName = '<input type="text" disabled="disabled" style="width: 100px;" class="UtilityLandlordNameValue"'
        var htmlUtilityModeOfPayment = '<input type="text" disabled="disabled" style="width: 100px;" class="UtilityModeOfPaymentValue"'
        var htmlServiceChargePC = '<input type="text" disabled="disabled" style="width: 100px;" class="ServiceChargePCValue text-right"'
        var htmlServiceChargeAmount = '<input type="text" disabled="disabled" style="width: 100px;" class="ServiceChargeAmountValue text-right"'
        var htmlOnlineTowerPC = '<input type="text" disabled="disabled" style="width: 100px;" class="OnlineTowerPCValue text-right"'
        var htmlOnlineTowerAmount = '<input type="text" disabled="disabled" style="width: 100px;" class="OnlineTowerAmountValue text-right"'
        var htmlGeneratorSpacePC = '<input type="text" disabled="disabled" style="width: 100px;" class="GeneratorSpacePCValue text-right"'
        var htmlGeneratorSpaceAmount = '<input type="text" disabled="disabled" style="width: 100px;" class="GeneratorSpaceAmountValue text-right"'
        var htmlCarParkingPC = '<input type="text" disabled="disabled" style="width: 100px;" class="CarParkingPCValue text-right"'
        var htmlCarParkingAmount = '<input type="text" disabled="disabled" style="width: 100px;" class="CarParkingAmountValue text-right"'
        var htmlUtilityTaxPC = '<input type="text" disabled="disabled" style="width: 100px;" class="UtilityTaxPCValue text-right"'
        var htmlUtilityTaxAmount = '<input type="text" disabled="disabled" style="width: 100px;" class="UtilityTaxAmountValue text-right"'
        var htmlUtilityVATPC = '<input type="text" disabled="disabled" style="width: 100px;" class="UtilityVATPCValue text-right"'
        var htmlUtilityVATAmount = '<input type="text" disabled="disabled" style="width: 100px;" class="UtilityVATAmountValue text-right"'
        var htmlUtilityAddress = '<input type="text" disabled="disabled" style="width: 100px;" class="UtilityAddressValue"'
        var htmlUtilityContactNo = '<input type="text" disabled="disabled" style="width: 100px;" class="UtilityContactNoValue"'
        var htmlUtilityEmail = '<input type="text" disabled="disabled" style="width: 100px;" class="UtilityEmailValue"'
        var htmlUtilityACNo = '<input type="text" disabled="disabled" style="width: 100px;" class="UtilityACNoValue"'
        var htmlUtilityBankName = '<input type="text" disabled="disabled" style="width: 100px;" class="UtilityBankNameValue"'
        var htmlUtilityBranchName = '<input type="text" disabled="disabled" style="width: 100px;" class="UtilityBranchNameValue"'
        var htmlUtilityRoutingNo = '<input type="text" disabled="disabled" style="width: 100px;" class="UtilityRoutingNoValue"'
        $("#btnUtilityAddToList").on("click", function () {
            //===Validate
            if ($("#txtUtilityVendorCode").val() == "" || $("#txtUtilityVendorCode").val() == null) {
                $("#txtUtilityVendorCode").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Enter The Utility Vendor Code!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if ($("#txtUtilityLandlordName").val() == "" || $("#txtUtilityLandlordName").val() == null) {
                $("#txtUtilityLandlordName").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Enter The Utility Landlord Name!',
                    text: 'Validation Message!',
                })
                return false;
            }
            if ($("#ddlUtilityModeOfPayment").val() == 0) {
                $("#ddlUtilityModeOfPayment").focus();
                Swal.fire({
                    icon: 'warning',
                    title: 'Select The Utility Mode of Payment from the list!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //if ($("#txtServiceChargePC").val() == 0) {
            //    Swal.fire({
            //        icon: 'warning',
            //        title: 'Service Charge Share Allotment value must be between 1-100%!',
            //        text: 'Validation Message!',
            //    })
            //    return false;
            //}
            //if ($("#txtOnlineTowerPC").val() == 0) {
            //    Swal.fire({
            //        icon: 'warning',
            //        title: 'Online Tower Share Allotment value must be between 1-100%!',
            //        text: 'Validation Message!',
            //    })
            //    return false;
            //}
            //if ($("#txtGeneratorSpacePC").val() == 0) {
            //    Swal.fire({
            //        icon: 'warning',
            //        title: 'Generator Space Share Allotment value must be between 1-100%!',
            //        text: 'Validation Message!',
            //    })
            //    return false;
            //}
            //if ($("#txtCarParkingPC").val() == 0) {
            //    Swal.fire({
            //        icon: 'warning',
            //        title: 'Car Parking Share Allotment value must be between 1-100%!',
            //        text: 'Validation Message!',
            //    })
            //    return false;
            //}
            //if ($("#txtUtilityTaxPC").val() == 0) {
            //    Swal.fire({
            //        icon: 'warning',
            //        title: 'Utility Tax Share Allotment must match with the agreement tax %!',
            //        text: 'Validation Message!',
            //    })
            //    return false;
            //}
            //if ($("#txtUtilityVATPC").val() == 0) {
            //    Swal.fire({
            //        icon: 'warning',
            //        title: 'Utility VAT Share Allotment must match with the agreement VAT %!',
            //        text: 'Validation Message!',
            //    })
            //    return false;
            //}
            //==Duplicate Utility Vendor Code (0) check in table
            var MatchCountCC;
            var irecordCC = 0;
            $("#TableUtilityInfo tr:gt(0)").each(function () {
                irecordCC = irecordCC + 1;
                var CCCode1 = $("#txtUtilityVendorCode").val();
                var id1 = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                var Index1 = id1.split('_').pop().split(';')[0];
                var CCCode2 = $("#gtxtUtilityVendorCode_" + Index1).val();
                if (CCCode1 == CCCode2) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Utility Vendor Code is already in the queue at row ' + irecordCC,
                        text: 'Validation Message!',
                    })
                    MatchCountCC = 1;
                    return false;
                }
            });
            if (MatchCountCC == 1) { return false; }
            //==Check to block Service Charge PC Share Allotment more than 100%
            var TotalShare = 0;
            var ColumnID;
            var ColumnIDValue;
            $("#TableUtilityInfo tr:gt(0)").each(function () {
                ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
                if (typeof $("#gtxtServiceChargePC_" + ColumnIDValue).val() != "undefined") {
                    TotalShare = parseFloat(TotalShare) + parseFloat($("#gtxtServiceChargePC_" + ColumnIDValue).val());
                }
            });
            if (TotalShare >= 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Service Charge Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            else if (TotalShare + parseFloat($("#txtServiceChargePC").val()) > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Service Charge Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==Check to block Online Tower PC Share Allotment more than 100%
            var TotalShare = 0;
            var ColumnID;
            var ColumnIDValue;
            $("#TableUtilityInfo tr:gt(0)").each(function () {
                ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
                if (typeof $("#gtxtOnlineTowerPC_" + ColumnIDValue).val() != "undefined") {
                    TotalShare = parseFloat(TotalShare) + parseFloat($("#gtxtOnlineTowerPC_" + ColumnIDValue).val());
                }
            });
            if (TotalShare >= 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Online Tower Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            else if (TotalShare + parseFloat($("#txtOnlineTowerPC").val()) > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Online Tower Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==Check to block Online Generator Space PC Share Allotment more than 100%
            var TotalShare = 0;
            var ColumnID;
            var ColumnIDValue;
            $("#TableUtilityInfo tr:gt(0)").each(function () {
                ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
                if (typeof $("#gtxtGeneratorSpacePC_" + ColumnIDValue).val() != "undefined") {
                    TotalShare = parseFloat(TotalShare) + parseFloat($("#gtxtGeneratorSpacePC_" + ColumnIDValue).val());
                }
            });
            if (TotalShare >= 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Generator Space Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            else if (TotalShare + parseFloat($("#txtGeneratorSpacePC").val()) > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Generator Space Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==Check to block Car Parking PC Share Allotment more than 100%
            var TotalShare = 0;
            var ColumnID;
            var ColumnIDValue;
            $("#TableUtilityInfo tr:gt(0)").each(function () {
                ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
                ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
                if (typeof $("#gtxtCarParkingPC_" + ColumnIDValue).val() != "undefined") {
                    TotalShare = parseFloat(TotalShare) + parseFloat($("#gtxtCarParkingPC_" + ColumnIDValue).val());
                }
            });
            if (TotalShare >= 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Car Parking Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            else if (TotalShare + parseFloat($("#txtCarParkingPC").val()) > 100) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Car Parking Share Allotment more than 100% not allowed!',
                    text: 'Validation Message!',
                })
                return false;
            }
            //==Check to block Utility Tax Share Allotment more than 100%
            //var TotalShare = 0;
            //var ColumnID;
            //var ColumnIDValue;
            //$("#TableUtilityInfo tr:gt(0)").each(function () {
            //    ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
            //    ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
            //    if (typeof $("#gtxtUtilityTaxPC_" + ColumnIDValue).val() != "undefined") {
            //        TotalShare = parseFloat(TotalShare) + parseFloat($("#gtxtUtilityTaxPC_" + ColumnIDValue).val());
            //    }
            //});
            //if (TotalShare > $("#txtTaxPercentage").val()) {
            //    Swal.fire({
            //        icon: 'warning',
            //        title: 'Utility Tax Share Allotment more than agreement tax % not allowed!',
            //        text: 'Validation Message!',
            //    })
            //    return false;
            //}
            //else if (TotalShare + parseFloat($("#txtUtilityTaxPC").val()) > $("#txtTaxPercentage").val()) {
            //    Swal.fire({
            //        icon: 'warning',
            //        title: 'Utility Tax Share Allotment more than agreement tax % not allowed!',
            //        text: 'Validation Message!',
            //    })
            //    return false;
            //}
            //==Check to block Utility VAT Share Allotment more than 100%
            //var TotalShare = 0;
            //var ColumnID;
            //var ColumnIDValue;
            //$("#TableUtilityInfo tr:gt(0)").each(function () {
            //    ColumnID = $(this).find('td:first-child input[type="text"]').attr('id') + ';';
            //    ColumnIDValue = ColumnID.split('_').pop().split(';')[0];
            //    if (typeof $("#gtxtUtilityVATPC_" + ColumnIDValue).val() != "undefined") {
            //        TotalShare = parseFloat(TotalShare) + parseFloat($("#gtxtUtilityVATPC_" + ColumnIDValue).val());
            //    }
            //});
            //if (TotalShare >= $("#txtVATPercentage").val()) {
            //    Swal.fire({
            //        icon: 'warning',
            //        title: 'Utility VAT Share Allotment more than agreement VAT % not allowed!',
            //        text: 'Validation Message!',
            //    })
            //    return false;
            //}
            //else if (TotalShare + parseFloat($("#txtUtilityVATPC").val()) > $("#txtVATPercentage").val()) {
            //    Swal.fire({
            //        icon: 'warning',
            //        title: 'Utility VAT Share Allotment more than agreement VAT % not allowed!',
            //        text: 'Validation Message!',
            //    })
            //    return false;
            //}
            //==End Column Value Check
            var rowCount = parseInt($("#UIftrCount").val()) + 2;
            $("#UIftrCount").val(rowCount);
            //==End Column Value Check
            $("#TableUtilityInfo tr:last").after(
                "<tr id='singleRow'> " +
                "<td class='UtilityVendorCodeCell' id='UtilityVendorCodeCell_" + rowCount + "'>" + htmlUtilityVendorCode + "id=gtxtUtilityVendorCode_" + rowCount + ">" + "</td>" +
                "<td class='UtilityLandlordNameCell' id='UtilityLandlordNameCell_" + rowCount + "'>" + htmlUtilityLandlordName + "id=gtxtUtilityLandlordName_" + rowCount + ">" + "</td>" +
                "<td class='UtilityModeOfPaymentCell' id='UtilityModeOfPaymentCell_" + rowCount + "'>" + htmlUtilityModeOfPayment + "id=gtxtUtilityModeOfPayment_" + rowCount + ">" + "</td>" +
                "<td class='ServiceChargePCCell' id='ServiceChargePCCell_" + rowCount + "'>" + htmlServiceChargePC + "id=gtxtServiceChargePC_" + rowCount + ">" + "</td>" +
                "<td class='ServiceChargeAmountCell' id='ServiceChargeAmountCell_" + rowCount + "'>" + htmlServiceChargeAmount + "id=gtxtServiceChargeAmount_" + rowCount + ">" + "</td>" +
                "<td class='OnlineTowerPCCell' id='OnlineTowerPCCell_" + rowCount + "'>" + htmlOnlineTowerPC + "id=gtxtOnlineTowerPC_" + rowCount + ">" + "</td>" +
                "<td class='OnlineTowerAmountCell' id='OnlineTowerAmountCell_" + rowCount + "'>" + htmlOnlineTowerAmount + "id=gtxtOnlineTowerAmount_" + rowCount + ">" + "</td>" +
                "<td class='GeneratorSpacePCCell' id='GeneratorSpacePCCell_" + rowCount + "'>" + htmlGeneratorSpacePC + "id=gtxtGeneratorSpacePC_" + rowCount + ">" + "</td>" +
                "<td class='GeneratorSpaceAmountCell' id='GeneratorSpaceAmountCell_" + rowCount + "'>" + htmlGeneratorSpaceAmount + "id=gtxtGeneratorSpaceAmount_" + rowCount + ">" + "</td>" +
                "<td class='CarParkingPCCell' id='CarParkingPCCell_" + rowCount + "'>" + htmlCarParkingPC + "id=gtxtCarParkingPC_" + rowCount + ">" + "</td>" +
                "<td class='CarParkingAmountCell' id='CarParkingAmountCell_" + rowCount + "'>" + htmlCarParkingAmount + "id=gtxtCarParkingAmount_" + rowCount + ">" + "</td>" +
                "<td class='UtilityTaxPCCell' id='UtilityTaxPCCell_" + rowCount + "'>" + htmlUtilityTaxPC + "id=gtxtUtilityTaxPC_" + rowCount + ">" + "</td>" +
                "<td class='UtilityTaxAmountCell' id='UtilityTaxAmountCell_" + rowCount + "'>" + htmlUtilityTaxAmount + "id=gtxtUtilityTaxAmount_" + rowCount + ">" + "</td>" +
                "<td class='UtilityVATPCCell' id='UtilityVATPCCell_" + rowCount + "'>" + htmlUtilityVATPC + "id=gtxtUtilityVATPC_" + rowCount + ">" + "</td>" +
                "<td class='UtilityVATAmountCell' id='UtilityVATAmountCell_" + rowCount + "'>" + htmlUtilityVATAmount + "id=gtxtUtilityVATAmount_" + rowCount + ">" + "</td>" +
                "<td class='UtilityAddressCell' id='UtilityAddressCell_" + rowCount + "'>" + htmlUtilityAddress + "id=gtxtUtilityAddress_" + rowCount + ">" + "</td>" +
                "<td class='UtilityContactNoCell' id='UtilityContactNoCell_" + rowCount + "'>" + htmlUtilityContactNo + "id=gtxtUtilityContactNo_" + rowCount + ">" + "</td>" +
                "<td class='UtilityEmailCell' id='UtilityEmailCell_" + rowCount + "'>" + htmlUtilityEmail + "id=gtxtUtilityEmail_" + rowCount + ">" + "</td>" +
                "<td class='UtilityACNoCell' id='UtilityACNoCell_" + rowCount + "'>" + htmlUtilityACNo + "id=gtxtUtilityACNo_" + rowCount + ">" + "</td>" +
                "<td class='UtilityBankNameCell' id='UtilityBankNameCell_" + rowCount + "'>" + htmlUtilityBankName + "id=gtxtUtilityBankName_" + rowCount + ">" + "</td>" +
                "<td class='UtilityBranchNameCell' id='UtilityBranchNameCell_" + rowCount + "'>" + htmlUtilityBranchName + "id=gtxtUtilityBranchName_" + rowCount + ">" + "</td>" +
                "<td class='UtilityRoutingNoCell' id='UtilityRoutingNoCell_" + rowCount + "'>" + htmlUtilityRoutingNo + "id=gtxtUtilityRoutingNo_" + rowCount + ">" + "</td>" +
                "<td class='text-center'>" +
                "<button type='button' class='btnUtilityVendorEdit btn btn-info' id='btnUtilityVendorEdit_" + rowCount + "'><span class='nav-icon fas fa-edit'></span></button>" +
                "<button type='button' style='margin-top: 4px;'  class='btnUtilityVendorRemove btn btn-danger' id='btnUtilityVendorDelete_" + rowCount + "'><span class='nav-icon fas fa-trash'></span></button>" +
                "</td>"
                + "</tr>"
            );
            $("#gtxtUtilityVendorCode_" + rowCount).val($("#txtUtilityVendorCode").val());
            $("#gtxtUtilityLandlordName_" + rowCount).val($("#txtUtilityLandlordName").val());
            $("#gtxtUtilityModeOfPayment_" + rowCount).val($('#ddlUtilityModeOfPayment option:selected').text());
            $("#gtxtServiceChargePC_" + rowCount).val(parseFloat($("#txtServiceChargePC").val()).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtServiceChargeAmount_" + rowCount).val(parseFloat($("#txtServiceChargeAmount").val().replace(/[^0-9\.]+/g, "")).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtOnlineTowerPC_" + rowCount).val(parseFloat($("#txtOnlineTowerPC").val()).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtOnlineTowerAmount_" + rowCount).val(parseFloat($("#txtOnlineTowerAmount").val().replace(/[^0-9\.]+/g, "")).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtGeneratorSpacePC_" + rowCount).val(parseFloat($("#txtGeneratorSpacePC").val()).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtGeneratorSpaceAmount_" + rowCount).val(parseFloat($("#txtGeneratorSpaceAmount").val().replace(/[^0-9\.]+/g, "")).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtCarParkingPC_" + rowCount).val(parseFloat($("#txtCarParkingPC").val()).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtCarParkingAmount_" + rowCount).val(parseFloat($("#txtCarParkingAmount").val().replace(/[^0-9\.]+/g, "")).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtUtilityTaxPC_" + rowCount).val(parseFloat($("#txtUtilityTaxPC").val()).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtUtilityTaxAmount_" + rowCount).val(parseFloat($("#txtUtilityTaxAmount").val().replace(/[^0-9\.]+/g, "")).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtUtilityVATPC_" + rowCount).val(parseFloat($("#txtUtilityVATPC").val()).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtUtilityVATAmount_" + rowCount).val(parseFloat($("#txtUtilityVATAmount").val().replace(/[^0-9\.]+/g, "")).toFixed(12).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
            $("#gtxtUtilityAddress_" + rowCount).val($("#UtilityAddress").val());
            $("#gtxtUtilityContactNo_" + rowCount).val($("#UtilityContactNo").val());
            $("#gtxtUtilityEmail_" + rowCount).val($("#UtilityEmail").val());
            $("#gtxtUtilityACNo_" + rowCount).val($("#txtUtilityACNo").val());
            $("#gtxtUtilityBankName_" + rowCount).val($('#ddlUtilityBankName option:selected').text());
            $("#gtxtUtilityBranchName_" + rowCount).val($("#txtUtilityBranchName").val());
            $("#gtxtUtilityRoutingNo_" + rowCount).val($("#txtUtilityRoutingNo").val());
        });
        //==Attach Dcoument
        $("#TableFileUploadInfo").on('click', '.btnRemove', function () {
            $(this).closest('tr').remove();
        });
    });
</script>
<script type="text/javascript">

    function BackValidator() {
        window.location.href = "/AgreementInfo/RedirectReAgreementIndex?ViewID=2";
    }

</script>

<script>
    function isDate(txtDate) {
        var currVal = txtDate;
        if (currVal == '')
            return false;

        //Declare Regex
        var rxDatePattern = /^(\d{1,2})(\/)(\d{1,2})(\/)(\d{4})$/;
        var dtArray = currVal.match(rxDatePattern); // is format OK?
        if (dtArray == null)
            return false;

        //Checks for mm/dd/yyyy format.
        //dtMonth = dtArray[1];
        //dtDay = dtArray[3];
        //dtYear = dtArray[5];

        //Checks for dd/mm/yyyy format.
        dtDay = dtArray[1];
        dtMonth = dtArray[3];
        dtYear = dtArray[5];

        if (dtMonth < 1 || dtMonth > 12)
            return false;
        else if (dtDay < 1 || dtDay > 31)
            return false;
        else if ((dtMonth == 4 || dtMonth == 6 || dtMonth == 9 || dtMonth == 11) && dtDay == 31)
            return false;
        else if (dtMonth == 2) {
            var isleap = (dtYear % 4 == 0 && (dtYear % 100 != 0 || dtYear % 400 == 0));
            if (dtDay > 29 || (dtDay == 29 && !isleap))
                return false;
        }
        return true;
    }
</script>